language: rkt
name: HumanEval_161_solve
results:
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (for/fold ([ss \"\"]) ([i (in-list s)])\n    (cond\n      [(or (char-numeric?\
    \ i) (char-upper-case? i)) (string-append ss (string i))]\n      [(char-lower-case?\
    \ i) (string-append ss (string (char-upcase i)))]\n      [else (string-append\
    \ ss (string (char-downcase i)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:24:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:25:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:26:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:27:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:28:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:29:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:30:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponje68x0.rkt:31:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-&gt;list s))\n</code>\nI wanted to test it with the following code.\n\
    <code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdiaubj_o.rkt:13:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(string=? s \"\") s]\n        [(string-foldr string-ci=? s #f)\n   \
    \      (string-join (reverse (string-split s)))]\n        [else (string-join (reverse\
    \ (string-split s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj1kpqpi1.rkt:14:10: string-foldr: unbound identifier\n  in: string-foldr\n\
    \  location...:\n   /tmp/tmpj1kpqpi1.rkt:14:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s)\n     \"\"\n     ]\n    [(and (char-alphabetic? (first\
    \ s)) (char-lower-case? (first s)))\n     (string-append (string-upcase (string\
    \ (first s))) (solve (rest s)))\n     ]\n    [(and (char-alphabetic? (first s))\
    \ (char-upper-case? (first s)))\n     (string-append (string-downcase (string\
    \ (first s))) (solve (rest s)))\n     ]\n    [else\n     (string-append (string\
    \ (first s)) (solve (rest s)))\n     ]\n    )\n  )\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypstzv9k.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpypstzv9k.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpypstzv9k.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpypstzv9k.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpypstzv9k.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpypstzv9k.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpypstzv9k.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpypstzv9k.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-letter? s)\n      (solve-1 s)\n      (reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn0b78141.rkt:13:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpn0b78141.rkt:13:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (null? s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n\
    \          (string-append\n           (string-downcase (string (string-ref s 0)))\n\
    \           (solve (substring s 1 (string-length s))))\n          (string-append\n\
    \           (string (string-ref s 0))\n           (solve (substring s 1 (string-length\
    \ s)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpc3d66e.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvpc3d66e.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpc3d66e.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpc3d66e.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvpc3d66e.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpc3d66e.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvpc3d66e.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvpc3d66e.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-numeric?\
    \ c) c\n           (char-upcase c)))\n     (string->list s)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:26:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\D #\\S #\\A)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:27:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:28:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp__06bzq9.rkt:29:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\C #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:30:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\W #\\F #\\D #\\S #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:31:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\2 #\\@ #\\6\
    \ #\\#)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp__06bzq9.rkt:32:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\D #\\^ #\\A #\\$ #\\#)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp__06bzq9.rkt:33:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    C #\\C #\\C #\\#)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? (regexp \"[a-zA-Z]\") s)\n      (string-map string-upcase\
    \ s)\n      (reverse s)))\n</code>\nIs there any way to improve the performance\
    \ of this program?\n\n\nA:\n\nYou do not need to go the regexp way to check if\
    \ a string has a letter in it. You can simply use <code>string-any</code> with\
    \ a predicate that checks if a character is lower or upper case.\n<code>(string-any\
    \ char-letter? s)\n</code>\nIt is possible to do a single loop over the string.\
    \ It would be better to skip the non-letter characters in the first loop, and\
    \ then just print the reversed string.\nYou may want to use <code>list-ref</code>\
    \ instead of <code>string-ref</code> because the latter copies the string in order\
    \ to return a character. This is what makes <code>string-map</code> quadratic.\n\
    <code>(define (solve s)\n  (if (string-any char-letter? s)\n      (string-map\
    \ string-upcase s)\n      (reverse s)))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83muzijn.rkt:17:9: any: use of 'any' outside the range of an arrow\
    \ contract\n  in: any\n  location...:\n   /tmp/tmp83muzijn.rkt:17:9\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse (for/fold ([ret \"\"]\n                             [i (string-length\
    \ s)])\n                    ([c (in-string s)])\n                    (cond [ (char-alphabetic?\
    \ c)\n                            (string-append ret (string-downcase c)) ]\n\
    \                          [ (char-numeric? c)\n                            (string-append\
    \ ret (string->number (string c))) ]\n                          [ else\n     \
    \                       (string-append ret (string c)) ]))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvkl5p0k1.rkt:13:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpvkl5p0k1.rkt:13:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (rev-case c)\n    (let ([dec (char->integer c)])\n      (if (and (>=\
    \ dec 97) (<= dec 122))\n          (integer->char (- dec 32))\n          (if (and\
    \ (>= dec 65) (<= dec 90))\n              (integer->char (+ dec 32))\n       \
    \       c))))\n  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-reverse\
    \ (string-map rev-case (string-reverse s)))\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkbl80znk.rkt:21:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpkbl80znk.rkt:21:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic?\
    \ c)\n           (if (char-lower-case? c)\n               (char-upcase c)\n  \
    \             (char-downcase c))\n           c))\n     (string->list s)))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:28:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\d #\\S #\\a)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:29:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:30:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf5s2dqnu.rkt:31:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\c #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:32:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\w #\\F #\\D #\\S #\\a #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:33:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\2 #\\@ #\\6\
    \ #\\#)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf5s2dqnu.rkt:34:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\d #\\^ #\\A #\\$ #\\#)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5s2dqnu.rkt:35:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    C #\\C #\\C #\\#)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (solve-helper (string->list s) '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpephpk19g.rkt:13:3: solve-helper: unbound identifier\n  in: solve-helper\n\
    \  location...:\n   /tmp/tmpephpk19g.rkt:13:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (displayln s)\n  (string-upcase s))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:20:4

    actual:     "ASDF"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:21:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:23:4

    actual:     "#A@C"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:24:4

    actual:     "#ASDFW^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:25:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2ii9wkd.rkt:26:4

    actual:     "#$A^D"

    expected:   "#$A^d"

    --------------------

    '
  stdout: 'AsDf

    1234

    ab

    #a@C

    #AsdfW^45

    #6@2

    #$a^D

    #ccc

    '
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (string-split s #\\|) \"\"))\n</code>\nThen I try to test using\
    \ this (should always pass):\n<code>#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp22buswqg.rkt:14:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp22buswqg.rkt:14:0\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (regexp-match? #rx\"[a-zA-Z]\" s)\n      (string-join\n       (map (lambda\
    \ (ch)\n              (if (char-alphabetic? ch)\n                  (if (char-lower-case?\
    \ ch)\n                      (char-upcase ch)\n                      (char-downcase\
    \ ch))\n                  ch))\n            (string->list s)))\n      (reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:29:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    a #\\S #\\d #\\F)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:30:4\n\nreverse: contract\
    \ violation\n  expected: list?\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:31:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\A #\\B)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:32:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    # #\\A #\\@ #\\c)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:33:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\# #\\a #\\S #\\D #\\\
    F #\\w #\\^ #\\4 #\\5)\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:34:4\n\nreverse: contract\
    \ violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfjyby3r.rkt:35:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\# #\\$ #\\A\
    \ #\\^ #\\d)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkfjyby3r.rkt:36:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\# #\\C #\\C #\\C)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (= 0 (count s))\n      (reverse s)\n      (string-join (map (lambda (c)\
    \ (if (char-alphabetic? c)\n                                        (if (char-lower-case?\
    \ c)\n                                            (char-upcase c)\n          \
    \                                  (char-downcase c))\n                      \
    \                  c))\n                        (string->list s)))))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:26:4\n\
    \ncount: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:27:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:28:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:29:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:30:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:31:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:32:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gn_8xs8.rkt:33:4\n\ncount:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-upcase s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n\
    \    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:20:4

    actual:     "ASDF"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:21:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:23:4

    actual:     "#A@C"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:24:4

    actual:     "#ASDFW^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:25:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5734uba.rkt:26:4

    actual:     "#$A^D"

    expected:   "#$A^d"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define non-letter-regexp (regexp \"[^a-zA-Z]\"))\n  (define upper-case-letter-regexp\
    \ (regexp \"[A-Z]\"))\n  (define lower-case-letter-regexp (regexp \"[a-z]\"))\n\
    \  (if (regexp-match s non-letter-regexp)\n      (string-reverse s)\n      (string-copy-and-transform\
    \ s\n                                 (lambda (c)\n                          \
    \         (if (regexp-match (string c) upper-case-letter-regexp)\n           \
    \                            (string-downcase (string c))\n                  \
    \                     (string-upcase (string c)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwaev6iop.rkt:17:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpwaev6iop.rkt:17:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (letrec ([reverse-case (lambda (s)\n                           (if (= s \"\"\
    )\n                               \"\"\n                               (string-append\
    \ (if (char-numeric? (string-ref s 0))\n                                     \
    \             (char->string (string-ref s 0))\n                              \
    \                    (if (char-upper-case? (string-ref s 0))\n               \
    \                                       (char->string (char-downcase (string-ref\
    \ s 0)))\n                                                      (char->string\
    \ (char-upcase (string-ref s 0)))))\n                                        \
    \      (reverse-case (substring s 1)))))]\n         [has-letter? (lambda (s)\n\
    \                        (if (= s \"\")\n                            #f\n    \
    \                        (if (char-alphabetic? (string-ref s 0))\n           \
    \                     #t\n                                (has-letter? (substring\
    \ s 1)))))]\n         [handle-str (lambda (s)\n                       (if (has-letter?\
    \ s)\n                           (reverse-case s)\n                          \
    \ (reverse s)))])\n    (handle-str s)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppr8ah80d.rkt:17:51: char->string: unbound identifier\n  in: char->string\n\
    \  location...:\n   /tmp/tmppr8ah80d.rkt:17:51\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(ormap (\u03BB (c) (char-alpha? c)) (string->list s))\n         (if\
    \ (ormap (\u03BB (c) (char-upper-case? c)) (string->list s))\n             (string-upcase\
    \ s)\n             (string-downcase s))]\n        [else (reverse s)]))\n```\n\n\
    ```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptv5kmzhn.rkt:21:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\" ]\n    [(letter? (first s))\n      (cons (reverse-case\
    \ (first s)) (solve (rest s)))]\n    [else\n      (cons (first s) (solve (rest\
    \ s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8ieuxcr7.rkt:15:6: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmp8ieuxcr7.rkt:15:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (reverse ch)\n    (if (char-numeric? ch)\n        ch\n        (if (char-upcase?\
    \ ch)\n            (char-downcase ch)\n            (char-upcase ch))))\n  (if\
    \ (string-empty? s)\n      \"\"\n      (reverse (string-ref s 0))\n      (solve\
    \ (substring s 1))))\n</code>\nThis code is not working as it should. I am getting\
    \ <code>#A@c</code> instead of <code>#A@C</code>.\nI am using the Standard ML\
    \ language, if that matters.\nI can't understand what I am doing wrong here.\n\
    \n\nA:\n\nIf you want the reversed string, you need to start with the last character,\
    \ not the first. \n<code>(define (solve s)\n  (if (string-empty? s)\n      \"\"\
    \n      (let ((ch (string-ref s (sub1 (string-length s)))))\n        (string-append\
    \ (reverse ch) (solve (substring s 0 -1))))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6bgcfut1.rkt:25:35: unquote: not in quasiquote\n  in: (unquote\
    \ if)\n  location...:\n   /tmp/tmp6bgcfut1.rkt:25:35\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\"[a-z]\"\n                   s\n                   (\u03BB\
    \ (word)\n                     (if (string-contains-ci? \"a\" word)\n        \
    \                 (string-downcase word)\n                         (string-upcase\
    \ word)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7m91s9zl.rkt:16:26: string-contains-ci?: unbound identifier\n \
    \ in: string-contains-ci?\n  location...:\n   /tmp/tmp7m91s9zl.rkt:16:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) \"\"]\n        [(alphabetic? (first s)) (string-append (if\
    \ (char-upper-case? (first s))\n                                             \
    \      (string-append (string-downcase (first s)) \"\")\n                    \
    \                               (string-append (string-upcase (first s)) \"\"\
    )) (solve (rest s)))]\n        [else (string-append (first s) (solve (rest s)))]))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq6lq14py.rkt:14:10: alphabetic?: unbound identifier\n  in: alphabetic?\n\
    \  location...:\n   /tmp/tmpq6lq14py.rkt:14:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse s))\n</code>\nThe last three tests are failing because the\
    \ function is being executed after the last test which should not be the case.\n\
    Any help would be appreciated.\n\n\nA:\n\nIt's probably because you're not using\
    \ the expected API for <code>check-expect</code>. Instead of using <code>check-expect</code>\
    \ like a function, use it as a special form:\n<code>(check-expect (solve \"\"\
    ) \"\")\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw8x5euuc.rkt:21:56: for: bad syntax\n  in: for\n  location...:\n\
    \   /tmp/tmpw8x5euuc.rkt:21:56\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n  \
    \   (if (char-lower-case? (string-ref s 0))\n         (string-upcase s)\n    \
    \     (string-downcase s))]\n    [else (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]))\n</code>\nMy solution is pretty good. But I'm having some\
    \ issues with the notation.\n1) I don't understand how to write the base case.\
    \ \n2) I don't understand what is this substring notation. It seems that substring\
    \ is a function that takes a string and 2 indexes and returns a substring between\
    \ these indexes. But the notation in this case is different than the notation\
    \ of a function call.\n\n\nA:\n\n<code>string-append</code> simply appends two\
    \ strings. In your case, you want to append the first character to the string\
    \ returned by <code>solve</code> on the remaining characters. So, you can just\
    \ do this:\n<code>(string-append (string-ref s 0) (solve (substring s 1)))\n</code>\n\
    As for the base case, if you run out of characters in the string, then the string\
    \ is empty:\n<code>(empty? s)\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3luy4fzh.rkt:22:1: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (and (empty? s)\n           (zero? (string-length s)))\n      \"\"\n  \
    \    (string-join\n       (reverse (map (\u03BB (c)\n                       (if\
    \ (or (char-alphabetic? c)\n                               (char-ci-alphabetic?\
    \ c))\n                           (char-upcase c)\n                          \
    \ (char-downcase c)))\n                     (string->list s)))\n       \"\")))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzsyb7w8v.rkt:19:32: char-ci-alphabetic?: unbound identifier\n \
    \ in: char-ci-alphabetic?\n  location...:\n   /tmp/tmpzsyb7w8v.rkt:19:32\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (regexp-match #rx\"[a-zA-Z]\" s)\n      (apply string-append (map (\u03BB\
    \ (x)\n                                  (if (regexp-match #rx\"[a-zA-Z]\" (string\
    \ x))\n                                      (string (char-downcase x))\n    \
    \                                  (string (char-upcase x))))\n              \
    \                  s))\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp66p_85xt.rkt:19:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmp66p_85xt.rkt:19:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (is-letter? c)\n    (and (<= #\\a c) (<= c #\\z))\n    (and (<= #\\\
    A c) (<= c #\\Z)))\n  (string-map\n   (lambda (c)\n     (if (is-letter? c)\n \
    \        (if (char-lower-case? c)\n             (char-upcase c)\n            \
    \ (char-lower-case c))\n         c))\n   s))\n```\n\n### Coffee - Get the Middle\
    \ Character\n\n- [CodeWars](https://www.codewars.com/kata/56747fd5cb988479af000028/train/coffeescript)\n\
    \n```coffeescript\n# You are going to be given a word. Your job is to return the\
    \ middle character of the word.\n# If the word's length is odd, return the middle\
    \ character.\n# If the word's length is even, return the middle 2 characters.\n\
    #\n# #Examples:\n#\n# Kata.getMiddle(\"test\") should return \"es\"\n#\n# Kata.getMiddle(\"\
    testing\") should return \"t\"\n#\n# Kata.getMiddle(\"middle\") should return\
    \ \"dd\"\n#\n# Kata.getMiddle(\"A\") should return \"A\"\n# #Input\n#\n# A word\
    \ (string) of length 0 < str < 1000 (In javascript you may get slightly more than\
    \ 1000 in some test cases due to an error in the test cases). You do not need\
    \ to test for this. This is only here to tell you that you do not need to worry\
    \ about your solution timing out.\n#\n# #Output\n#\n# The middle character(s)\
    \ of the word represented as a string.\n\ngetMiddle = (s) ->\n  if s.length %\
    \ 2 == 0\n    s[(s.length / 2 - 1)..(s.length / 2)]\n  else\n    s[Math.floor(s.length\
    \ / 2)]\n```\n\n### Haskell - Get the Middle Character\n\n- [CodeWars](https://www.codewars.com/kata/56747fd5cb988479af000028/train/haskell)\n\
    \n```haskell\n-- You\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp4ymzkwf.rkt:26:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(and (not (number? s)) (not (integer? s)))\n     (define (upper-char?\
    \ c) (contains (char-upcase c) s))\n     (define (lower-char? c) (contains (char-downcase\
    \ c) s))\n     (if (or (upper-char? #\\a) (lower-char? #\\a))\n         (for/string\
    \ ([c s])\n           (if (or (upper-char? c) (lower-char? c))\n             \
    \  (if (upper-char? c) (char-downcase c) (char-upcase c))\n               c))\n\
    \         (reverse s))]\n    [else (reverse s)]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf_vbh8_t.rkt:15:30: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpf_vbh8_t.rkt:15:30\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s) \"\"\n      (if (string-contains-ci? (list->string (list (string-ref\
    \ s 0))) \"abcdefghijklmnopqrstuvwxyz\")\n        (string-append (string (char-upcase\
    \ (string-ref s 0)))\n                       (solve (substring s 1)))\n      \
    \  (string-append (string (char-downcase (string-ref s 0)))\n                \
    \       (solve (substring s 1))))))\n</code>\nThe version I've found that includes\
    \ string-any, but it does not work.\n<code>#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplajco_38.rkt:20:47: unquote: not in quasiquote\n  in: (unquote\
    \ but)\n  location...:\n   /tmp/tmplajco_38.rkt:20:47\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains s #\\a)\n      (if (string-contains s #\\A)\n        \
    \  (map char-upcase s)\n          (map char-downcase s))\n      (string-reverse\
    \ s)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqo2i8_6s.rkt:13:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpqo2i8_6s.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-null? s)\n      \"\"\n      (if (char-lower-case? (string-ref s\
    \ 0))\n          (string-append (string-upper-case (substring s 0 1))\n      \
    \                   (solve (substring s 1)))\n          (if (char-upper-case?\
    \ (string-ref s 0))\n              (string-append (string-lower-case (substring\
    \ s 0 1))\n                             (solve (substring s 1)))\n           \
    \   (string-append (substring s 0 1)\n                             (solve (substring\
    \ s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphsu4akry.rkt:13:7: string-null?: unbound identifier\n  in: string-null?\n\
    \  location...:\n   /tmp/tmphsu4akry.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (null? s)\n      (string)\n      (if (char-alpha? (string-ref s 0))\n \
    \         (if (char-lower-case? (string-ref s 0))\n              (string-append\
    \ (list (char-upcase (string-ref s 0)))\n                             (solve (substring\
    \ s 1)))\n              (string-append (list (char-downcase (string-ref s 0)))\n\
    \                             (solve (substring s 1))))\n          (string-append\
    \ (list (string-ref s 0))\n                         (solve (substring s 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpea3y0rhf.rkt:15:11: char-alpha?: unbound identifier\n  in: char-alpha?\n\
    \  location...:\n   /tmp/tmpea3y0rhf.rkt:15:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(no-letter? s) (reverse s)]\n        [else (build-string (length s)\n\
    \                            (lambda (i) (let ([ch (string-ref s i)])\n      \
    \                                    (if (letter? ch)\n                      \
    \                        (if (upper-case? ch)\n                              \
    \                    (char-downcase ch)\n                                    \
    \              (char-upcase ch))\n                                           \
    \   ch))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp791gxbll.rkt:13:10: no-letter?: unbound identifier\n  in: no-letter?\n\
    \  location...:\n   /tmp/tmp791gxbll.rkt:13:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let ([s (string-&gt;list s)])\n    (if (andmap char-alphabetic? s)\n     \
    \   (map (curry char-upcase (char-downcase #\\a)) s)\n        (reverse s))))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqe_g512k.rkt:16:21: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string (map (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase\
    \ c))) s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbzt2tqu.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s)\n      s\n      (string-append\n       (if (char-alphabetic?\
    \ (string-ref s 0))\n           (string-titlecase s)\n           (string-reverse\
    \ s))\n       (solve (substring s 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmb63yxp2.rkt:18:12: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpmb63yxp2.rkt:18:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (equal? s \"\") \"\"\n      (string-join (reverse (map (lambda (c) (if\
    \ (char-alphabetic? c) (string-upcase c) (string-downcase c))) (string->list s)))\
    \ \"\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:21:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:22:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:23:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:24:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:25:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:26:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:27:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n3s5wz_.rkt:28:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((null? s) \"\")\n        ((char-alphabetic? (string-ref s 0))\n    \
    \     (string-append (string-downcase (string (string-ref s 0)))\n           \
    \             (solve (substring s 1))))\n        ((char-numeric? (string-ref s\
    \ 0))\n         (string-append (string (string-ref s 0))\n                   \
    \     (solve (substring s 1))))\n        (else (string-append (string-upcase (string\
    \ (string-ref s 0)))\n                             (solve (substring s 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkr5kzf7.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdkr5kzf7.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkr5kzf7.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkr5kzf7.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdkr5kzf7.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkr5kzf7.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkr5kzf7.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdkr5kzf7.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      s\n      (string-reverse\n       (string-map (lambda\
    \ (c)\n                     (if (char-alphabetic? c)\n                       \
    \  (char-downcase c)\n                         (char-upcase c)))\n           \
    \        s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphw9mfq0q.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmphw9mfq0q.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\".\" s\n                   (lambda (m)\n             \
    \        (if (regexp-match? #rx\"[A-Za-z]\" (match:substring m))\n           \
    \              (case-fold (match:substring m))\n                         (string-reverse\
    \ s)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeum8ja4j.rkt:15:55: match:substring: unbound identifier\n  in:\
    \ match:substring\n  location...:\n   /tmp/tmpeum8ja4j.rkt:15:55\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((not (member s '(\"\"))) (string-&gt;list s))\n        ((member s '(\"\
    \")) \"\")\n        (else (string-reverse s))))\n</code>\nAs you can see, I tried\
    \ to use the <code>cond</code> expression, but I don't know how to use the rest\
    \ of the <code>if</code> statement, because I don't know what arguments I should\
    \ put in it.\nI also tried to use <code>if</code>, but I get an error that I can't\
    \ use <code>if</code> as a function.\n\n\nA:\n\nYou can use <code>cond</code>\
    \ like this:\n<code>(define (solve s)\n  (cond ((string=? s \"\") s)\n       \
    \ ((string-empty? s) s)\n        (else\n         (string-reverse s))))\n</code>\n\
    And here is a function that solves the original problem and works as specified\
    \ by you. I'm using <code>string-upcase</code> and <code>string-downcase</code>,\
    \ which are provided by <code>racket/string</code> or <code>racket</code> (it\
    \ contains all the other libraries by default).\n<code>(define (solve s)\n  (string-join\n\
    \   (map\n    (lambda (c)\n      (cond ((char-alphabetic? c)\n             (if\
    \ (char-upper-case? c)\n                 (string-downcase (string c))\n      \
    \           (string-upcase (string c))))\n            (else (string c))))\n  \
    \  (string-&gt;list s))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0yggngww.rkt:30:278: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\"([a-z])([A-Z])\" s\n                   (lambda (m) (string-append\
    \ (caddr m) (cadr m)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:21:4\n\
    \n...tmp/tmpjh_dlqd8.rkt:14:19: arity mismatch;\n the expected number of arguments\
    \ does not match the given number\n  expected: 1\n  given: 3\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:22:4\n\
    actual:     \"1234\"\nexpected:   \"4321\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:23:4\nactual:\
    \     \"ab\"\nexpected:   \"AB\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:24:4\nactual:\
    \     \"#a@C\"\nexpected:   \"#A@c\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:25:4\n\n...tmp/tmpjh_dlqd8.rkt:14:19:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 3\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:26:4\nactual:\
    \     \"#6@2\"\nexpected:   \"2@6#\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:27:4\nactual:\
    \     \"#$a^D\"\nexpected:   \"#$A^d\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh_dlqd8.rkt:28:4\nactual:\
    \     \"#ccc\"\nexpected:   \"#CCC\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (i\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_9ssvjqe.rkt:13:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string (reverse (map (\u03BB (x) (cond [(letter? x) (char-upcase (char-downcase\
    \ x))] [else x])) (string->list s)))))\n```\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk9o5ncnq.rkt:13:45: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmpk9o5ncnq.rkt:13:45\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(or (string=? s \"\") (string=? s (string-upcase s))) (string-reverse\
    \ s)]\n    [else (string-upcase s)]))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqd_ekar4.rkt:14:58: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpqd_ekar4.rkt:14:58\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (display s)\n  (newline)\n  (string-map\n   (lambda (c)\n     (if (and (&gt;=\
    \ c #\\a) (&lt;= c #\\z))\n         (char-upcase c)\n         (if (and (&gt;=\
    \ c #\\A) (&lt;= c #\\Z))\n             (char-downcase c)\n             c)))\n\
    \   s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp80pqgirb.rkt:17:5: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 24\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-replace (reverse (string-replace s\n                              \
    \            #rx\"[a-zA-Z]\"\n                                          (lambda\
    \ (x)\n                                            (string-upcase x))))\n    \
    \              #rx\"[a-zA-Z]\"\n                  (lambda (x)\n              \
    \      (string-downcase x))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps4zcis4z.rkt:20:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmps4zcis4z.rkt:20:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? s #\\letter)\n      (string-fold\n       (lambda (letter\
    \ acc)\n         (cond\n           [(char-lower-case? letter) (string-append acc\
    \ (string-upcase letter))]\n           [(char-upper-case? letter) (string-append\
    \ acc (string-downcase letter))]\n           [else (string-append acc (string\
    \ letter))]))\n       \"\"\n       s)\n      (string-reverse s)))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd_rgdd9e.rkt:13:26: read-syntax: bad character constant `#\\letter`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-&gt;list s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1s3hjvrz.rkt:13:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 15\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (or (string-contains? s #\\A) (string-contains? s #\\a))\n      (for/fold\
    \ ([ret \"\"] ([ch (in-string s)]) #:when (char-alphabetic? ch))\n           \
    \    (string-append ret (swap-case ch)))\n      (reverse s)))\n</code>\nThis is\
    \ more clear but less concise:\n<code>#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvntoh61p.rkt:14:16: for/fold: invalid accumulator binding clause(s)\n\
    \  at: (((ch (in-string s))) #:when (char-alphabetic? ch))\n  in: (for/fold ((ret\
    \ \"\") ((ch (in-string s))) #:when (char-alphabetic? ch)) (string-append ret\
    \ (swap-case ch)))\n  location...:\n   /tmp/tmpvntoh61p.rkt:14:16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/for.rkt:1674:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (regexp-match #rx\"[a-zA-Z]\" s)\n      (string-downcase s)\n      (string-upcase\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:22:4

    actual:     "asdf"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:23:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:24:4

    actual:     "ab"

    expected:   "AB"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:25:4

    actual:     "#a@c"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:26:4

    actual:     "#asdfw^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:27:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:28:4

    actual:     "#$a^d"

    expected:   "#$A^d"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm2lbm1ed.rkt:29:4

    actual:     "#ccc"

    expected:   "#CCC"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let loop ([i 0] [s (string->list s)])\n    (if (= i (length s))\n        (list->string\
    \ s)\n        (if (char-alphabetic? (list-ref s i))\n            (loop (+ i 1)\n\
    \                  (list-replace s i (char-upcase (list-ref s i))))\n        \
    \    (loop (+ i 1)\n                  (list-replace s i (char-downcase (list-ref\
    \ s i))))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp16nqvxij.rkt:18:19: list-replace: unbound identifier\n  in: list-replace\n\
    \  location...:\n   /tmp/tmp16nqvxij.rkt:18:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (reverse-case c)\n    (cond\n      ((and (char-upper-case? c) (char-lower-case?\
    \ c)) c)\n      ((char-upper-case? c) (char-downcase c))\n      ((char-lower-case?\
    \ c) (char-upcase c))\n      (else c)))\n  (if (not (string-contains s char-set:letter))\
    \ (string-reverse s)\n    (string-map reverse-case s)))\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprmouecdg.rkt:19:12: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmprmouecdg.rkt:19:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (reverse s))\n</code>\nTest case:\n<code>#lang racket\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg_aqop9p.rkt:14:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpg_aqop9p.rkt:14:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (map (lambda (x) (if (string-alphabetic? x) (string-downcase x)\
    \ (string-upcase x))) (string->list s)) \"\"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp20xiyllu.rkt:13:37: string-alphabetic?: unbound identifier\n  in:\
    \ string-alphabetic?\n  location...:\n   /tmp/tmp20xiyllu.rkt:13:37\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (match s\n    [() s]\n    [(_) (list->string (reverse (string->list s)))]))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp14wfpy3s.rkt:14:5: match: syntax error in pattern\n  in: ()\n \
    \ location...:\n   /tmp/tmp14wfpy3s.rkt:14:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\" ]\n    [(string-contains? s #\\letter) \n     (string-append\
    \ (solve (rest s)) (string-upcase (string-downcase (string-ref s 0))))]\n    [else\
    \ (string-append (solve (rest s)) (string-ref s 0))]))\n\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjcn35vr9.rkt:15:25: read-syntax: bad character constant `#\\letter`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (is-letter? ch)\n    (regexp-match #rx\"[a-zA-Z]\" ch))\n  (define\
    \ (is-upcase? ch)\n    (regexp-match #rx\"[A-Z]\" ch))\n  (define (reverse-case-1\
    \ ch)\n    (if (is-upcase? ch)\n        (string-downcase ch)\n        (string-upcase\
    \ ch)))\n  (define (reverse-case-all s)\n    (apply string-append (map reverse-case-1\
    \ s)))\n  (define (has-letter? s)\n    (regexp-match #rx\".\" s))\n  (define (reverse-string\
    \ s)\n    (apply string-append (reverse (string->list s))))\n  (if (has-letter?\
    \ s)\n      (reverse-case-all s)\n      (reverse-string s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:36:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:37:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:38:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:39:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:40:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:41:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:42:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq699trvy.rkt:43:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(equal? s \"\") s]\n    [(string-ref s 0)\n     (define a (build-string\
    \ (string-length s) \"\"))\n     (for/fold ([s1 a]) ([i (in-range (string-length\
    \ s))])\n       (cond\n         [(char-numeric? (string-ref s i))\n          (string-set!\
    \ s1 i (string-ref s i))]\n         [(char-lower-case? (string-ref s i))\n   \
    \       (string-set! s1 i (char-upcase (string-ref s i)))]\n         [(char-upper-case?\
    \ (string-ref s i))\n          (string-set! s1 i (char-downcase (string-ref s\
    \ i))))])\n     (reverse s1)]\n    [else (reverse s)]))\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi3rmjuie.rkt:24:61: read-syntax: missing `]` to close `[` on line\
    \ 23, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 24\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let ((s-length (string-length s)))\n    (if (= s-length 0)\n        \"\"\n\
    \        (let loop ((s s)\n                   (s-rev \"\"))\n          (if (zero?\
    \ (string-length s))\n              s-rev\n              (loop (substring s 1)\n\
    \                    (if (char-alphabetic? (string-ref s 0))\n               \
    \         (string-append s-rev\n                                       (string-fold\
    \ (lambda (c1 c2)\n                                                      (if (char-alphabetic?\
    \ c1)\n                                                          (if (char-upper-case?\
    \ c1)\n                                                              (char-downcase\
    \ c1)\n                                                              (char-upcase\
    \ c1))\n                                                          c1))\n     \
    \                                               \"\"\n                       \
    \                             (substring s 0 1)))\n                        (string-append\
    \ s-rev (substring s 0 1))))))))\n</code>\nThe code works. But I am not sure how\
    \ to make it more idiomatic. So I would like some feedback on:\n\ncode style and\
    \ readability\nefficiency (I do not really care about the efficiency for this\
    \ case, but for the sake of learning, I would like to understand how I can write\
    \ more efficient code).\nhow to make it more idiomatic\n\n\n\nA:\n\nThere are\
    \ two steps:\n\nReversing the string\nChanging the case of the letters\n\nThe\
    \ second step can be done by folding over the string. The first step can be done\
    \ by folding over the string too, but it's simpler to just use the <code>string-&gt;list</code>\
    \ and <code>list-&gt;string</code> functions:\n<code>(define (solve s)\n  (if\
    \ (string-empty? s)\n      \"\"\n      (list-&gt;string\n       (map (lambda (c)\n\
    \              (if (char-alphabetic? c)\n                  (if (char-upper-case?\
    \ c)\n                      (char-downcase c)\n                      (char-upcase\
    \ c))\n                  c))\n            (string-&gt;list s)))))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9huyp_wz.rkt:36:162: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define pattern \"^[a-zA-Z]$\")\n  (string-join (reverse (map (lambda (x)\n\
    \                               (if (regexp-match pattern x)\n               \
    \                    (if (string-ci=? x (string-downcase x))\n               \
    \                        (string-upcase x)\n                                 \
    \      (string-downcase x))\n                                   x)) (string->list\
    \ s))) \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:25:4\n\
    \nregexp-match: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: #\\A\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:26:4\n\nregexp-match: contract\
    \ violation\n  expected: (or/c bytes? string? input-port? path?)\n  given: #\\\
    1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3fl06ia2.rkt:27:4\n\nregexp-match: contract violation\n  expected:\
    \ (or/c bytes? string? input-port? path?)\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:28:4\n\
    \nregexp-match: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: #\\#\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:29:4\n\nregexp-match: contract\
    \ violation\n  expected: (or/c bytes? string? input-port? path?)\n  given: #\\\
    #\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3fl06ia2.rkt:30:4\n\nregexp-match: contract violation\n  expected:\
    \ (or/c bytes? string? input-port? path?)\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:31:4\n\
    \nregexp-match: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: #\\#\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3fl06ia2.rkt:32:4\n\nregexp-match: contract\
    \ violation\n  expected: (or/c bytes? string? input-port? path?)\n  given: #\\\
    #\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (help s i acc)\n    (cond\n      [(= i 0) (string-append acc (string\
    \ (integer->char (char->integer (string-ref s i)))))]\n      [(char-alphabetic?\
    \ (string-ref s i)) (help s (- i 1) (string-append acc (string (integer->char\
    \ (+ (char->integer (string-ref s i)) (* (char->integer #\\a) (- #\\a #\\A)))))))]\n\
    \      [else (help s (- i 1) (string-append acc (string (char->integer (string-ref\
    \ s i)))))]))\n  (if (string-alphabetic? s)\n      (help s (- (string-length s)\
    \ 1) \"\")\n      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1b34q2_2.rkt:18:7: string-alphabetic?: unbound identifier\n  in:\
    \ string-alphabetic?\n  location...:\n   /tmp/tmp1b34q2_2.rkt:18:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(string=? s \"\") \"\"]\n    [(string=? s (string-upcase s)) (string-downcase\
    \ s)]\n    [(string=? s (string-downcase s)) (string-upcase s)]\n    [else\n \
    \    (apply string (reverse (map char-upcase (string->list s))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:25:4

    actual:     "FDSA"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:26:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:28:4

    actual:     "C@A#"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:29:4

    actual:     "54^WFDSA#"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:30:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n8o5ucz.rkt:31:4

    actual:     "D^A$#"

    expected:   "#$A^d"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? s #\\a) \n      (string-reverse (map (\u03BB (c) (if\
    \ (char-alphabetic? c) \n                                        (char-upcase\
    \ c) \n                                        (char-downcase c)))\n         \
    \                  s))\n      (string-reverse s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzepg37w3.rkt:14:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpzepg37w3.rkt:14:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (letrec ([char-letters? (lambda (c) (char-alphabetic? c))]\n           [char-lower?\
    \ (lambda (c) (char-lower-case? c))]\n           [char-upper? (lambda (c) (char-upper-case?\
    \ c))]\n           [char-flip-case (lambda (c)\n                             (if\
    \ (char-letters? c)\n                                 (if (char-lower? c)\n  \
    \                                   (char-upcase c)\n                        \
    \             (char-downcase c))\n                                 c))]\n    \
    \       [string-flip-case (lambda (s)\n                               (string-join\
    \ (map char-flip-case (string->list s))))])\n    (string-flip-case s)))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:30:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    a #\\S #\\d #\\F)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:31:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\1 #\\2 #\\3 #\\4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:32:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    A #\\B)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfvftpmwq.rkt:33:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\# #\\A #\\@ #\\c)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:34:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\# #\\a #\\S\
    \ #\\D #\\F #\\w #\\^ #\\4 #\\5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:35:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\# #\\6 #\\@\
    \ #\\2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfvftpmwq.rkt:36:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\# #\\$ #\\A #\\^ #\\d)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvftpmwq.rkt:37:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    # #\\C #\\C #\\C)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string\n         (map (lambda (x)\n                (if (or (char-alphabetic?\
    \ x)\n                        (char-numeric? x))\n                    (if (char-alphabetic?\
    \ x)\n                        (char-downcase x)\n                        (char-upcase\
    \ x))\n                    x))\n              (string->list s))))\n```\n\n## [Make\
    \ a list of the first n Fibonacci numbers](https://www.codewars.com/kata/522551eee9abb932420004a0)\n\
    \nThis is almost too easy using Racket's `fib` and `build-list` functions. I just\
    \ modified the `fib` function to handle negative numbers.\n\n```scheme\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpemwlljzy.rkt:24:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s)\n      s\n      (if (char-alphabetic? (string-ref s 0))\n  \
    \        (string-append (string-upcase (string-ref s 0))\n                   \
    \      (solve (substring s 1 (string-length s))))\n          (string-append (string-downcase\
    \ (string-ref s 0))\n                         (solve (substring s 1 (string-length\
    \ s)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:26:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:27:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:28:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:29:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:30:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:32:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp6jwnbk_.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(null? s)\n         s]\n        [(char-alphabetic? (string-ref s 0))\n\
    \         (string-append (string-downcase (string (string-ref s 0)))\n       \
    \                 (solve (substring s 1)))]\n        [else\n         (string-append\
    \ (string-upcase (string (string-ref s 0)))\n                        (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjk964y7k.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjk964y7k.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjk964y7k.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjk964y7k.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjk964y7k.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjk964y7k.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjk964y7k.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjk964y7k.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (for/fold ([sol \"\"] #:when (char-alphabetic? (first c)))\n    ([c (in-string\
    \ s)])\n    (string-append sol\n                   (if (char-alphabetic? c)\n\
    \                       (char-upcase c)\n                       (char-downcase\
    \ c)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk6y5odvp.rkt:13:12: for/fold: invalid accumulator binding clause(s)\n\
    \  at: (#:when (char-alphabetic? (first c)))\n  in: (for/fold ((sol \"\") #:when\
    \ (char-alphabetic? (first c))) ((c (in-string s))) (string-append sol (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))))\n  location...:\n   /tmp/tmpk6y5odvp.rkt:13:12\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/for.rkt:1674:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string (map \n                 (lambda (x)\n                   (if (char-alphabetic?\
    \ x)\n                       (if (char-lower-case? x)\n                      \
    \     (char-upcase x)\n                           (char-downcase x))\n       \
    \                x))\n                 s)))\n```\n\n#### Reverse Polish Notation\
    \ Calculator\n```#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7xapm3g3.rkt:23:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse (string-map (lambda (char)\n                              (if\
    \ (and (char-upper-case? char) (char-lower-case? char))\n                    \
    \            (char-downcase char)\n                                (char-upcase\
    \ char)))\n                            s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy9cqdka4.rkt:13:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpy9cqdka4.rkt:13:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains s #\\a #\\z)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n</code>\n\
    I am trying to translate this to Clojure:\n<code>(defn solve [s]\n  (if (or (.contains\
    \ s \"a\") (.contains s \"z\"))\n      (clojure.string/replace s #(if (char-alphabetic?\
    \ %) (char-upcase %) (char-downcase %)))\n      (clojure.string/reverse s)))\n\
    </code>\nThis does not work however.\nAny ideas?\n\n\nA:\n\nYou have a few problems:\n\
    \nThe <code>if</code> doesn't return anything in the case where there are letters\
    \ in the string.\nThe second argument to <code>clojure.string/replace</code> should\
    \ be a regex character class, not a predicate function.\n<code>string-map</code>\
    \ returns a string, but <code>clojure.string/replace</code> returns a sequence\
    \ of strings.\n\nHere's a version that works:\n<code>(defn solve [s]\n  (if (or\
    \ (.contains s \"a\") (.contains s \"z\"))\n      (-&gt;&gt; (clojure.string/replace\
    \ s #\"[a-z]\" #(if (char-alphabetic? %)\n                                   \
    \                  (char-upcase %)\n                                         \
    \            (char-downcase %)))\n           (apply str))\n      (clojure.string/reverse\
    \ s)))\n</code>\nIt's almost a one-to-one rewrite of the Racket code, but I'm\
    \ not sure if that's a good thing.\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3agals0m.rkt:42:32: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-upcase (string-downcase s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:20:4

    actual:     "ASDF"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:21:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:23:4

    actual:     "#A@C"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:24:4

    actual:     "#ASDFW^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:25:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz95_jafm.rkt:26:4

    actual:     "#$A^D"

    expected:   "#$A^d"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\"]\n    [(or (= (char-upcase (string-ref s 0)) (string-ref\
    \ s 0))\n         (= (char-downcase (string-ref s 0)) (string-ref s 0)))\n   \
    \  (string-append (solve (substring s 1)) (string (string-ref s 0)))]\n    [else\
    \ (string-append (solve (substring s 1)) (string (char-upcase (string-ref s 0))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:25:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:26:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:27:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:28:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:29:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:30:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:31:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0j0db97t.rkt:32:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\#\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s) \"\"\n      (if (regexp-match #rx\"[A-Za-z]\" s)\n         \
    \ (string-join (list (char-upcase (string-ref s 0)) (char-downcase (string-ref\
    \ s 1))) \"\")\n          (string-reverse s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprx20bop6.rkt:16:11: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmprx20bop6.rkt:16:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) (string)]\n    [(letter? (car s))\n     (cons (or (char-downcase\
    \ (car s)) (char-upcase (car s)))\n           (solve (cdr s)))]\n    [else (cons\
    \ (car s) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7_lkf1qw.rkt:15:6: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmp7_lkf1qw.rkt:15:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) \"\"]\n        [(string-upcase? (substring s 0 1)) (string-append\
    \ (substring s 0 1) (solve (substring s 1)))]\n        [(string-downcase? (substring\
    \ s 0 1)) (string-append (substring s 0 1) (solve (substring s 1)))]\n       \
    \ [else (string-append (substring s 1) (string-downcase (substring s 0 1)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8z4ku3dj.rkt:14:10: string-upcase?: unbound identifier\n  in: string-upcase?\n\
    \  location...:\n   /tmp/tmp8z4ku3dj.rkt:14:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (map\n                (lambda (c)\n                  (if (char-alphabetic?\
    \ c)\n                      (char-upcase c)\n                      (char-downcase\
    \ c)))\n                (reverse (string->list s)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:25:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\D #\\S #\\A)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:26:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:27:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc_jkxj_6.rkt:28:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\C #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:29:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\W #\\F #\\D #\\S #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:30:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\2 #\\@ #\\6\
    \ #\\#)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc_jkxj_6.rkt:31:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\D #\\^ #\\A #\\$ #\\#)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc_jkxj_6.rkt:32:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    C #\\C #\\C #\\#)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (helper s result)\n    (cond [(empty? s) result]\n          [(char-numeric?\
    \ (first s)) (helper (rest s) (string-append result (string (first s))))]\n  \
    \        [(char-alphabetic? (first s)) (cond [(char-upper-case? (first s)) (helper\
    \ (rest s) (string-append result (string (char-downcase (first s)))))]\n     \
    \                                         [else (helper (rest s) (string-append\
    \ result (string (char-upcase (first s)))))]\n                               \
    \               )]\n          [else (helper (rest s) (string-append result (string\
    \ (first s))))]))\n  (if (empty? s) s (helper s \"\")))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj59uv2pg.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj59uv2pg.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj59uv2pg.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj59uv2pg.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj59uv2pg.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj59uv2pg.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj59uv2pg.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj59uv2pg.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-map\n   (lambda (ch)\n     (cond\n       ((char-alphabetic? ch)\n \
    \       (char-upcase ch))\n       (else\n        (char-downcase ch))))\n   s))\n\
    ```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr7c06znd.rkt:24:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if\n      (equal?\n       (string-contains s (regexp \"[A-Za-z]\"))\n    \
    \   #f)\n      (string-reverse s)\n      (string-map\n       (lambda (x)\n   \
    \      (if\n             (char-alphabetic? x)\n             (if\n            \
    \     (char-upper-case? x)\n                 (char-downcase x)\n             \
    \    (char-upcase x))\n             x))\n       s)))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdji3g427.rkt:15:8: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpdji3g427.rkt:15:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? s #\\a #\\z)\n      (map (lambda (x) (if (or (char-alphabetic?\
    \ x)\n                               (char-alphabetic? (+ x #\\A #\\a)))\n   \
    \                        (char-upcase x)\n                           (char-downcase\
    \ x)))\n           s)\n      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:26:4\n\
    \nstring-contains?: arity mismatch;\n the expected number of arguments does not\
    \ match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:27:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:28:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:29:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:30:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:31:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:32:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xv0lk62.rkt:33:4\n\nstring-contains?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (is-letter? x) (and (char? x) (or (char-alphabetic? x) (char-numeric?\
    \ x))))\n  (string-join (reverse (map (\u03BB (x) (if (is-letter? x) (char-upcase\
    \ x) (char-downcase x))) s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwmtnl99t.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-any (\u03BB (c) (char-alphabetic? c)) s)\n      (string-map (\u03BB\
    \ (c) (if (char-alphabetic? c)\n                             (if (char-lower-case?\
    \ c)\n                                 (char-upcase c)\n                     \
    \            (char-downcase c))\n                             c)) s)\n      (reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_jr3cwnw.rkt:13:7: string-any: unbound identifier\n  in: string-any\n\
    \  location...:\n   /tmp/tmp_jr3cwnw.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      \"\"\n      (let ([ch (string-ref s 0)])\n   \
    \     (if (string-every char-alphabetic? s)\n            (string-join (reverse\
    \ (string->list s)))\n            (if (char-alphabetic? ch)\n                (string-append\
    \ (string-append (string-downcase ch) (solve (substring s 1))) \"\")\n       \
    \         (string-append (string-append ch (solve (substring s 1))) \"\"))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpur16xnyp.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpur16xnyp.rkt:13:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? s #\\@)\n      (regexp-replace #rx\"[a-zA-Z]\" s string-upcase)\n\
    \      (regexp-replace #rx\"[a-zA-Z]\" s string-downcase)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:22:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:23:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:24:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:25:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:26:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:27:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:28:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_f5aq35.rkt:29:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\@\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic?\
    \ x)\n                                  (if (char-lower-case? x)\n           \
    \                           (char-upcase x)\n                                \
    \      (char-downcase x))\n                                  x)) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphd556pfc.rkt:13:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmphd556pfc.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\"[A-Z]\" s (lambda (s) (string-downcase s)))\n  (regexp-replace*\
    \ #rx\"[a-z]\" s (lambda (s) (string-upcase s)))\n  (regexp-replace* #rx\"[^A-Za-z]\"\
    \ s (lambda (s) s))\n  )\n</code>\nWhen I run this, it returns the same string\
    \ with no changes.\nI'm using this to call the function:\n<code>(solve \"AaBb\"\
    )</code>\nI'm expecting it to return <code>\"aAbB\"</code>\nWhy is that I get\
    \ no changes in the string?\n\n\nA:\n\nThe function <code>regexp-replace*</code>\
    \ does not modify its first argument. It returns a new string, the result of the\
    \ replacement:\n<code>(regexp-replace* #rx\"[A-Z]\" s (lambda (s) (string-downcase\
    \ s)))\n</code>\nYou should use it in a <code>let</code> binding to assign the\
    \ new value back to <code>s</code>:\n<code>(define (solve s)\n  (let ((s (regexp-replace*\
    \ #rx\"[A-Z]\" s (lambda (s) (string-downcase s)))))\n    (let ((s (regexp-replace*\
    \ #rx\"[a-z]\" s (lambda (s) (string-upcase s)))))\n      (regexp-replace* #rx\"\
    [^A-Za-z]\" s (lambda (s) s)))))\n</code>\nOr use <code>let*</code> to bind them\
    \ together:\n<code>(define (solve s)\n  (let* ((s (regexp-replace* #rx\"[A-Z]\"\
    \ s (lambda (s) (string-downcase s))))\n         (s (regexp-replace* #rx\"[a-z]\"\
    \ s (lambda (s) (string-upcase s)))))\n    (regexp-replace* #rx\"[^A-Za-z]\" s\
    \ (lambda (s) s))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6c2w5343.rkt:18:15: unquote: not in quasiquote\n  in: (unquote\
    \ it)\n  location...:\n   /tmp/tmp6c2w5343.rkt:18:15\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((not (string-contains? s #\\a))\n         (reverse s))\n        (else\n\
    \         (let loop ([i 0] [acc (make-string (string-length s))])\n          \
    \ (if (= i (string-length s))\n               acc\n               (let ([ch (string-ref\
    \ s i)])\n                 (string-set! acc i\n                              (if\
    \ (char-alphabetic? ch)\n                                  (if (char-lower-case?\
    \ ch)\n                                      (char-upcase ch)\n              \
    \                        (char-downcase ch))\n                               \
    \   ch))\n                 (loop (+ i 1) acc)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:33:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:34:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:35:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:36:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:37:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:38:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:39:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1ugv166.rkt:40:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkuwfumnx.rkt:13:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpkuwfumnx.rkt:13:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (= 0 (count s #\\a))\n      (reverse s)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1fzezur1.rkt:15:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1fzezur1.rkt:15:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(zero? (length s)) \"\"]\n        [(char-alphabetic? (string-ref s 0))\n\
    \         (build-string (length s)\n          (lambda (i)\n            (cond [(char-alphabetic?\
    \ (string-ref s i))\n                   (char-downcase (string-ref s i))]\n  \
    \                [else (string-ref s i)])))]\n        [else (build-string (length\
    \ s)\n          (lambda (i)\n            (cond [(char-alphabetic? (string-ref\
    \ s i))\n                   (char-upcase (string-ref s i))]\n                \
    \  [else (string-ref s i)])))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempk_2ru.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (reverse s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:20:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:21:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:22:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:23:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:24:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:25:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:26:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkx0547vm.rkt:27:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) s]\n        [(char-alphabetic? (string-ref s 0))\n      \
    \   (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \        [(char-numeric? (string-ref s 0))\n         (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n        [else\n         (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpshlgsusn.rkt:20:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpshlgsusn.rkt:20:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (not (string-contains-ci? s \"[a-zA-Z]\"))\n      (string-reverse s)\n\
    \      (string-flatten\n       (map (lambda (c)\n               (if (char-ci=?\
    \ c (char-upcase c))\n                   (char-downcase c)\n                 \
    \  (char-upcase c)))\n            s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph2sr2d68.rkt:13:12: string-contains-ci?: unbound identifier\n \
    \ in: string-contains-ci?\n  location...:\n   /tmp/tmph2sr2d68.rkt:13:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-char? s #\\a #\\z)\n      (string-map (lambda (c) (if\
    \ (char-alphabetic? c)\n                                  (if (char-lower-case?\
    \ c)\n                                      (char-upcase c)\n                \
    \                      (char-downcase c))\n                                  c))\n\
    \                  s)\n      (string-reverse s)))\n</code>\nI would like to improve\
    \ the code. Any suggestion?\n\n\nA:\n\n<code>#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqxhxp3dr.rkt:13:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpqxhxp3dr.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse (apply string (map reverse-case (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsfv85du3.rkt:13:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpsfv85du3.rkt:13:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (invert-case ch)\n    (let ((c (integer->char (char->integer ch))))\n\
    \      (if (char-ci=? c ch)\n          (char-upcase c)\n          (char-downcase\
    \ c))))\n  (if (string-contains s #\\a)\n      (string-map invert-case s)\n  \
    \    (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfwr3y9qe.rkt:18:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfwr3y9qe.rkt:18:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let ([t (string->list s)])\n    (cond [(string=? s \"\") s]\n          [(ormap\
    \ char-numeric? t) (reverse s)]\n          [else (list->string (map\n        \
    \                        (lambda (char)\n                                  (cond\
    \ [(char-lower-case? char) (char-upcase char)]\n                             \
    \           [(char-upper-case? char) (char-downcase char)]\n                 \
    \                       [else char]))\n                                t))])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j740_3o.rkt:29:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j740_3o.rkt:32:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j740_3o.rkt:33:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((string-index s #\\a) (string-reverse (string-upcase s)))\n        ((string-index\
    \ s #\\A) (string-reverse (string-downcase s)))\n        (else (string-reverse\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwgmextsc.rkt:13:10: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpwgmextsc.rkt:13:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) s]\n        [(letter? (car s)) (append (char-downcase (car\
    \ s)) (solve (cdr s)))]\n        [(letter? (cdr s)) (append (char-upcase (car\
    \ s)) (solve (cdr s)))]\n        [else (append (char-upcase (car s)) (solve (cdr\
    \ s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphg0y7f5r.rkt:14:10: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmphg0y7f5r.rkt:14:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (rev-ch c)\n    (if (char-alphabetic? c)\n        (if (char-upper-case?\
    \ c)\n            (char-downcase c)\n            (char-upcase c))\n        c))\n\
    \  (if (string-ref s 0)\n      (list->string (reverse (map rev-ch (string->list\
    \ s))))\n      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:28:4

    actual:     "FdSa"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:30:4

    actual:     "BA"

    expected:   "AB"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:31:4

    actual:     "c@A#"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:32:4

    actual:     "54^wFDSa#"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:34:4

    actual:     "d^A$#"

    expected:   "#$A^d"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmvtr4gb7.rkt:35:4

    actual:     "CCC#"

    expected:   "#CCC"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (is-letter? a)\n    (or (char-lower-case? a) (char-upper-case? a)))\n\
    \  (define (flip c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n \
    \       (char-downcase c)))\n  (define (rev-case-string s)\n    (cond\n      [(null?\
    \ s) '()]\n      [(is-letter? (car s)) (cons (flip (car s)) (rev-case-string (cdr\
    \ s)))]\n      [else (cons (car s) (rev-case-string (cdr s)))]))\n  (define (has-letter?\
    \ s)\n    (cond\n      [(null? s) #f]\n      [(is-letter? (car s)) #t]\n     \
    \ [else (has-letter? (cdr s))]))\n  (if (has-letter? s)\n      (rev-case-string\
    \ s)\n      (string-reverse s)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmped80myns.rkt:31:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmped80myns.rkt:31:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(equal? (string-length s) 0) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0)) (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0)) (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [(char-ci=? (string-ref s 0) #\\@) (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [(char-ci=? (string-ref s 0) #\\#) (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:25:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:26:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\4\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:27:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:28:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:30:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\$\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo515xyp9.rkt:32:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\c\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-predicate (\u03BB (c) (char-alphabetic? c)) s)\n     \
    \ (string-map\n       (\u03BB (c)\n         (if (char-alphabetic? c)\n       \
    \      (if (char-lower-case? c)\n                 (char-upcase c)\n          \
    \     (char-downcase c))\n             c))\n       s)\n      (string-reverse s)))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpew2v78hi.rkt:13:7: string-contains-predicate: unbound identifier\n\
    \  in: string-contains-predicate\n  location...:\n   /tmp/tmpew2v78hi.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s) \"\"\n      (if (or (char-lower-case? (string-ref s 0))\
    \ (char-upper-case? (string-ref s 0)))\n          (if (char-lower-case? (string-ref\
    \ s 0)) (string-upper-case (string-ref s 0)) (string-lower-case (string-ref s\
    \ 0)))\n          (string-ref s 0))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwr2qvp3i.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpwr2qvp3i.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-ci? s #\\a)\n      (string-upcase s)\n      (string-reverse\
    \ s)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnrf2zxe_.rkt:13:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpnrf2zxe_.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (invert-case c)\n    (if (char-alphabetic? c)\n        (if (char-lower-case?\
    \ c)\n            (char-upcase c)\n            (char-downcase c))\n        c))\n\
    \  (if (string-contains s #\\a)\n      (string-map invert-case s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphqi_o1vi.rkt:19:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmphqi_o1vi.rkt:19:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (flip-case c)\n    (if (char-alphabetic? c)\n        (if (char-upper-case?\
    \ c)\n            (char-downcase c)\n            (char-upcase c))\n        c))\n\
    \  (string-join\n   (list->vector\n    (map flip-case (string->list s)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i7xynm7.rkt:28:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '#(#\\\
    a #\\S #\\d #\\F)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0i7xynm7.rkt:29:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '#(#\\1 #\\2 #\\3 #\\4)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0i7xynm7.rkt:30:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '#(#\\A #\\B)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i7xynm7.rkt:31:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '#(#\\# #\\A #\\\
    @ #\\c)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0i7xynm7.rkt:32:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '#(#\\# #\\a #\\S #\\D #\\F #\\w #\\^ #\\4 #\\5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0i7xynm7.rkt:33:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '#(#\\# #\\6 #\\@ #\\2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i7xynm7.rkt:34:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '#(#\\# #\\$ #\\\
    A #\\^ #\\d)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0i7xynm7.rkt:35:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '#(#\\# #\\C #\\C #\\C)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(string=? \"\" s) \"\" ]\n    [(string-contains? \"abcdefghijklmnopqrstuvwxyz\"\
    \ (string-ref s 0))\n      (string-append (string-reverse (string-upcase s)))]\n\
    \    [(string-contains? \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (string-ref s 0))\n   \
    \   (string-append (string-reverse (string-downcase s)))]\n    [else\n      (string-append\
    \ (string-reverse s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfe7c81xk.rkt:16:22: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpfe7c81xk.rkt:16:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains? (string-upcase s) #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (char-upcase c)\n     \
    \        (char-downcase c)))\n       s)\n      (reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps5is_nk3.rkt:14:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmps5is_nk3.rkt:14:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string (reverse (map (\u03BB (c) (cond ((char-alphabetic? c) (char-downcase\
    \ c))\n                                            ((char-numeric? c) (digit->char\
    \ (sub1 (char->digit c))))\n                                            (else\
    \ c)))\n                               (string->list s)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6zlkmnpy.rkt:14:64: digit->char: unbound identifier\n  in: digit->char\n\
    \  location...:\n   /tmp/tmp6zlkmnpy.rkt:14:64\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (iter i)\n    (cond\n      [(< i (string-length s))\n       (if (char-alphabetic?\
    \ (string-ref s i))\n           (string-append (iter (+ i 1)) (string-downcase\
    \ (string-ref s i)))\n           (string-append (iter (+ i 1)) (string-ref s i)))]\n\
    \      [else \"\"]))\n  (if (string-any char-alphabetic? s)\n      (iter 0)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpimjl_y2b.rkt:20:7: string-any: unbound identifier\n  in: string-any\n\
    \  location...:\n   /tmp/tmpimjl_y2b.rkt:20:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (not (string-contains-pred s char-letter?))\n      (string-reverse s)\n\
    \      (define (inner s i acc)\n        (cond\n          [(< i (string-length\
    \ s)) (inner s (+ i 1) (string-append acc (if (char-letter? (string-ref s i))\
    \ (string-downcase (string-ref s i)) (string-upcase (string-ref s i)))))]\n  \
    \        [else acc]))\n      (inner s 0 \"\")))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb4ir8kt0.rkt:13:2: if: bad syntax\n  in: (if (not (string-contains-pred\
    \ s char-letter?)) (string-reverse s) (define (inner s i acc) (cond ((< i (string-length\
    \ s)) (inner s (+ i 1) (string-append acc (if (char-letter? (string-ref s i))\
    \ (string-downcase (string-ref s i)) (string-upcase (string-r...\n  location...:\n\
    \   /tmp/tmpb4ir8kt0.rkt:13:2\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-map (\u03BB (x)\n                (if (char-alphabetic? x)\n       \
    \             (if (char-ci=? x (char-downcase x))\n                        (char-upcase\
    \ x)\n                        (char-downcase x))\n                    x))\n  \
    \            s))\n</code>\nLike I said, this takes a string, iterates through\
    \ it, checking each character is a letter using <code>char-alphabetic?</code>.\
    \ If it is, it checks if it's uppercase or lowercase using <code>char-ci=?</code>\
    \ which compares a character to an equivalent lowercase or uppercase. If it's\
    \ lowercase, it returns the uppercase equivalent, otherwise it returns the lowercase\
    \ equivalent.\nCould it be done better?\n\n\nA:\n\nThis is a pretty good solution.\
    \ For a beginner, I would say it's excellent. (In fact, if you read the discussion\
    \ of the case-sensitivity of <code>char-ci=?</code> in the comments of the question,\
    \ it shows that it's not the easiest thing in the world to come up with the correct\
    \ solution.) The only thing I would change is to replace <code>char-alphabetic?</code>\
    \ with <code>char-alphabetic-or-numeric?</code> (which also includes digits),\
    \ so it will work on both letters and digits. \nJust out of curiosity, I would\
    \ like to mention that there is also a library solution to this problem, which\
    \ you might have discovered on your own. In the standard <code>racket/base</code>\
    \ library there is a function called <code>char-titlecase</code> which converts\
    \ a lowercase letter to its uppercase equivalent, and converts an uppercase letter\
    \ to its lowercase equivalent. Since you only want to change the case of alphabetic\
    \ characters and keep the others as is, you can achieve the same result with:\n\
    <code>(string-map char-titlecase s)\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1llm55tb.rkt:21:11: unquote: not in quasiquote\n  in: (unquote\
    \ this)\n  location...:\n   /tmp/tmp1llm55tb.rkt:21:11\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s) s\n      (solve (string-append (char-upcase (string-ref\
    \ s 0))\n                            (string-tail s 1)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzvbw2ep2.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpzvbw2ep2.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      \"\"\n      (if (regexp-match? #rx\"[A-Za-z]\"\
    \ s)\n          (reverse-string (map (lambda (c)\n                           \
    \       (if (regexp-match? #rx\"[A-Za-z]\" (string c))\n                     \
    \                 (if (regexp-match? #rx\"[A-Z]\" (string c))\n              \
    \                            (char-downcase c)\n                             \
    \             (char-upcase c))\n                                      c))\n  \
    \                              s))\n          (reverse-string s))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe69x5ljy.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpe69x5ljy.rkt:13:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (helper s accum)\n    (if (null? s)\n        accum\n        (let ([c\
    \ (string-ref s 0)])\n          (if (or (char-numeric? c) (char-whitespace? c))\n\
    \              (helper (substring s 1) (string-append accum (string c)))\n   \
    \           (helper (substring s 1) (string-append accum (string (char-upcase\
    \ c))))))))\n  (let ([c (string-ref s 0)])\n    (if (or (char-numeric? c) (char-whitespace?\
    \ c))\n        (helper (substring s 1) (string c))\n        (helper (substring\
    \ s 1) (string (char-upcase c))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ss9dpl3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ss9dpl3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ss9dpl3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ss9dpl3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ss9dpl3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ss9dpl3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ss9dpl3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ss9dpl3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (reversify c)\n    (cond\n      [(string=? (string-downcase c) c) (string-upcase\
    \ c)]\n      [(string=? (string-upcase c) c) (string-downcase c)]\n      [else\
    \ c]))\n  (if (string-contains? (string-downcase s) \"a\")\n      (string-map\
    \ reversify s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw4nvmhaf.rkt:19:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw4nvmhaf.rkt:19:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains s #\\a)\n      (string-map (\u03BB (x) (if (char-lower-case?\
    \ x)\n                             (char-upcase x)\n                         \
    \    (char-downcase x))) s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpso7dc5cd.rkt:13:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpso7dc5cd.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let ([s (string-upcase s)])\n    (regexp-replace* #rx\"[a-z]\" s\n      (lambda\
    \ (m) (string-downcase (substring m 0))))))\n</code>\nNote that I used Racket's\
    \ <code>string-upcase</code> function, because it works for Unicode letters (as\
    \ opposed to ASCII) as well, as well as the <code>regexp-replace*</code> function,\
    \ which is part of a library by the same name.\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl15ytwg2.rkt:17:61: unquote: not in quasiquote\n  in: (unquote\
    \ because)\n  location...:\n   /tmp/tmpl15ytwg2.rkt:17:61\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) \"\"]\n        [(not (or (char-alphabetic? (string-ref s\
    \ 0))\n                  (char-alphabetic? (string-ref s (- (string-length s)\
    \ 1)))))\n         (reverse s)]\n        [else (append (reverse (string-upcase\
    \ s))\n                      (string-drop s (string-length s)))]))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzkhtnf8f.rkt:18:23: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpzkhtnf8f.rkt:18:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (reverse (map (lambda (c) (if (char-alphabetic? c)\n                      \
    \          (char-upcase c)\n                                (char-downcase c)))\n\
    \                s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n\
    \    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4hwp4ec.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-ci=? s \"\")\n      s\n      (for/fold ([acc (list)]) ([ch (in-string\
    \ s)])\n        (cond\n          [(char-ci=? ch #\\A) (cons #\\a acc)]\n     \
    \     [(char-ci=? ch #\\a) (cons #\\A acc)]\n          [(char-ci=? ch #\\B) (cons\
    \ #\\b acc)]\n          [(char-ci=? ch #\\b) (cons #\\B acc)]\n          [(char-ci=?\
    \ ch #\\C) (cons #\\c acc)]\n          [(char-ci=? ch #\\c) (cons #\\C acc)]\n\
    \          [(char-ci=? ch #\\D) (cons #\\d acc)]\n          [(char-ci=? ch #\\\
    d) (cons #\\D acc)]\n          [(char-ci=? ch #\\E) (cons #\\e acc)]\n       \
    \   [(char-ci=? ch #\\e) (cons #\\E acc)]\n          [(char-ci=? ch #\\F) (cons\
    \ #\\f acc)]\n          [(char-ci=? ch #\\f) (cons #\\F acc)]\n          [(char-ci=?\
    \ ch #\\G) (cons #\\g acc)]\n          [(char-ci=? ch #\\g) (cons #\\G acc)]\n\
    \          [(char-ci=? ch #\\H) (cons #\\h acc)]\n          [(char-ci=? ch #\\\
    h) (cons #\\H acc)]\n          [(char-ci=? ch #\\I) (cons #\\i acc)]\n       \
    \   [(char-ci=? ch #\\i) (cons #\\I acc)]\n          [(char-ci=? ch #\\J) (cons\
    \ #\\j acc)]\n          [(char-ci=? ch #\\j) (cons #\\J acc)]\n          [(char-ci=?\
    \ ch #\\K) (cons #\\k acc)]\n          [(char-ci=? ch #\\k) (cons #\\K acc)]\n\
    \          [(char-ci=? ch #\\L) (cons #\\l acc)]\n          [(char-ci=? ch #\\\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8w_vrhkb.rkt:40:11: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 41\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s)\n      \"\"\n      (if (string-titlecase? (substring s 0 1))\n\
    \          (string-downcase (substring s 0 1))\n          (string-upcase (substring\
    \ s 0 1)))\n      (solve (substring s 1 (- (string-length s) 1)))))\n</code>\n\
    I am getting the following error:\n<code>application: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: #&lt;bytecode:solve&gt;\n\
    \  arguments...:\n   \"R\"\n  context...:\n   /home/runner/advanced-racket-tasks/solve.rkt:6:0:\
    \ solve\n   /home/runner/advanced-racket-tasks/solve.rkt:6:1: car\n   /home/runner/advanced-racket-tasks/solve.rkt:6:1:\
    \ substring\n   /home/runner/advanced-racket-tasks/solve.rkt:6:18: solve\n   /home/runner/advanced-racket-tasks/solve.rkt:6:22:\
    \ substring\n   /home/runner/advanced-racket-tasks/solve.rkt:6:42: solve\n   /home/runner/advanced-racket-tasks/solve.rkt:6:46:\
    \ substring\n   /home/runner/advanced-racket-tasks/solve.rkt:6:66: solve\n   /home/runner/advanced-racket-tasks/solve.rkt:6:70:\
    \ substring\n   /home/runner/advanced-racket-tasks/solve.rkt:6:90: solve\n   /home/runner/advanced-racket-tasks/solve.rkt:6:94:\
    \ substring\n   /home/runner/advanced-racket-tasks/solve.rkt:6:114: solve\n  \
    \ /home/runner/advanced-racket-tasks/solve.rkt:6:118: substring\n   /home/runner/advanced-racket-tasks\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw6o8dp5j.rkt:13:2: if: bad syntax\n  in: (if (empty? s) \"\" (if\
    \ (string-titlecase? (substring s 0 1)) (string-downcase (substring s 0 1)) (string-upcase\
    \ (substring s 0 1))) (solve (substring s 1 (- (string-length s) 1))))\n  location...:\n\
    \   /tmp/tmpw6o8dp5j.rkt:13:2\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s)\n      \"\"\n      (if (letter? (string-ref s 0))\n        \
    \  (string-append (char-swap (string-ref s 0)) (solve (substring s 1)))\n    \
    \      (string-append (string-ref s 0) (solve (substring s 1))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8ix9y35k.rkt:15:11: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmp8ix9y35k.rkt:15:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(string=? s \"\") \"\"]\n        [(string=? s (string-upcase s)) (string-downcase\
    \ s)]\n        [(string=? s (string-downcase s)) (string-upcase s)]\n        [else\
    \ (string-reverse s)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n\
    \    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpewrlpaia.rkt:16:15: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpewrlpaia.rkt:16:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (f lst)\n    (match lst\n      ('() '())\n      ([h ...t]\n       (cons\n\
    \        (if (char-alphabetic? h)\n            (char-upcase h)\n            (char-downcase\
    \ h))\n        (f t)))))\n  (if (regexp-match #rx\"[a-zA-Z]\" s)\n      (string-&gt;list\
    \ s)\n      (f (string-&gt;list s))))\n</code>\nThe output is as follows:\n<code>(solve\
    \ \"1234\")\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplxzwqhn7.rkt:24:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(number? (string->number s)) (number->string (reverse-digits (string->number\
    \ s)))]\n    [(letter? (string-ref s 0)) (string-map reverse-case s)]\n    [else\
    \ (string-reverse s)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcqk8h1q0.rkt:14:51: reverse-digits: unbound identifier\n  in: reverse-digits\n\
    \  location...:\n   /tmp/tmpcqk8h1q0.rkt:14:51\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse (for/fold ([retval (make-string (string-length s))])\n    \
    \               ([c (in-string s)])\n                   (begin\n             \
    \        (string-set! retval (sub1 (string-length s))\n                      \
    \            (if (char-alphabetic? c)\n                                      (if\
    \ (char-lower-case? c)\n                                          (char-upcase\
    \ c)\n                                          (char-downcase c))\n         \
    \                             c))\n                     (sub1 s)))))\n</code>\n\
    Test cases\n<code>;; (require \"solve.rkt\")\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm1vazzn1.rkt:13:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpm1vazzn1.rkt:13:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      \"\"\n      (let* ([c (string-ref s 0)]\n    \
    \         [case-changed\n              (if (letter? c)\n                  (if\
    \ (char-upper-case? c)\n                      (char-downcase c)\n            \
    \          (char-upcase c))\n                  c)])\n        (string-append\n\
    \         (string case-changed)\n         (solve (substring s 1))))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj4xadidh.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpj4xadidh.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (letrec ([s (string-upcase s)]\n           [reverse (lambda (s)\n         \
    \             (if (string-empty? s)\n                          s\n           \
    \               (string-append (string-join (reverse (string-drop-right s 1))\
    \ (string-take-right s 1)))))])\n    (if (regexp-match? #rx\"[a-zA-Z]\" s)\n \
    \       (reverse s)\n        s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0_wj4m1k.rkt:15:27: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp0_wj4m1k.rkt:15:27\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (= (string-length s) 0)\n      (string-reverse s)\n      (list->string\n\
    \       (reverse\n        (map (lambda (x) (if (char-alphabetic? x) (string-downcase\
    \ (string-upcase x)) x))\n             (string->list s))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp05im4dia.rkt:14:7: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmp05im4dia.rkt:14:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\"]\n    [(and (char-alphabetic? (string-ref s 0))\n\
    \          (char-lower-case? (string-ref s 0)))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(and\
    \ (char-alphabetic? (string-ref s 0))\n          (char-upper-case? (string-ref\
    \ s 0)))\n     (string-append (string-downcase (string-ref s 0))\n           \
    \         (solve (substring s 1)))]\n    [else (string-append (string-ref s 0)\n\
    \                         (solve (substring s 1)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmiker55k.rkt:33:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:34:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmiker55k.rkt:37:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmiker55k.rkt:38:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\c\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (or (contains? s #\\a) (contains? s #\\A))\n      (for/string ([c s])\n\
    \        (if (char-alphabetic? c)\n            (char-upcase c)\n            (char-downcase\
    \ c)))\n      (string-reverse s)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6p__u972.rkt:13:11: contains?: unbound identifier\n  in: contains?\n\
    \  location...:\n   /tmp/tmp6p__u972.rkt:13:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let loop ([i 0] [res '()])\n    (if (and (string-ref s i) (char-alphabetic?\
    \ (string-ref s i)))\n        (loop (+ i 1) (cons (char-upcase (string-ref s i))\
    \ res))\n        (if (string-ref s i)\n            (loop (+ i 1) (cons (string-ref\
    \ s i) res))\n            (string-join (reverse res))))))\n</code>\nThe problem\
    \ is in the two line below:\n<code>(if (and (string-ref s i) (char-alphabetic?\
    \ (string-ref s i)))\n    (loop (+ i 1) (cons (char-upcase (string-ref s i)) res))\n\
    </code>\nI used <code>if</code> and <code>and</code> to check if <code>i</code>\
    \ is <code>'()</code> or not. But it seems that racket doesn't support <code>string-ref</code>\
    \ and <code>char-alphabetic?</code> together. So I was wondering if there is another\
    \ way to do this.\nThank you so much for your help.\n\n\nA:\n\nIt is not an error,\
    \ you are just not using <code>string-ref</code> and <code>char-alphabetic?</code>\
    \ correctly.\n<code>char-alphabetic?</code> expects a <code>char</code> as its\
    \ argument. <code>string-ref</code> expects a <code>string</code> and a <code>number</code>\
    \ as its arguments. A <code>string</code> is not a <code>char</code>. If a <code>string</code>\
    \ contains one and only one <code>char</code>, then <code>string-ref</code> can\
    \ be used to get this <code>char</code>.\nYou can look at the documentation of\
    \ these functions here: string-ref, char-alphabetic?.\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6mpw5c8d.rkt:21:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (for/fold ([acc \"\" ])\n            ([c (in-string s)])\n    (cond\n     \
    \ [(char-alpha? c)\n       (string-append acc (string-join (list (c:to-upper c))\
    \ \"\"))]\n      [(not (char-alpha? c))\n       (string-append acc (string-join\
    \ (list (c:to-lower c)) \"\"))]\n      [else acc])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj8__0gu0.rkt:16:8: char-alpha?: unbound identifier\n  in: char-alpha?\n\
    \  location...:\n   /tmp/tmpj8__0gu0.rkt:16:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(null? s) \"\"]\n    [(and (char-alphabetic? (string-ref s 0))\n\
    \          (char-lower-case? (string-ref s 0)))\n     (string-append\n      (string-upcase\
    \ (string-ref s 0))\n      (solve (substring s 1)))]\n    [(and (char-alphabetic?\
    \ (string-ref s 0))\n          (char-upper-case? (string-ref s 0)))\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]\n \
    \   [else\n     (string-append\n      (string-ref s 0)\n      (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0_994o88.rkt:37:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:38:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:39:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:40:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0_994o88.rkt:41:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_994o88.rkt:42:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\c\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (rev-case c)\n    (cond\n      [(letter? c) (if (lower-case? c) (upcase\
    \ c) (downcase c))]\n      [else c]))\n  (string-map rev-case (if (string-contains?\
    \ s \"a-zA-Z\") s (string-reverse s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyti3p1o8.rkt:15:8: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmpyti3p1o8.rkt:15:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s)\n     \"\"]\n    [(regexp-match #rx\"\\w\" (string (first\
    \ s)))\n     (string-append\n      (if (string-upcase? (string (first s)))\n \
    \         (string-downcase (string (first s)))\n          (string-upcase (string\
    \ (first s))))\n      (solve (rest s)))]\n    [else\n     (string-append (string\
    \ (first s)) (solve (rest s)))]))\n</code>\nI'm wondering how to write a string\
    \ that has #\\w in it. I've tried\n<code>#\"\\w\"</code>\n<code>#\"\\\\w\"</code>\n\
    <code>#\"\\u0057\"</code>\n<code>#\"\\115\"</code>\n<code>#\"77\"</code>\nand\
    \ they didn't work.\n\n\nA:\n\nYou need to use the <code>#px\"...\"</code> syntax\
    \ for string literals, and escape the backslash:\n<code>#px\"\\\\w\"\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkyvq9htw.rkt:16:19: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (for/fold ([output \"\"]) ([s s])\n            (cond\n              [(char-letter?\
    \ s) (string-append output (if (char-upper-case? s) (string-downcase s) (string-upcase\
    \ s)))]\n              [else (string-append output s)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_i5tbrlv.rkt:15:16: char-letter?: unbound identifier\n  in: char-letter?\n\
    \  location...:\n   /tmp/tmp_i5tbrlv.rkt:15:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (all-chars-upper? s)\n    (for/and ([c (in-string s)])\n      (char-upper-case?\
    \ c)))\n  (define (all-chars-lower? s)\n    (for/and ([c (in-string s)])\n   \
    \   (char-lower-case? c)))\n  (define (reverse-case c)\n    (if (char-upper-case?\
    \ c)\n        (char-downcase c)\n        (char-upcase c)))\n  (define (reverse-case-string\
    \ s)\n    (string-map reverse-case s))\n  (if (and (all-chars-upper? s)\n    \
    \       (all-chars-lower? s))\n      (reverse s)\n      (reverse-case-string s)))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpih6h429d.rkt:24:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpih6h429d.rkt:24:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains s #\\a #\\z)\n      (string-upcase (string-foldr (lambda\
    \ (chr acc) (if (char-alphabetic? chr) (string-append (string-downcase (string\
    \ chr)) acc) (string-append (string chr) acc))) \"\" s))\n      (string-reverse\
    \ s)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsv5r59gm.rkt:13:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpsv5r59gm.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (or (string-contains? s #\\A) (string-contains? s #\\a))\n      (string-map\
    \ (lambda (x) (if (or (char=? x #\\A) (char=? x #\\a)) \n                    \
    \             (char-downcase x) \n                                 (char-upcase\
    \ x)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxn53o3yi.rkt:14:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpxn53o3yi.rkt:14:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) empty]\n    [(letter? (first s)) (cons (flip-case (first\
    \ s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyczbd28.rkt:15:6: letter?: unbound identifier\n  in: letter?\n\
    \  location...:\n   /tmp/tmpzyczbd28.rkt:15:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (reverse (build-list (string-length s) (lambda (x) (cond ((regexp-match?\
    \ \"[a-zA-Z]\" (string-ref s x)) (string-downcase (string-upcase (string-ref s\
    \ x)))) (else (string-ref s x)))))))\n)\n</code>\nHowever, I cannot understand\
    \ why is this failing only 1 test case (out of 8) which is:\n<code>solve(\"\"\
    )\n\"\", expected \"\".\n</code>\nHow can I fix this?\n\n\nA:\n\nThe problem is\
    \ because if the string is empty it returns this <code>string-join</code>:\n<code>(string-join\
    \ (reverse '()))\n</code>\nSo, you need to test for the empty string.\nFor example:\n\
    <code>(define (solve s)\n  (cond ((empty? s) \"\")\n        (else\n         (string-join\
    \ (reverse (build-list (string-length s) (lambda (x) (cond ((regexp-match? \"\
    [a-zA-Z]\" (string-ref s x)) (string-downcase (string-upcase (string-ref s x))))\
    \ (else (string-ref s x))))))))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp97xq768o.rkt:18:15: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-letter? s)\n      (if (empty? (string-filter (lambda (c)\
    \ (char-upper-case? c)) s))\n          (string-map char-downcase s)\n        \
    \  (string-map char-upcase s))\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfmz5bhpb.rkt:13:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpfmz5bhpb.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (not (string-contains? s #\\letter))\n      (reverse s)\n      (string-map\
    \ \n       (lambda (c)\n         (cond \n           [(and (char-lower-case? c)\
    \ (char-alphabetic? c)) (char-upcase c)]\n           [(and (char-upper-case? c)\
    \ (char-alphabetic? c)) (char-downcase c)]\n           [else c]))\n       s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplwuom5ye.rkt:13:31: read-syntax: bad character constant `#\\letter`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) empty]\n    [(letter? (first s))\n     (string-append\
    \ (char-upcase (first s))\n                    (solve (rest s)))]\n    [(letter?\
    \ (first s))\n     (string-append (char-downcase (first s))\n                \
    \    (solve (rest s)))]\n    [else\n     (string-append (first s)\n          \
    \          (solve (rest s)))]))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsqecda_b.rkt:27:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let ((result (copy s)))\n    (for ([i (in-range (string-length s))])\n   \
    \   (cond\n        [(and (&lt;= #\\a (string-ref s i)) (&lt;= (string-ref s i)\
    \ #\\z))\n         (string-set! result i (char-upcase (string-ref s i)))]\n  \
    \      [(and (&lt;= #\\A (string-ref s i)) (&lt;= (string-ref s i) #\\Z))\n  \
    \       (string-set! result i (char-downcase (string-ref s i)))]))\n    result))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1jg8zrz3.rkt:17:62: read-syntax: missing `)` to close `(` on line\
    \ 16, found instead `]`\n  possible cause: indentation suggests a missing `)`\
    \ before line 17\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (regexp-match #rx\"[a-zA-Z]\" s)\n      (define (reverse-case s)\n    \
    \    (string-map (\u03BB (x)\n                      (if (char-alphabetic? x)\n\
    \                          (if (char-uppercase? x)\n                         \
    \     (char-downcase x)\n                              (char-upcase x))\n    \
    \                      x))\n                    s))\n      (reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpehvz13va.rkt:14:6: define: not allowed in an expression context\n\
    \  in: (define (reverse-case s) (string-map (\u03BB (x) (if (char-alphabetic?\
    \ x) (if (char-uppercase? x) (char-downcase x) (char-upcase x)) x)) s))\n  location...:\n\
    \   /tmp/tmpehvz13va.rkt:14:6\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:9:4:\
    \ normalize-definition/mk-rhs\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:165:4:\
    \ normalize-definition\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1117:2\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (zero? (string-length s))\n      \"\"\n      (let [(first (string-ref s\
    \ 0))]\n        (string-append (reverse-it first) (solve (substring s 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ll1znot.rkt:16:24: reverse-it: unbound identifier\n  in: reverse-it\n\
    \  location...:\n   /tmp/tmp3ll1znot.rkt:16:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (map reverse-case (string-&gt;list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7um8nv3w.rkt:13:33: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) s]\n    [(char-numeric? (string-ref s 0)) (string-reverse\
    \ s)]\n    [else (substring (string-reverse (string-replace s (char-downcase (string-ref\
    \ s 0)) (char-upcase (string-ref s 0)))) 1 (sub1 (string-length s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp31zk6_0_.rkt:15:39: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmp31zk6_0_.rkt:15:39\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-reverse (map car\n    (foldl\n      (lambda (c acc)\n        (cond\n\
    \          [(member (string-downcase c) (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    ))\n           (cons (if (equal? (string-downcase c) c)\n                   (string-upcase\
    \ c)\n                   (string-downcase c))\n                 acc)]\n      \
    \    [else (cons c acc)]))\n      (list)\n      (string-&gt;list s)))))\n</code>\n\
    The code runs, but it is not according to the rules of the challenge, since it\
    \ uses string-reverse, which is prohibited.\nI don't see how to solve this without\
    \ using string-reverse or indexing the string, which is also prohibited.\nWhat\
    \ am I missing?\n\n\nA:\n\nWhy not use built-in functionality? \n<code>(define\
    \ (solve s)\n  (string-join (reverse (string-split s))))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc_h2tthu.rkt:21:21: read-syntax: missing `)` to close `(` on line\
    \ 17, found instead `]`\n  possible cause: indentation suggests a missing `)`\
    \ before line 18\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(string=? s \"\") \"\"]\n    [(and (char-lower-case? (string-ref\
    \ s 0))\n          (not (string-any char-lower-case? (substring s 1))))\n    \
    \ (string-append (list (char-upcase (string-ref s 0))) (substring s 1))]\n   \
    \ [(string-any char-lower-case? s)\n     (string-append (list (char-upcase (string-ref\
    \ s 0)))\n                    (string-append (substring s 1 (sub1 (string-length\
    \ s)))\n                                   (list (char-lower-case (string-ref\
    \ s (- (string-length s) 1))))))]\n    [else (string-reverse s)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4325jzgf.rkt:16:16: string-any: unbound identifier\n  in: string-any\n\
    \  location...:\n   /tmp/tmp4325jzgf.rkt:16:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((string-empty? s) \"\")\n        ((char-numeric? (string-ref s 0)) (string-reverse\
    \ s))\n        ((char-lower-case? (string-ref s 0))\n         (string-append (string-upcase\
    \ (string-ref s 0)) (solve (string-tail s))))\n        ((char-upper-case? (string-ref\
    \ s 0))\n         (string-append (string-downcase (string-ref s 0)) (solve (string-tail\
    \ s))))\n        (else (string-append (string-ref s 0) (solve (string-tail s))))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmple71q6gz.rkt:13:10: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmple71q6gz.rkt:13:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((empty? s) (string))\n        ((equal? (string-length s) 1) s)\n   \
    \     ((= (car s) (ascii-&gt;char (add1 (char-&gt;ascii (car s)) 32)))\n     \
    \    (cons (ascii-&gt;char (add1 (char-&gt;ascii (car s)) -32))\n            \
    \   (solve (cdr s))))\n        ((= (car s) (ascii-&gt;char (add1 (char-&gt;ascii\
    \ (car s)) -32)))\n         (cons (ascii-&gt;char (add1 (char-&gt;ascii (car s))\
    \ 32))\n               (solve (cdr s))))\n        (else (cons (car s) (solve (cdr\
    \ s))))))\n</code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa02o0lw_.rkt:18:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (apply string (reverse (string-map\n                          (lambda (x) (if\
    \ (and (char-alphabetic? x)\n                                                (>\
    \ (char-downcase x) 96))\n                                           (char-upcase\
    \ x)\n                                           (char-downcase x)))\n       \
    \                   s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0wy91cu6.rkt:13:26: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0wy91cu6.rkt:13:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (reverse (map (\u03BB (c)\n                  (if (letter? c)\n            \
    \          (if (char-numeric? c)\n                          (char-&gt;integer\
    \ c)\n                          (integer-&gt;char c))\n                      c))\
    \ s)))\n</code>\nThis is an error from the DrRacket window:\n<code>car: expects\
    \ argument of type &lt;pair&gt;; given '(#\\# #\\a #\\@ #\\C)\n</code>\nThis is\
    \ another error, more detailed:\n<code>char: expects argument of type &lt;character&gt;;\
    \ given '(#\\# #\\a #\\@ #\\C)\n</code>\nThis is the user input:\n<code>#a@C\n\
    </code>\nThis is the result:\n<code>4321\n</code>\nI'm trying to figure out why\
    \ this is happening...\nThanks!\n\n\nA:\n\nYou cannot solve this problem simply\
    \ by calling <code>reverse</code> on a list.\nA better solution is to apply a\
    \ function to the string, like so:\n<code>(define (solve str)\n  (define (map-case\
    \ f str)\n    (string-&gt;list (string-map f str)))\n  (define (toggle-case c)\n\
    \    (if (char-alphabetic? c)\n        (char-downcase c)\n        (char-upcase\
    \ c)))\n  (if (string-any char-alphabetic? str)\n      (string-&gt;list (string-map\
    \ toggle-case str))\n      (string-&gt;list (string-reverse str))))\n</code>\n\
    Test:\n<code>(solve \"1234\")\n=&gt; (4 3 2 1)\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnepbagrg.rkt:49:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 50\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(or (string=? s \"\") (not (string-contains-character? s #\\a #\\z #\\\
    A #\\Z))) (reverse s)]\n        [else (reverse-string-case s)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp58kiz74y.rkt:13:35: string-contains-character?: unbound identifier\n\
    \  in: string-contains-character?\n  location...:\n   /tmp/tmp58kiz74y.rkt:13:35\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) (string)]\n    [(char-alphabetic? (string-ref s 0))\n\
    \     (string-append\n      (if (char-lower-case? (string-ref s 0))\n        \
    \  (string-upcase (string-ref s 0))\n          (string-downcase (string-ref s\
    \ 0)))\n      (solve (substring s 1 (string-length s))))]\n    [else (string-append\
    \ (string-ref s 0) (solve (substring s 1 (string-length s))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:28:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqzmoumec.rkt:30:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:31:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:32:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqzmoumec.rkt:34:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzmoumec.rkt:35:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\c\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-fold (\u03BB (c s) (if (char-alphabetic? c) (+ s 1) s)) 0 s)\n\
    \      (string-map\n       (\u03BB (c)\n         (if (char-alphabetic? c)\n  \
    \           (if (char-lower-case? c) (char-upcase c) (char-downcase c))\n    \
    \       c))\n       s)\n      (string-reverse s)))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4zj1nsny.rkt:13:7: string-fold: unbound identifier\n  in: string-fold\n\
    \  location...:\n   /tmp/tmp4zj1nsny.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-lower-case?\
    \ c)\n             (char-upcase c)\n             (char-downcase c))\n        \
    \ c))\n   s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv6nvckln.rkt:13:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv6nvckln.rkt:13:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (rev-case c)\n    (if (or (char=? c #\\A) (char=? c #\\a))\n      \
    \  (if (char=? c #\\A)\n            #\\a\n            #\\A)\n        c))\n  (if\
    \ (empty? s)\n      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref\
    \ s 0))\n           (string (rev-case (string-ref s 0)))\n           (string (string-ref\
    \ s 0)))\n       (solve (substring s 1 (string-length s))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflhvmy_e.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpflhvmy_e.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpflhvmy_e.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflhvmy_e.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpflhvmy_e.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpflhvmy_e.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflhvmy_e.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpflhvmy_e.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) (reverse s)]\n        [(char-alpha? (string-ref s 0))\n \
    \        (reversify s)]\n        [else\n         (solve (string-append (string-ref\
    \ s 0) (solve (string-tail s 1))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqssvu_j7.rkt:14:10: char-alpha?: unbound identifier\n  in: char-alpha?\n\
    \  location...:\n   /tmp/tmpqssvu_j7.rkt:14:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (let* ([s' (string-&gt;list s)]\n         [s'' (map (lambda (x) (if (char-alphabetic?\
    \ x)\n                                 (char-upcase x)\n                     \
    \            (char-downcase x)))\n                   s')])\n    (if (empty? s'')\n\
    \        (reverse s')\n        (list-&gt;string s''))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp44_k4jux.rkt:17:21: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-no-letters? s)\n      (reverse s)\n      (reverse-cases\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpytcvkfr4.rkt:13:7: string-contains-no-letters?: unbound identifier\n\
    \  in: string-contains-no-letters?\n  location...:\n   /tmp/tmpytcvkfr4.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      s\n      (let ([first (string-ref s 0)])\n   \
    \     (cond [(char-alphabetic? first)\n               (string-append\n       \
    \         (string first)\n                (solve (string-drop s 1)))]\n      \
    \        [else\n               (string-append\n                (solve (string-drop\
    \ s 1))\n                (string first))]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp21_w85au.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp21_w85au.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(not (string? s)) \"\"]\n    [(regexp-match #rx\"\\W\" s) (reverse\
    \ s)]\n    [else (string-join\n            (reverse\n             (map\n     \
    \         (lambda (x)\n                (cond\n                  [(char-lower-case?\
    \ x) (char-upcase x)]\n                  [(char-upper-case? x) (char-lower-case\
    \ x)]\n                  [else x]))\n              (string->list s))) \"\")]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4qx6jxk3.rkt:15:19: read-syntax: unknown escape sequence `\\W`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      \"\"\n      (string-append\n       (if (char-alphabetic?\
    \ (string-ref s 0))\n           (string-capitalize (string-downcase (string s)))\n\
    \           (string s))\n       (solve (substring s 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1kcp0zdb.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp1kcp0zdb.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond ((not (string-contains? s #\\a)) (reverse s))\n        (else (reverse\
    \ (string-map (lambda (c)\n                                     (cond ((letter?\
    \ c) (if (upper-case? c) (downcase c) (upcase c)))\n                         \
    \                  (else c)))\n                                   s)))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjcuwne8g.rkt:14:24: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjcuwne8g.rkt:14:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-contains-letter? s)\n      (reverse-case s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfzirze5k.rkt:13:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpfzirze5k.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\"^$\" s s)\n  (regexp-replace* #rx\"\\d\" s s)\n  (regexp-replace*\
    \ #rx\"[a-z]\" s (\u03BB (x) (string-upcase x)))\n  (regexp-replace* #rx\"[A-Z]\"\
    \ s (\u03BB (x) (string-downcase x)))\n  (string-reverse s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw4imrl6j.rkt:14:19: read-syntax: unknown escape sequence `\\d`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s) \"\"\n      (if (string-ci=? (string-ref s 0) (string-downcase\
    \ (string-ref s 0)))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:23:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:24:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:25:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:26:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:27:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:28:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:29:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6yomou1b.rkt:30:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-all string-ci-letter? s)\n      (string-upcase s)\n      (string-upcase\
    \ s)))\n</code>\nActually, it does not perform the task, but I could not find\
    \ a way to make the check described in the comment within the <code>if</code>\
    \ statement. So, I decided to write it using <code>cond</code>. Is it doable using\
    \ <code>if</code>?\n\n\nA:\n\nUse <code>string-map</code>:\n<code>(define (solve\
    \ s)\n  (string-map\n   (lambda (ch)\n     (if (char-alphabetic? ch)\n       \
    \  (if (char-lower-case? ch)\n             (char-upcase ch)\n             (char-downcase\
    \ ch))\n         ch))\n   s))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb_wckopq.rkt:17:8: unquote: not in quasiquote\n  in: (unquote it)\n\
    \  location...:\n   /tmp/tmpb_wckopq.rkt:17:8\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (rev-case c)\n    (if (char-alphabetic? c)\n        (if (char-ci=?\
    \ c (char-upcase c))\n            (char-downcase c)\n            (char-upcase\
    \ c))\n        c))\n  (if (string-any char-alphabetic? s)\n      (apply string\
    \ (map rev-case (string->list s)))\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprj8hk0uh.rkt:19:7: string-any: unbound identifier\n  in: string-any\n\
    \  location...:\n   /tmp/tmprj8hk0uh.rkt:19:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n  \
    \   (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else\n     (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n</code>\nI would appreciate any help, review,\
    \ advice and criticism.\n\n\nA:\n\nThere are several problems here:\n\nyou don't\
    \ need to check if the input is <code>\"\"</code>, you can use <code>null?</code>\
    \ instead\nyou're using the wrong <code>string-ref</code> function, it should\
    \ be <code>substring</code>\nyou're missing the case of an uppercase letter\n\
    you're not calling <code>solve</code> when it's a letter\nyou're not handling\
    \ the empty string case\n\nHere's a corrected version:\n<code>(define (solve s)\n\
    \  (cond\n    [(null? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append (if (char-upper-case? (string-ref s 0))\n                  \
    \     (string-downcase (string-ref s 0))\n                       (string-upcase\
    \ (string-ref s 0)))\n                   (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-ref s 0) (solve (substring s 1)))]))\n</code>\nAn\
    \ alternative implementation:\n<code>(define (solve s)\n  (cond\n    [(null? s)\
    \ \"\"]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (if (char-upper-case?\
    \ (string-ref s 0))\n                       (string-downcase (string-ref s 0))\n\
    \                       (string-upcase (string-ref s\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr86vvgs0.rkt:56:38: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 57\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) \"\"]\n        [(char-alphabetic? (string-ref s 0))\n   \
    \      (string-append (string-upcase (substring s 0 1)) (substring s 1))]\n  \
    \      [(char-numeric? (string-ref s 0))\n         (string-append (substring s\
    \ 1) (substring s 0 1))]\n        [else (string-append (substring s 1) (substring\
    \ s 0 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:25:4

    actual:     "AsDf"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:26:4

    actual:     "2341"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:27:4

    actual:     "Ab"

    expected:   "AB"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:28:4

    actual:     "a@C#"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:29:4

    actual:     "AsdfW^45#"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:30:4

    actual:     "6@2#"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:31:4

    actual:     "$a^D#"

    expected:   "#$A^d"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfg1hoa7t.rkt:32:4

    actual:     "ccc#"

    expected:   "#CCC"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-join (reverse (list->string (map (\u03BB (c)\n                    \
    \                         (if (and (char-alphabetic? c)\n                    \
    \                                  (char-lower-case? c))\n                   \
    \                              (char-upcase c)\n                             \
    \                    (char-lower-case c)))\n                                 \
    \        (string->list s))))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9v44zrfz.rkt:17:50: char-lower-case: unbound identifier\n  in:\
    \ char-lower-case\n  location...:\n   /tmp/tmp9v44zrfz.rkt:17:50\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(string=? \"\" s) \"\"]\n    [(string-contains? s \"[a-zA-Z]\"\
    )\n     (for/string ([ch (in-string s)])\n       (cond\n         [(char-alphabetic?\
    \ ch) (string-downcase ch)]\n         [else (string-upcase ch)]))]\n    [else\
    \ (string-reverse s)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgmwo9ogh.rkt:16:6: for/string: unbound identifier\n  in: for/string\n\
    \  location...:\n   /tmp/tmpgmwo9ogh.rkt:16:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-downcase (string-upcase s)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:19:4

    actual:     "asdf"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:20:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:21:4

    actual:     "ab"

    expected:   "AB"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:22:4

    actual:     "#a@c"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:23:4

    actual:     "#asdfw^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:24:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:25:4

    actual:     "#$a^d"

    expected:   "#$A^d"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7oyb0i9.rkt:26:4

    actual:     "#ccc"

    expected:   "#CCC"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (solve-rec s)\n    (cond\n      [(empty? s) s]\n      [(char-alphabetic?\
    \ (first s))\n       (cons (if (char-upper-case? (first s))\n                \
    \ (char-downcase (first s))\n                 (char-upcase (first s)))\n     \
    \        (solve-rec (rest s)))]\n      [else (cons (first s) (solve-rec (rest\
    \ s)))]))\n  (regexp-replace* #rx\"^$\" \"\" (string-join (reverse (solve-rec\
    \ (string->list s))) \"\")))\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:28:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    F #\\d #\\S #\\a)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:29:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\4 #\\3 #\\2 #\\1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:30:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    B #\\A)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgtu7hxn2.rkt:31:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\c #\\@ #\\A #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:32:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\5 #\\4 #\\^\
    \ #\\w #\\F #\\D #\\S #\\a #\\#)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:33:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\2 #\\@ #\\6\
    \ #\\#)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgtu7hxn2.rkt:34:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\d #\\^ #\\A #\\$ #\\#)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtu7hxn2.rkt:35:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    C #\\C #\\C #\\#)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s)) (string-upcase\
    \ (first s))]\n    [(char-numeric? (first s)) (first s)]\n    [else (string-downcase\
    \ (first s))]))\n</code>\nExample input:\n<code>&gt; (solve \"1234\")\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0bm5__nm.rkt:18:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp0bm5__nm.rkt:18:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-has-letter? s)\n      (string-for/fold ([i 0] [j (string-length\
    \ s)])\n        ([ss (string-append (string-ref s i) (string-ref s (- j 1)))])\n\
    \        (string-append ss (string-map\n                            (lambda (char)\n\
    \                              (if (char-alphabetic? char)\n                 \
    \                 (if (char-lower-case? char)\n                              \
    \        (char-upcase char)\n                                      (char-downcase\
    \ char))\n                                  char)) s)))\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiuiqvtkb.rkt:13:7: string-has-letter?: unbound identifier\n  in:\
    \ string-has-letter?\n  location...:\n   /tmp/tmpiuiqvtkb.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(empty? s) \"\"]\n        [(char-alphabetic? (first s))\n         (string-append\
    \ (string-upcase (first s))\n                        (solve (rest s)))]\n    \
    \    [(char-lower-case? (first s))\n         (string-append (string-upcase (first\
    \ s))\n                        (solve (rest s)))]\n        [(char-upper-case?\
    \ (first s))\n         (string-append (string-downcase (first s))\n          \
    \              (solve (rest s)))]\n        [else (string-append (first s)\n  \
    \                           (solve (rest s)))]))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt6q9bm8r.rkt:25:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpt6q9bm8r.rkt:25:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    [(empty? s) s]\n    [(and (= (char-upcase (car s)) (car s))\n  \
    \        (= (char-downcase (car s)) (car s)))\n     (cons (car s) (solve (cdr\
    \ s)))]\n    [else\n     (cons (char-upcase (car s)) (solve (cdr s)))]))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpigsgw249.rkt:20:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpigsgw249.rkt:20:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (empty? s)\n      \"\"\n      (if (isLetter (string-ref s 0))\n       \
    \   (if (char-is-lower-case? (string-ref s 0))\n              (string-upcase s)\n\
    \              (string-downcase s))\n          (solve (substring s 1)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwcikn2y3.rkt:15:11: isLetter: unbound identifier\n  in: isLetter\n\
    \  location...:\n   /tmp/tmpwcikn2y3.rkt:15:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond [(not (regexp-match #rx\"[A-Za-z]\" s)) \n         (string-reverse s)]\n\
    \        [else \n         (string-map\n          (lambda (char)\n            (cond\
    \ [(char-alphabetic? char) \n                   (char-downcase char)]\n      \
    \            [else\n                   (char-upcase char)]))\n          s)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph83z9muv.rkt:14:10: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmph83z9muv.rkt:14:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic? (string-ref\
    \ s 0))\n          (string-append\n           (string-append (string (flip-case\
    \ (string-ref s 0))) (substring s 1))\n           (solve (substring s 1)))\n \
    \         (string-append (string (string-ref s 0)) (solve (substring s 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp76elx437.rkt:13:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp76elx437.rkt:13:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (cond\n    ((string-empty? s) \"\")\n    ((char-alphabetic? (string-ref s 0))\n\
    \     (string-append (string-upcase (string-ref s 0)) (solve (substring s 1))))\n\
    \    ((char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1))))\n    (else (string-append (string-downcase (string-ref s\
    \ 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2d6yvqw_.rkt:14:6: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp2d6yvqw_.rkt:14:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (is-letter? c)\n    (and (>= c 65) (<= c 90)))\n  (define (invert-case\
    \ c)\n    (cond ((is-letter? c) (+ 32 c))\n          ((is-letter? (- c 32)) (-\
    \ c 32))\n          (else c)))\n  (for/fold ([acc (string->list s)]) ([_ (in-list\
    \ s)])\n    (reverse (map invert-case acc))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:27:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:28:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:29:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:30:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:31:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:32:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:33:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1r_wxqo9.rkt:34:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (reverse s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:20:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:21:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:22:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:23:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:24:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:25:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:26:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnzv89qv.rkt:27:4\n\
    \nreverse: contract violation\n  expected: list?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (regexp-replace* #rx\"[a-zA-Z]\" s (\u03BB (x) (string-downcase (string-upcase\
    \ x)))))\n</code>\nHow can I improve it?\nAlso, how can I do it without regex?\n\
    \n\nA:\n\nI think your code is already pretty good.\nHowever, I think that the\
    \ signature of <code>regexp-replace*</code> takes a procedure for the replacement\
    \ rather than a string, so you should write:\n<code>(define (solve s)\n  (regexp-replace*\
    \ #rx\"[a-zA-Z]\" s (\u03BB (x) (string-downcase (string-upcase x)))))\n</code>\n\
    where you have a procedure <code>(\u03BB (x) (string-downcase (string-upcase x)))</code>\
    \ rather than just a string <code>\"YYY\"</code>.\n<code>string-downcase</code>\
    \ and <code>string-upcase</code> are fine, but if you are using Racket, you might\
    \ as well use <code>string-ci=?</code> and <code>string-ci&lt;=?</code>.\n<code>string-ci=?</code>\
    \ checks to see if two strings are case-insensitively the same.  In your code,\
    \ you are checking to see if a string is upper case or lower case, but you don't\
    \ want to use <code>string-upcase</code> because that would make the string upper\
    \ case.  A function like <code>string-ci=?</code> would be good for this.\n<code>string-ci&lt;=?</code>\
    \ would be useful in your procedure because if you have a string <code>x</code>\
    \ and you don't know if it is upper case or lower case, then you can turn it into\
    \ a <code>string-ci&lt;=?</code> just by changing <code>&lt;=</code> to <code>&lt;</code>\
    \ and you would have a <code>string-ci&lt;?</code> that is an ordering of strings\
    \ that is case-insensitive.\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0gyor5_b.rkt:16:4: unquote: not in quasiquote\n  in: (unquote how)\n\
    \  location...:\n   /tmp/tmp0gyor5_b.rkt:16:4\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (= (string-length s) 0)\n      \"\"\n      (reverse (string-map (lambda\
    \ (x)\n                             (if (char-alphabetic? x)\n               \
    \                  (if (char-upper-case? x)\n                                \
    \     (char-downcase x)\n                                     (char-upcase x))\n\
    \                                 x)) s))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzaqbimhl.rkt:15:16: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzaqbimhl.rkt:15:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (if (not (string-contains? s #\\a))\n      (reverse s)\n      (string-join\
    \ (map\n                    (lambda (x)\n                      (if (char-alphabetic?\
    \ x)\n                          (if (char-lower-case? x)\n                   \
    \           (char-upcase x)\n                              (char-downcase x))\n\
    \                          x))\n                    (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:29:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:30:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:31:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:32:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:33:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:34:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:35:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79agvi2n.rkt:36:4\n\
    \nstring-contains?: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (define (has-letters s)\n    (ormap char-alphabetic? (string->list s)))\n \
    \ (define (reverse-case c)\n    (if (char-alphabetic? c)\n        (if (char-lower-case?\
    \ c)\n            (char-upcase c)\n            (char-downcase c))\n        c))\n\
    \  (define (rev s)\n    (reversed (string->list s)))\n  (define (check s)\n  \
    \  (if (has-letters s)\n        (string-join (map reverse-case (string->list s)))\n\
    \        (string-join (rev s))))\n  (check s))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu81s3wdz.rkt:22:5: reversed: unbound identifier\n  in: reversed\n\
    \  location...:\n   /tmp/tmpu81s3wdz.rkt:22:5\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\
    \n;; solve(\"ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n\
    \  (string-upcase s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n\
    \    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:20:4

    actual:     "ASDF"

    expected:   "aSdF"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:21:4

    actual:     "1234"

    expected:   "4321"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:23:4

    actual:     "#A@C"

    expected:   "#A@c"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:24:4

    actual:     "#ASDFW^45"

    expected:   "#aSDFw^45"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:25:4

    actual:     "#6@2"

    expected:   "2@6#"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7jp20pvh.rkt:26:4

    actual:     "#$A^D"

    expected:   "#$A^d"

    --------------------

    '
  stdout: ''
