name: HumanEval_55_fib
language: rkt
results:
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (letrec ([fib-iter\
    \ (lambda (curr next i)\n                       (if (= i n)\n                \
    \           curr\n                           (fib-iter next (+ curr next) (+ i\
    \ 1))))])\n    (fib-iter 0 1 0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (zero? n) 0\n\
    \      (if (equal? n 1) 1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(zero?\
    \ n) 1]\n    [(= n 1) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0qw1yzl.rkt:21:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps0qw1yzl.rkt:23:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmps0qw1yzl.rkt:24:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps0qw1yzl.rkt:25:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n```\n\n```\n#lang racket\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmple1jw15r.rkt:17:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(zero? n)\
    \ 0]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (letrec ([f (lambda\
    \ (n)\n                (cond\n                  [(< n 2) 1]\n                \
    \  [else (+ (f (- n 1)) (f (- n 2)))]))])\n    (f n)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc9dcjwm.rkt:22:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzc9dcjwm.rkt:24:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpzc9dcjwm.rkt:25:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzc9dcjwm.rkt:26:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define fib-sequence\
    \ '())\n  (for ([i (in-range n)])\n    (define f (cond [(= i 0) 0]\n         \
    \           [(= i 1) 1]\n                    [else (+ (list-ref fib-sequence (-\
    \ i 1))\n                             (list-ref fib-sequence (- i 2)))]))\n  \
    \  (set! fib-sequence (append fib-sequence (list f))))\n  (list-ref fib-sequence\
    \ (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm2uk0vwd.rkt:25:4\n\
    actual:     34\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm2uk0vwd.rkt:26:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpm2uk0vwd.rkt:27:4\nactual:     13\nexpected:\
    \   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm2uk0vwd.rkt:28:4\nactual:     55\nexpected:   89\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm2uk0vwd.rkt:29:4\n\
    actual:     89\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(zero? n)\
    \ 0]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    </code>\nCan I convert this to a tail-recursive version?\n\n\nA:\n\nYes, you can\
    \ make it tail-recursive, for example like this:\n<code>(define (fib n)\n  (define\
    \ (fib-helper i a b)\n    (if (zero? i)\n        a\n        (fib-helper (- i 1)\
    \ b (+ a b))))\n  (fib-helper n 0 1))\n</code>\nThe trick is to use an extra helper\
    \ function that's private to <code>fib</code>, and for the computation to take\
    \ place entirely in there, with an explicit accumulation parameter that keeps\
    \ track of the previous two numbers.\nWe can test it like this:\n<code>(fib 10)\n\
    =&gt; 55\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvmkx_n8a.rkt:20:3: unquote: not in quasiquote\n  in: (unquote you)\n\
    \  location...:\n   /tmp/tmpvmkx_n8a.rkt:20:3\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(< n\
    \ 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp8_cwdt.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnp8_cwdt.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnp8_cwdt.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnp8_cwdt.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ acc1 acc2 cur-idx)\n    (if (= cur-idx n)\n        acc1\n        (fib-iter acc2\
    \ (+ acc1 acc2) (+ cur-idx 1))))\n  (fib-iter 0 1 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(zero?\
    \ n)\n     1]\n    [(= n 1)\n     1]\n    [else\n     (+ (fib (- n 1)) (fib (-\
    \ n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj370rb1b.rkt:24:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj370rb1b.rkt:26:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj370rb1b.rkt:27:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj370rb1b.rkt:28:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (match n\n    [(0)\
    \ 0]\n    [(1) 1]\n    [(n) (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9qt84d5s.rkt:12:5: match: syntax error in pattern\n  in: (0)\n\
    \  location...:\n   /tmp/tmp9qt84d5s.rkt:12:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 3)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n</code>\nI'm rather new to Racket,\
    \ and I haven't found any references to tail-call optimizations in Racket. I'm\
    \ aware that Clojure has tail-call optimization: Is it faster in Clojure than\
    \ in Racket?\nI'm not sure if Racket's tail-call optimization is enabled by default,\
    \ or if it's something that I need to do. In this case, I'm asking if Racket tail-call\
    \ optimization would be useful with the <code>fib</code> function, and how it\
    \ could be done if so.\n\n\nA:\n\nYes, Racket has TCO. To tell the compiler that\
    \ you want TCO on a particular function you need to use the <code>#:tco</code>\
    \ parameter for <code>define</code>. To make all function calls in a module get\
    \ TCO you need to <code>#lang racket/base</code> (which also affects other aspects\
    \ of the language).\nAs @jerry-kramer noted, the benefit of TCO here is not \"\
    speed\", but rather \"no stack overflow\".\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphz1zl1kq.rkt:21:299: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((= n\
    \ 1) 1)\n    ((= n 2) 1)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n</code>\n\
    It's slow because I have to calculate the result from the last two numbers.\n\
    I want to cache the result, so I don't have to re-calculate it again and again.\n\
    <code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa7j92p3p.rkt:17:26: unquote: not in quasiquote\n  in: (unquote\
    \ so)\n  location...:\n   /tmp/tmpa7j92p3p.rkt:17:26\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let ([fiblist (list\
    \ 0 1)])\n    (let loop ([i 1])\n      (cond ((= i n) (second fiblist))\n    \
    \        (else (set! fiblist (list (second fiblist) (+ (first fiblist) (second\
    \ fiblist))))\n                  (loop (+ i 1)))))\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(zero?\
    \ n) 0]\n    [(= n 1) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(zero? n)\
    \ 0]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((< n 2) 1)\n\
    \        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpswxssf6g.rkt:19:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpswxssf6g.rkt:21:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpswxssf6g.rkt:22:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpswxssf6g.rkt:23:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= 0 n)\n  \
    \    0\n      (if (= 1 n)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (match n\n    [(0)\
    \ 0]\n    [(1) 1]\n    [(n)\n     (+ (fib (- n 1))\n        (fib (- n 2)))]))\n\
    </code>\nThe problem is that this program, for example for <code>fib(10)</code>,\
    \ makes calls like this:\n<code>fib(10)\n+1: fib(9)\n+2: fib(8)\n+3: fib(7)\n\
    +4: fib(6)\n+5: fib(5)\n+6: fib(4)\n+7: fib(3)\n+8: fib(2)\n+9: fib(1)\n+10: fib(0)\n\
    </code>\nAs you can see the same <code>fib</code> function is called many times.\n\
    I would like to be able to do something like this:\n<code>fib(10)\n+1: fib(9)\n\
    +2: fib(8)\n+3: fib(7)\n+4: fib(6)\n+5: fib(5)\n+6: fib(4)\n+7: fib(3)\n+8: fib(2)\n\
    +9: fib(1)\n+10: fib(0)\n-10: 1\n-9: 1\n-8: 2\n-7: 3\n-6: 5\n-5: 8\n-4: 13\n-3:\
    \ 21\n-2: 34\n-1: 55\n0: 55\n</code>\nIs there some way to write a function that\
    \ would remember its previous results and return them without making new calls?\n\
    The same effect I can achieve by using <code>define-values</code>, for example\
    \ like this:\n<code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_fffduj7.rkt:18:32: unquote: not in quasiquote\n  in: (unquote\
    \ for)\n  location...:\n   /tmp/tmp_fffduj7.rkt:18:32\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (match n\n    [(0)\
    \ 0]\n    [(1) 1]\n    [(list n2 (list _ n1)) (+ n1 n2)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi4u6r7wo.rkt:12:5: match: syntax error in pattern\n  in: (0)\n\
    \  location...:\n   /tmp/tmpi4u6r7wo.rkt:12:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (iter acc1\
    \ acc2 cnt)\n    (if (= cnt 0)\n        acc1\n        (iter acc2 (+ acc1 acc2)\
    \ (- cnt 1))))\n  (iter 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (equal? n 1)\n\
    \      1\n      (if (equal? n 2)\n          1\n          (+ (fib (- n 1)) (fib\
    \ (- n 2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate\
    \ 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11)\
    \ 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n</code>\nIf we run\
    \ the racket code, we see that it is correct. \n<code>&gt; (fib 10)\n55\n&gt;\
    \ (fib 1)\n1\n&gt; (fib 8)\n21\n</code>\nNow let's try to run the same code with\
    \ the <code>#lang plai</code> language.\n<code>#lang plai\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr7mv2lv2.rkt:15:25: unquote: not in quasiquote\n  in: (unquote\
    \ we)\n  location...:\n   /tmp/tmpr7mv2lv2.rkt:15:25\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    ```\n\n```python\ndef fib(n):\n    if n == 1:\n        return 1\n    if n == 2:\n\
    \        return 1\n    return fib(n - 1) + fib(n - 2)\n```\n\n```go\nfunc fib(n\
    \ int) int {\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t\
    }\n\treturn fib(n-1) + fib(n-2)\n}\n```\n\n```elixir\ndefmodule Foo do\n  def\
    \ fib(n) do\n    case n do\n      1 -> 1\n      2 -> 1\n      _ -> fib(n - 1)\
    \ + fib(n - 2)\n    end\n  end\nend\n```\n\n```ruby\ndef fib(n)\n  if n == 1\n\
    \    1\n  elsif n == 2\n    1\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\n\
    ```\n\n```haskell\n-- Recursive\nfib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib\
    \ (n-2)\n\n-- Tail recursive\nfib x\n    | x <= 1 = x\n    | otherwise = fibHelper\
    \ x 2 0 1\n  where\n    fibHelper n counter prev curr\n        | counter == n\
    \ = curr\n        | otherwise = fibHelper n (counter + 1) curr (prev + curr)\n\
    ```\n\n### 5. Definition\n\n*\u0412\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\
    \u0435 \u043D\u0430\u0438\u0431\u043E\u043B\u044C\u0448\u0435\u0433\u043E \u043E\
    \u0431\u0449\u0435\u0433\u043E \u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044F\
    \ (\u041D\u041E\u0414) \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043B\
    .*\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7_bnb1mf.rkt:79:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b ctr)\n    (if (= ctr n) a\n        (fib-iter b (+ a b) (+ ctr 1))))\n  (fib-iter\
    \ 0 1 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpawnexb77.rkt:21:4\n\
    actual:     34\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpawnexb77.rkt:22:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpawnexb77.rkt:23:4\nactual:     13\nexpected:\
    \   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpawnexb77.rkt:24:4\nactual:     55\nexpected:   89\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpawnexb77.rkt:25:4\n\
    actual:     89\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((= n\
    \ 1) 1)\n    ((= n 2) 1)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (fib-aux 1 1 2 n))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsj0mec9a.rkt:11:3: fib-aux: unbound identifier\n  in: fib-aux\n\
    \  location...:\n   /tmp/tmpsj0mec9a.rkt:11:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b count)\n    (if (= count 0)\n        a\n        (fib-iter b (+ a b) (- count\
    \ 1))))\n  (fib-iter 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (let loop ([n (- n 2)] [a 1] [b 1])\n        (if (= n 0)\n     \
    \       (+ a b)\n            (loop (- n 1) (+ a b) a)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2i2yxzl6.rkt:23:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2i2yxzl6.rkt:25:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2i2yxzl6.rkt:26:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2i2yxzl6.rkt:27:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (go n-2\
    \ n-1)\n    (cond\n      [(= n 0) n-2]\n      [(= n 1) n-1]\n      [else (go n-1\
    \ (+ n-2 n-1))]))\n  (go 0 1))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (letrec ([f (lambda\
    \ (i)\n                (if (= i 0)\n                    0\n                  \
    \  (if (= i 1)\n                        1\n                        (+ (f (- i\
    \ 1)) (f (- i 2))))))])\n    (f n)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    ```\n\n```python\n#Python\n\ndef fib(n):\n    if n == 1:\n        return 1\n \
    \   if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n```\n\n### 1.2\
    \ Loop\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpat_1_gf_.rkt:19:0: read-syntax: bad syntax `#P`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let lp ((n n) (a\
    \ 0) (b 1))\n    (if (zero? n) a\n        (lp (- n 1) b (+ a b)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ n a b)\n    (if (= n 0)\n        a\n        (fib-iter (- n 1) b (+ a b))))\n\
    \  (fib-iter n 0 1))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp95v12bpz.rkt:19:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define fibs (list\
    \ 1 1))\n  (let loop ([i 0])\n    (if (= i n)\n        (cadr fibs)\n        (begin\n\
    \          (set! fibs (list (cadr fibs) (+ (car fibs) (cadr fibs))))\n       \
    \   (loop (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprux9nilx.rkt:24:4\n\
    actual:     144\nexpected:   55\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprux9nilx.rkt:25:4\nactual:\
    \     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprux9nilx.rkt:26:4\nactual:     55\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprux9nilx.rkt:27:4\nactual:     233\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprux9nilx.rkt:28:4\nactual:     377\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 3)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 3)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-helper\
    \ n prev curr)\n    (if (= n 0)\n        prev\n        (fib-helper (- n 1) curr\
    \ (+ prev curr))))\n  (fib-helper n 0 1))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (internal\
    \ n sum1 sum2)\n    (if (= n 0) sum1\n      (internal (- n 1) sum2 (+ sum1 sum2))))\n\
    \  (internal n 0 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n```\n\n\
    ```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa_izgt5i.rkt:17:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 3)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 3) 1 (+\
    \ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n</code>\n\
    The above implementation is slow, consuming a lot of CPU power when <code>n</code>\
    \ is large. For example, <code>(fib 25)</code> takes several seconds to compute,\
    \ and <code>(fib 40)</code> just blows up my CPU.\nThe following iterative implementation\
    \ is much faster:\n<code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr87cspjz.rkt:16:32: unquote: not in quasiquote\n  in: (unquote\
    \ consuming)\n  location...:\n   /tmp/tmpr87cspjz.rkt:16:32\n  context...:\n \
    \  /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b count)\n    (if (eq? count 0)\n        a\n        (fib-iter b (+ a b) (-\
    \ count 1))))\n  (fib-iter 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b cnt)\n    (if (= cnt n) a\n        (fib-iter b (+ a b) (+ cnt 1))))\n  (fib-iter\
    \ 0 1 1))\n```\n\n```scheme\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: "'`````scheme\n"
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30yyjg1q.rkt:23:4\n\
    actual:     34\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp30yyjg1q.rkt:24:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp30yyjg1q.rkt:25:4\nactual:     13\nexpected:\
    \   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp30yyjg1q.rkt:26:4\nactual:     55\nexpected:   89\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30yyjg1q.rkt:27:4\n\
    actual:     89\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let loop ((n n)\
    \ (a 0) (b 1))\n    (if (= n 0)\n        a\n        (loop (- n 1) b (+ a b)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib2 n\
    \ m a b)\n    (if (= n m)\n        a\n        (fib2 n (+ m 1) b (+ a b))))\n \
    \ (fib2 n 1 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6jalbeq4.rkt:22:4\n\
    actual:     21\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6jalbeq4.rkt:24:4\nactual:     8\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6jalbeq4.rkt:25:4\nactual:     34\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6jalbeq4.rkt:26:4\nactual:     55\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else\n     (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b count)\n    (if (= count 0)\n        a\n        (fib-iter b (+ a b) (- count\
    \ 1))))\n  (fib-iter 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n```\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxbeu46ih.rkt:17:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((< n\
    \ 2) n)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else\n         (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqyfuyd10.rkt:14:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpqyfuyd10.rkt:14:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(zero? n)\
    \ 1]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1imljsvx.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1imljsvx.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1imljsvx.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1imljsvx.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (match n\n    [(0)\
    \ 1]\n    [(1) 1]\n    [(number) (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2vgfualj.rkt:12:5: match: syntax error in pattern\n  in: (0)\n\
    \  location...:\n   /tmp/tmp2vgfualj.rkt:12:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b p q count)\n    (if (= count 0)\n        b\n        (fib-iter (+ (* a q)\
    \ (* b q) (* a p))\n                  (+ (* b p) (* a q))\n                  p\n\
    \                  q\n                  (- count 1))))\n  (fib-iter 1 0 0 1 n))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let recur ((n n)\
    \ (a 0) (b 1))\n    (cond\n      ((= n 0) a)\n      ((= n 1) b)\n      (else (recur\
    \ (- n 1) b (+ a b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(zero? n)\
    \ 0]\n        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((< n\
    \ 2) n)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((= n\
    \ 1) 1)\n    ((= n 2) 1)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    ((= n\
    \ 1) 1)\n    ((= n 2) 1)\n    (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((< n 2) 1)\n\
    \        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpey07dh2w.rkt:19:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpey07dh2w.rkt:21:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpey07dh2w.rkt:22:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpey07dh2w.rkt:23:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-helper\
    \ n1 n2 i)\n    (if (= i 1)\n        n1\n        (fib-helper n2 (+ n1 n2) (- i\
    \ 1))))\n  (fib-helper 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_rb1xrz.rkt:22:4\n\
    actual:     34\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6_rb1xrz.rkt:23:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp6_rb1xrz.rkt:24:4\nactual:     13\nexpected:\
    \   21\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6_rb1xrz.rkt:25:4\nactual:     55\nexpected:   89\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_rb1xrz.rkt:26:4\n\
    actual:     89\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ k a b)\n    (if (= k 0) a\n        (fib-iter (- k 1) b (+ a b))))\n  (fib-iter\
    \ n 0 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((< n 2) 1)\n\
    \        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54psawtz.rkt:19:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp54psawtz.rkt:21:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp54psawtz.rkt:22:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp54psawtz.rkt:23:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let loop ((n n)\
    \ (fib0 0) (fib1 1))\n    (cond ((= n 0) fib0)\n          ((= n 1) fib1)\n   \
    \       (else (loop (- n 1) fib1 (+ fib0 fib1))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((< n 2) n)\n\
    \        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n```\n\n\
    ```haskell\n-- Return n-th Fibonacci number.\n-- >>> fib 10\n-- 55\n-- >>> fib\
    \ 1\n-- 1\n-- >>> fib 8\n-- 21\nfib :: Int -> Int\nfib n\n  | n == 1 = 1\n  |\
    \ n == 2 = 1\n  | otherwise = fib (n - 1) + fib (n - 2)\n```\n\n### [Problem 12](https://leetcode.com/problems/integer-to-roman/)\n\
    \nRoman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`,\
    \ `C`, `D` and `M`.\n\n```\nSymbol       Value\nI             1\nV           \
    \  5\nX             10\nL             50\nC             100\nD             500\n\
    M             1000\n```\n\nFor example, two is written as `II` in Roman numeral,\
    \ just two one's added together. Twelve is written as, `XII`, which is simply\
    \ `X` + `II`. The number twenty seven is written as `XXVII`, which is `XX` + `V`\
    \ + `II`.\n\nRoman numerals are usually written largest to smallest from left\
    \ to right. However, the numeral for four is not `IIII`. Instead, the number four\
    \ is written as `IV`. Because the one is before the five we subtract it making\
    \ four. The same principle applies to the number nine, which is written as `IX`.\
    \ There are six instances where subtraction is used:\n\n- `I` can be placed before\
    \ `V` (5) and `X` (10) to make 4 and 9.\n- `X` can be placed before `L` (50) and\
    \ `C` (100) to make 40 and 90.\n- `C` can be placed before `D` (500) and `M` (1000)\
    \ to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral. Input\
    \ is guaranteed to be within the range from 1 to 3999.\n\n#### Racket\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpli_gdhev.rkt:28:2: read-syntax: end-of-file following `|` in symbol\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib-iter\
    \ a b count)\n    (if (= count 0)\n        a\n        (fib-iter b (+ a b) (- count\
    \ 1))))\n  (fib-iter 0 1 n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (let ((n-1 (sub1\
    \ n))\n        (n-2 (sub1 (sub1 n))))\n    (cond\n      ((<= n 2) 1)\n      (else\
    \ (+ (fib n-1) (fib n-2))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (define (fib_iter\
    \ k a b)\n    (if (= k n)\n        b\n        (fib_iter (+ k 1) b (+ a b))))\n\
    \  (fib_iter 1 1 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqutdbkzq.rkt:22:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqutdbkzq.rkt:24:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqutdbkzq.rkt:25:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqutdbkzq.rkt:26:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (letrec ([fib-iter\
    \ (lambda (a b p q count)\n                       (if (= count 0)\n          \
    \                 b\n                           (fib-iter (+ (* a q) (* b q) (*\
    \ b p))\n                                     (+ (* a p) (* b q))\n          \
    \                           p\n                                     q\n      \
    \                               (- count 1))))])\n    (fib-iter 1 0 0 1 n)))\n\
    ```\n\n## 4.4\n\n```scheme\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_bzmlss0.rkt:22:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1) 1]\n    [(= n 2) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (or (= n 1)\
    \ (= n 2))\n      1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n\
    \ 1)\n     1]\n    [(= n 2)\n     1]\n    [else\n     (+ (fib (- n 1)) (fib (-\
    \ n 2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1)\
    \ 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n\
    \    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 1)\n  \
    \    1\n      (if (= n 2)\n          1\n          (+ (fib (- n 1)) (fib (- n 2))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n\
    \    (check-equal? (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n  \
    \  (check-equal? (candidate 8) 21)\n    (check-equal? (candidate 11) 89)\n   \
    \ (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 1) 1]\n\
    \        [(= n 2) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n```\n\n\
    [Top](#top)\n\n---\n\n#### <a name=\"gcd\"></a>Greatest Common Divisor\n\n*gcd.rkt*\n\
    \n``` #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate fib))\n    (check-equal? (candidate 10) 55)\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 8) 21)\n    (check-equal? (candidate\
    \ 11) 89)\n    (check-equal? (candidate 12) 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1q4jbyc9.rkt:16:6: read-syntax: bad syntax `#to`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (match n\n    [0\
    \ 0]\n    [1 1]\n    [n (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond\n    [(zero?\
    \ n) 0]\n    [(= n 1) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond ((= n 1) 1)\n\
    \        ((= n 2) 1)\n        (else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
