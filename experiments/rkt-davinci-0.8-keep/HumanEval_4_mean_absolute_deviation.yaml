name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
  \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs (-\
    \ x mean))) numbers))))\n", "  (let ((mean (mean numbers)))\n    (mean (map (lambda\
    \ (x) (abs (- x mean))) numbers))))\n", "  (define (absolute-difference a b)\n\
    \    (abs (- a b)))\n  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (avg-absolute-differences numbers)\n    (define mean-of-numbers\
    \ (mean numbers))\n    (define absolute-differences (map (lambda (x) (absolute-difference\
    \ x mean-of-numbers)) numbers))\n    (mean absolute-differences))\n  (avg-absolute-differences\
    \ numbers))\n", "  (let\n    ;; calculate_sum\n    ;; (listof number) -&gt; number\n\
    \    ((calculate_sum nums)\n      (cond\n        [(empty? nums) 0]\n        [else\
    \ (+ (first nums) (calculate_sum (rest nums)))]))\n    ;; calculate_mean\n   \
    \ ;; (listof number) -&gt; number\n    ((calculate_mean nums)\n      (/ (calculate_sum\
    \ nums) (length nums)))\n    ;; calculate_absolute_deviation\n    ;; number -&gt;\
    \ number\n    ((calculate_absolute_deviation num)\n      (abs (- num (calculate_mean\
    \ numbers))))\n    ;; calculate_absolute_deviations\n    ;; (listof number) -&gt;\
    \ (listof number)\n    ((calculate_absolute_deviations nums)\n      (cond\n  \
    \      [(empty? nums) '()]\n        [else (cons (calculate_absolute_deviation\
    \ (first nums))\n                    (calculate_absolute_deviations (rest nums)))]))\n\
    \    ;; calculate_average\n    ;; (listof number) -&gt; number\n    ((calculate_average\
    \ nums)\n      (/ (calculate_sum nums) (length nums)))\n    (calculate_average\
    \ (calculate_absolute_deviations numbers))))\n</code>\nTest 1\n<code>#lang racket\n",
  "  (define mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda\
    \ (n) (abs (- n mean))) numbers)) (length numbers)))\n", "  (define numbers_mean\
    \ (mean numbers))\n  (define numbers_mean_deviation (map (lambda (x) (abs (- x\
    \ numbers_mean))) numbers))\n  (mean numbers_mean_deviation))\n", "  (define (get-mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (get-abs-distance\
    \ number)\n    (abs (- number (get-mean numbers))))\n  (/ (apply + (map get-abs-distance\
    \ numbers)) (length numbers)))\n", "  (define n (length numbers))\n  (define m\
    \ (mean numbers))\n  (mean (map (\u03BB (x) (abs (- x m))) numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (foldl + 0 numbers) (length numbers)))\n  (define (absolute\
    \ a)\n    (if (&lt; a 0) (- a) a))\n  (let* ([numbers-mean (mean numbers)]\n \
    \        [differences (map (lambda (n) (absolute (- n numbers-mean))) numbers)])\n\
    \    (/ (foldl + 0 differences) (length differences))))\n", "  (define mean (apply\
    \ + numbers))\n  (define squared_diffs (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (define sum_squared_diffs (apply + squared_diffs))\n  (/ sum_squared_diffs\
    \ (length numbers)))\n", "  (define (mean_of numbers)\n    (/ (foldl + 0 numbers)\
    \ (length numbers)))\n  (define (absolute-difference x)\n    (if (&lt; x 0)\n\
    \        (- x)\n        x))\n  (define (absolute-differences-from-mean numbers)\n\
    \    (map (lambda (x) (absolute-difference (- x (mean_of numbers)))) numbers))\n\
    \  (/ (foldl + 0 (absolute-differences-from-mean numbers)) (length numbers)))\n",
  "  (define n (length numbers))\n  (define sum (apply + numbers))\n  (define x_mean\
    \ (/ sum n))\n  (define deviations\n    (map\n      (lambda (x) (abs (- x x_mean)))\n\
    \      numbers))\n  (/ (apply + deviations) n))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n    (if\
    \ (&lt; x 0)\n        (- x)\n        x))\n  (define (absolute-difference-from-mean\
    \ number)\n    (absolute (- number (mean numbers))))\n  (define (absolute-differences\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n", "  (let* ([mean (mean numbers)]\n         [deviations\
    \ (map (lambda (n) (abs (- n mean))) numbers)])\n    (mean deviations)))\n", " \
    \ (define (abs-diff num)\n    (abs (- num (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs\
    \ (- x mean))) numbers))))\n", "  (define (get-deviation-sum numbers)\n    (if\
    \ (null? numbers)\n        0\n        (+ (absolute (- (car numbers) (mean numbers)))\n\
    \           (get-deviation-sum (cdr numbers)))))\n  (/ (get-deviation-sum numbers)\
    \ (length numbers)))\n", "  (define mean-num (mean numbers))\n  (mean (map (lambda\
    \ (x) (abs (- x mean-num))) numbers)))\n", "  (define centerpoint (mean numbers))\n\
    \  (define absolute-differences\n    (map (lambda (x) (abs (- x centerpoint)))\
    \ numbers))\n  (mean absolute-differences))\n", "  (define (abs-of-subtraction\
    \ x y)\n    (if (< x y) (- y x) (- x y)))\n  (define (avg-list lst)\n    (/ (apply\
    \ + lst) (length lst)))\n  (define (abs-deviation-from-avg lst)\n    (map (lambda\
    \ (x) (abs-of-subtraction x (avg-list lst))) lst))\n  (avg-list (abs-deviation-from-avg\
    \ numbers)))", "  (define (calculate centerpoint numbers)\n    (cond\n      [(empty?\
    \ numbers) 0]\n      [else (+ (abs (- (first numbers) centerpoint))\n        \
    \       (calculate centerpoint (rest numbers)))]))\n  (define (mean numbers)\n\
    \    (/ (calculate 0 numbers) (length numbers)))\n  (/ (calculate (mean numbers)\
    \ numbers) (length numbers)))\n", "  (let ([total-abs-diff (apply + (map (lambda\
    \ (x) (abs (- x (mean numbers)))) numbers))])\n    (/ total-abs-diff (length numbers))))\n",
  "  (define centerpoint (/ (sum numbers) (length numbers)))\n  (define diffs (map\
    \ (lambda (x) (abs (- x centerpoint))) numbers))\n  (/ (sum diffs) (length diffs)))\n",
  "  (define centerpoint (mean numbers))\n  (define absolute-distances (map (lambda\
    \ (x) (abs (- x centerpoint))) numbers))\n  (mean absolute-distances))\n", " \
    \ (require math)\n  (define l (length numbers))\n  (define (sum xs)\n    (if (null?\
    \ xs)\n        0\n        (+ (car xs) (sum (cdr xs)))))\n  (define (abs x)\n \
    \   (if (< x 0)\n        (- x)\n        x))\n  (define avg (/ (sum numbers) l))\n\
    \  (/ (sum (map (lambda (x) (abs (- x avg))) numbers)) l))\n", "  (let\n    ([mean\
    \ (mean numbers)])\n    (average (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map (lambda (n) (abs (- n mean))) numbers))))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (&lt; x 0)\n        (- x)\n        x))\n  (define (deviation\
    \ x)\n    (absolute (- x (average numbers))))\n  (define (deviations)\n    (map\
    \ deviation numbers))\n  (define (average-of-deviations)\n    (average (deviations)))\n\
    \  (average-of-deviations))\n</code>\n", "  (define mean (mean numbers))\n  (define\
    \ mean_absolute_deviations (map (\u03BB (n) (abs (- n mean))) numbers))\n  (mean\
    \ mean_absolute_deviations))\n", "  (define (deviation n)\n    (abs (- n (mean\
    \ numbers))))\n  (mean (map deviation numbers)))\n", "  (letrec ([mean (average\
    \ numbers)]\n           [abs-mean-diff (lambda (n) (abs (- n mean)))]\n      \
    \     [distances (map abs-mean-diff numbers)])\n    (average distances)))\n",
  "  (define numbers-mean (mean numbers))\n  (define absolute-differences (map (lambda\
    \ (x) (abs (- x numbers-mean))) numbers))\n  (mean absolute-differences))\n",
  "  (define numbers-mean (mean numbers))\n  (define absolute-diffs (map (lambda (el)\
    \ (abs (- el numbers-mean))) numbers))\n  (mean absolute-diffs))\n", "  (let ([len\
    \ (length numbers)])\n    (average (map (lambda (number)\n                   \
    \ (abs (- number (average numbers))))\n                  numbers))))\n", "  (define\
    \ mean (mean numbers))\n  (define differences (map abs-difference numbers mean))\n\
    \  (mean differences))\n", "  (mean (map (lambda (x) (abs (- x (mean numbers))))\
    \ numbers)))\n</code>\nWhile it's not difficult to spot the issue here, running\
    \ this code in the Racket REPL produces a rather cryptic error message:\n<code>#lang\
    \ racket\n", "  (define (square x) (* x x))\n  (define (sum-of-squares numbers)\n\
    \    (apply + (map square numbers)))\n  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (average-of-absolute-differences numbers)\n\
    \    (average (map (lambda (x) (abs (- x (average numbers)))) numbers)))\n  (average-of-absolute-differences\
    \ numbers))\n", "  (define (deviation n)\n    (abs (- n (mean numbers))))\n  (mean\
    \ (map deviation numbers)))\n", "  (define mean\n    (apply / (foldr + 0 numbers)))\n\
    \  (apply / (map (lambda (x) (abs (- x mean))) numbers)))\n", "  (define mean\
    \ (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean diffs))\n", "  (mean (map (lambda (n) (abs (- n (mean numbers)))) numbers)))\n",
  "  (define (deviation x)\n    (exact->inexact (abs (- x x_mean))))\n  (define (average\
    \ xs)\n    (/ (apply + xs) (length xs)))\n  (define x_mean (average numbers))\n\
    \  (average (map deviation numbers)))\n</code>\n", "  (define mean\n    (for/sum\
    \ ([x numbers])\n      x))\n  (define numbers_mean\n    (/ mean (length numbers)))\n\
    \  (define absolute_deviations\n    (for/list ([x numbers])\n      (abs (- x numbers_mean))))\n\
    \  (/ (for/sum ([x absolute_deviations])\n       x)\n     (length absolute_deviations)))\n",
  "  (define squared_sum\n    (apply + (map (lambda (x) (* x x)) numbers)))\n  (define\
    \ x_mean (/ squared_sum (length numbers)))\n  (define abs_diffs\n    (map (lambda\
    \ (x) (abs (- x x_mean))) numbers))\n  (/ (apply + abs_diffs) (length numbers)))\n",
  "  (define (average numbers)\n    (/ (sum numbers) (length numbers)))\n  (define\
    \ (sum numbers)\n    (if (null? numbers)\n        0\n        (+ (car numbers)\
    \ (sum (cdr numbers)))))\n  (define (map-abs numbers)\n    (if (null? numbers)\n\
    \        '()\n        (cons (abs (- (car numbers) (average numbers)))\n      \
    \        (map-abs (cdr numbers)))))\n  (average (map-abs numbers)))\n", "  (local\
    \ ((define numbers-length (length numbers)))\n    (let ([avg-fn (mean numbers)])\n\
    \      (/ (apply + (map (lambda (x) (abs (- x (avg-fn)))) numbers))\n        \
    \ numbers-length))))\n", "  (let* ((numerator (apply + (map (lambda (x) (abs (-\
    \ x (mean numbers)))) numbers)))\n         (denominator (length numbers)))\n \
    \   (/ numerator denominator)))\n", "  (local [;; Calculate mean\n          (define\
    \ mean\n            (reduce (lambda (a b) (+ a b))\n                    numbers\n\
    \                    0)\n            (/ mean (length numbers)))\n          ;;\
    \ Calculate squared difference between all elements in list\n          ;; and\
    \ mean value.\n          (define squares\n            (map (lambda (x) (expt (-\
    \ x mean) 2))\n                 numbers))\n          ;; Calculate mean of squared\
    \ differences\n          (define mean-squared-deviation\n            (reduce (lambda\
    \ (a b) (+ a b))\n                    squares\n                    0)\n      \
    \      (/ mean-squared-deviation (length numbers)))\n          ;; Calculate standard\
    \ deviation as square root of mean of\n          ;; squared differences\n    \
    \      (define standard-deviation (sqrt mean-squared-deviation))]\n    standard-deviation))\n",
  "  (define n (length numbers))\n  (define mean (mean numbers))\n  (mean (map (lambda\
    \ (number) (abs (- number mean))) numbers)))\n", "  (define (mads numbers)\n \
    \   (for/fold ([mads 0]) ([n (in-list numbers)])\n      (+ mads (abs (- n (mean\
    \ numbers))))))\n  (/ (mads numbers) (length numbers)))\n", "  (define centerpoint\
    \ (mean numbers))\n  (define absolute-deviations\n    (map (lambda (x) (abs (-\
    \ x centerpoint))) numbers))\n  (mean absolute-deviations))\n", "  (define (deviation-from-mean\
    \ n)\n    (- n (mean numbers)))\n  (define (absolute n)\n    (if (&lt; n 0)\n\
    \        (- n)\n        n))\n  (define (absolute-deviations n)\n    (map absolute\
    \ (map deviation-from-mean n)))\n  (mean (absolute-deviations numbers)))\n", " \
    \ (define (distance-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (mean (map distance-from-mean numbers)))\n```\n\n```\n>>> (mean_absolute_deviation\
    \ (list 1.0 2.0 3.0 4.0))\n1.0\n```\n\n### Median Absolute Deviation\nThe median\
    \ absolute deviation is a robust measure of the variability of a\nunivariate sample\
    \ of quantitative data. It is more resilient to outliers in\na dataset.\n\n```",
  "  (define (abs-diff n)\n    (cond\n      [(< n (mean numbers)) (- (mean numbers)\
    \ n)]\n      [else (- n (mean numbers))]))\n  (cond\n    [(= (length numbers)\
    \ 0) 0]\n    [else (/ (foldl + 0 (map abs-diff numbers)) (length numbers))]))\n",
  "  (define (abs-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (abs-differences-from-mean numbers)\n    (map abs-difference-from-mean\
    \ numbers))\n  (mean (abs-differences-from-mean numbers)))\n", "  (define (add-up\
    \ result number)\n    (+ result number))\n  (define (abs-diff-from-mean result\
    \ number)\n    (define (square-of number)\n      (* number number))\n    (define\
    \ (sqrt number)\n      (expt number 0.5))\n    (define (abs number)\n      (if\
    \ (> number 0)\n          number\n          (- 0 number)))\n    (define (distance-from-mean\
    \ number)\n      (abs (- number (mean numbers))))\n    (+ result (distance-from-mean\
    \ number)))\n  (define (mean numbers)\n    (/ (foldl add-up 0 numbers) (length\
    \ numbers)))\n  (define (foldl function result list)\n    (if (null? list)\n \
    \       result\n        (foldl function (function result (car list)) (cdr list))))\n\
    \  (define (length list)\n    (foldl (lambda (result item) (+ result 1)) 0 list))\n\
    \  (/ (foldl abs-diff-from-mean 0 numbers) (length numbers)))\n```\n\n## Scala\n\
    \n### Recursion\n\n```scala\ndef sumInts(from: Int, to: Int): Int = {\n  if (from\
    \ > to) 0\n  else from + sumInts(from + 1, to)\n}\n\ndef sumCubes(from: Int, to:\
    \ Int): Int = {\n  if (from > to) 0\n  else cube(from) + sumCubes(from + 1, to)\n\
    }\n\ndef cube(x: Int): Int = x * x * x\n\ndef sumFactorials(from: Int, to: Int):\
    \ Int = {\n  if (from > to) 0\n  else factorial(from) + sumFactorials(from + 1,\
    \ to)\n}\n\ndef factorial(x: Int): Int = if (x == 0) 1 else x * factorial(x -\
    \ 1)\n```\n\n### Tail Recursion\n\n```scala\ndef sumInts(from: Int, to: Int):\
    \ Int = {\n  def sumIntsHelper(from: Int, to: Int, accumulator: Int): Int = {\n\
    \    if (from > to) accumulator\n    else sumInts", "  (let ([m (mean numbers)])\n\
    \    (if (empty? numbers)\n        0\n        (/ (sum (map (lambda (x) (abs (-\
    \ x m))) numbers))\n           (length numbers)))))\n", "  (define mean (mean\
    \ numbers))\n  (mean (absolute-difference numbers mean)))\n", "  (define mean\
    \ (mean numbers))\n  (mean (abs-diffs numbers mean)))\n", "  (define mean (list_mean\
    \ numbers))\n  (list_mean (map abs (map (- mean) numbers))))\n", "  (define mean\
    \ (mean numbers))\n  (define deviation (map (lambda (number) (abs (- number mean)))\
    \ numbers))\n  (mean deviation))\n", "  (define mean (/ (apply + numbers) (length\
    \ numbers)))\n  (/ (apply + (map (lambda (n) (abs (- n mean))) numbers)) (length\
    \ numbers)))\n", "  (define (deviation number)\n    (abs (- number mean)))\n \
    \ (define (sumsq lst)\n    (cond ((null? lst) 0)\n          (else (+ (sqr (car\
    \ lst)) (sumsq (cdr lst))))))\n  (define (sqr x) (* x x))\n  (define (abs x) (if\
    \ (< x 0) (- x) x))\n  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define mean (mean numbers))\n  (/ (apply + (map deviation numbers))\
    \ (length numbers)))\n\n", "  (define (average lst)\n    (/ (apply + lst) (length\
    \ lst)))\n  (define (mads numbers)\n    (map (lambda (x) (abs (- x (average numbers))))\
    \ numbers))\n  (average (mads numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define diffs (map (lambda (num) (abs (- num mean))) numbers))\n  (mean diffs))\n",
  "  (define centerpoint (mean numbers))\n  (define differences (map (\u03BB (x) (abs\
    \ (- x centerpoint))) numbers))\n  (mean differences))\n", "  (define (sum l)\n\
    \    (foldl + 0 l))\n  (define (mean l)\n    (/ (sum l) (length l)))\n  (define\
    \ (abs-diff x)\n    (abs (- x (mean numbers))))\n  (/ (sum (map abs-diff numbers))\
    \ (length numbers)))\n", "  (define (absolute-difference-from-mean x)\n    (abs\
    \ (- x (average numbers))))\n  (average (map absolute-difference-from-mean numbers)))\n",
  "  (let* ([mean-of-numbers (mean numbers)]\n         [absolute-differences (map\
    \ (\u03BB (x) (abs (- x mean-of-numbers))) numbers)])\n    (mean absolute-differences)))\n",
  "  (let ([numbers-mean (mean numbers)])\n    (mean (map (lambda (x) (abs (- x numbers-mean)))\
    \ numbers))))\n", "  (define mean (mean numbers))\n  (define deviations (map (\u03BB\
    \ (x) (abs (- x mean))) numbers))\n  (mean deviations))\n", "  (define N (length\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) N))\n  (define\
    \ (deviation numbers)\n    (map absv (- numbers (average numbers))))\n  (average\
    \ (deviation numbers)))\n```\n\n### Median Absolute Deviation\nMedian Absolute\
    \ Deviation is the average absolute difference between each\nelement and a centerpoint\
    \ (median in this case):\n\n```racket\n#lang racket\n", "  (let* ([numbers-count\
    \ (length numbers)]\n         [numbers-mean (apply + numbers) (* 1.0 (/ numbers-count))])\n\
    \    (apply +\n           (map (lambda (number) (abs (- number numbers-mean)))\n\
    \                numbers))))\n", "  (define (mean xs)\n    (/ (foldl + 0 xs) (length\
    \ xs)))\n  (define (abs x)\n    (if (< x 0) (- x) x))\n  (define (average-of-absolute-differences\
    \ xs)\n    (foldl + 0 (map (lambda (x) (abs (- x (mean xs)))) xs)))\n  (/ (average-of-absolute-differences\
    \ numbers) (length numbers)))\n```\n\n### C++\n\n```C++\n/*\n  For a given list\
    \ of input numbers, calculate Mean Absolute Deviation\n  around the mean of this\
    \ dataset.\n  Mean Absolute Deviation is the average absolute difference between\
    \ each\n  element and a centerpoint (mean in this case):\n  MAD = average | x\
    \ - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n*/\n\
    #include <vector>\n#include <numeric>\n#include <cmath>\n\ntemplate <typename\
    \ T>\ndouble mean_absolute_deviation(const std::vector<T>& numbers) {\n  const\
    \ auto mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n\
    \  const auto average_of_absolute_differences = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0.0,\n    [&mean](const double acc, const T& num) {\n      return\
    \ acc + std::abs(num - mean);\n    });\n  return average_of_absolute_differences\
    \ / numbers.size();\n}\n```\n\n### Clojure\n\n```Clojure", "  (let ([mean (/ (apply\
    \ + numbers) (length numbers))])\n    (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n       (length numbers))))\n", "  (let* ([mean (apply + numbers)]\n\
    \         [count (list-length numbers)]\n         [mad (for/sum ([i numbers])\n\
    \                  (abs (- i mean)))])\n    (/ mad count)))\n", "  (let ((numbers-mean\
    \ (/ (apply + numbers) (length numbers))))\n    (/ (apply + (map (lambda (x) (abs\
    \ (- x numbers-mean))) numbers))\n       (length numbers))))\n", "  (let ([mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (absolute x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define\
    \ (mean_absolute_deviation_iter numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_iter (cdr numbers)\n\
    \                                      (+ sum (absolute (- (car numbers) (/ sum\
    \ count))))\n                                      (+ count 1))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (let ((n (length numbers))\n        (mean (apply + numbers))\n\
    \        (mad 0))\n    (for ((x numbers))\n      (set! mad (+ mad (abs (- x mean)))))\n\
    \    (/ mad n)))\n", "  (define numbers_sum\n    (apply + numbers))\n  (define\
    \ numbers_mean\n    (/ numbers_sum (length numbers)))\n  (define diffs\n    (map\
    \ (lambda (num) (abs (- num numbers_mean))) numbers))\n  (/ (apply + diffs) (length\
    \ diffs)))\n", "  (define mean_value (/ (apply + numbers) (length numbers)))\n\
    \  (/ (apply + (map (\u03BB (x) (abs (- x mean_value))) numbers)) (length numbers)))\n",
  "  (define mean (mean numbers))\n  (define sub-mean-abs-list (map (lambda (n) (abs\
    \ (- n mean))) numbers))\n  (mean sub-mean-abs-list))\n```\n\n```scheme\n#lang\
    \ racket\n", "  (define (deviation)\n    (define mean (average numbers))\n   \
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (average (deviation)))\n", " \
    \ (define (deviation n)\n    (absolute (- n x_mean)))\n  (define x_mean (mean\
    \ numbers))\n  (define deviations (map deviation numbers))\n  (mean deviations))\n",
  "  (cond [(null? numbers) 0]\n        [else (/ (reduce + (map (lambda (x) (abs (-\
    \ x (mean numbers)))) numbers))\n                 (length numbers))]))\n", " \
    \ (define (deviation mean number)\n    (abs (- mean number)))\n  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define mean (mean\
    \ numbers))\n  (/ (apply + (map (curryr deviation mean) numbers)) (length numbers)))\n",
  "  (define (abs-diff x)\n    (abs (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (deviation n)\n    (abs (- n (average numbers))))\n\
    \  (average (map deviation numbers)))\n", "  (define dataset-mean (mean numbers))\n\
    \  (define distances\n    (map (lambda (x) (abs (- x dataset-mean))) numbers))\n\
    \  (mean distances))\n", "  (define n (length numbers))\n  (define sum-of-numbers\
    \ (sum numbers))\n  (define sum-of-squares (sum (map (\u03BB (x) (* x x)) numbers)))\n\
    \  (define mean (/ sum-of-numbers n))\n  (define mean-of-squares (/ sum-of-squares\
    \ n))\n  (define standard-deviation (sqrt (- mean-of-squares (* mean mean))))\n\
    \  (define absolute-deviations (map (\u03BB (x) (abs (- x mean))) numbers))\n\
    \  (/ (sum absolute-deviations) n))\n", "  (define (helper numbers)\n    (if (null?\
    \ numbers)\n        (list 0 0)\n        (let ([n (car numbers)])\n          (let-values\
    \ ([(sums n_samples) (helper (cdr numbers))])\n            (list (+ sums n) (+\
    \ n_samples 1))))))\n  (define (sums n_samples)\n    (define (res) (/ sums n_samples))\n\
    \    (if (= n_samples 0)\n        0\n        (res)))\n  (let-values ([(sums n_samples)\
    \ (helper numbers)])\n    (let ([mean (sums n_samples)])\n      (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers)))))", "  (define mad 0)\n  (define mean\
    \ (mean numbers))\n  (for ([x numbers])\n    (set! mad (+ mad (abs (- x mean)))))\n\
    \  (/ mad (length numbers)))\n", "  (let ([mean (mean numbers)])\n    (mean (map\
    \ (lambda (x) (abs (- x mean))) numbers))))\n", "  (define (average lst) (/ (apply\
    \ + lst) (length lst)))\n  (define (absolute x) (if (&lt; x 0) (- x) x))\n  (define\
    \ (squared x) (* x x))\n  (define (diffs lst)\n    (map (lambda (x) (absolute\
    \ (- x (average lst)))) lst))\n  (average (diffs numbers)))\n", "  (define mean\n\
    \    (apply + numbers)\n    (/ mean (length numbers)))\n  (define deviations\n\
    \    (for/list ([x numbers])\n        (abs (- x mean))))\n  (apply + deviations)\n\
    \  (/ mean (length deviations)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (deviation number)\n    (abs (- number\
    \ (mean numbers))))\n  (/ (apply + (map deviation numbers)) (length numbers)))\n\
    ```\n\n```racket\n#lang racket\n", "  (define (absdiff x)\n    (if (< x 0) (-\
    \ x) x))\n  (define (mean lst)\n    (/ (apply + lst) (length lst)))\n  (define\
    \ (calc-MAD lst m)\n    (mean (map (lambda (x) (absdiff (- x m))) lst)))\n  (calc-MAD\
    \ numbers (mean numbers)))\n```\n\n```racket\n#lang racket\n", "  (define n (length\
    \ numbers))\n  (define mean (mean numbers))\n  (define diffs (map (lambda (x)\
    \ (abs (- x mean))) numbers))\n  (/ (sum diffs) n))\n", "  (let* ([mean_of_numbers\
    \ (mean numbers)]\n         [numbers_mean_diffs (map (lambda (x) (abs (- x mean_of_numbers)))\
    \ numbers)])\n    (mean numbers_mean_diffs)))\n", "  (let* ([numbers-length (length\
    \ numbers)]\n         [sum (reduce + numbers)]\n         [mean (/ sum numbers-length)])\n\
    \    (/ (reduce + (map (lambda (n) (abs (- n mean))) numbers))\n       numbers-length)))\n",
  "  (define mean (mean numbers))\n  (define deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers))\n  (mean deviations))\n", "  (define N (length numbers))\n\
    \  (define sum (accumulate + 0 numbers))\n  (define mean (/ sum N))\n  (define\
    \ diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (accumulate + 0 diffs)\
    \ N))\n", "  (define (sum numbers)\n    (cond\n      [(empty? numbers) 0]\n  \
    \    [else (+ (first numbers) (sum (rest numbers)))]))\n  (define (len numbers)\n\
    \    (cond\n      [(empty? numbers) 0]\n      [else (+ 1 (len (rest numbers)))]))\n\
    \  (define (abs-diff-from-mean n)\n    (abs (- n (/ (sum numbers) (len numbers)))))\n\
    \  (/ (sum (map abs-diff-from-mean numbers)) (len numbers)))\n\n", "  (define\
    \ (absolute n)\n    (if (&lt; n 0) (- n) n))\n  (define mean (foldl (lambda (i\
    \ a) (+ a i)) 0 numbers))\n  (define n (length numbers))\n  (define sum (foldl\
    \ (lambda (i a) (+ a (absolute (- i mean)))) 0 numbers))\n  (/ sum n))\n", " \
    \ (local [(define x_mean (mean numbers))]\n    (mean (map abs (map (lambda (x)\
    \ (- x x_mean)) numbers)))))\n", "  (define (sum lst)\n    (if (null? lst)\n \
    \       0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (avg lst)\n    (/\
    \ (sum lst) (length lst)))\n  (define (diff_sum lst)\n    (if (null? lst)\n  \
    \      0\n        (+ (abs (- (car lst) (avg lst))) (diff_sum (cdr lst)))))\n \
    \ (/ (diff_sum numbers) (length numbers)))\n", "  (define centerpoint (mean numbers))\n\
    \  (define absolute-deviations (map (lambda (x) (abs (- x centerpoint))) numbers))\n\
    \  (mean absolute-deviations))\n", "  (define mean_of_numbers\n    (apply + numbers))\n\
    \  (define number_of_numbers\n    (length numbers))\n  (define all_absolute_deviations\n\
    \    (map\n      (lambda (number)\n        (abs (- number mean_of_numbers)))\n\
    \      numbers))\n  (apply + all_absolute_deviations)\n  (/ number_of_numbers))\n",
  "  (define mean (/ (sum numbers) (length numbers)))\n  (define absolute-differences\
    \ (for/list ([num numbers])\n                                (abs (- num mean))))\n\
    \  (/ (sum absolute-differences) (length absolute-differences)))\n", "  (let ([mean\
    \ (apply + numbers)])\n    (/ (apply + (map absval\n                     (map\
    \ (\u03BB (x) (- x mean))\n                          numbers)))\n       (length\
    \ numbers))))\n", "  (define mean (/ (apply + numbers) (length numbers)))\n  (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers)) (length numbers)))\n",
  "  (mean (map (\u03BB (x) (abs (- x (mean numbers)))) numbers)))\n", "  (let ([mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (accumulate-deviations result next)\n    (define (absolute n)\n     \
    \ (if (&lt; n 0)\n          (- n)\n          n))\n    (set! result (cons (absolute\
    \ (- next (mean numbers))) result))\n    result)\n  (define (mean numbers)\n \
    \   (/ (foldl + 0 numbers) (length numbers)))\n  (define result (foldl accumulate-deviations\
    \ '() numbers))\n  (/ (foldl + 0 result) (length result)))\n</code>\n<code>#lang\
    \ racket\n", "  (define centerpoint (/ (apply + numbers) (length numbers)))\n\
    \  (/ (apply + (map (lambda (n) (abs (- n centerpoint))) numbers))\n     (length\
    \ numbers)))\n", "  (define centerpoint (mean numbers))\n  (define dev (map (lambda\
    \ (x) (abs (- x centerpoint))) numbers))\n  (mean dev))\n", "  (define n (length\
    \ numbers))\n  (define centerpoint (average numbers))\n  (define diffs (map (lambda\
    \ (x) (abs (- x centerpoint))) numbers))\n  (average diffs))\n", "  (let ([mean\
    \ (mean numbers)])\n    (average (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define mean\n    (define (all-numbers)\n      (foldl + 0 numbers))\n    (/ (all-numbers)\
    \ (length numbers)))\n  (define deviations\n    (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (define (all-deviations)\n    (foldl + 0 deviations))\n  (/ (all-deviations)\
    \ (length deviations)))\n", "  (require 'list-utils.rkt)\n  (define (absolute\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (average numbers)\n    (/ (sum numbers)\
    \ (length numbers)))\n  (define (difference x)\n    (- x (average numbers)))\n\
    \  (define (abs-difference x)\n    (absolute (difference x)))\n  (average (map\
    \ abs-difference numbers)))\n</code>\nThis is a fairly straightforward implementation\
    \ of that algorithm, but it's not exactly great with regards to performance. \n\
    Because Racket allows for multiple values, I can return both the absolute difference\
    \ and the mean from <code>abs-difference</code> and <code>average</code> in a\
    \ single pass over the data, saving me the need to iterate over the list twice:\n\
    <code>#lang racket\n", "  (let ([mean (mean numbers)])\n    (mean (map (\u03BB\
    \ (x) (abs (- x mean))) numbers))))\n", "  (define mean (arithmetic-mean numbers))\n\
    \  (define differences (map (lambda (x) (abs (- x mean))) numbers))\n  (arithmetic-mean\
    \ differences))\n", "  (define (deviation number)\n    (define mean (mean numbers))\n\
    \    (abs (- number mean)))\n  (mean (map deviation numbers)))\n", "  (let ((mean\
    \ (mean numbers)))\n    (mean (map abs-difference numbers (repeat mean)))))\n",
  "  (define sum_numbers (apply + numbers))\n  (define n (length numbers))\n  (define\
    \ mean (/ sum_numbers n))\n  (define squares\n    (for/list ([element numbers])\n\
    \      (exact-round (abs (- element mean)))))\n  (define sum_squares (apply +\
    \ squares))\n  (/ sum_squares n))\n", "  (define length (length numbers))\n  (define\
    \ numerator (apply + (map (lambda (x) (abs (- x (/ (apply + numbers) length))))\
    \ numbers)))\n  (/ numerator length))\n", "  (define mean (mean numbers))\n  (define\
    \ diffs (map (lambda (n) (abs (- n mean))) numbers))\n  (mean diffs))\n", "  (define\
    \ len (length numbers))\n  (define mean (average numbers))\n  (define diffs (map\
    \ (lambda (x) (abs (- x mean))) numbers))\n  (average diffs))\n", "  (define sum-numbers\
    \ (apply + numbers))\n  (define n (length numbers))\n  (define mean (/ sum-numbers\
    \ n))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (apply\
    \ + diffs) n))\n", "  (define (average numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute numbers)\n    (map (lambda (x) (abs (- x (average\
    \ numbers)))) numbers))\n  (define (mean_of_absolutes numbers)\n    (/ (apply\
    \ + (absolute numbers)) (length numbers)))\n  (mean_of_absolutes numbers))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (subtract-numbers numbers)\n    (map (lambda (number)\n           (- number\
    \ (mean numbers)))\n         numbers))\n  (define (abs-subtracted-numbers)\n \
    \   (map abs (subtract-numbers numbers)))\n  (/ (apply + abs-subtracted-numbers)\
    \ (length numbers)))\n", "  (define mean\n    (apply + numbers)\n    (apply /\
    \ numbers (length numbers)))\n  (define deviations\n    (map (lambda (x) (abs\
    \ (- x mean))) numbers))\n  (apply / deviations (length deviations)))\n", "  (define\
    \ (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (mean numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-differences)\n   \
    \ (map (lambda (n) (absolute (- n (mean numbers)))) numbers))\n  (mean absolute-differences))\n",
  "  (define (accumulate sum count nums)\n    (if (null? nums)\n        (/ sum count)\n\
    \        (accumulate (+ sum (car nums)) (+ count 1) (cdr nums))))\n  (define (accumulate2\
    \ sum count nums xmean)\n    (if (null? nums)\n        (/ sum count)\n       \
    \ (accumulate2 (+ sum (abs (- (car nums) xmean))) (+ count 1) (cdr nums) xmean)))\n\
    \  (accumulate2 0 0 numbers (accumulate 0 0 numbers)))\n", "  (let ([mean (mean\
    \ numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n", " \
    \ (define mean (mean numbers))\n  (mean (map absval (map (lambda (n) (- n mean))\
    \ numbers))))\n", "  (define mean (mean numbers))\n  (define deviated-numbers\
    \ (map (\u03BB (n) (abs (- n mean))) numbers))\n  (mean deviated-numbers))\n",
  "  (define average (mean numbers))\n  (average (map (lambda (num) (abs (- num average)))\
    \ numbers)))\n", "  (let ([numbers-mean (mean numbers)])\n    (let loop ([numbers\
    \ numbers] [total 0])\n      (if (null? numbers)\n          (/ total (length numbers))\n\
    \          (loop (cdr numbers) (+ total (abs (- (car numbers) numbers-mean))))))))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map (\u03BB (x) (abs (- x mean))) numbers))))\n",
  "  (define mean\n    (apply + numbers)\n    (/ mean (length numbers)))\n  (define\
    \ deviations\n    (map (lambda (number) (abs (- number mean))) numbers))\n  (apply\
    \ + deviations)\n  (/ deviations (length numbers)))\n", "  (define (abs a)\n \
    \   (if (> a 0) a (- a)))\n  (define (sum numbers)\n    (if (null? numbers)\n\
    \        0\n        (+ (car numbers) (sum (cdr numbers)))))\n  (define (mean numbers)\n\
    \    (/ (sum numbers) (length numbers)))\n  (define (absolute_differences numbers)\n\
    \    (map (lambda (n) (abs (- n (mean numbers)))) numbers))\n  (/ (sum (absolute_differences\
    \ numbers)) (length numbers)))\n", "  (define (mean xs)\n    (/ (apply + xs) (length\
    \ xs)))\n  (define (diff-from-mean x)\n    (- x (mean numbers)))\n  (define (abs\
    \ x)\n    (if (< x 0) (- x) x))\n  (define (absolute-differences xs)\n    (map\
    \ diff-from-mean xs))\n  (define (average xs)\n    (/ (apply + xs) (length xs)))\n\
    \  (average (map abs (absolute-differences numbers))))\n", "  (let* ([sum (apply\
    \ + numbers)]\n         [mean (/ sum (length numbers))])\n    (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers))\n       (length numbers))))\n", "  (let\
    \ ([length (length numbers)])\n    (define (distance n)\n      (abs (- n mean)))\n\
    \    (define (mean numbers)\n      (/ (apply + numbers) (length numbers)))\n \
    \   (define (average distances)\n      (/ (apply + distances) (length distances)))\n\
    \    (average (map distance numbers))))\n", "  (define (absolute n)\n    (if (<\
    \ n 0) (- n) n))\n  (define (distances-from-mean numbers mean)\n    (map (lambda\
    \ (n) (absolute (- n mean))) numbers))\n  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (mean numbers)\n    (average numbers))\n\
    \  (average (distances-from-mean numbers (mean numbers))))\n", "  (let ([mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n\
    ```\n\n```scheme\n#lang racket\n", "  (define (abs number)\n    (if (> number\
    \ 0)\n        number\n        (- 0 number)))\n  (define (distance x)\n    (abs\
    \ (- x (mean numbers))))\n  (mean (map distance numbers)))\n", "  (define (mean\
    \ numbers)\n    (/ (foldl + 0 numbers) (length numbers)))\n  (define (absolute-difference\
    \ x y)\n    (if (&lt; x y) (- y x) (- x y)))\n  (define (average-absolute-difference\
    \ numbers)\n    (define (absolute-differences numbers)\n      (map (lambda (x)\
    \ (absolute-difference x (mean numbers))) numbers))\n    (/ (foldl + 0 (absolute-differences\
    \ numbers)) (length numbers)))\n  (average-absolute-difference numbers))\n</code>\n\
    In short, I split the problem into three functions: one to calculate the mean\
    \ of a list, one to calculate the absolute difference between two numbers, and\
    \ the last to actually calculate the average absolute difference.\nI'm not sure\
    \ what your second question is asking, but I'll add a little bonus as to how I\
    \ might go about adding the ability to specify a different centerpoint:\n<code>#lang\
    \ racket\n", "  (define (average lst)\n    (/ (apply + lst) (length lst)))\n \
    \ (define (absolute-difference n)\n    (abs (- n (average numbers))))\n  (average\
    \ (map absolute-difference numbers)))\n```\n\nLet's write some tests for this\
    \ function:\n\n```racket\n#lang racket\n", "  (define (distance-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (mean (map distance-from-mean numbers)))\n",
  "  (define length (length numbers))\n  (define sum (apply + numbers))\n  (define\
    \ mean (/ sum length))\n  (define absolute-differences (map (\u03BB (x) (abs (-\
    \ x mean))) numbers))\n  (/ (apply + absolute-differences) length))\n", "  (let*\
    \ ([sum (apply + numbers)]\n         [mean (/ sum (length numbers))])\n    (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers))\n       (length numbers))))\n",
  "  (let* ((count (length numbers))\n         (mean (/ (apply + numbers) count))\n\
    \         (diffs (map (lambda (x) (abs (- x mean))) numbers)))\n    (/ (apply\
    \ + diffs) count)))\n", "  (cond [(= 0 (length numbers)) 0]\n        [else\n \
    \        (/ (apply + (map (lambda (x) (abs (- x (average numbers)))) numbers))\n\
    \            (length numbers))]))\n", "  (define (divide x y)\n    (/ x y))\n\
    \  (define (sum x y)\n    (+ x y))\n  (define (mean numbers)\n    (divide (foldl\
    \ sum 0 numbers) (length numbers)))\n  (define (absolute-difference x y)\n   \
    \ (if (> x y)\n        (- x y)\n        (- y x)))\n  (define (average list)\n\
    \    (divide (foldl sum 0 list) (length list)))\n  (average (map (lambda (x) (absolute-difference\
    \ x (mean numbers))) numbers)))\n", "  (define absolute-deviations\n    (map (lambda\
    \ (n) (abs (- n (mean numbers)))) numbers))\n  (mean absolute-deviations))\n",
  "  (define centerpoint (mean numbers))\n  (define deviations (map (lambda (x) (abs\
    \ (- x centerpoint))) numbers))\n  (mean deviations))\n", "  (mean (map (\u03BB\
    \ (x) (abs (- x (mean numbers)))) numbers)))\n", "  (define (mean number)\n  \
    \  (/ (apply + number) (length number)))\n  (define (absolute x)\n    (if (> x\
    \ 0) x (- x)))\n  (define centerpoint (mean numbers))\n  (/ (apply + (map (lambda\
    \ (x) (absolute (- x centerpoint))) numbers))\n     (length numbers)))\n", " \
    \ (define (average numbers) (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-average number)\n    (abs (- number (average numbers))))\n\
    \  (define (absolute-differences-from-average numbers)\n    (map absolute-difference-from-average\
    \ numbers))\n  (define (average-absolute-differences numbers)\n    (/ (apply +\
    \ (absolute-differences-from-average numbers))\n       (length numbers)))\n  (average-absolute-differences\
    \ numbers))\n", "  (let* ([numbers-mean (calculate-mean numbers)]\n         [numbers-deviations\
    \ (map (lambda (x) (abs (- x numbers-mean))) numbers)])\n    (calculate-mean numbers-deviations)))\n",
  "  (let ([avg (sum numbers / (length numbers))])\n    (sum (map (\u03BB (x) (abs\
    \ (- x avg))) numbers) / (length numbers))))\n", "  (define length (length numbers))\n\
    \  (define mean (/ (apply + numbers) length))\n  (define difftotal 0)\n  (define\
    \ (diff total difftotal)\n    (if (null? total)\n        (/ difftotal length)\n\
    \        (diff (cdr total) (+ (abs (- (car total) mean)) difftotal))))\n  (diff\
    \ numbers difftotal))\n", "  (define mean (+ 0.0 (/ (apply + numbers) (length\
    \ numbers))))\n  (define abs-diff-from-mean (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (/ (apply + abs-diff-from-mean) (length numbers)))\n", "  (define\
    \ mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (\u03BB (x)\
    \ (abs (- x mean))) numbers)) (length numbers)))\n", "  (define len (length numbers))\n\
    \  (define mean (sum numbers) / len)\n  (sum (map abs (- numbers mean))) / len)\n",
  "  (local [;; Calculate the mean of numbers in this dataset\n          (define mean\n\
    \            (let ((total 0.0))\n              (for ([x numbers])\n          \
    \      (set! total (+ total x)))\n              (/ total (length numbers))))\n\
    \n          ;; Calculate the absolute difference between each number and\n   \
    \       ;; the mean of the dataset, then find the average of the\n          ;;\
    \ resulting list\n          (define deviation\n            (let ((deviation-list\
    \ '()))\n              (for ([x numbers])\n                (set! deviation-list\
    \ (cons (abs (- x mean)) deviation-list)))\n              (for ([x deviation-list])\n\
    \                (set! mean (+ mean x)))\n              (/ mean (length deviation-list))))])\n\
    \  deviation)\n```\n\n### Compare two datasets\n\n```#lang racket\n", "  (let\
    \ ([mean (average numbers)])\n    (average (map (lambda (x) (abs (- x mean)))\
    \ numbers))))\n", "  (define mean (mean numbers))\n  (define distance-from-mean\
    \ (map (\u03BB (n) (- n mean)) numbers))\n  (define absolute-distance-from-mean\
    \ (map abs distance-from-mean))\n  (mean absolute-distance-from-mean))\n", " \
    \ (define x_mean (mean numbers))\n  (define diffs (map (lambda (x) (abs (- x x_mean)))\
    \ numbers))\n  (mean diffs))\n", "  (define average\n    (define (sum/count lst)\n\
    \      (let loop ((lst lst) (s 0) (c 0))\n        (if (null? lst)\n          \
    \  (/ s c)\n            (loop (cdr lst) (+ s (car lst)) (+ c 1)))))\n    (sum/count\
    \ numbers))\n  (define (avg-diff num)\n    (abs (- num average)))\n  (define (average-absolute-difference\
    \ lst)\n    (let loop ((lst lst) (s 0) (c 0))\n      (if (null? lst)\n       \
    \   (/ s c)\n          (loop (cdr lst) (+ s (avg-diff (car lst))) (+ c 1)))))\n\
    \  (average-absolute-difference numbers))\n```\n\n### Execution\n\n```bash\n$\
    \ racket mean-absolute-deviation.rkt\n```\n\n### Output\n\n```bash\n$ racket mean-absolute-deviation.rkt\n\
    1.0\n```", "  (define (absolute_difference a b)\n    (if (< a b) (- b a) (- a\
    \ b)))\n  (define (absdiff-list nums)\n    (if (null? nums)\n        null\n  \
    \      (cons (absolute_difference (car nums)\n                               \
    \    (mean_num nums))\n              (absdiff-list (cdr nums)))))\n  (define (mean_num\
    \ nums)\n    (/ (apply + nums) (length nums)))\n  (mean_num (absdiff-list numbers)))\n",
  "  (mean (map (lambda (x) (abs (- x (mean numbers)))) numbers)))\n", "  (let ([mean\
    \ (average numbers)])\n    (let lp ([numbers numbers] [acc 0])\n      (if (null?\
    \ numbers)\n          (/ acc (length numbers))\n          (lp (cdr numbers) (+\
    \ acc (abs (- (car numbers) mean))))))))\n", "  (define len (length numbers))\n\
    \  (define total 0)\n  (for ([i (in-range len)])\n    (set! total (+ total (list-ref\
    \ numbers i))))\n  (define mean (/ total len))\n  (define sum-of-distances 0)\n\
    \  (for ([i (in-range len)])\n    (set! sum-of-distances (+ sum-of-distances (abs\
    \ (- (list-ref numbers i) mean)))))\n  (/ sum-of-distances len))\n", "  (define\
    \ mean (mean numbers))\n  (define deviations (map (lambda (n) (abs (- n mean)))\
    \ numbers))\n  (define divisor (round (length numbers)))\n  (mean deviations))\n",
  "  (local [(define sum-abs-diff (lambda (numbers)\n                            \
    \     (cond [(empty? numbers) 0]\n                                       [else\
    \ (+ (abs (- (first numbers)\n                                               \
    \         (mean numbers)))\n                                                (sum-abs-diff\
    \ (rest numbers)))])))\n          (define mean (lambda (numbers)\n           \
    \              (/ (sum numbers) (length numbers))))]\n    (/ (sum-abs-diff numbers)\
    \ (length numbers))))\n", "  (define centerpoint (/ (apply + numbers) (length\
    \ numbers)))\n  (/ (apply + (map (\u03BB (x) (abs (- x centerpoint))) numbers))\n\
    \     (length numbers)))\n```\n\n## Solution (Racket)\n\n```racket\n#lang racket\n",
  "  (let* ([numbers-count (length numbers)]\n         [numbers-mean (/ (apply + numbers)\
    \ numbers-count)])\n    (/ (apply + (map (\u03BB (n) (abs (- n numbers-mean)))\
    \ numbers))\n       numbers-count)))\n", "  (define (abs_difference n1 n2)\n \
    \   (abs (- n1 n2)))\n  (define (sum_of_abs_differences numbers)\n    (define\
    \ (iter running_sum numbers)\n      (if (null? numbers)\n          running_sum\n\
    \          (iter (+ running_sum (abs_difference (car numbers) (mean numbers)))\n\
    \               (cdr numbers))))\n    (iter 0 numbers))\n  (/ (sum_of_abs_differences\
    \ numbers) (length numbers)))\n", "  (let ([n (length numbers)])\n    (if (= n\
    \ 0)\n        #f\n        (/ (foldl + 0 (map (lambda (x) (abs (- x (/ (foldl +\
    \ 0 numbers) n)))) numbers)) n))))\n", "  (define (abs-diff item center)\n   \
    \ (abs (- item center)))\n  (define (avg lst)\n    (/ (apply + lst) (length lst)))\n\
    \  (define (abs-diff-mean lst)\n    (map (lambda (x) (abs-diff x (avg lst))) lst))\n\
    \  (avg (abs-diff-mean numbers)))\n```\n\n###Problem 2.2\n```racket\n#lang racket\n",
  "  (let* ([average (/ (apply + numbers) (length numbers))]\n         [differences\
    \ (map (lambda (x) (abs (- x average))) numbers)])\n    (/ (apply + differences)\
    \ (length differences))))\n", "  (define (element_deviation n)\n    (abs (- n\
    \ mean)))\n  (define mean\n    (let ([total 0.0])\n      (for ([n numbers])\n\
    \        (set! total (+ total n)))\n      (/ total (length numbers))))\n  (define\
    \ (average ls)\n    (let ([total 0.0])\n      (for ([n ls])\n        (set! total\
    \ (+ total n)))\n      (/ total (length ls))))\n  (average (map element_deviation\
    \ numbers)))\n", "  (let* ([numbers-length (length numbers)]\n         [mean (mean\
    \ numbers)]\n         [abs-diff (map (lambda (x) (abs (- x mean))) numbers)])\n\
    \    (/ (sum abs-diff) numbers-length)))\n", "  (let ([mean (mean numbers)])\n\
    \    (mean (map abs (map (lambda (x) (- x mean)) numbers)))))\n", "  (define list-sum\
    \ 0)\n  (define numbers-length (length numbers))\n  (define (sum-numbers-list\
    \ numbers)\n    (cond\n      [(= numbers '()) list-sum]\n      [else (begin\n\
    \              (set! list-sum (+ list-sum (car numbers)))\n              (sum-numbers-list\
    \ (cdr numbers)))]))\n  (define mean (/ (sum-numbers-list numbers) numbers-length))\n\
    \  (define (sum-abs-from-mean numbers)\n    (cond\n      [(= numbers '()) list-sum]\n\
    \      [else (begin\n              (set! list-sum (+ list-sum (abs (- (car numbers)\
    \ mean))))\n              (sum-abs-from-mean (cdr numbers)))]))\n  (/ (sum-abs-from-mean\
    \ numbers) numbers-length))\n```\n\n```\n#lang racket\n", "  (define (diff_abs\
    \ n)\n    (abs (- n (average numbers))))\n  (average (map diff_abs numbers)))\n",
  "  (define (f numbers mean-abs-deviation)\n    (cond\n      [(empty? numbers) mean-abs-deviation]\n\
    \      [else\n       (define x (first numbers))\n       (define remaining-numbers\
    \ (rest numbers))\n       (define sum (+ mean-abs-deviation (abs (- x mean))))\n\
    \       (f remaining-numbers sum)]))\n  (define mean (mean numbers))\n  (/ (f\
    \ numbers 0) (length numbers)))\n", "  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (mean-distance number)\n    (abs (-\
    \ number (average numbers))))\n  (define (mean-distances numbers)\n    (map mean-distance\
    \ numbers))\n  (define (mean-distance-sum numbers)\n    (apply + (mean-distances\
    \ numbers)))\n  (/ (mean-distance-sum numbers) (length numbers)))\n", "  (let\
    \ ([mean (mean numbers)])\n    (mean (map absval (map (curry - mean) numbers)))))\n",
  "  (let* ([mean (mean numbers)]\n         [differences (map (lambda (x) (abs (-\
    \ x mean))) numbers)])\n    (mean differences)))\n", "  (define mean (/ (apply\
    \ + numbers) (length numbers)))\n  (/ (apply + (map (\u03BB (x) (abs (- x mean)))\
    \ numbers)) (length numbers)))\n", "  (define (numbers-stats numbers)\n    (define\
    \ (sum lst)\n      (if (null? lst)\n          0\n          (+ (car lst) (sum (cdr\
    \ lst)))))\n    (define (length lst)\n      (if (null? lst)\n          0\n   \
    \       (+ 1 (length (cdr lst)))))\n    (define (mean lst)\n      (/ (sum lst)\
    \ (length lst)))\n    (define (absolute-difference-from-mean lst mean)\n     \
    \ (map (lambda (x) (abs (- x mean))) lst))\n    (let* ([m (mean numbers)]\n  \
    \         [diffs (absolute-difference-from-mean numbers m)])\n      (cons m diffs)))\n\
    \  (define (average-of-absolute-differences-from-mean numbers)\n    (define (sum\
    \ lst)\n      (if (null? lst)\n          0\n          (+ (car lst) (sum (cdr lst)))))\n\
    \    (define (length lst)\n      (if (null? lst)\n          0\n          (+ 1\
    \ (length (cdr lst)))))\n    (define (mean lst)\n      (/ (sum lst) (length lst)))\n\
    \    (mean (cdr (numbers-stats numbers))))\n  (average-of-absolute-differences-from-mean\
    \ numbers))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs\
    \ (- x mean))) numbers))))\n", "  (define (mean-or-zero numbers)\n    (if (null?\
    \ numbers)\n        0\n        (/ (apply + numbers) (length numbers))))\n  (define\
    \ (abs-difference x numbers)\n    (if (null? numbers)\n        0\n        (+ (abs\
    \ (- x (car numbers)))\n           (abs-difference x (cdr numbers)))))\n  (/ (abs-difference\
    \ (mean-or-zero numbers) numbers)\n     (length numbers)))\n", "  (let ([mean\
    \ (average numbers)])\n    (let loop ([numbers numbers] [total-difference 0])\n\
    \      (cond\n        [(empty? numbers) (/ total-difference (length numbers))]\n\
    \        [else (loop (rest numbers) (+ total-difference (abs (- (first numbers)\
    \ mean))))]))))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x)\
    \ (abs (- x mean))) numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
