name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> make_palindrome('')\n\
  ;; ''\n;; >>> make_palindrome('cat')\n;; 'catac'\n;; >>> make_palindrome('cata')\n\
  ;; 'catac'\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (reverse string)\n    (string-&gt;list string))\n  (string-append\
    \ string (reverse string)))\n</code>\nIn fact the function works as desired. But\
    \ I'd like to know if there is an idiomatic way to reverse the string in Racket.\n\
    \n\nA:\n\nThe idiomatic way to reverse a string in Racket is using <code>string-reverse</code>:\n\
    <code>(string-reverse \"cata\")\n=&gt; \"atac\"\n</code>\nHere's a variant that\
    \ uses <code>string-fold</code> to walk over the input string:\n<code>(define\
    \ (make-palindrome str)\n  (define (cons-first-char str)\n    (string-&gt;list\
    \ str))\n  (string-fold cons-first-char \"\" str))\n</code>\n", "  (define (find-longest-palindrome-suffix\
    \ string)\n    (let loop ((s string) (longest-palindrome-suffix \"\"))\n     \
    \ (if (empty? s)\n          longest-palindrome-suffix\n          (let ((last-char\
    \ (last s))\n                (rest-of-string (butlast s)))\n            (if (equal?\
    \ last-char (first rest-of-string))\n                (loop rest-of-string (cons\
    \ last-char longest-palindrome-suffix))\n                (loop rest-of-string\
    \ longest-palindrome-suffix))))))\n  (append string (reverse (find-longest-palindrome-suffix\
    \ string))))\n", "  (define (is_palindrome xs)\n    (define (match-i i j)\n  \
    \    (cond ((< i 0) #t)\n            ((> j (- (length xs) 1)) #t)\n          \
    \  ((not (equal? (list-ref xs i) (list-ref xs j))) #f)\n            (else (match-i\
    \ (- i 1) (+ j 1)))))\n    (match-i (- (length xs) 1) 0))\n  (define (find-longest-palindrome\
    \ xs i j)\n    (cond ((< i j) (list i j))\n          ((and (is_palindrome (substring\
    \ xs 0 (- j 1)))\n                (is_palindrome (substring xs (- i 1) j)))\n\
    \           (find-longest-palindrome xs (- i 1) (- j 1)))\n          ((and (is_palindrome\
    \ (substring xs 0 (- j 1)))\n                (not (is_palindrome (substring xs\
    \ (- i 1) j))))\n           (find-longest-palindrome xs (- i 1) j))\n        \
    \  ((and (not (is_palindrome (substring xs 0 (- j 1))))\n                (is_palindrome\
    \ (substring xs (- i 1) j)))\n           (find-longest-palindrome xs i (- j 1)))))\n\
    \  (define (reverse xs)\n    (cond ((null? xs) '())\n          (else (append (reverse\
    \ (cdr xs)) (list (car xs))))))\n  (let ((longest-palindrome (find-longest-palindrome\
    \ string (length string) 0)))\n    (string-append string (reverse (substring string\
    \ 0 (car longest-palindrome))))))\n", "  (local [(define (get-longest-palindrome-postfix\
    \ string)\n            (if (is-palindrome? string)\n                string\n \
    \               (get-longest-palindrome-postfix (substring string 0 (- (string-length\
    \ string) 1)))))\n          (define (get-prefix-reversed string)\n           \
    \ (string-append (reverse (substring string 0 (- (string-length string) (string-length\
    \ (get-longest-palindrome-postfix string)))))))\n          (define (is-palindrome?\
    \ string)\n            (equal? string (reverse string)))]\n    (if (string=? string\
    \ \"\")\n        \"\"\n        (string-append string (get-prefix-reversed string)))))\n",
  "  (define (find-longest-postfix-palindrome string)\n    (if (string=? string (reverse\
    \ string))\n        string\n        (find-longest-postfix-palindrome (substring\
    \ string 0 (- (string-length string) 1)))))\n  (string-append string (reverse\
    \ (substring string 0 (- (string-length string) (string-length (find-longest-postfix-palindrome\
    \ string)))))))\n", "  (define (make-palindrome-iter original_string postfix rev_prefix)\n\
    \    (define (make-palindrome-iter-helper rev_prefix)\n      (if (empty? rev_prefix)\n\
    \          original_string\n          (string-append original_string (reverse\
    \ rev_prefix))))\n    (if (empty? postfix)\n        (make-palindrome-iter-helper\
    \ rev_prefix)\n        (if (and (empty? rev_prefix) (empty? (cdr postfix)))\n\
    \            (string-append original_string (reverse postfix))\n            (if\
    \ (equal? (car postfix) (car rev_prefix))\n                (make-palindrome-iter\
    \ original_string (cdr postfix) (cdr rev_prefix))\n                (make-palindrome-iter\
    \ original_string postfix (cdr rev_prefix))))))\n  (make-palindrome-iter string\
    \ string \"\"))", "  (define (reverse-string string)\n    (define (reverse-string-iter\
    \ result str)\n      (if (equal? str \"\")\n          result\n          (reverse-string-iter\
    \ (string-append (substring str 0 1) result) (substring str 1))))\n    (reverse-string-iter\
    \ \"\" string))\n  (define (make-palindrome-iter string prefix)\n    (if (equal?\
    \ string \"\")\n        (string-append prefix (reverse-string prefix))\n     \
    \   (make-palindrome-iter (substring string 1) (string-append prefix (substring\
    \ string 0 1)))))\n  (make-palindrome-iter string \"\"))\n", "  (define (prefix-and-postfix\
    \ s)\n    (define (flip str)\n      (string-append (reverse (string->list str))\n\
    \                     (make-string (string-length str) #\\space)))\n    (define\
    \ (mismatch str)\n      (for*/first ([idx (in-range (string-length str))]\n  \
    \                 [chr (in-list (string->list str))])\n        (if (not (char=?\
    \ chr (string-ref (flip str) idx)))\n            idx)))\n    (define (prefix str)\n\
    \      (substring str 0 (mismatch str)))\n    (define (postfix str)\n      (substring\
    \ str (mismatch str)))\n    (values (prefix s) (postfix s)))\n  (define (make-palindrome\
    \ string)\n    (let* ((pre-post (prefix-and-postfix string))\n           (pre\
    \ (car pre-post))\n           (post (cadr pre-post)))\n      (string-append string\
    \ (reverse pre))))\n  (make-palindrome string))\n", "  (let loop ([string string]\n\
    \             [length (string-length string)])\n    (define (reverse string)\n\
    \      (string-append (substring string 1 length) (string-ref string 0)))\n  \
    \  (if (not (string-contains string (reverse string)))\n        (loop (string-append\
    \ string (reverse (substring string 0 (sub1 length))))\n              (sub1 length))\n\
    \        string)))\n", "  (define (is_palindrome string)\n    (and (= (string-length\
    \ string) 1)\n         (= (substring string 0 1) (substring string -1 0))))\n\
    \  (define (find-longest-postfix string)\n    (define (find-longest-postfix-aux\
    \ string)\n      (if (is_palindrome string)\n          string\n          (find-longest-postfix-aux\
    \ (substring string 0 (- (string-length string) 1)))))\n    (find-longest-postfix-aux\
    \ string))\n  (define (reverse-string string)\n    (string-append (substring string\
    \ -1 0) (reverse-string (substring string 0 (- (string-length string) 1)))))\n\
    \  (if (is_palindrome string)\n      string\n      (string-append string (reverse-string\
    \ (substring string 0 (- (string-length (find-longest-postfix string)) 1))))))",
  "  (define (is_palindrome? string)\n    (let* ((len (string-length string))\n  \
    \         (mid (quotient len 2))\n           (halflen (if (odd? len)\n       \
    \                 (1+ mid)\n                        mid)))\n      (andmap (lambda\
    \ (i)\n                (equal? (string-ref string i)\n                       \
    \ (string-ref string (- len i 1))))\n              (range 1 halflen))))\n  (define\
    \ (find-longest-palindrome-suffix string)\n    (let ((len (string-length string)))\n\
    \      (for/first ([i (in-range 1 len)])\n        (is_palindrome? (substring string\
    \ i len)))))\n  (let* ((suffix (find-longest-palindrome-suffix string))\n    \
    \     (prefix (reverse (substring string 0 (- (string-length string) (string-length\
    \ suffix))))))\n    (format \"~a~a\" string prefix)))\n", "  (define (palindrome-suffix\
    \ string-reversed idx)\n    (if (< idx (string-length string-reversed))\n    \
    \    (let* ([palindrome-end-idx idx]\n               [palindrome-start-idx (-\
    \ (string-length string-reversed) palindrome-end-idx)]\n               [palindrome-string\
    \ (substring string-reversed palindrome-start-idx (+ palindrome-start-idx palindrome-end-idx))])\n\
    \          (if (palindrome? palindrome-string)\n              palindrome-end-idx\n\
    \              (palindrome-suffix string-reversed (+ palindrome-end-idx 1))))\n\
    \        0))\n  (let* ([string-reversed (reverse string)]\n         [palindrome-suffix-end-idx\
    \ (palindrome-suffix string-reversed 0)]\n         [string-to-append (substring\
    \ string-reversed 0 palindrome-suffix-end-idx)])\n    (string-append string string-to-append)))\n",
  "  (define (suffix-is-palindrome? string)\n    (define (suffix-is-palindrome?-helper\
    \ a b)\n      (if (or (eq? a b) (< a b))\n          #t\n          (and (equal?\
    \ (string-ref string a) (string-ref string b))\n               (suffix-is-palindrome?-helper\
    \ (add1 a) (sub1 b)))))\n    (suffix-is-palindrome?-helper 0 (sub1 (string-length\
    \ string))))\n  (define (find-longest-suffix-palindrome str start-pos)\n    (if\
    \ (suffix-is-palindrome? str)\n        (string-length str)\n        (find-longest-suffix-palindrome\
    \ (substring str 0 (sub1 (string-length str))) (add1 start-pos))))\n  (define\
    \ (make-palindrome-helper string palindrome-suffix)\n    (if (or (eq? (string-length\
    \ string) 0) (eq? (string-length string) palindrome-suffix))\n        string\n\
    \        (string-append string (string-reverse (substring string 0 (sub1 (string-length\
    \ string)))))))\n  (make-palindrome-helper string (find-longest-suffix-palindrome\
    \ string 0)))\n", "  (define (r-make-palindrome string-length)\n    (if (even?\
    \ string-length)\n        (define postfix (substring string (- string-length (/\
    \ string-length 2)) string-length))\n        (define postfix (substring string\
    \ (- string-length (/ (add1 string-length) 2)) string-length)))\n    (define prefix\
    \ (reverse postfix))\n    (string-append prefix string))\n  (r-make-palindrome\
    \ (string-length string)))\n", "  (if (string=? string \"\")\n      \"\"\n   \
    \   (if (string=? string (reverse string))\n          string\n          (string-append\
    \ string (reverse (substring string 0 (longest-palindromic-suffix string)))))))\n",
  "  (define (find-longest-palindrome-postfix string)\n    (define (loop string prefix)\n\
    \      (if (equal? string '())\n          prefix\n          (let ((new-prefix\
    \ (cons (first string) prefix)))\n            (if (equal? string prefix)\n   \
    \             new-prefix\n                (loop (rest string) new-prefix)))))\n\
    \    (loop string '()))\n  (append string (reverse (find-longest-palindrome-postfix\
    \ string))))\n", "  (define (prefix-to-postfix string)\n    (append (reverse (rest\
    \ string)) string))\n  (define (suffix-is-palindrome string)\n    (if (empty?\
    \ string) #t\n        (if (string=? (car string) (last string))\n            (suffix-is-palindrome\
    \ (butlast (rest string)))\n            #f)))\n  (define (find-longest-suffix-palindrome\
    \ string)\n    (if (suffix-is-palindrome string) string\n        (find-longest-suffix-palindrome\
    \ (rest string))))\n  (prefix-to-postfix (find-longest-suffix-palindrome string)))\n",
  "  (define (find-longest-palindrome-in-suffix string)\n    (define (find-longest-palindrome-in-suffix-aux\
    \ string prev-len)\n      (if (empty? string)\n          (- (length string) prev-len)\n\
    \          (if (equal? (first string) (last string))\n              (find-longest-palindrome-in-suffix-aux\
    \ (rest (butlast string)) (+ 1 prev-len))\n              (find-longest-palindrome-in-suffix-aux\
    \ (rest string) 0))))\n    (find-longest-palindrome-in-suffix-aux string 0))\n\
    \  (append string (reverse (take (rest string) (find-longest-palindrome-in-suffix\
    \ string)))))\n", "  (define (gen-palindrome string palindrome-suffix)\n    (string-append\
    \ string (string-reverse (substring string 0 (- (string-length string) (string-length\
    \ palindrome-suffix))))))\n  (define (find-palindrome-suffix string)\n    (string-append\
    \ (string-reverse (substring string 0 (string-length string))) string))\n  (cond\
    \ ((string=? string \"\") \"\")\n        ((string=? string (reverse string)) string)\n\
    \        (else (gen-palindrome string (find-palindrome-suffix string)))))\n",
  "  (define (make-palindrome-iter s start end res)\n    (if (and (null? (cdr s))\n\
    \             (char=? (car s) (car res)))\n        res\n        (make-palindrome-iter\
    \ (cdr s) (add1 start) (sub1 end)\n                              (string-append\
    \ (string-take s start)\n                                             (string-reverse\
    \ (string-drop s end))\n                                             (string-drop\
    \ s start)))))\n  (make-palindrome-iter string 0 (sub1 (string-length string))\n\
    \                        (string-append string \"\")))\n", "  (string-append string\
    \ (string-reverse (string-take string (string-index (string-reverse string) (string-last-index\
    \ string))))))\n", "  (define (rev string)\n    (string-join (reverse (string-split\
    \ string))))\n  (define (longest-palindrome-suffix string)\n    (define (lp-helper\
    \ len)\n      (if (= len (- (string-length string) 1))\n          (string-append\
    \ (string-ref string 0)\n                         (rev (substring string 1)))\n\
    \          (if (string=? (string-append (string-take string len)\n           \
    \                            (rev (string-drop string len)))\n               \
    \         string)\n              (string-append (string-take string len)\n   \
    \                          (rev (string-drop string len)))\n              (lp-helper\
    \ (+ len 1)))))\n    (lp-helper 0))\n  (define (lp-prefix str)\n    (string-append\
    \ (string-take str (- (string-length str) 1))\n                   (rev (string-drop\
    \ str (- (string-length str) 1)))))\n  (string-append string (lp-prefix (longest-palindrome-suffix\
    \ string))))\n```\n\n## Count occurrences of each word in a string.\n\n```racket\n\
    #lang racket\n", "  (reverse string))\n", "  (define (find-longest-palindrome-suffix\
    \ string)\n    (define (find-longest-palindrome-suffix-rec string i j)\n     \
    \ (if (string=? (substring string i j) (reverse (substring string i j)))\n   \
    \       (substring string i j)\n          (find-longest-palindrome-suffix-rec\
    \ string i (+ j 1))))\n    (find-longest-palindrome-suffix-rec string 0 (string-length\
    \ string)))\n  (string-append string (reverse (string-trim-suffix string (find-longest-palindrome-suffix\
    \ string)))))\n", "  (define (palindrome? string)\n    (define (equal? str1 str2)\n\
    \      (cond\n        [(or (string=? str1 \"\") (string=? str2 \"\")) (error \"\
    Arguments are empty\")]\n        [(and (= (string-length str1) 1) (= (string-length\
    \ str2) 1)) (string=? str1 str2)]\n        [(string=? (substring str1 0 1) (substring\
    \ str2 (- (string-length str2) 1)))\n         (equal? (substring str1 1) (substring\
    \ str2 0 (- (string-length str2) 1)))]\n        [else #f]))\n    (equal? string\
    \ (reverse string)))\n  (define (longest-palindrome string)\n    (cond\n     \
    \ [(string=? string \"\") (error \"Argument is empty\")]\n      [(palindrome?\
    \ string) string]\n      [else (longest-palindrome (substring string 0 (- (string-length\
    \ string) 1)))]))\n  (define (reverse-prefix string)\n    (reverse (substring\
    \ string 0 (- (string-length (longest-palindrome string)) (string-length string)))))\n\
    \  (cond\n    [(string=? string \"\") \"\"]\n    [else (string-append string (reverse-prefix\
    \ string))]))\n", "  (define (reverse-str string)\n    (cond\n      [(null? string)\n\
    \       string]\n      [else\n       (string-append (reverse-str (string-tail\
    \ string)) (string-ref string 0))]))\n  (define (postfix-is-palindrome string\
    \ i)\n    (cond\n      [(= i 0)\n       true]\n      [(string-ci=? (string-ref\
    \ string (- i 1)) (string-ref string (- (string-length string) i)))\n       (postfix-is-palindrome\
    \ string (- i 1))]\n      [else\n       false]))\n  (define (get-pre-postfix-and-palindrome-len\
    \ string)\n    (cond\n      [(null? string)\n       (list string string (- 0))]\n\
    \      [(postfix-is-palindrome string (string-length string))\n       (list (string-take\
    \ string (- (string-length string) (string-length string)))\n             (string-take\
    \ string (string-length string))\n             (string-length string))]\n    \
    \  [else\n       (get-pre-postfix-and-palindrome-len (string-drop string 1))]))\n\
    \  (define (concat-reversed-prefix-to-suffix pre post pal-len)\n    (if (&lt;\
    \ pal-len (string-length post))\n        (string-append pre (reverse-str (string-take\
    \ post pal-len)) post)\n        post))\n  (concat-reversed-prefix-to-suffix (get-pre-postfix-and-palindrome-len\
    \ string)))\n", "  (let ([longest_palindrome_postfix (find-longest-palindrome-postfix\
    \ string (length string))])\n    (append string (reverse (substring string 0 (-\
    \ (length string) longest_palindrome_postfix))))))\n", "  (if (string=? \"\" string)\n\
    \      \"\"\n      (let loop ([postfix \"\"] [prefix \"\"] [rest (string-drop\
    \ string (string-length postfix))])\n        (if (string=? \"\" rest)\n      \
    \      (string-append (string-append prefix (string-reverse postfix)) postfix)\n\
    \            (let ([prefix-l (string-length prefix)])\n              (let ([new-postfix\
    \ (string-append postfix (string-take rest 1))])\n                (if (string=?\
    \ new-postfix (string-reverse new-postfix))\n                    (loop new-postfix\
    \ (string-append prefix (string-take rest 1)) (string-drop rest 1))\n        \
    \            (loop postfix (string-append prefix (string-take rest 1)) (string-drop\
    \ rest 1)))))))))\n", "  (let ([longest-palindrome (longest-palindrome string)])\n\
    \    (append string (reverse (substring string 0 (- (string-length string) (string-length\
    \ longest-palindrome)))))))\n", "  (define (find-longest-palindrome string left\
    \ right)\n    (cond [(null? string) '()]\n          [(equal? (car string) (car\
    \ right)) (find-longest-palindrome (cdr string) (cons (car string) left) (cdr\
    \ right))]\n          [else (find-longest-palindrome (cdr string) '() (reverse\
    \ left))]))\n  (string-append string (reverse (find-longest-palindrome string\
    \ '() string))))\n```\n\n```\n$ racket palindrome.rkt\n#;1> (make_palindrome '())\n\
    '()\n#;2> (make_palindrome 'cat)\n'catac'\n#;3> (make_palindrome 'cata)\n'catac'\n\
    ```\n\n### [palindrome-detector](palindrome-detector.rkt)\n```racket\n#lang racket\n",
  "  (define (reverse s)\n    (define (rev-recur src dest)\n      (if (string-empty?\
    \ src)\n          dest\n          (rev-recur (substring src 1) (string-append\
    \ (substring src 0 1) dest))))\n    (rev-recur s \"\"))\n  (define (palindrome?\
    \ s)\n    (define (palindrome-recur? s1 s2)\n      (if (string-empty? s1)\n  \
    \        #t\n          (if (string=? (substring s1 0 1) (substring s2 (- (string-length\
    \ s2) 1)))\n              (palindrome-recur? (substring s1 1) (substring s2 0\
    \ (- (string-length s2) 1)))\n              #f)))\n    (palindrome-recur? s (reverse\
    \ s)))\n  (define (longest-palindrome s)\n    (define (longest-palindrome-recur\
    \ s1 longest)\n      (if (palindrome? s1)\n          s1\n          (longest-palindrome-recur\
    \ (substring s1 0 (- (string-length s1) 1)) longest)))\n    (longest-palindrome-recur\
    \ s \"\"))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (longest-palindrome string)))))))\n", "  (let ((suffix-length\
    \ (find-longest-palindromic-suffix string)))\n    (string-append string (string-reverse\
    \ (substring string 0 suffix-length)))))\n", "  (define (find-palindrome-suffix\
    \ start)\n    (if (= start 0)\n        #f\n        (if (string= (substring string\
    \ start) (reverse (substring string 0 start)))\n            (add1 start)\n   \
    \         (find-palindrome-suffix (sub1 start)))))\n  (define (append-reversed-prefix\
    \ string suffix-length)\n    (string-append string (reverse (substring string\
    \ 0 (- (string-length string) suffix-length)))))\n  (append-reversed-prefix string\
    \ (find-palindrome-suffix (string-length string))))", "  (define (rev string)\n\
    \    (reverser string))\n  (define (palindrome? string)\n    (equal? string (rev\
    \ string)))\n  (define (reverser str)\n    (if (null? str)\n        \"\"\n   \
    \     (string-append (reverser (substring str 1)) (substring str 0 1))))\n  (define\
    \ (next-string string)\n    (string-append string (substring (rev string) 0 1)))\n\
    \  (if (palindrome? string)\n      string\n      (next-string (make_palindrome\
    \ (next-string string)))))\n", "  (define (longest-palindrome-postfix string)\n\
    \    (let loop ((string string)\n               (max-len 0)\n               (max-pos\
    \ 0))\n      (if (null? string)\n          (string-append (reverse (substring\
    \ string 0 max-pos))\n                         (substring string max-pos (+ max-pos\
    \ max-len)))\n          (let ((same-left (equal? (first string) (first (reverse\
    \ string))))\n                (same-right (equal? (last string) (last (reverse\
    \ string)))))\n            (cond ((and same-left same-right)\n               \
    \    (loop (substring string 1 (sub1 (string-length string)))\n              \
    \           (+ 2 max-len)\n                         max-pos))\n              \
    \    (same-left\n                   (loop (substring string 1 (sub1 (string-length\
    \ string)))\n                         (+ 2 max-len)\n                        \
    \ (sub1 max-pos)))\n                  (same-right\n                   (loop (substring\
    \ string 1 (sub1 (string-length string)))\n                         (+ 1 max-len)\n\
    \                         (sub1 max-pos)))\n                  (else\n        \
    \           (loop (substring string 1 (sub1 (string-length string)))\n       \
    \                  max-len\n                         (sub1 max-pos))))))))\n \
    \ (longest-palindrome-postfix string))", "  (define (search-for-postfix str prefix\
    \ offset)\n    (let ([substr (substring str offset)])\n      (cond [(or (zero?\
    \ (string-length substr)) (= prefix offset))\n             (substring str 0 prefix)]\n\
    \            [(eq? (substring str 0 prefix) (substring str offset))\n        \
    \     (substring str 0 prefix)]\n            [else (search-for-postfix str prefix\
    \ (+ prefix 1))])))\n  (let* ([substr (substring string 0 (- (string-length string)\
    \ 1))]\n         [postfix (search-for-postfix string (string-length string) 0)])\n\
    \    (string-append postfix (reverse substr))))\n```\n\n```racket\n#lang racket\n",
  "  (define (is_palindrome? string)\n    (if (= (length string) 1)\n        #t\n\
    \        (and (equal? (string-ref string 0) (string-ref string (- (length string)\
    \ 1)))\n             (is_palindrome? (substring string 1 (- (length string) 1))))))\n\
    \  (define (make-palindrome* remaining-string prefix)\n    (if (is_palindrome?\
    \ remaining-string)\n        (string-append prefix remaining-string prefix)\n\
    \        (make-palindrome*\n         (substring remaining-string 1)\n        \
    \ (string-append prefix (string-ref remaining-string 0)))))\n  (make-palindrome*\
    \ string \"\"))", "  (define (copy-string from-index to-index)\n    (if (&lt;\
    \ from-index to-index)\n        (string-append (substring string from-index to-index)\n\
    \                       (copy-string from-index (- to-index 1)))\n        (substring\
    \ string from-index to-index)))\n  (define (postfix-is-palindrome from-index to-index)\n\
    \    (if (&lt; from-index to-index)\n        (if (equal? (substring string from-index\
    \ to-index)\n                    (copy-string from-index to-index))\n        \
    \    (postfix-is-palindrome (+ from-index 1) to-index)\n            (postfix-is-palindrome\
    \ (- from-index 1) to-index))\n        (copy-string 0 to-index)))\n  (string-append\
    \ string (postfix-is-palindrome (- (string-length string) 1) 0)))\n</code>\nRacket's\
    \ <code>substring</code> is not tail-recursive, so we define our own <code>copy-string</code>\
    \ procedure to avoid stack overflow errors on long strings.\n", "  (define (find-longest-postfix-palindrome\
    \ string)\n    (define (starts-with-reverse? string)\n      (string=? (reverse\
    \ string) (substring string 1)))\n    (define (make-palindrome-with-prepend string)\n\
    \      (string-append (reverse (substring string 1)) string))\n    (cond ((starts-with-reverse?\
    \ string) string)\n          ((&gt; (string-length string) 1) (find-longest-postfix-palindrome\
    \ (substring string 1)))\n          (else string)))\n  (make-palindrome-with-prepend\
    \ (find-longest-postfix-palindrome string)))\n", "  (define (compare-characters\
    \ c1 c2)\n    (eq? c1 c2))\n  (define (length-is-even? string)\n    (even? (string-length\
    \ string)))\n  (define (even-length-palindrome-suffix string)\n    (if (= (string-length\
    \ string) 2)\n        (substring string 0 1)\n        (string-append\n       \
    \  (substring string 0 2)\n         (even-length-palindrome-suffix (substring\
    \ string 2)))))\n  (define (odd-length-palindrome-suffix string)\n    (if (= (string-length\
    \ string) 1)\n        (substring string 0 1)\n        (string-append\n       \
    \  (substring string 0 1)\n         (odd-length-palindrome-suffix (substring string\
    \ 1)))))\n  (define (find-longest-palindrome-suffix string)\n    (if (string-null?\
    \ string)\n        \"\"\n        (string-append\n         (if (length-is-even?\
    \ string)\n             (even-length-palindrome-suffix string)\n             (odd-length-palindrome-suffix\
    \ string))\n         (find-longest-palindrome-suffix (substring string 1)))))\n\
    \  (define (reverse-prefix string)\n    (substring string\n               0\n\
    \               (- (string-length string)\n                  (string-length (find-longest-palindrome-suffix\
    \ string)))))\n  (string-append string (string-reverse (reverse-prefix string))))",
  "  (let ([prefix (substring string 0 (find-palindrome-suffix string))])\n    (string-append\
    \ string (reverse prefix))))\n", "  (define (reverse-string str)\n    (cond\n\
    \      [(empty? str) empty]\n      [else (string-append (reverse-string (rest\
    \ str)) (list (first str)))]))\n  (define (postfix-is-palindrome str)\n    (let\
    \ ([postfix (reverse str)])\n      (cond\n        [(string=? postfix str) postfix]\n\
    \        [else (postfix-is-palindrome (rest postfix))])))\n  (let ([postfix (postfix-is-palindrome\
    \ string)])\n    (if (null? postfix)\n        string\n        (string-append string\
    \ (reverse-string (substring string 0 (- (string-length string) (string-length\
    \ postfix))))))))\n```\n\n---\n\n#Recursion\n\n```racket", "  (let loop ([current-postfix\
    \ string]\n             [i (- (string-length string) 1)])\n    (if (&lt; i 0)\n\
    \        (string-append current-postfix\n                       (string-reverse\
    \ string))\n        (let ([new-postfix (string-append current-postfix\n      \
    \                                    (string-ref string i))])\n          (if (string=?\
    \ new-postfix (string-reverse new-postfix))\n              (string-append (string-reverse\
    \ (substring string 0 i))\n                             new-postfix)\n       \
    \       (loop new-postfix (- i 1)))))))\n</code>\n", "  (define (longest-palin-suffix\
    \ string)\n    (let loop ((string string)\n               (length (string-length\
    \ string))\n               (prefix \"\"))\n      (cond ((= length 0) prefix)\n\
    \            ((and (palindrome? string)\n                  (not (string=? prefix\
    \ \"\")))\n             prefix)\n            (else (loop (substring string 0 (-\
    \ length 1))\n                        (- length 1)\n                        (string-append\
    \ prefix (substring string (- length 1) length)))))))\n  (define (palindrome?\
    \ string)\n    (define (half? string)\n      (string=? (string-join (map string-downcase\
    \ (string-split string)))\n                (string-join (map string-downcase (reverse\
    \ (string-split string))))))\n    (or (half? string)\n        (half? (string-append\
    \ string \"0\"))))\n  (define (prepend-reverse string)\n    (string-append (reverse\
    \ (string-split string)) string))\n  (string-append string (prepend-reverse (longest-palin-suffix\
    \ string))))", "  (let loop ([string string]\n             [n (length string)])\n\
    \    (cond [(zero? n) string]\n          [(zero? (remainder n 2)) (loop (substring\
    \ string (quotient n 2) n) (quotient n 2))]\n          [(equal? (substring string\
    \ (quotient n 2) n) (reverse (substring string 0 (quotient n 2))))\n         \
    \  (string-append string (reverse (substring string 0 (quotient n 2))))]\n   \
    \       [else (loop (substring string (quotient n 2) n) (quotient n 2))])))\n",
  "  (let loop ([n (string-length string)] [prefix (substring string 0 n)])\n    (if\
    \ (equal? prefix (reverse prefix))\n        (string-append string (reverse (substring\
    \ string 0 (- n (string-length prefix)))))\n        (loop (- n 1) (substring string\
    \ 0 (- n 1))))))\n", "  (define (reverse string)\n    (apply string (build-list\
    \ (string-length string) (lambda (x) (- (string-length string) x)))))\n  (cond\
    \ ((string=? string \"\") \"\")\n        ((string=? string (reverse string)) string)\n\
    \        (else (string-append string (reverse (substring string 0 (find-longest-palindrome-suffix\
    \ string)))))))\n", "  (define (reverse-prefix string prefix)\n    (if (string=?\
    \ prefix \"\")\n        string\n        (reverse-prefix (string-append (substring\
    \ string 0 (- (string-length string) (string-length prefix))) prefix)\n      \
    \                  (substring prefix 0 (- (string-length prefix) 1)))))\n  (define\
    \ (make-reverse-prefix string prefix)\n    (define (make-reverse-prefix-aux string\
    \ prefix suffix)\n      (if (string=? prefix \"\")\n          (make-palindrome\
    \ (string-append string suffix))\n          (make-reverse-prefix-aux string (substring\
    \ prefix 0 (- (string-length prefix) 1))\n                                   (string-append\
    \ (substring prefix (- (string-length prefix) 1)) suffix))))\n    (make-reverse-prefix-aux\
    \ string prefix \"\"))\n  (if (string=? string \"\")\n      \"\"\n      (make-reverse-prefix\
    \ string (reverse-prefix string string))))\n", "  (if (not (string=? string \"\
    \"))\n      (let* ([string_length (string-length string)]\n             [string_length_minus_one\
    \ (- string_length 1)]\n             [substring_to_reverse (substring string 0\
    \ (- string_length_minus_one (palindrome_suffix_length string string_length_minus_one)))]\n\
    \             [substring_to_reverse_length (string-length substring_to_reverse)])\n\
    \        (if (= substring_to_reverse_length 0)\n            string\n         \
    \   (string-append string (substring (reverse_string substring_to_reverse) substring_to_reverse_length))))\n\
    \      \"\"))\n", "  (if (or (string=? string \"\")\n          (string=? string\
    \ (string-reverse string)))\n      string\n      (append\n       string\n    \
    \   (string-reverse (substring string 0 (find-palindrome-start string))))))\n",
  "  (if (string=? string \"\")\n      \"\"\n      (let ([p (find-longest-palindrome\
    \ string)])\n        (string-append string (reverse (substring string 0 (sub1\
    \ (string-length p))))))))\n", "  (define (make-palindrome-helper string-reversed)\n\
    \    (cond\n      ((null? string-reversed) \"\")\n      ((string=? string-reversed\
    \ (reverse string-reversed)) string-reversed)\n      (else (make-palindrome-helper\
    \ (rest string-reversed)))))\n  (string-append string (reverse (make-palindrome-helper\
    \ string))))\n", "  (define (find-longest-suffix-palindrome string)\n    (let\
    \ loop ((suffix (substring string 1))\n               (initial-suffix (substring\
    \ string 1)))\n      (cond\n        ((null? suffix)\n         initial-suffix)\n\
    \        ((equal? (substring string 0 1) (substring suffix 0 1))\n         (loop\
    \ (substring suffix 1)\n               suffix))\n        (else\n         (loop\
    \ (substring suffix 1)\n               initial-suffix)))))\n  (string-append string\
    \ (reverse (substring string 0 (- (string-length string) (string-length (find-longest-suffix-palindrome\
    \ string)))))))\n", "  (define (find-prefix-and-postfix str)\n    (for/fold ([result\
    \ []]) ([i (in-range (add1 (string-length str)))])\n      (match result\n    \
    \    [(list prefix postfix)\n         (define suffix (substring str (sub1 i)))\n\
    \         (define prefix (substring str 0 i))\n         (if (equal? prefix (string-reverse\
    \ suffix))\n             (list prefix suffix)\n             result)])))\n  (match\
    \ (find-prefix-and-postfix string)\n    [(list prefix postfix)\n     (string-append\
    \ string (string-reverse prefix))]\n    [else string]))", "  (let ([str-len (string-length\
    \ string)])\n    (define (is-palindrome left right)\n      (cond [(>= left right)\n\
    \             #t]\n            [(char=? (string-ref string left) (string-ref string\
    \ right))\n             (is-palindrome (+ left 1) (- right 1))]\n            [else\n\
    \             #f]))\n    (define (rev-prefix n)\n      (cond [(< n 0)\n      \
    \       '()]\n            [else\n             (cons (string-ref string n) (rev-prefix\
    \ (- n 1)))]))\n    (cond [(is-palindrome 0 (- str-len 1))\n           string]\n\
    \          [else\n           (string-append string (apply string-append (rev-prefix\
    \ (- str-len 1))))])))\n", "  (if (null? string)\n      \"\"\n      (reverse-postfix\
    \ (reverse string))))\n", "  (define (is_palindrome string)\n    (define (palindrome?\
    \ string left right)\n      (if (< left right)\n          (if (char=? (string-ref\
    \ string left) (string-ref string right))\n              (palindrome? string (+\
    \ left 1) (- right 1))\n              #f)\n          #t))\n    (palindrome? string\
    \ 0 (- (string-length string) 1)))\n  (define (get-shortest-palindrome string\
    \ i)\n    (if (is_palindrome string)\n        string\n        (if (= i (- (string-length\
    \ string) 1))\n            (string-append string (string-reverse (substring string\
    \ 0 (- (string-length string) i))))\n            (get-shortest-palindrome (string-append\
    \ string (string-reverse (substring string 0 (- (string-length string) i)))) (+\
    \ i 1)))))\n  (get-shortest-palindrome string 0))", "  (string-append string (string-reverse\
    \ (substring string 0 (find-longest-palindromic-suffix string 0)))))\n", "  (string-append\
    \ string (reverse (string-before string (longest-suffix-palindrome string)))))\n",
  "  (define (get-postfix string)\n    (define (get-postfix-iter string accum postfix)\n\
    \      (if (empty? string)\n          accum\n          (let* ([pref-start (substring\
    \ string 0 1)]\n                 [postf-start (substring postfix 0 1)]\n     \
    \            [rest-string (substring string 1)]\n                 [rest-postfix\
    \ (substring postfix 1)])\n            (if (equal? pref-start postf-start)\n \
    \               (get-postfix-iter rest-string (string-append accum pref-start)\
    \ rest-postfix)\n                accum))))\n    (get-postfix-iter string \"\"\
    \ (reverse string)))\n  (string-append string (reverse (substring string 0 (-\
    \ (string-length string) (string-length (get-postfix string)))))))\n", "  (define\
    \ reversed-string (reverse string))\n  (define longest-palindrome-postfix (find-longest-common-postfix\
    \ string reversed-string))\n  (string-append string (substring reversed-string\
    \ 0 (- (string-length string) (string-length longest-palindrome-postfix)))))\n",
  "  (define (reverse-string string)\n    (if (null? string)\n        string\n   \
    \     (string-append (reverse-string (substring string 1)) (string (string-ref\
    \ string 0)))))\n  (define (longest-common-suffix string1 string2)\n    (let ([common\
    \ (string-suffix? string1 string2)])\n      (if common\n          (string-append\
    \ common (longest-common-suffix (substring string1 0 (sub1 (string-length string1)))\
    \ string2))\n          \"\")))\n  (string-append string (reverse-string (substring\
    \ string 0 (sub1 (string-length (longest-common-suffix string (reverse-string\
    \ string))))))))\n", "  (define (is_palindrome? string)\n    (define (iter left\
    \ right)\n      (if (&gt; left right)\n          #t\n          (if (string-ci=?\
    \ (string-ref string left) (string-ref string right))\n              (iter (+\
    \ left 1) (- right 1))\n              #f)))\n    (iter 0 (- (string-length string)\
    \ 1)))\n  (define (find-longest-palindrome str)\n    (define (iter str left right)\n\
    \      (if (&gt;= left right)\n          str\n          (if (string-ci=? (string-ref\
    \ str left) (string-ref str right))\n              (iter str (+ left 1) (- right\
    \ 1))\n              (iter (string-take str 0 (- right 1)) 0 (- right 1)))))\n\
    \    (iter str 0 (- (string-length str) 1)))\n  (string-append (find-longest-palindrome\
    \ string) (string-reverse (string-take string 0 (- (string-length (find-longest-palindrome\
    \ string)) 1)))))\n", "  (define (prefix string)\n    (string-take string 1))\n\
    \  (define (longest-prefix-palindrome string)\n    (define palindrome-to-end\n\
    \          (lambda (start)\n            (let ([end (string-length string)])\n\
    \              (let loop ([i start] [j (- end 1)])\n                (cond\n  \
    \                [(>= i (- end 1)) (string-reverse (string-take string i))]\n\
    \                  [(char=? (string-ref string i) (string-ref string j)) (loop\
    \ (+ i 1) (- j 1))]\n                  [else (palindrome-to-end (+ i 1))])))))\n\
    \    (palindrome-to-end 0))\n  (define (longest-palindrome-suffix string)\n  \
    \  (string-reverse (longest-prefix-palindrome (string-reverse string))))\n  (string-append\
    \ string (longest-palindrome-suffix string)))", "  (let ([size (string-length\
    \ string)])\n    (letloop ([pivot 0]\n              [shortest-palindrome '()])\n\
    \      (let ([prefix (substring string 0 pivot)])\n        (let ([reversed-prefix\
    \ (reverse prefix)])\n          (let ([palindrome (string-append prefix reversed-prefix)])\n\
    \            (if (string=? palindrome string)\n                palindrome\n  \
    \              (if (string=? (substring palindrome pivot) (substring palindrome\
    \ 0 (- size pivot)))\n                    (if (string&lt;? (if (not (string=?\
    \ shortest-palindrome \"\")) shortest-palindrome \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
  "  (define (palindrome? string)\n    (equal? string (reverse string)))\n  (define\
    \ (reverse string)\n    (apply string-append (reverse (string-&gt;list string))))\n\
    \  (define (is-prefix? prefix string)\n    (equal? (take prefix string) prefix))\n\
    \  (define (take count string)\n    (string-join (take-right count (string-&gt;list\
    \ string))))\n  (define (take-right count list)\n    (cond\n      [(zero? count)\
    \ empty]\n      [(not (empty? list)) (append (take-right (- count 1) (rest list))\
    \ (list (first list)))]))\n  (define (append list1 list2)\n    (reverse (reverse\
    \ list1 (reverse list2))))\n  (define (reverse string list)\n    (append (reverse\
    \ (rest string) (cons (first string) list)))\n  (cond\n    [(empty? string) empty]\n\
    \    [(empty? (rest string)) string]\n    [(palindrome? string) string]\n    [else\n\
    \     (let ([prefix (reverse (drop-left (drop-left string) string))])\n      \
    \ (append string prefix))]))\n", "  (let ([lst (string->list string)])\n    (reverse\
    \ lst)))\n", "  (if (string=? string \"\")\n      \"\"\n      (let ([len (- (string-length\
    \ string) 1)])\n        (let loop ([len len])\n          (if (zero? len)\n   \
    \           (string-append string (string-reverse string))\n              (if\
    \ (string=? (substring string len) (string-reverse (substring string 0 (+ len\
    \ 1))))\n                  (string-append string (string-reverse (substring string\
    \ 0 len)))\n                  (loop (- len 1))))))))\n```", "  (define (range\
    \ i j)\n    (let loop ([r '()] [i i] [j j])\n      (if (> i j)\n          r\n\
    \          (loop (cons i r) (+ i 1) j))))\n  (define (reverse-range i j)\n   \
    \ (define (rev lst)\n      (let loop ([lst lst] [r '()])\n        (if (null? lst)\n\
    \            r\n            (loop (cdr lst) (cons (car lst) r)))))\n    (rev (range\
    \ i j)))\n  (define (is-palindrome? lst)\n    (if (null? lst)\n        #t\n  \
    \      (if (null? (cdr lst))\n            #t\n            (if (equal? (car lst)\
    \ (car (reverse lst)))\n                (is-palindrome? (cdr (reverse (cdr lst))))\n\
    \                #f))))\n  (let ([suffix (reverse-range\n                 (define\
    \ (longest-palindrome-suffix lst)\n                   (let loop ([i (sub1 (length\
    \ lst))] [j (length lst)])\n                     (if (= j 0)\n               \
    \          i\n                         (if (is-palindrome? (reverse-range j i))\n\
    \                             i\n                             (loop (- i 1) j)))))\n\
    \                 (length string))])\n    (string-append string (substring string\
    \ 0 (longest-palindrome-suffix string)))))\n", "  (define (reverse-string string)\n\
    \    (apply string-append (map string (reverse (string->list string)))))\n  (define\
    \ (is-palindrome? string)\n    (equal? string (reverse-string string)))\n  (define\
    \ (find-longest-palindrome-suffix string)\n    (if (is-palindrome? string)\n \
    \       string\n        (find-longest-palindrome-suffix (substring string 1))))\n\
    \  (let ((suffix (find-longest-palindrome-suffix string)))\n    (string-append\
    \ string (reverse-string (substring string 0 (- (string-length string) (string-length\
    \ suffix)))))))\n", "  (if (string=? \"\" string)\n      \"\"\n      (append string\
    \ (reverse (substring string 0 (longest-palindromic-suffix string))))))\n", " \
    \ (define (make-palindrome-helper s a)\n    (if (= (count s) 0)\n        (string-append\
    \ a (reverse a))\n        (let* ([pref (substring s 0 1)]\n               [post\
    \ (substring s 1 (count s))]\n               [a-pref (substring a 0 1)]\n    \
    \           [a-post (substring a 1 (count a))])\n          (cond [(string=? a-pref\
    \ pref)\n                 (make-palindrome-helper post a-post)]\n            \
    \    [else\n                 (make-palindrome-helper s\n                     \
    \                    (string-append pref a))]))))\n  (make-palindrome-helper string\
    \ \"\"))\n", "  (define (append-reverse-prefix string len-palindrome)\n    (string-append\
    \ string (string-append (reverse (substring string 0 len-palindrome)))))\n  (define\
    \ (is-palindrome string)\n    (string=? string (reverse string)))\n  (define (find-longest-palindrome\
    \ string)\n    (let ([len (string-length string)])\n      (let loop ([i 0])\n\
    \        (cond\n          [(= i len) 0]\n          [(is-palindrome (substring\
    \ string i len)) len]\n          [else (loop (+ i 1))]))))\n  (let ([len-palindrome\
    \ (find-longest-palindrome string)])\n    (append-reverse-prefix string len-palindrome)))\n",
  "  (let loop ([string string]\n             [i (sub1 (string-length string))])\n\
    \    (cond [(= i -1) (string-append string (reverse string))]\n          [(char=?\
    \ (string-ref string i) (string-ref string (- i 1)))\n           (string-append\
    \ string (reverse (substring string 0 i)))]\n          [else (loop string (- i\
    \ 1))])))\n```", "  (define (reverse str)\n    (cond\n      [(empty? str) '()]\n\
    \      [else (append (reverse (rest str)) (list (first str)))]))\n  (define (contains?\
    \ string suffix)\n    (cond\n      [(empty? suffix) #t]\n      [(member (first\
    \ suffix) string) (contains? string (rest suffix))]\n      [else #f]))\n  (define\
    \ (find-longest-palindrome-suffix string)\n    (cond\n      [(empty? string) '()]\n\
    \      [(contains? string (reverse string)) (append (list (first string)) (find-longest-palindrome-suffix\
    \ (rest string)))]\n      [else '()]))\n  (append string (reverse (take (substring\
    \ string 0 (count (find-longest-palindrome-suffix string))) string))))\n```\n\n\
    ## Author\n[Ivan Mironov](https://github.com/imironov)", "  (define (substr from\
    \ to)\n    (substring string from to))\n  (define (rev string)\n    (apply string-append\
    \ (map (\u03BB (c) (substring c 0 1)) (reverse (string-split string)))))\n  (define\
    \ (substr-is-palindrome string)\n    (define (substr-is-palindrome/2 rev/string)\n\
    \      (equal? string rev/string))\n    (substr-is-palindrome/2 (rev string)))\n\
    \  (define (find-longest-palindrome-suffix)\n    (let loop ([i (sub1 (string-length\
    \ string))])\n      (cond\n        [(substr-is-palindrome (substr 0 i)) i]\n \
    \       [else (loop (sub1 i))])))\n  (define (find-shortest-palindrome string\
    \ palindrome-length)\n    (apply string-append (list (substr 0 (sub1 palindrome-length))\
    \ (rev (substr palindrome-length (string-length string))) string)))\n  (find-shortest-palindrome\
    \ string (find-longest-palindrome-suffix)))\n", "  (define (reverse-str str)\n\
    \    (let ([len (string-length str)])\n      (let loop ([i 0] [result '()])\n\
    \        (if (= i len)\n            (list->string (reverse result))\n        \
    \    (loop (+ i 1) (cons (string-ref str i) result))))))\n  (define (find-suffix\
    \ str)\n    (let loop ([i 0] [len (string-length str)])\n      (if (= i len)\n\
    \          \"\"\n          (let ([remainder (substring str i len)])\n        \
    \    (if (string=? remainder (reverse-str remainder))\n                remainder\n\
    \                (loop (+ i 1) len))))))\n  (string-append string (reverse-str\
    \ (substring string 0 (- (string-length string) (string-length (find-suffix string)))))))\n",
  "  (define (reverse-string string)\n    (let ((len (string-length string)))\n  \
    \    (let recur ((i 0) (rev \"\"))\n        (if (= i len)\n            rev\n \
    \           (recur (+ i 1) (string-append (substring string i (+ i 1)) rev))))))\n\
    \  (define (find-palindrome-suffix string)\n    (let ((len (string-length string)))\n\
    \      (let recur ((i 0) (count 0))\n        (if (= i len)\n            count\n\
    \            (if (char=? (string-ref string i) (string-ref string (- len 1 i)))\n\
    \                (recur (+ i 1) (+ count 1))\n                count)))))\n  (let\
    \ ((suffix-len (find-palindrome-suffix string)))\n    (if (= suffix-len 0)\n \
    \       string\n        (string-append string (reverse-string (substring string\
    \ 0 (- (string-length string) suffix-len)))))))\n", "  (define (find-palindrome\
    \ i j)\n    (if (&lt;= i j)\n        (if (string=? (substring string i j) (substring\
    \ string (- j 1) (+ i -1) 'end))\n            (cons (substring string i j) (substring\
    \ string (- j 1) (+ i -1) 'end))\n            (find-palindrome (+ i 1) j))\n \
    \       '()))\n  (string-append string (cdr (find-palindrome 0 (string-length\
    \ string)))))\n</code>\n", "  (define (inverse str)\n    (foldl (lambda (c acc)\
    \ (string-append (string c) acc)) \"\" str))\n  (let ((i (find-longest-palindrome-suffix\
    \ string)))\n    (string-append string (inverse (substring string 0 i)))))\n",
  "  (if (null? string)\n      \"\"\n      (if (is_palindrome string)\n          string\n\
    \          (append string (reverse (substring string 0 (- (length string) (longest_palindromic_suffix\
    \ string))))))))\n", "  (define (reverse string)\n    (local ((define (loop s\
    \ answer)\n              (if (string-empty? s)\n                  answer\n   \
    \               (loop (substring s 1) (string-append (string (string-ref s 0))\
    \ answer)))))\n      (loop string \"\")))\n  (define (is_palindrome? string)\n\
    \    (define (loop s1 s2)\n      (if (string-empty? s1)\n          #t\n      \
    \    (if (string-empty? s2)\n              #f\n              (if (char=? (string-ref\
    \ s1 0) (string-ref s2 0))\n                  (loop (substring s1 1) (substring\
    \ s2 -1))\n                  #f))))\n    (loop string (reverse string)))\n  (define\
    \ (substr-from-first char string)\n    (string-drop string (string-index string\
    \ char)))\n  (define (substr-until-last char string)\n    (string-take string\
    \ (+ 1 (string-index (reverse string) char))))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (local ((define (find-longest-palindrome-suffix-from-chunk! candidate)\n\
    \              (define (find-longest-suffix! suffix)\n                (let* ((suffix\
    \ (substr-from-first #\\# suffix))\n                       (is-palin? (is_palindrome?\
    \ suffix)))\n                  (if is-palin?\n                      (max candidate\
    \ suffix)\n                      (if (not (string-empty? suffix))\n          \
    \                (find-longest-suffix! suffix)\n                          candidate))))\n\
    \              (find-longest-suffix! candidate)))\n      (local ((define (chunk-string\
    \ string)\n                (string-intersperse string (string #\\#))))\n     \
    \   (find-longest-palindrome-suffix-from-chunk! (chunk-string string)))))\n  (define\
    \ (find-longest-palindrome-prefix string)\n    (local ((define (find-longest-palindrome-prefix-from-chunk!\
    \ candidate)\n              (define (find-longest-prefix! prefix)\n          \
    \      (let", "  (let loop ([left 0] [right (- (string-length string) 1)])\n \
    \   (if (or (= left right)\n            (= left (- right 1)))\n        (let ([prefix\
    \ (substring string 0 left)])\n          (string-append string (string-reverse\
    \ prefix)))\n        (if (char=? (string-ref string left) (string-ref string right))\n\
    \            (loop (+ left 1) (- right 1))\n            (loop (+ left 1) right)))))",
  "  (define (reverse lst)\n    (if (null? lst)\n        '()\n        (append (reverse\
    \ (cdr lst)) (list (car lst)))))\n  (define (prefix str idx)\n    (if (= idx 0)\n\
    \        '()\n        (cons (string-ref str (- idx 1)) (prefix str (- idx 1)))))\n\
    \  (define (suffix str idx)\n    (if (= idx 0)\n        '()\n        (cons (string-ref\
    \ str (- idx 1)) (suffix str (- idx 1)))))\n  (define (is_palindrome str idx)\n\
    \    (if (= idx 0)\n        #t\n        (and (char=? (string-ref str 0) (string-ref\
    \ str (- idx 1))) (is_palindrome str (- idx 1)))))\n  (define (find_palindrome\
    \ str idx)\n    (if (is_palindrome str idx)\n        idx\n        (find_palindrome\
    \ str (- idx 1))))\n  (define (postfix str idx)\n    (reverse (prefix str idx)))\n\
    \  (if (string=? string \"\")\n      \"\"\n      (string-append string (postfix\
    \ string (find_palindrome string (string-length string))))))", "  (let loop ([string\
    \ string]\n             [len (- (string-length string) 1)])\n    (cond [(equal?\
    \ string (string-reverse string)) string]\n          [(not (equal? (substring\
    \ string len) (string-reverse (substring string 0 len))))\n           (loop string\
    \ (- len 1))]\n          [else (string-append string (string-reverse (substring\
    \ string 0 len)))])))\n", "  (define (aux string)\n    (cond\n      [(empty? string)\
    \ string]\n      [(> (length string) 1)\n       (let* ([sub (substring string\
    \ 0 (- (length string) 1))]\n              [sub-sub (aux sub)])\n         (if\
    \ (equal? sub-sub sub)\n             (reverse sub)\n             (append string\
    \ (reverse sub))))]\n      [else (append string (reverse string))]))\n  (aux string))\n",
  "  (define suffix\n    (for/first ([e (in-list (string-indexes string))])\n    \
    \  (andmap (lambda (f) (char=? (string-ref string f) (string-ref string e)))\n\
    \              (range e))))\n  (if suffix\n      (string-append string (for/string\
    \ ([i (in-list (range (sub1 (string-length string))))])\n                    \
    \                    (string-ref string i)))\n      string))\n", "  (define (make-palindrome-helper\
    \ string-reversed longest-palindrome-suffix index)\n    (if (string=? string-reversed\
    \ longest-palindrome-suffix)\n        string-reversed\n        (make-palindrome-helper\
    \ string-reversed\n                                (string-append longest-palindrome-suffix\n\
    \                                               (substring string 0 1))\n    \
    \                            (+ index 1))))\n  (string-append string (make-palindrome-helper\
    \ (string-reverse string) \"\" 0)))\n", "  (define (is_palindrome str)\n    (let\
    \ loop ([len (- (string-length str) 1)]\n               [pos 0])\n      (if (=\
    \ len pos)\n          #t\n          (if (char=? (string-ref str pos) (string-ref\
    \ str len))\n              (loop (- len 1) (+ pos 1))\n              #f))))\n\
    \  (define (is_prefix_palindrome str)\n    (let loop ([len (string-length str)]\n\
    \               [pos 1])\n      (if (= len pos)\n          #t\n          (if (char=?\
    \ (string-ref str 0) (string-ref str pos))\n              (loop (- len 1) (+ pos\
    \ 1))\n              #f))))\n  (let loop ([suffix \"\"])\n    (cond\n      [(is_palindrome\
    \ suffix)\n       (string-append string (string-reverse (substring string 0 (-\
    \ (string-length string) (string-length suffix)))))\n      ]\n      [(is_prefix_palindrome\
    \ suffix)\n       (loop (string-append suffix (string (string-ref string 0))))\n\
    \      ]\n      [else\n       (loop (string-append suffix (string (string-ref\
    \ string 0))))\n      ])))\n", "  (letrec ([palindrome (lambda (string)\n    \
    \                    (let ((slen (string-length string)))\n                  \
    \        (cond [(zero? slen) #t]\n                                [(or (equal?\
    \ (substring string 0 1) (substring string (- slen 1) slen)) (palindrome (substring\
    \ string 1 (- slen 1)))) string]\n                                [else #f])))])\n\
    \    (let ([prefix (palindrome string)])\n      (if (string? prefix)\n       \
    \   (string-append prefix (reverse (substring string 0 (- (string-length prefix)\
    \ 1))))\n          string))))\n", "  (make-string-palindrome string 0 (string-length\
    \ string)))\n", "  (define (palindrome? substring)\n    (string=? substring (reverse\
    \ substring)))\n  (define (find-longest-palindrome-postfix substring)\n    (cond\
    \ ((palindrome? substring) substring)\n          (else (find-longest-palindrome-postfix\
    \ (substring substring 1)))))\n  (define (append-reversed-prefix string palindrome-postfix)\n\
    \    (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length palindrome-postfix))))))\n  (append-reversed-prefix string (find-longest-palindrome-postfix\
    \ string)))\n", "  (define (rev_str str)\n    (reverse str))\n  (define (palindrome_suffix_len\
    \ str)\n    (define (str_len str)\n      (length str))\n    (define (reverse_suffix\
    \ str len)\n      (substring str len (str_len str)))\n    (define (suffix_palindrome?\
    \ str len)\n      (if (zero? len)\n          #t\n          (if (char=? (string-ref\
    \ str len) (string-ref str (- len 1)))\n              (suffix_palindrome? str\
    \ (- len 1))\n              #f)))\n    (define (calc_len str)\n      (if (suffix_palindrome?\
    \ str (- (str_len str) 1))\n          (+ (calc_len str) 1)\n          0))\n  \
    \  (if (string=? str \"\")\n        0\n        (calc_len str)))\n  (define (prepend_suffix\
    \ str len)\n    (append (reverse_suffix str len) str))\n  (prepend_suffix string\
    \ (palindrome_suffix_len string)))\n", "  (let ([suffix (reverse string)])\n \
    \   (cond\n      [(string=? string suffix) string]\n      [else (string-append\
    \ string (suffix (substring suffix (add1 (string-length string)))))])))", "  (define\
    \ (reverse string)\n    (string-append (substring string (- (string-length string)\
    \ 1) (string-length string))\n                   (if (&gt;= (string-length string)\
    \ 2)\n                       (reverse (substring string 0 (- (string-length string)\
    \ 1))))))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (palindrome-length string))))))\n", "  (match (find-longest-palindromic-postfix\
    \ string)\n    [`(,postfix-end ,palindromic-postfix)\n     (let ([prefix (substring\
    \ string 0 postfix-end)])\n       (list->string (append (list->string prefix)\
    \ (reverse (list->string prefix)) (list->string palindromic-postfix))))]))\n",
  "  (if (string=? string \"\")\n      \"\"\n      (let ([idx (substring-index string\
    \ (list-ref (reverse (string->list string)) 0))])\n\t(string-append string (substring\
    \ (reverse string) 0 (- (string-length string) idx))))))\n", "  (define (longest-palindrome-postfix\
    \ string)\n    (define (beginning-of-palindrome-postfix i)\n      (if (= i 0)\n\
    \          i\n          (if (string=? (substring string i 0) (substring string\
    \ 0 i))\n              i\n              (beginning-of-palindrome-postfix (- i\
    \ 1)))))\n    (beginning-of-palindrome-postfix (string-length string)))\n  (let\
    \ ((palindrome-postfix-length (longest-palindrome-postfix string)))\n    (string-append\
    \ string (reverse (substring string 0 (- (string-length string) palindrome-postfix-length))))))",
  "  (define (reverse string)\n    (let loop ((s string) (len (- (string-length string)\
    \ 1)) (ret '()))\n      (if (= len -1)\n          (string-append ret (list (string-ref\
    \ s 0)))\n          (loop (substring s 1) (- len 1) (cons (string-ref s 0) ret)))))\n\
    \  (define (all-same? lst)\n    (cond ((null? lst) #t)\n          ((null? (cdr\
    \ lst)) #t)\n          ((not (equal? (car lst) (cadr lst))) #f)\n          (else\
    \ (all-same? (cdr lst)))))\n  (define (is-palindrome? string)\n    (all-same?\
    \ (let loop ((s string) (len (- (string-length string) 1)) (ret '()))\n      \
    \           (if (= len -1)\n                     (cons (string-ref s 0) ret)\n\
    \                     (loop (substring s 1) (- len 1) (cons (string-ref s 0) ret))))))\n\
    \  (define (find-palindrome string)\n    (define (loop string)\n      (if (is-palindrome?\
    \ string)\n          string\n          (loop (substring string 0 (- (string-length\
    \ string) 1)))))\n    (loop string))\n  (let ((palindrome (find-palindrome string)))\n\
    \    (string-append string (reverse (substring string 0 (- (string-length palindrome)\
    \ 1))))))\n", "  (if (empty? string)\n      (string-append \"\")\n      (define\
    \ longest-suffix-length\n        (for/fold ([longest-suffix-length 0])\n     \
    \             ([i (in-range (add1 (string-length string)))])\n          (define\
    \ substr (substring string (- i) (string-length string)))\n          (if (is-palindrome?\
    \ substr)\n              (add1 i)\n              longest-suffix-length)))\n  \
    \    (define longest-suffix (substring string (- longest-suffix-length) (string-length\
    \ string)))\n      (string-append string (reverse (substring string 0 (sub1 (string-length\
    \ string)))))))\n", "  (let ((len (string-length string)))\n    (define (find-postfix-len\
    \ starting)\n      (if (and (> (+ starting 1) len)\n               (string=? (substring\
    \ string starting (- len 1))\n                         (substring string (+ starting\
    \ 1) len)))\n          (find-postfix-len (+ starting 1))\n          starting))\n\
    \    (let ((postfix-len (find-postfix-len 0)))\n      (string-append string\n\
    \                      (substring string\n                                 (sub1\
    \ postfix-len)\n                                 len)))))\n", "  (define (reverse-string\
    \ string)\n    (let loop ((string string)\n               (new-string (string)))\n\
    \      (if (empty? string)\n          new-string\n          (loop (substring string\
    \ 1)\n                (string-append (substring string 0 1) new-string)))))\n\
    \  (define (longest-palindrome string)\n    (if (string= string (reverse-string\
    \ string))\n        string\n        (longest-palindrome (substring string 0 (-\
    \ (string-length string) 1)))))\n  (define (longest-palindrome-reverse string)\n\
    \    (if (string= string (reverse-string string))\n        (reverse-string string)\n\
    \        (longest-palindrome-reverse (reverse-string (substring string 1)))))\n\
    \  (string-append string (longest-palindrome-reverse string)))\n", "  (if (string=?\
    \ string \"\")\n      \"\"\n      (string-append string (string-reverse (substring\
    \ string 0 (find-longest-palindromic-suffix string))))))\n", "  (define (postfix-length\
    \ string)\n    (if (string=? (substring string 0 1) (substring string 1 2))\n\
    \       1\n       (+ 1 (postfix-length (substring string 1 (string-length string))))))\n\
    \  (define (postfix-palindrome string)\n    (substring string 0 (postfix-length\
    \ string)))\n  (define (reverse-prefix string)\n    (substring string (postfix-length\
    \ string) (string-length string)))\n  (define (postfix-reverse-prefix string)\n\
    \    (string-append (postfix-palindrome string) (reverse-prefix string)))\n  (postfix-reverse-prefix\
    \ string))\n", "  (let loop ([lst (string->list string)]\n             [longest-palindrome\
    \ #f])\n    (cond [(and (not (pair? lst))\n                (not longest-palindrome))\n\
    \           string]\n          [(null? lst)\n           string]\n          [(palindrome?\
    \ lst)\n           (if (and (pair? longest-palindrome)\n                    (<\
    \ (length lst) (length longest-palindrome)))\n               (loop (cdr lst) longest-palindrome)\n\
    \               (loop (cdr lst) lst))]\n          [else\n           (loop (cdr\
    \ lst) longest-palindrome)])))", "  (define (rev s)\n    (define (rev-helper s\
    \ rev-so-far)\n      (if (null? s)\n          rev-so-far\n          (rev-helper\
    \ (cdr s) (cons (car s) rev-so-far))))\n    (rev-helper s '()))\n  (define (prefix-equals?\
    \ s1 s2)\n    (cond ((and (null? s1) (null? s2)) #t)\n          ((or (null? s1)\
    \ (null? s2)) #f)\n          ((equal? (car s1) (car s2)) (prefix-equals? (cdr\
    \ s1) (cdr s2)))\n          (else #f)))\n  (define (find-longest-palindrome s)\n\
    \    (define (scan-backward c lst)\n      (cond ((null? lst) '())\n          \
    \  ((equal? c (car lst)) (cons c (scan-backward c (cdr lst))))\n            (else\
    \ '())))\n    (let loop ((acc-so-far '())\n               (lst s))\n      (cond\
    \ ((null? lst) acc-so-far)\n            ((prefix-equals? acc-so-far (scan-backward\
    \ (car lst) (cdr lst)))\n             (loop (cons (car lst) acc-so-far) (cdr lst)))\n\
    \            (else acc-so-far))))\n  (define (append-reversed s rev-so-far)\n\
    \    (cond ((null? s) rev-so-far)\n          (else (append-reversed (cdr s) (cons\
    \ (car s) rev-so-far)))))\n  (append-reversed string (find-longest-palindrome\
    \ string)))\n", "  (define (is_palindrome_r str start end)\n    (cond\n      [(>\
    \ start end) #t]\n      [(char=? (string-ref str start) (string-ref str end))\
    \ (is_palindrome_r str (+ start 1) (- end 1))]\n      [else #f]))\n  (define (is_palindrome\
    \ str)\n    (is_palindrome_r str 0 (- (string-length str) 1)))\n  (define (longest_palindrome_prefix\
    \ str start end)\n    (cond\n      [(<= start end)\n       (if (is_palindrome\
    \ (substring str start (+ start 1)))\n           (+ start 1)\n           (longest_palindrome_prefix\
    \ str (+ start 1) end))]\n      [else (- start 1)]))\n  (define (reverse str)\n\
    \    (apply string (reverse (string->list str))))\n  (string-append string (reverse\
    \ (substring string 0 (longest_palindrome_prefix string 0 (- (string-length string)\
    \ 1))))))\n", "  (define (palindrome? str)\n    (if (empty? str) #t\n        (equal?\
    \ (car str) (last str))\n        (palindrome? (cdr (init str)))))\n  (define (rev\
    \ str)\n    (reverse str))\n  (define (make-palindrome string)\n    (reverse string))\n\
    \  (let loop ((string string))\n    (if (palindrome? string)\n        string\n\
    \        (loop (string-append string (make-palindrome (string-take string 1)))))))\n",
  "  (define (palindrome string)\n    (string=? string (string-reverse string)))\n\
    \  (define (find-palindrome string)\n    (for/first ([suffix (in-list (in-naturals))]\n\
    \                #:when (palindrome (substring string suffix)))\n      suffix))\n\
    \  (cond [(palindrome string) string]\n        [else (append string (string-reverse\
    \ (substring string 0 (find-palindrome string))))]))\n```\n\n```\n#lang racket\n",
  "  (if (= 0 (string-length string))\n      \"\"\n      (let ((reverse (string-reverse\
    \ string)))\n        (string-append string (substring reverse (string-length (longest-common-substring\
    \ string reverse)))))))\n", "  (define (generate_string_list string)\n    (list->string\
    \ (list->string string)))\n  (define (generate_string_list_2 string index)\n \
    \   (list->string (list->string string index)))\n  (define (longest_palindrome\
    \ string-list index)\n    (let (\n          (string-list-rev (reverse string-list))\n\
    \          (string-list-len (string-length string-list))\n          (string-list-half\
    \ (quotient string-list-len 2))\n          (index-half (quotient index 2))\n \
    \         (string-list-split1 (generate_string_list string-list index-half))\n\
    \          (string-list-split2 (generate_string_list_2 string-list index-half\
    \ index))\n          (found #f)\n          )\n      (cond\n       ((= (string-length\
    \ string-list-split1) 0)\n        #f)\n       ((string=? string-list-split1 string-list-split2)\n\
    \        (if (= string-list-len index)\n            string-list\n            (longest_palindrome\
    \ string-list (+ index 1))))\n       (else\n        (longest_palindrome string-list\
    \ (- index 1))))))\n  (let (\n        (string-len (string-length string))\n  \
    \      (string-half (quotient string-len 2))\n        (palindrome-string-list\
    \ (longest_palindrome string string-len))\n        (palindrome-string-list-len\
    \ (string-length palindrome-string-list))\n        (palindrome-string-list-half\
    \ (quotient palindrome-string-list-len 2))\n        (palindrome-string-list-split1\
    \ (generate_string_list palindrome-string-list palindrome-string-list-half))\n\
    \        (palindrome-string-list-split2 (generate_string_list_2 palindrome-string-list\
    \ palindrome-string-list-half palindrome-string-list-len))\n        )\n    (if\
    \ (= palindrome-string-list-len string-len)\n        string\n        (", "  (define\
    \ (reverse-string string)\n    (if (equal? string \"\")\n        \"\"\n      \
    \  (string-append (reverse-string (substring string 1)) (substring string 0 1))))\n\
    \  (letrec ([longest-palindrome-prefix\n            (define (longest-palindrome-prefix\
    \ string)\n              (if (equal? string \"\")\n                  \"\"\n  \
    \                (let ([candidate-prefix (string-append (longest-palindrome-prefix\
    \ (substring string 1)) (substring string 0 1))])\n                    (let ([reversed-candidate-prefix\
    \ (reverse-string candidate-prefix)])\n                      (if (equal? (string-append\
    \ candidate-prefix reversed-candidate-prefix) string)\n                      \
    \    candidate-prefix\n                          (longest-palindrome-prefix (substring\
    \ string 1)))))))\n            (longest-palindrome-prefix string))])\n    (string-append\
    \ string (reverse-string (substring string 0 (- (string-length string) (string-length\
    \ longest-palindrome-prefix)))))))\n", "  (if (empty? string)\n      \"\"\n  \
    \    (if (equal? (reverse string) string)\n          string\n          (append\
    \ string (reverse (substring string 0 (first-palindrome-suffix string)))))))\n",
  "  (let ((longest-palindrome-postfix (find-longest-palindrome-postfix string)))\n\
    \    (string-append\n     string\n     (substring (reverse string) 0 (- (string-length\
    \ string) (string-length longest-palindrome-postfix))))))\n", "  (if (equal? string\
    \ \"\")\n      \"\"\n      (string-append string (reverse (string-tail string\
    \ (- (string-length string) (longest-postfix-palindrome string)))))))\n", "  (define\
    \ (reverse string)\n    (let loop ((string string)\n               (output \"\"\
    ))\n      (if (string=? string \"\")\n          output\n          (loop (substring\
    \ string 1)\n                (string-append (substring string 0 1) output)))))\n\
    \  (let* ((string (string-append string \" \"))\n         (len (string-length\
    \ string))\n         (is-palindrome?\n          (lambda (n)\n            (and\
    \ (string=? (substring string 0 n)\n                           (reverse (substring\
    \ string n len)))\n                 (> n 0)))))\n    (string-append string\n \
    \                  (reverse (substring string 0\n                            \
    \           (for/first ([n (in-range len)])\n                                \
    \         (is-palindrome? n)))))))", "  (define (reverse string)\n    (apply string\
    \ (build-list (string-length string) (lambda (x) -1))))\n  (define (suffix? suffix\
    \ string)\n    (and (string=? (substring string 0 (string-length suffix)) suffix)\
    \ #t))\n  (define (make-palindrome-helper string suffix)\n    (if (suffix? suffix\
    \ string)\n        (append string (reverse (substring string 0 (string-length\
    \ suffix))))\n        (make-palindrome-helper string (substring suffix 0 -1))))\n\
    \  (make-palindrome-helper string string))\n```\n\n```racket", "  (define (find-longest-palindrome\
    \ start end)\n    (if (= start end)\n        (list (substring string start (+\
    \ start 1)) start)\n        (let ((palindrome-from-right-to-left (find-longest-palindrome\
    \ start (- end 1)))\n              (palindrome-from-left-to-right (find-longest-palindrome\
    \ (+ start 1) end)))\n          (if (> (string-length (car palindrome-from-right-to-left))\n\
    \                 (string-length (car palindrome-from-left-to-right)))\n     \
    \         palindrome-from-right-to-left\n              palindrome-from-left-to-right))))\n\
    \  (let ((longest-palindrome (find-longest-palindrome 0 (- (string-length string)\
    \ 1))))\n    (string-append string (string-reverse (substring string 0 (cadr longest-palindrome))))))\n",
  "  (define (is_palindrome? string)\n    (define (is_palindrome?-rec s0 s1)\n   \
    \   (if (string=? s0 \"\")\n          #t\n          (if (string=? (substring s0\
    \ 0 1) (substring s1 -1))\n              (is_palindrome?-rec (substring s0 1)\
    \ (substring s1 0 -1))\n              #f)))\n    (is_palindrome?-rec string string))\n\
    \  (define (find-longest-palindrome-suffix string)\n    (define (find-longest-palindrome-suffix-rec\
    \ string prev)\n      (let ((check (string-append prev (string-reverse prev))))\n\
    \        (if (is_palindrome? check)\n            (string-reverse prev)\n     \
    \       (find-longest-palindrome-suffix-rec string (substring check 0 -1)))))\n\
    \    (find-longest-palindrome-suffix-rec string (substring string 0 -1)))\n  (string-append\
    \ string (find-longest-palindrome-suffix string)))\n", "  (define (longest-postfix\
    \ s)\n    (define (helper s b e)\n      (if (and (not (eq? b e)) (= (string-ref\
    \ s b) (string-ref s e)))\n          (helper s (+ b 1) (- e 1))\n          (substring\
    \ s e (add1 e))))\n    (helper s 0 (string-length s)))\n  (string-append string\
    \ (string-reverse (longest-postfix string))))\n", "  (define str (string->list\
    \ string))\n  (define str-rev (reverse str))\n  (define (longest-palindrome-ending-at\
    \ i)\n    (define prefix (substring string 0 i))\n    (define str-prefix (substring\
    \ str 0 i))\n    (define str-prefix-rev (reverse str-prefix))\n    (if (and (string=?\
    \ (list->string str-prefix) (list->string str-prefix-rev))\n             (string=?\
    \ prefix (list->string str-prefix-rev)))\n        (substring string 0 i)\n   \
    \     (longest-palindrome-ending-at (- i 1))))\n  (string-append string (substring\
    \ (reverse string) (string-length (longest-palindrome-ending-at (string-length\
    \ string))))))\n", "  (let ([len (string-length string)])\n    (define (palindrome?\
    \ n)\n      (letrec ([palindrome?\n                (lambda (i)\n             \
    \     (if (> i 0)\n                      (and (char=? (string-ref string (- len\
    \ i)) (string-ref string (pred i)))\n                           (palindrome? (pred\
    \ i)))\n                      #t))])\n        (palindrome? n)))\n    (letrec ([longest-palindrome\n\
    \              (lambda (n)\n                (if (palindrome? n)\n            \
    \        n\n                    (longest-palindrome (pred n))))])\n      (let\
    \ ([l (longest-palindrome (pred len))])\n        (string-append string (substring\
    \ string 0 (sub1 len)) (reverse (substring string 0 l)))))))\n", "  (let* ((string-length\
    \ (string-length string))\n         (array (make-vector string-length 0))\n  \
    \       (max_suf_pal_index -1)\n         (max_suf_pal_length 0)\n         (i 0))\n\
    \    (define (char-at i)\n      (substring string i (+ i 1)))\n    (define (char-at-pos\
    \ j)\n      (substring string (- string-length j)\n                 (+ (- string-length\
    \ j) 1)))\n    (define (set-array! index value)\n      (vector-set! array index\
    \ value))\n    (define (get-array index)\n      (vector-ref array index))\n  \
    \  (define (is-palindrome-at-i! i)\n      (let* ((i-1 (sub1 i))\n            \
    \ (i-2 (sub1 i-1))\n             (i-3 (sub1 i-2))\n             (substr-1 (char-at-pos\
    \ i))\n             (substr-2 (char-at-pos i-1))\n             (substr-3 (char-at-pos\
    \ i-2))\n             (substr-4 (char-at-pos i-3)))\n        (cond ((string=?\
    \ substr-1 substr-2)\n               (set-array! i-1 2)\n               (set-array!\
    \ i-2 1)\n               (set-array! i-3 0)\n               (and (> i 2) (is-palindrome-at-i!\
    \ i-2)))\n              ((string=? substr-1 substr-3)\n               (set-array!\
    \ i-1 3)\n               (set-array! i-2 2)\n               (set-array! i-3 1)\n\
    \               (and (> i 3) (is-palindrome-at-i! i-3)))\n              ((string=?\
    \ substr-1 substr-4)\n               (set-array! i-1 4)\n               (set-array!\
    \ i-2 3)\n               (set-array! i-3 2)\n               (set-array! i-4 1)\n\
    \               (and (> i 4) (is-palindrome-at-i! i-4)))", "  (make-palindrome-1\
    \ (string-reverse string) string))\n", "  (cond\n    ((string=? string \"\") \"\
    \")\n    ((string=? string (reverse string)) string)\n    (else\n      (string-append\
    \ string (reverse (string-take string (sub1 (string-length string))))))))\n",
  "  (define (palindrome? string)\n    (equal? string (string-reverse string)))\n\
    \  (define (find-longest-suffix-palindrome string)\n    (cond ((not (string? string))\
    \ \"\")\n          ((string=? \"\" string) \"\")\n          ((palindrome? string)\
    \ string)\n          (else (find-longest-suffix-palindrome (substring string 1)))))\n\
    \  (define (find-prefix-to-suffix-palindrome string)\n    (cond ((string=? \"\"\
    \ string) \"\")\n          ((string=? (find-longest-suffix-palindrome string)\
    \ \"\") string)\n          (else (find-prefix-to-suffix-palindrome (substring\
    \ string 0 -1)))))\n  (define (reverse-prefix-to-suffix-palindrome string)\n \
    \   (string-reverse (find-prefix-to-suffix-palindrome string)))\n  (string-append\
    \ string (reverse-prefix-to-suffix-palindrome string)))\n", "  (define postfix-palindrome\n\
    \    (for/fold ([acc '()]) ([i (in-range (string-length string))])\n      (cond\
    \ [(string=? (string-append acc (list (string-ref string i)))\n              \
    \          (reverse (string-append acc (list (string-ref string i)))))\n     \
    \        (string-append acc (list (string-ref string i)))]\n            [else\
    \ acc])))\n  (string-append string (reverse (substring string 0 (string-length\
    \ postfix-palindrome)))))\n", "  (cond [(empty? string)\n         \"\"]\n    \
    \    [(palindrome string)\n         string]\n        [else\n         (append string\
    \ (reverse (drop (index-of-palindrome-ending string) string)))]))\n", "  (define\
    \ (make-palindrome-helper string suffix)\n    (define (append-reverse-prefix suffix)\n\
    \      (string-append suffix (string-reverse (substring string 0 (- (string-length\
    \ string) (string-length suffix))))))\n    (if (string-equal? string suffix)\n\
    \        string\n        (make-palindrome-helper (substring string 0 (- (string-length\
    \ string) 1))\n                                (if (palindrome? (string-append\
    \ suffix (string-ref string (- (string-length string) 1))))\n                \
    \                    (string-append suffix (string-ref string (- (string-length\
    \ string) 1)))\n                                    suffix))))\n  (if (palindrome?\
    \ string)\n      string\n      (make-palindrome-helper string \"\")))\n", "  (let\
    \ ([rev (reverse string)])\n    (append string\n            (reverse (find-prefix\
    \ rev)))))\n", "  (define (is_palindrome string)\n    (define (palindrome_subtracting\
    \ string)\n      (if (or (null? string) (null? (cdr string)))\n          #t\n\
    \          (and (equal? (car string) (cadr string))\n               (palindrome_subtracting\
    \ (cdr string)))))\n    (palindrome_subtracting string))\n  (define (longest_palindrome\
    \ string)\n    (if (is_palindrome string)\n        string\n        (longest_palindrome\
    \ (substring string 0 (sub1 (string-length string))))))\n  (string-append string\
    \ (reverse (substring string (string-length (longest_palindrome string))))))\n",
  "  (define (is_palindrome? string)\n    (string=? string (string-reverse string)))\n\
    \  (define (find-palindrome-suffix string)\n    (if (is_palindrome? string)\n\
    \        string\n        (find-palindrome-suffix (substring string 1 (string-length\
    \ string)))))\n  (define (add-prefix string palindrome-suffix)\n    (string-append\
    \ string (string-reverse (substring string 0 (- (string-length string) (string-length\
    \ palindrome-suffix))))))\n  (if (string=? string \"\")\n      \"\"\n      (add-prefix\
    \ string (find-palindrome-suffix string))))\n", "  (define (is_palindrome? str)\n\
    \    (if (= (string-length str) 1)\n        #t\n        (and (char=? (string-ref\
    \ str 0) (string-ref str (- (string-length str) 1)))\n             (is_palindrome?\
    \ (substring str 1 (- (string-length str) 1))))))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (define (find-longest-palindrome-suffix-iter current-longest-palindrome-suffix\
    \ string)\n      (let ([candidate-palindrome-suffix (substring string (- (string-length\
    \ string) (string-length current-longest-palindrome-suffix)))])\n        (if (is_palindrome?\
    \ candidate-palindrome-suffix)\n            candidate-palindrome-suffix\n    \
    \        (find-longest-palindrome-suffix-iter (substring candidate-palindrome-suffix\
    \ 1) string))))\n    (if (is_palindrome? string)\n        string\n        (find-longest-palindrome-suffix-iter\
    \ (substring string 1) string)))\n  (let ([palindrome-suffix (find-longest-palindrome-suffix\
    \ string)])\n    (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length palindrome-suffix)))))))\n", "  (string-append\n   string\n\
    \   (string-reverse\n    (substring string 0 (find-palindrome-prefix string)))))\n",
  "  (let ([size (string-length string)])\n    (for/fold ([result (string-append string\
    \ \"\" (reverse string))])\n              ([i size])\n      (let ([left (substring\
    \ string 0 (- size i))])\n        (if (equal? left (reverse left))\n         \
    \   (set! result (string-append left result (reverse left)))\n            result)))))\n",
  "  (define (helper prefix suffix)\n    (if (or (= (string-length suffix) 0)\n  \
    \          (string=? prefix (string-reverse suffix)))\n        (string-append\
    \ prefix (string-reverse prefix))\n        (helper (string-append prefix (string\
    \ (string-ref suffix 0)))\n                (substring suffix 1))))\n  (helper\
    \ \"\" string))\n", "  (define prefix_len (- (string-length string) (find-palindrome-suffix\
    \ string)))\n  (append string (reverse (substring string 0 prefix_len))))\n",
  "  (define (reverse string)\n    (let f ([l (string-length string)] [result '()])\n\
    \      (if (zero? l)\n          (list->string result)\n          (f (- l 1) (cons\
    \ (string-ref string (- l 1)) result)))))\n  (define (longest-palindrome-in-string\
    \ str)\n    (let f ([l (string-length str)] [result '()])\n      (if (zero? l)\n\
    \          (list->string result)\n          (let* ([rev (reverse str)]\n     \
    \            [palindrome (list->string (take-while (cut = <> (string-ref str)\n\
    \                                                               (string-ref rev))\n\
    \                                                     str))])\n            (f\
    \ (- l 1) (if (> (string-length palindrome) (string-length result))\n        \
    \                   palindrome\n                           result))))))\n  (let*\
    \ ([palindrome (longest-palindrome-in-string string)]\n         [prefix (string-take\
    \ string (string-length palindrome))])\n    (string-append string (reverse prefix))))\n",
  "  (define (reverse_prefix string)\n    (reverse (substring string 0 (- (string-length\
    \ string) (is_palindrome string)))))\n  (string-append string (reverse_prefix\
    \ string)))\n", "  (match string\n    ['() '()]\n    [(cons head tail)\n     (if\
    \ (equal? tail '())\n         string\n         (append string (reverse (take-prefix\
    \ string))))]))\n", "  (define (pref-prefix string)\n    (cond\n      [(empty?\
    \ string) '()]\n      [(= (first string) (first (rest string)))\n       (cons\
    \ (first string) (pref-prefix (rest string)))]\n      [else\n       '()]))\n \
    \ (if (empty? string)\n      string\n      (string-append string (string-reverse\
    \ (pref-prefix (reverse string))))))\n", "  (define (scan_right string start end)\n\
    \    (cond\n      [(= start end) (- end start)]\n      [(and (= (string-ref string\
    \ start) (string-ref string end))\n            (scan_right string (+ start 1)\
    \ (- end 1)))\n       (- end start)]\n      [else\n       (scan_right string (+\
    \ start 1) end)]))\n  (string-append string (string-reverse (substring string\
    \ 0 (scan_right string 0 (- (string-length string) 1))))))\n", "  (let ([postfix-string\
    \ (find-longest-palindromic-suffix string)])\n    (string-append string (reverse\
    \ (substring string 0 (- (string-length string) (string-length postfix-string)))))))\n",
  "  (let loop ((rev (reverse string))\n             (substr (substring string 0 1)))\n\
    \    (if (string=? substr rev)\n        string\n        (loop rev (substring string\
    \ 0 (+ (string-length substr) 1))))))\n", "  (define (first-equal-postfix string1\
    \ string2)\n    (let loop ([string1 string1] [string2 string2])\n      (if (or\
    \ (null? string1) (null? string2))\n          #f\n          (if (equal? (car string1)\
    \ (car string2))\n              (loop (cdr string1) (cdr string2))\n         \
    \     #f))))\n  (let loop ([s string] [s1 string])\n    (if (or (null? s) (null?\
    \ s1))\n        (string-append string (reverse string))\n        (if (equal? (car\
    \ s) (car s1))\n            (loop (cdr s) (cdr s1))\n            (loop s (cdr\
    \ s1))))))\n", "  (define (reverse-str s)\n    (if (string=? \"\" s)\n       \
    \ \"\"\n        (string-append (substring s 1) (string (string-ref s 0)))))\n\
    \  (define (longest-palindrome-suffix string)\n    (let* ([s-len (string-length\
    \ string)]\n           [s-len-2 (- s-len 2)]\n           [s-len-1 (- s-len 1)])\n\
    \      (cond [(= s-len 0) \"\"\n             [(= s-len 1) string\n           \
    \  [(string=? (substring string 0 1) (substring string s-len-1 s-len))\n     \
    \          (longest-palindrome-suffix (substring string 1 s-len-1))]\n       \
    \      [else (longest-palindrome-suffix (substring string 1 s-len))]])))\n  (string-append\
    \ string (reverse-str (substring string 0 (- (string-length string) (string-length\
    \ (longest-palindrome-suffix string)))))))", "  (define (prefix string)\n    (substring\
    \ string 0 (floor (/ (string-length string) 2))))\n  (define (suffix string)\n\
    \    (if (even? (string-length string))\n        (substring string (/ (string-length\
    \ string) 2))\n        (substring string (+ 1 (/ (string-length string) 2)))))\n\
    \  (define (suffix-palindrome string)\n    (let loop ((s (string-append (suffix\
    \ string) (reverse (prefix string)))))\n      (if (string=? string s)\n      \
    \    string\n          (loop (substring s 1)))))\n  (string-append string (reverse\
    \ (substring (suffix-palindrome string) 0 (- (string-length string))))))\n", " \
    \ (define (find-palindrome-suffix string)\n    (define (is-palindrome s)\n   \
    \   (or (equal? s \"\")\n          (and (equal? (first s) (last s))\n        \
    \       (is-palindrome (rest (butlast s))))))\n    (define (find-longest-palindrome\
    \ s)\n      (if (is-palindrome s)\n          s\n          (find-longest-palindrome\
    \ (rest s))))\n    (find-longest-palindrome string))\n  (define (append-reverse-prefix\
    \ string palindrome-suffix)\n    (append (reverse (butlast string)) palindrome-suffix))\n\
    \  (append-reverse-prefix string (find-palindrome-suffix string)))", "  (define\
    \ (reverse string)\n    (if (empty? string)\n        string\n        (string-append\
    \ (reverse (substring string 1 (string-length string))) (string (string-ref string\
    \ 0)))))\n  (define (longest-palindrome string)\n    (let loop ((suffix string)\
    \ (found #f))\n      (if (not (empty? suffix))\n          (let ((prefix (substring\
    \ string 0 (string-length suffix))))\n            (if (equal? prefix (reverse\
    \ prefix))\n                (loop (substring suffix 1 (string-length suffix))\
    \ prefix)\n                (loop (substring suffix 1 (string-length suffix)) found)))\n\
    \          found)))\n  (string-append string (reverse (substring string 0 (string-length\
    \ (longest-palindrome string))))))\n", "  (define (reverse-string string)\n  \
    \  (apply string (reverse (string->list string))))\n  (let* ([str-length (string-length\
    \ string)]\n         [longest-palindrome-suffix (find-longest-palindrome-suffix\
    \ string)])\n    (string-append string (reverse-string (substring string 0 (-\
    \ str-length longest-palindrome-suffix))))))\n", "  (define (reverse s)\n    (apply\
    \ string (reverse (string->list s))))\n  (define (is-palindrome s)\n    (define\
    \ (char-at i)\n      (string-ref s i))\n    (define (find-palindrome-end len)\n\
    \      (if (= (char-at len) (char-at (- len 1)))\n          (find-palindrome-end\
    \ (- len 1))\n          (- len 1)))\n    (define (palindrome-length len)\n   \
    \   (if (= len 0)\n          0\n          (find-palindrome-end len)))\n    (palindrome-length\
    \ (string-length s)))\n  (define (append-reversed-to-end s)\n    (string-append\
    \ s (reverse (substring s 0 (is-palindrome s)))))\n  (append-reversed-to-end string))\n\
    ```\n\n## [P27](http://aperiodic.net/phil/scala/s-99/p27.scala)\n\n```scala\n\
    def group3[A](l: List[A]): List[List[List[A]]] =\n  for {\n    a <- combinations(2,\
    \ l)\n    noA = l diff a\n    b <- combinations(3, noA)\n  } yield List(a, b,\
    \ noA diff b)\n\ndef group[A](ns: List[Int], l: List[A]): List[List[List[A]]]\
    \ = ns match {\n  case Nil     => List(Nil)\n  case n :: ns => combinations(n,\
    \ l) flatMap { c =>\n    group(ns, l diff c) map {c :: _}\n  }\n}\n```\n\n## [P27a](http://aperiodic.net/phil/scala/s-99/p27a.scala)\n\
    \n```scala\ndef group3[A](l: List[A]): List[List[List[A]]] =\n  for {\n    a <-\
    \ combinations(2, l)\n    noA = l diff a\n    b <- combinations(3, noA)\n  } yield\
    \ List(a, b, noA diff", "  (if (string=? \"\" string)\n      \"\"\n      (append\n\
    \       string\n       (reverse (substring string 0 (find-palindrome-len string))))))\n",
  "  (define (suffix? prefix str)\n    (if (equal? prefix (substring str 0 (string-length\
    \ prefix)))\n        (substring str (string-length prefix))\n        false))\n\
    \  (define (palindrome? s)\n    (equal? s (reverse s)))\n  (define (longest-pali-suffix\
    \ str)\n    (let loop ((len 1))\n      (if (and (&gt; len (string-length str))\n\
    \               (&gt; (sub1 len) 1))\n          (substring str 0 (sub1 len))\n\
    \          (if (and (&gt; len (string-length str))\n                   (= (sub1\
    \ len) 1))\n              \"\"\n              (if (palindrome? (suffix? (substring\
    \ str 0 len) str))\n                  (loop (+ len 1))\n                  (longest-pali-suffix\
    \ str))))))\n  (define (contains-pali? str)\n    (if (string=? (longest-pali-suffix\
    \ str) \"\")\n        false\n        true))\n  (cond ((string=? string \"\") \"\
    \")\n        ((&gt; (string-length string) 1)\n         (if (contains-pali? string)\n\
    \             (string-append string (reverse (substring string 0 (string-length\
    \ (longest-pali-suffix string)))))\n             (string-append string (reverse\
    \ string))))\n        (else (string-append string (reverse string)))))\n</code>\n\
    I'm looking for advice and hints on how to improve my code (style, efficiency,\
    \ readability, etc.). Thanks!\n\n\nA:\n\nA few things:\n\nWhy are you using <code>define</code>\
    \ instead of <code>let</code>/<code>let*</code>? There's no need to define auxiliary\
    \ functions in the global scope, they can all be defined inside the function's\
    \ body. This allows you to use meaningful names for the auxiliary functions and\
    \ to avoid cluttering the global scope.\nYou're using a lot of unnecessary <code>if</code>s,\
    \ you can use conditionals with only one arm, like this: <code>(if pred then-val)</code>.\
    \ It's the same as <code>(if pred then-val #f", "  (define (is_palindrome string)\n\
    \    (equal? (reverse string) string))\n  (define (find-max-palindrome string\
    \ max)\n    (if (and (not (null? string))\n             (is_palindrome string))\n\
    \        string\n        (find-max-palindrome (substring string 0 (sub1 (string-length\
    \ string))) max)))\n  (let ([max (find-max-palindrome string string)])\n    (if\
    \ (equal? max \"\")\n        max\n        (append string (reverse (substring string\
    \ (string-length max)))))))\n", "  (cond [(empty? string) string]\n        [(=\
    \ (first string) (last string))\n         (cons (first string) (make_palindrome\
    \ (rest (butlast string))))]\n        [else\n         (append string (reverse\
    \ (firstn (length string) string)))]))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(= (length string) 1) string]\n    [else\n     (let* ([rev_string (reverse\
    \ string)]\n            [palindrome-start (find-max-match string rev_string)])\n\
    \       (append string (reverse (substring string 0 palindrome-start))))]))\n",
  "  (define (is_palindrome? string)\n    (define (inner-function i j)\n      (cond\n\
    \        [(= i j) true]\n        [(= (+ i 1) j) true]\n        [(char=? (string-ref\
    \ string i) (string-ref string j)) (inner-function (+ i 1) (- j 1))]\n       \
    \ [else false]))\n    (inner-function 0 (- (string-length string) 1)))\n  (define\
    \ (find-longest-palindrome-suffix string)\n    (define (inner-function i)\n  \
    \    (cond\n        [(>= i (- (string-length string) 1)) \"\"]\n        [(is_palindrome?\
    \ (substring string i)) (substring string i)]\n        [else (inner-function (+\
    \ i 1))]))\n    (inner-function 0))\n  (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length (find-longest-palindrome-suffix\
    \ string)))))))\n```\n\n## Quickest path in a graph\n\nFrom [reddit](https://www.reddit.com/r/dailyprogrammer/comments/4wqzph/20160829_challenge_282_easy_unusual_bases/).\n\
    \nYou have a graph with N nodes and N-1 edges. The nodes are numbered 0 through\
    \ N-1. For each valid i, there is an edge connecting node i with node (i+1)%N.\
    \ There are no self-loops or multiple edges.\n\nYou can visit a node multiple\
    \ times during your walk. What is the number of different possible ways to start\
    \ at node 0 and end at node 0, visiting each node exactly once?\n\nAs this number\
    \ may be quite large, compute it modulo 109+7.\n\n### Example\n\nThere are two\
    \ possible paths: 0\u21921\u21922\u21920 and 0\u21922\u21921\u21920. The sum of\
    \ the lengths of both paths is 5.\n\n### Input\n\nA single line containing the\
    \ integer N.\n\n### Output\n\nPrint the required number of walks modulo 109+7.\n\
    \n### Constraints\n1\u2264N\u2264500\n\n### Sample Input 1\n```\n3\n```\n\n",
  "  (let* ([reversed-string (reverse string)]\n         [length (string-length string)]\n\
    \         [x 1]\n         [match (string-prefix? string (substring reversed-string\
    \ x length))])\n    (cond\n      [(string=? string \"\") string]\n      [(string=?\
    \ string (substring reversed-string x length)) string]\n      [else (append string\
    \ (substring reversed-string x length))])))\n", "  (cond\n    [(empty? string)\
    \ (string)]\n    [(palindrome? string) string]\n    [else (make_palindrome (append\
    \ (reverse (rest string)) string))]))\n", "  (let ((len (string-length string)))\n\
    \    (if (= 0 len)\n        \"\"\n        (let ([pref (reverse (string-append\
    \ (string-take string (exact-floor (/ len 2)))\n                             \
    \               (string-drop string (exact-ceiling (/ len 2)))))]\n          \
    \    [post (string-append string pref)])\n          (if (is-palindrome? post)\n\
    \              post\n              (make_palindrome post))))))\n", "  (let* ([str\
    \ (string->list string)]\n         [len (length str)])\n    (define (longest-palindrome-postfix\
    \ i)\n      (cond ((or (= i 0) (= (list-ref str i) #\\c)) i)\n            ((=\
    \ i len) i)\n            (else\n             (let ([p (longest-palindrome-postfix\
    \ (sub1 i))])\n               (if (= (list-ref str (- i p)) (list-ref str (- len\
    \ 1)))\n                   (+ p 1)\n                   p)))))\n    (append str\
    \ (reverse (take (reverse str) (longest-palindrome-postfix len))))))\n```\n\n\
    ```\n> (make-palindrome \"\")\n\"\"\n> (make-palindrome \"cata\")\n\"catac\"\n\
    > (make-palindrome \"cat\")\n\"catac\"\n```\n\n```\n#lang racket\n", "  (define\
    \ string-length (string-length string))\n  (define string-length (string-length\
    \ string))\n  (define (substr start end)\n    (substring string start end))\n\
    \  (define (substr-reverse start end)\n    (substring (reverse string) start end))\n\
    \  (define (is-palindrome? start-pos end-pos)\n    (or (= start-pos end-pos)\n\
    \        (and (char=? (substr start-pos (add1 start-pos))\n                  \
    \    (substr-reverse end-pos (add1 end-pos)))\n             (is-palindrome? (add1\
    \ start-pos) (sub1 end-pos)))))\n  (define (max-palindrome-length string-length\
    \ start-pos)\n    (if (= start-pos (sub1 string-length))\n        0\n        (if\
    \ (is-palindrome? start-pos (sub1 string-length))\n            (add1 string-length)\n\
    \            (max-palindrome-length string-length (add1 start-pos)))))\n  (string-append\
    \ string (substr-reverse (add1 (max-palindrome-length string-length 0)) string-length)))\n",
  "  (if (string=? \"\" string)\n      \"\"\n      (define palindrome-prefix\n   \
    \     (string-append\n          (substring string 0 (- (string-length string)\
    \ (longest-palindromic-suffix string)))\n          (reverse (substring string\
    \ 0 (- (string-length string) (longest-palindromic-suffix string))))))\n     \
    \ (string-append palindrome-prefix string)))\n", "  (define (get-longest-postfix\
    \ string palindrome)\n    (if (null? string)\n        palindrome\n        (if\
    \ (equal? (first string) (last palindrome))\n            (get-longest-postfix\
    \ (rest string) (cons (first string) palindrome))\n            (get-longest-postfix\
    \ (rest string) (rest palindrome)))))\n  (string-append string (reverse (get-longest-postfix\
    \ string string))))\n", "  (let ([n (string-length string)])\n    (cond\n    \
    \  [(= n 0) string]\n      [(= n 1) (string-append string (substring string 0\
    \ 1))]\n      [else\n       (define (palin? string k)\n         (cond\n      \
    \     [(= k n) #t]\n           [(not (char=? (string-ref string k) (string-ref\
    \ string (- n k 1)))) #f]\n           [else (palin? string (+ k 1))]))\n     \
    \  (define (aux k)\n         (cond\n           [(palin? string k) (substring string\
    \ 0 k)]\n           [else (aux (+ k 1))]))\n       (string-append string (substring\
    \ (reverse (aux 0)) 0 (- n (string-length (aux 0)))))])))\n", "  (define (is_palindrome\
    \ s)\n    (and (not (eq? '() s))\n         (and (eq? (first s) (last s))\n   \
    \           (is_palindrome (rest (butlast s))))))\n  (define (find-palindrome-suffix\
    \ string)\n    (if (is_palindrome string)\n        string\n        (find-palindrome-suffix\
    \ (butlast string))))\n  (append string (reverse (drop (find-palindrome-suffix\
    \ string) string))))\n```", "  (let ([strlen (string-length string)])\n    (define\
    \ (make-palindrome string l r)\n      (cond\n        [(>= l r) string]\n     \
    \   [(char=? (string-ref string l) (string-ref string r)) (make-palindrome string\
    \ (+ l 1) (- r 1))]\n        [else (make-palindrome (string-append string (string-reverse\
    \ (substring string 0 l))) (+ l 1) (- r 1))]))\n    (make-palindrome string 0\
    \ (- strlen 1))))\n", "  (define (reverse string)\n    (cond\n      [(equal? string\
    \ \"\") \"\" ]\n      [else\n       (string-append (substring string (sub1 (string-length\
    \ string))) (reverse (substring string 0 (sub1 (string-length string)))))]))\n\
    \  (define (is_palindrome? string)\n    (equal? string (reverse string)))\n  (define\
    \ (find-longest-palindrome string)\n    (cond\n      [(equal? string \"\") \"\"\
    \ ]\n      [(is_palindrome? string) string]\n      [else\n       (find-longest-palindrome\
    \ (substring string 0 (sub1 (string-length string))))]))\n  (string-append string\
    \ (reverse (substring string 0 (sub1 (string-length (find-longest-palindrome string)))))))\n",
  "  (define (make-palindrome-helper string length)\n    (if (= length 1) (list (list\
    \ (list string)) 1)\n        (let ([longest-palindrome-length (get-longest-palindrome-length\
    \ string length)])\n          (if (> longest-palindrome-length (/ length 2))\n\
    \              (let ([unpalindromed-suffix (substring string 0 (- length longest-palindrome-length))])\n\
    \                (list (list (list (reverse unpalindromed-suffix) string))\n \
    \                     (+ longest-palindrome-length (string-length unpalindromed-suffix))))\n\
    \              (let-values ([(palindromes solution-length) (make-palindrome-helper\
    \ string (- length 1))])\n                (values (append palindromes (list (list\
    \ (list (substring string 0 (- length 1)) string))))\n                       \
    \ (+ 1 solution-length)))))))\n  (let-values ([(palindromes solution-length) (make-palindrome-helper\
    \ string (string-length string))])\n    (values palindromes solution-length)))\n",
  "  (cond [(empty? string) empty]\n        [(not (equal? (car string) (last string)))\n\
    \         (string-append (make_palindrome (rest string)) (string-reverse (string-append\
    \ (cdr (string-reverse string)) (car string))))]\n        [else (string-append\
    \ string (string-reverse (cdr (string-reverse string))))]))\n```\n\n```\n#lang\
    \ racket\n", "  (define strlen (string-length string))\n  (define front_half (-\
    \ strlen (get-longest-suffix-palindrome string strlen)))\n  (string-append string\
    \ (reverse (substring string 0 front_half))))\n", "  (if (equal? (substring string\
    \ 0 (sub1 (string-length string)))\n              (substring string (sub1 (string-length\
    \ string)) 0 -1))\n      string\n      (append string (substring string 0 (sub1\
    \ (string-length string))))))", "  (define (reverse string)\n    (if (null? string)\n\
    \        string\n        (string-append (reverse (cdr string)) (list (car string)))))\n\
    \  (define (longest-suffix-palindrome string)\n    (define (suffixes string)\n\
    \      (let loop ((s string) (lst '()))\n        (if (null? s)\n            lst\n\
    \            (loop (cdr s) (cons (reverse (cdr s)) lst)))))\n    (let loop ((lst\
    \ (suffixes string)))\n      (if (null? lst)\n          string\n          (if\
    \ (string=? (car lst) (reverse (car lst)))\n              (car lst)\n        \
    \      (loop (cdr lst))))))\n  (define (lsp-length string)\n    (length (longest-suffix-palindrome\
    \ string)))\n  (string-append string (reverse (substring string 0 (- (length string)\
    \ (lsp-length string))))))", "  (define (palindrome? n)\n    (define (palindrome?-helper\
    \ i j)\n      (if (&gt;= i j)\n          #t\n          (if (char=? (string-ref\
    \ string i) (string-ref string j))\n              (palindrome?-helper (+ i 1)\
    \ (- j 1))\n              #f)))\n    (palindrome?-helper 0 (- n 1)))\n  (define\
    \ (shortest-palindrome n)\n    (if (palindrome? n)\n        n\n        (shortest-palindrome\
    \ (- n 1))))\n  (define (string-length string)\n    (length string))\n  (define\
    \ (reverse-str string)\n    (define (reverse-str-helper string res)\n      (if\
    \ (empty? string)\n          res\n          (reverse-str-helper (rest string)\
    \ (cons (first string) res))))\n    (reverse-str-helper string '()))\n  (define\
    \ (concat-str a b)\n    (apply string (append a b)))\n  (define (reverse-prefix\
    \ string n)\n    (reverse-str (substring string 0 n)))\n  (define str-len (string-length\
    \ string))\n  (cond ((= str-len 0) \"\")\n        ((= str-len 1) string)\n   \
    \     (else (concat-str string (reverse-prefix string (shortest-palindrome str-len))))))\n\
    </code>\nIs there a way to make it better or more idiomatic?\n\n\nA:\n\nA few\
    \ thoughts:\n\nThe length of the input string is computed multiple times. It\u2019\
    s better to compute it once and store it in a variable. This is a good optimization\
    \ in general.\nIn Racket, you can use <code>check-expect</code> or <code>check-equal?</code>\
    \ to do unit testing.\nYou can use <code>regexp-match</code> to do the <code>palindrome?</code>\
    \ check.\nSince Racket strings are immutable, you don\u2019t need to reverse a\
    \ string, but can just slice the string from the end.\nIt\u2019s better to write\
    \ <code>(string-length s)</code", "  (define (subseq string start end)\n    (if\
    \ (= start end)\n        empty\n        (cons (string-ref string start)\n    \
    \          (subseq string (+ start 1) end))))\n  (define (max-pali-postfix string)\n\
    \    (if (= (string-length string) 1)\n        string\n        (if (and (char=?\
    \ (string-ref string 0) (string-ref string 1))\n                 (string=? (subseq\
    \ string 2 (string-length string))\n                           (string-reverse\
    \ (subseq string 2 (string-length string)))))\n            (string-append string\
    \ (string-reverse (subseq string 2 (string-length string))))\n            (max-pali-postfix\
    \ (subseq string 1 (string-length string))))))\n  (string-append string (string-reverse\
    \ (subseq string 0 (string-length (max-pali-postfix string))))))", "  (define\
    \ (get-max-palindrome-suffix string)\n    (define (is-palindrome? word)\n    \
    \  (define (helper front back)\n        (if (= front back)\n            #t\n \
    \           (if (char=? (string-ref word front) (string-ref word back))\n    \
    \            (helper (+ front 1) (- back 1))\n                #f)))\n      (if\
    \ (= (string-length word) 1)\n          #t\n          (helper 0 (- (string-length\
    \ word) 1))))\n    (define (find-max-suffix string)\n      (if (is-palindrome?\
    \ string)\n          string\n          (find-max-suffix (substring string 1))))\n\
    \    (find-max-suffix string))\n  (define (reverse word)\n    (define (helper\
    \ front back result)\n      (if (= front back)\n          result\n          (helper\
    \ (+ front 1) (- back 1) (string-append result (string (string-ref word front))))))\n\
    \    (helper 0 (- (string-length word) 1) \"\"))\n  (string-append string (reverse\
    \ (substring string 0 (- (string-length (get-max-palindrome-suffix string)) 1)))))",
  "  (define (palindrome? string)\n    (string=? string (string-reverse string)))\n\
    \  (define (reversed-prefix string n)\n    (string-reverse (substring string 0\
    \ n)))\n  (define (longest-palindromic-suffix string)\n    (cond ((null? string)\n\
    \           '())\n          ((palindrome? string)\n           string)\n      \
    \    (else\n           (longest-palindromic-suffix (substring string 1)))))\n\
    \  (string-append string (reversed-prefix string (string-length (longest-palindromic-suffix\
    \ string)))))\n", "  (define (find-palindrome? string n)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(char=? (string-ref string (- n 1)) (string-ref string 0))\
    \ (find-palindrome? string (- n 1))]\n      [else #f]))\n  (define (make-string\
    \ string n)\n    (cond\n      [(= n 0) (string-append string (string-reverse string))]\n\
    \      [else (make-string (string-append string (string (string-ref string 0)))\
    \ (- n 1))]))\n  (make-string string (find-palindrome? string (string-length string))))",
  "  (define (prepend-reverse-prefix string)\n    (string-append string (reverse (string-append\
    \ string (string-take string 1)))))\n  (prepend-reverse-prefix string))\n", " \
    \ (define (reverse string)\n    (if (string=? string \"\")\n        \"\"\n   \
    \     (string-append (reverse (substring string 1)) (substring string 0 1))))\n\
    \  (define (is_palindrome string)\n    (string=? string (reverse string)))\n \
    \ (define (longest_palindrome_suffix string)\n    (if (is_palindrome string)\n\
    \        string\n        (longest_palindrome_suffix (substring string 1))))\n\
    \  (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length (longest_palindrome_suffix string)))))))\n", "  (define (r-make-palindrome\
    \ prefix postfix)\n    (if (= postfix '())\n        string\n        (let* ([prefix-head\
    \ (car prefix)]\n               [postfix-head (car postfix)])\n          (if (=\
    \ prefix-head postfix-head)\n              (r-make-palindrome (cdr prefix) (cdr\
    \ postfix))\n              (string-append string (reverse prefix))))))\n  (r-make-palindrome\
    \ (string->list string) (string->list string)))\n", "  (string-append string (reverse\
    \ (string-prefix string (sub1 (string-length string))))))\n", "  (let ([n (string-length\
    \ string)])\n    (let helper ([i (sub1 n)])\n      (cond\n        [(equal? i -1)\
    \ string]\n        [(palindrome? string n i) (make-string (- n i) #\\a)]\n   \
    \     [else (helper (sub1 i))]))))\n", "  (define (prefix-palindrome? prefix)\n\
    \    (string=? prefix (string-reverse prefix)))\n  (define (find-longest-palindrome\
    \ suffix)\n    (cond ((string=? suffix \"\") \"\")\n          ((prefix-palindrome?\
    \ suffix) suffix)\n          (else (find-longest-palindrome (substring suffix\
    \ 1)))))\n  (define (longest-palindrome string)\n    (find-longest-palindrome\
    \ (string-reverse string)))\n  (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length (longest-palindrome string)))))))\n",
  "  (define (reverse-string str)\n    (reverse str))\n  (define (suffix string)\n\
    \    (reverse (string-suffix? string string)))\n  (define (is-palindrome? string)\n\
    \    (string=? string (reverse-string string)))\n  (if (string=? string \"\")\n\
    \      string\n      (if (is-palindrome? string)\n          string\n         \
    \ (string-append string (reverse-string (suffix string))))))\n", "  (match string\n\
    \    [\"\" \"\" ]\n    [s \n     (string-append (reverse (substring s 0 (find-longest-palindrome-suffix\
    \ s))) s)\n     ]))\n", "  (if (or (string=? string \"\") (string=? string (string-reverse\
    \ string)))\n      string\n      (string-append string (string-reverse (substring\
    \ string 0 (index-of-last-palindrome string))))))\n", "  (define (find-longest-postfix-palindrome\
    \ string)\n    (if (null? string)\n        '()\n        (if (eq? (first string)\
    \ (last string))\n            (cons (first string) (find-longest-postfix-palindrome\
    \ (rest (butlast string))))\n            (find-longest-postfix-palindrome (rest\
    \ string)))))\n  (if (null? string)\n      string\n      (let* ([postfix (find-longest-postfix-palindrome\
    \ string)]\n             [prefix (if (null? postfix) string (substring string\
    \ 0 (- (length string) (length postfix))))])\n        (append prefix (reverse\
    \ prefix) postfix))))\n", "  (string-append string (string-reverse (substring\
    \ string 0 (string-length string)))))\n", "  (define (is_palindrome? string)\n\
    \    (and (not (empty? string))\n         (equal? (first string) (last string))\n\
    \         (is_palindrome? (rest (butlast string)))))\n  (define (suffix? string\
    \ suffix)\n    (if (empty? suffix) #t\n        (and (equal? (first string) (first\
    \ suffix))\n             (suffix? (rest string) (rest suffix)))))\n  (define (find-suffixes-reversed\
    \ string)\n    (let loop ([s string] [suffixes '()])\n      (if (empty? s) suffixes\n\
    \          (loop (rest s) (cons (list->string (reverse s)) suffixes)))))\n  (define\
    \ (find-longest-suffix suffixes)\n    (if (null? (cdr suffixes)) (car suffixes)\n\
    \        (if (&gt; (string-length (car suffixes)) (string-length (cadr suffixes)))\n\
    \            (find-longest-suffix (cons (car suffixes) (cddr suffixes)))\n   \
    \         (find-longest-suffix (cdr suffixes)))))\n  (define (make-palindrome-from-suffix\
    \ string suffix)\n    (string-append string (find-longest-suffix (find-suffixes-reversed\
    \ string))))\n  (if (is_palindrome? string) string\n      (make-palindrome-from-suffix\
    \ string (find-longest-suffix (find-suffixes-reversed string)))))\n</code>\nIt\
    \ seems to be working:\n<code>&gt; (make_palindrome \"\")\n\"\"\n&gt; (make_palindrome\
    \ \"cat\")\n\"catac\"\n&gt; (make_palindrome \"cata\")\n\"catac\"\n&gt; (make_palindrome\
    \ \"a\")\n\"a\"\n&gt; (make_palindrome \"ab\")\n\"bab\"\n&gt; (make_palindrome\
    \ \"aba\")\n\"aba\"\n&gt; (make_palindrome \"abba\")\n\"abba\"\n&gt; (make_palindrome\
    \ \"abcba", "  (if (string=? \"\" string)\n      \"\"\n      (if (string=? (reverse\
    \ string) string)\n          string\n          (append string (reverse (substring\
    \ string 0 (string-length string)))))))\n", "  (let* ([string-length (string-length\
    \ string)]\n         [prefix-length (sub1 (string-length (find-palindrome-at string\
    \ string-length)))]\n         [prefix (substring string 0 prefix-length)])\n \
    \   (string-append string (string-reverse prefix))))\n", "  (define len (string-length\
    \ string))\n  (define max-palindrome-length\n    (let loop ((i (- len 1)) (l 1))\n\
    \      (if (and (>= i 0)\n               (string=? (substring string i (+ i l))\n\
    \                         (substring string (- len i) (- len i l))))\n       \
    \   (loop (- i 1) (+ l 2))\n        l)))\n  (string-append string (substring string\
    \ 0 (- len max-palindrome-length)) (string-reverse string)))\n", "  (let ((palindrome-suffix\n\
    \         (let loop ((str string)\n                    (len (string-length string))\n\
    \                    (palsuff (string-append string (string-reverse string))))\n\
    \           (if (or (= len 0)\n                   (string=? (substring str 0 len)\n\
    \                             (substring palsuff 0 len)))\n               palsuff\n\
    \               (loop str (- len 1) palsuff)))))\n    (string-append string (substring\
    \ palindrome-suffix (string-length string)))))\n```\n\n##### `5.5.2` Your Own\
    \ Title\n\nWrite your own solution here.", "  (define (reverse string)\n    (apply\
    \ string (reverse (string->list string))))\n  (define (is_palindrome? string)\n\
    \    (string=? string (reverse string)))\n  (define (find-longest-prefix-palindrome\
    \ str)\n    (define (find-longest-prefix-palindrome-iter str longest-so-far)\n\
    \      (if (is_palindrome? str)\n          str\n          (find-longest-prefix-palindrome-iter\
    \ (substring str 0 (- (string-length str) 1)) longest-so-far)))\n    (find-longest-prefix-palindrome-iter\
    \ str \"\"))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (find-longest-prefix-palindrome string)))))))\n", " \
    \ (let* ([length (string-length string)]\n         [length-to-check (/ length\
    \ 2)]\n         [i length-to-check]\n         [first-half (substring string 0\
    \ i)]\n         [second-half (substring string i)])\n    (do ([i (- length-to-check\
    \ 1) (- i 1)])\n        ((zero? i) (make-string length #\\a))\n      (when (string=?\
    \ first-half second-half)\n        (append string (reverse first-half))))))\n",
  "  (define (is_palindrome string)\n    (if (string=? string (string-reverse string))\n\
    \        #t\n        #f))\n  (if (string=? string \"\")\n      \"\"\n      (define\
    \ postfix (string-suffix string))\n      (if (is_palindrome postfix)\n       \
    \   string\n          (string-append string (string-reverse (string-prefix string))))))\n",
  "  (match (string-index-right (string-reverse string) string)\n    [(values 0) string]\n\
    \    [(values i) (string-append string (substring (string-reverse string) 0 (-\
    \ i))))))", "  (let loop ((string (string-reverse string))\n             (length\
    \ (string-length string)))\n    (cond\n      [(or (= length 1)\n           (=\
    \ length 0)) string]\n      [(string=? (substring string 0 length)\n         \
    \        (string-reverse (substring string 0 length)))\n       (string-append\
    \ string (substring string 0 (- length 1)))]\n      [else (loop string (- length\
    \ 1))])))\n", "  (string-append string (string-reverse (string-prefix (string-reverse\
    \ string) (substring string 0 (find-shortest-palindrome-suffix string))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
