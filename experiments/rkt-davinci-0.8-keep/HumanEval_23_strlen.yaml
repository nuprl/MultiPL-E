name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n;; >>> strlen('')\n;; 0\n\
  ;; >>> strlen('abc')\n;; 3\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((null? string) 0)\n    (else (+ 1 (strlen (cdr string))))))\n",
  "  (cond [(eq? string '') 0]\n        [else (+ 1 (strlen (substring string 1)))]))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (define size 0)\n  (let loop ([string string])\n    (if (string-empty? string)\n\
    \        size\n        (loop (substring string 1))))\n  size)\n```\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (define (strlen' start count)\n    (if (eq? (string-ref\
    \ string start) '\\0)\n        count\n        (strlen' (+ start 1) (+ count 1))))\n\
    \  (strlen' 0 0))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (define (helper count lst)\n    (if (null? lst)\n\
    \        count\n        (helper (+ count 1) (cdr lst))))\n  (helper 0 string))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (length\
    \ string))\n", "  (cond [(empty? string) 0]\n        [else (add1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(null? string) 0]\n    [else (add1 (strlen (substring\
    \ string 1)))]))\n", "  (cond [(string=? string \"\") 0]\n        [else (add1\
    \ (strlen (substring string 1)))]))\n", "  (cond\n    [(string=? string \"\")\
    \ 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n", "  (let loop ([i 0])\n\
    \    (cond [(empty? string) i]\n          [else (loop (+ i 1))])))\n", "  (cond\
    \ ((string-null? string) 0)\n        (else (+ 1 (strlen (string-tail string))))))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (cdr string)))))\n", "  (cond\
    \ ((string=? string \"\") 0)\n        (else (+ 1 (strlen (substring string 1))))))\n",
  "  (if (eq? string '')\n      0\n      (+ 1 (strlen (string-tail string)))))\n",
  "  (cond\n    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring string\
    \ 1)))]))\n```\n\n```\n#lang racket\n", "  (cond\n    [(null? string) 0]\n   \
    \ [else (+ 1 (strlen (substring string 1)))]))\n", "  (cond [(empty? string) 0]\n\
    \        [else (+ 1 (strlen (rest string)))]))\n", "  (if (string-empty? string)\n\
    \      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond [(empty? string)\
    \ 0]\n        [else (+ 1 (strlen (rest string)))]))\n", "  (foldl (lambda (x y)\
    \ (+ y 1)) 0 string))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond\n    [(equal? string \"\") 0]\n    [else\
    \ (+ 1 (strlen (substring string 1)))]))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [else (add1 (strlen (rest string)))]))\n", "  (cond ((null? string) 0)\n\
    \        (else (+ 1 (strlen (cdr string))))))\n```\n\n### Racket (Using `string-length`)\n\
    \n```racket\n#lang racket\n", "  (foldl (lambda (char count) (+ count 1)) 0 string))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if\
    \ (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (string-length string))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (if (string=? string \"\")\n     \
    \ 0\n      (+ 1 (strlen (substring string 1)))))\n", "  (foldl (lambda (x y) (+\
    \ y 1)) 0 string))\n", "  (string-length string))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (cond [(string=? string\
    \ \"\") 0]\n        [else (add1 (strlen (substring string 1)))]))\n", "  (if (empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if\
    \ (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (length string))\n", "  (cond ((string=? string \"\") 0)\n        (else (+ 1\
    \ (strlen (substring string 1 (string-length string)))))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (string-empty?\
    \ string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n\
    \    [(string=? string \"\") 0]\n    [else (add1 (strlen (substring string 1)))]))\n",
  "  (cond [(empty? string) 0]\n        [else (+ 1 (strlen (rest string)))]))\n```\n\
    \n```racket\n#lang racket\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(null? string) 0]\n  \
    \  [else (+ 1 (strlen (substring string 1)))]))\n", "  (length string))\n", " \
    \ (if (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if\
    \ (null? string)\n      0\n      (+ 1 (strlen (cdr string)))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n```\n\n\
    ```racket", "  (cond [(empty? string) 0]\n        [else (add1 (strlen (rest string)))]))\n",
  "  (cond [(empty? string) 0]\n        [else (add1 (strlen (rest string)))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond [(empty? string) 0]\n        [else (add1 (strlen (rest string)))]))\n",
  "  (if (equal? (rest string) '())\n      0\n      (+ 1 (strlen (rest string)))))\n",
  "  (foldr + 0 (map string-length (string-&gt;list string))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n```\n\n\
    ```bash\n$ racket strlen.rkt\n\n> (strlen \"\")\n0\n> (strlen \"abc\")\n3\n```\n\
    \n## Usage\n\n\nInstall [Racket](https://download.racket-lang.org/) and run:\n\
    \n```bash\n$ cd /path/to/racket\n$ racket -f fibonacci.rkt\n\n> (fibonacci 3)\n\
    2\n> (fibonacci 5)\n5\n```\n\n[racket]: https://racket-lang.org/", "  (if (empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (cond\n    [(string=?\
    \ string \"\") 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n", "  (if\
    \ (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (define counter 0)\n  (for ([i (in-range (string-length string))])\n    (set!\
    \ counter (+ counter 1)))\n  counter)\n", "  (if (string=? string \"\")\n    \
    \  0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond [(null? string)\
    \ 0]\n        [else (+ 1 (strlen (rest string)))]))\n", "  (string-length string))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (cdr string)))))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (+ 1 (strlen (rest string)))]))\n", "  (string-length\
    \ string))\n", "  (let ([len (string-length string)])\n    (if (zero? len)\n \
    \       0\n        (+ 1 (strlen (substring string 1 len))))))\n", "  (cond\n \
    \   [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n",
  "  (string-length string))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (cond ((string=? string \"\") 0)\n\
    \        (else (add1 (strlen (string-tail string))))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (cond [(string=?\
    \ string \"\") 0]\n        [else (+ 1 (strlen (string-tail string)))]))\n", " \
    \ (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (for/fold ([count 0]) ([_ string])\n    (add1 count)))\n", "  (if (null? string)\n\
    \      0\n      (+ 1 (strlen (cdr string)))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\
    \")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (cond [(eq? string\
    \ '') 0]\n        [else (+ 1 (strlen (substring string 1)))]))\n", "  (if (empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (string-length\
    \ string))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(equal? string \"\") 0]\n    [else (add1 (strlen\
    \ (substring string 1)))]))\n", "  (if (string=? string \"\")\n      0\n     \
    \ (+ 1 (strlen (substring string 1)))))\n", "  (if (empty? string)\n      0\n\
    \      (+ 1 (strlen (rest string)))))\n", "  (cond ((null? string) 0)\n      \
    \  (else (+ 1 (strlen (cdr string))))))\n</code>\nAs I noted in my answer on a\
    \ recent question, it's better to just use builtin procedures, instead of re-implementing\
    \ them.\n<code>#lang racket\n", "  (if (string=? string \"\")\n      0\n     \
    \ (+ 1 (strlen (substring string 1)))))\n", "  (cond ((equal? string \"\") 0)\n\
    \        (else (add1 (strlen (substring string 1))))))\n", "  (if (string=? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n \
    \   [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n```\n\n```racket\n\
    #lang racket\n", "  (cond [(null? string) 0]\n        [else (+ 1 (strlen (cdr\
    \ string)))]))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond [(empty? string) 0]\n        [else (add1\
    \ (strlen (rest string)))]))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (cond [(empty? string) 0]\n        [else (add1 (strlen\
    \ (rest string)))]))\n", "  (cond\n    [(eq? string '') 0]\n    [else (+ 1 (strlen\
    \ (string-tail string)))]))\n", "  (if (equal? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (length string))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (add1 (strlen (rest string)))]))\n", "  (if\
    \ (null? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if (empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if\
    \ (string-empty? string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (cond\
    \ ((string=? string \"\") 0)\n        (else (+ 1 (strlen (string-tail string 1))))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n",
  "  (cond\n    [(equal? string '') 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n",
  "  (length string))\n", "  (cond [(eq? string '') 0]\n        [else (+ 1 (strlen\
    \ (substring string 1)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1\
    \ (strlen (rest string)))]))\n", "  (cond ((string=? string \"\") 0)\n       \
    \ (else (add1 (strlen (substring string 1))))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\
    \")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond ((equal?\
    \ string \"\") 0)\n        (else (add1 (strlen (substring string 1))))))\n", " \
    \ (cond [(string=? string \"\") 0]\n        [else (+ 1 (strlen (string-tail string)))]))\n",
  "  (letrec ([strlen (lambda (i)\n                     (if (= i 0)\n            \
    \             0\n                         (+ 1 (strlen (- i 1)))))])\n    (strlen\
    \ (string-length string))))\n", "  (if (string=? string \"\")\n      0\n     \
    \ (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string \"\")\n  \
    \    0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond [(string=? string\
    \ \"\") 0]\n        [else (+ 1 (strlen (substring string 1)))]))\n", "  (let loop\
    \ ([s string] [c 0])\n    (if (empty? s)\n        c\n        (loop (rest s) (+\
    \ c 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (let loop ([i 0])\n    (cond\n      [(string-empty? string)\
    \ i]\n      [else (loop (+ i 1))])))\n", "  (let loop ([string string] [len 0])\n\
    \    (if (empty? string)\n        len\n        (loop (rest string) (+ len 1)))))\n",
  "  (cond\n    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring string\
    \ 1)))]))\n", "  (count string))\n", "  (if (equal? string \"\")\n      0\n  \
    \    (+ 1 (strlen (substring string 1)))))\n</code>\nTo get rid of the tail recursion,\
    \ I did the following:\n<code>#lang racket\n", "  (string-length string))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (define\
    \ (helper i string)\n    (if (eq? (substring string i (+ i 1)) \"\")\n       \
    \ (- i 1)\n        (helper (+ i 1) string)))\n  (helper 0 string))\n```\n\n###\
    \ <a name=\"7\"></a>Functional Programming\n\n```#lang racket\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if\
    \ (string-empty? string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (length string))\n</code>\nHere is the test code:\n<code>#lang racket\n", " \
    \ (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (cond\n    [(equal? string \"\") 0]\n    [else (+ 1 (strlen (substring string\
    \ 1)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen (rest\
    \ string)))]))\n", "  (string-length string))\n", "  (if (string-empty? string)\n\
    \      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (empty? string)\n\
    \      0\n      (+ 1 (strlen (rest string)))))\n", "  (if (string=? string \"\"\
    )\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (+ 1 (strlen (rest string)))]))\n", "  (if\
    \ (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (match\
    \ string\n    ('() 0)\n    (x (add1 (strlen (cdr string))))))\n", "  (string-length\
    \ string))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (foldl + 0 (map 1+ (string->list string))))\n", "  (string-length string))\n",
  "  (let loop ([s string] [c 0])\n    (if (string-empty? s)\n        c\n        (loop\
    \ (substring s 1) (+ c 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else\
    \ (add1 (strlen (rest string)))]))\n", "  (if (eq? string \"\")\n      0\n   \
    \   (+ 1 (strlen (substring string 1)))))\n", "  (length string))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (add1 (strlen (rest string)))]))\n", "  (cond\
    \ ((null? string) 0)\n        (else (+ 1 (strlen (cdr string))))))\n", "  (if\
    \ (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n",
  "  (cond\n    [(string? string) (string-length string)]\n    [else -1]))\n", " \
    \ (if (eq? (string-length string) 0)\n      0\n      (+ 1 (strlen (substring string\
    \ 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (letrec ([n (string-length string)]\n           [len (\u03BB\
    \ () n)])\n    len))\n", "  (cond\n    ((empty? string) 0)\n    (else (add1 (strlen\
    \ (rest string))))))\n", "  (if (string-null? string)\n      0\n      (+ 1 (strlen\
    \ (string-tail string)))))\n", "  (if (equal? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (string-length string))\n", "  (if\
    \ (null? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if (string=?\
    \ string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\
    \ ((equal? string '') 0)\n        (else (+ 1 (strlen (substring string 1))))))\n\
    ```\n\n```racket\n#lang racket\n", "  (cond [(empty? string) 0]\n        [else\
    \ (+ 1 (strlen (rest string)))]))\n", "  (cond [(string=? string \"\") 0]\n  \
    \      [else (add1 (strlen (substring string 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
