name: HumanEval_153_Strongest_Extension
language: rkt
results:
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (for/first ((extension extensions)\n              #:when (> (count-extensions\
    \ extension) 0))\n    (string-append class_name \".\" extension)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7zj50z35.rkt:20:25: count-extensions: unbound identifier\n  in:\
    \ count-extensions\n  location...:\n   /tmp/tmp7zj50z35.rkt:20:25\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define strength\n    (lambda (s)\n      (let ((u (string-length\
    \ (regexp-match #rx\"+[A-Z]\" s)))\n            (l (string-length (regexp-match\
    \ #rx\"+[a-z]\" s))))\n        (- u l))))\n  (define (ext_cmp a b)\n    (cond\n\
    \      ((< (strength a) (strength b)) -1)\n      ((= (strength a) (strength b))\
    \ 0)\n      ((> (strength a) (strength b)) 1)))\n  (string-append class_name \"\
    .\"\n                 (car (sort ext_cmp extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp31eve4vt.rkt:21:44: read-syntax: `+` follows nothing in pattern\n\
    \  pattern: \"+[A-Z]\"\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (null? extensions) class_name\n      (define (get-letter-counts\
    \ str)\n        (let ([counts (make-hash)])\n          (for ([ch (in-string str)])\n\
    \            (hash-update counts (char-upcase ch) add1 0))\n          counts))\n\
    \      (define (get-strength counts)\n        (- (hash-ref counts #\\A 0) (hash-ref\
    \ counts #\\a 0)))\n      (define (get-strongest class extensions)\n        (if\
    \ (null? extensions) class\n            (let ([counts (get-letter-counts (car\
    \ extensions))])\n              (if (< (get-strength counts)\n               \
    \      (get-strength (get-letter-counts class)))\n                  (get-strongest\
    \ class (cdr extensions))\n                  (get-strongest (car extensions) (cdr\
    \ extensions))))))\n      (string-append class_name \".\" (get-strongest class_name\
    \ extensions))))\n```\n\n## 6. How Big Are The Islands\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp73usml5n.rkt:37:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (match class_name extensions\n    [(list class_name extensions)\n\
    \     (define (strength x)\n       (match x\n         [(list) 0]\n         [(list\
    \ first rest ...)\n          (+ (if (char-upper-case? first) 1 0)\n          \
    \   (if (char-lower-case? first) -1 0)\n             (strength rest))]))\n   \
    \  (define (winner_name x y)\n       (if (> (strength x) (strength y))\n     \
    \      x\n           y))\n     (define (winner_index x y)\n       (if (> (strength\
    \ (list-ref extensions x)) (strength (list-ref extensions y)))\n           x\n\
    \           y))\n     (string-append class_name \".\" (string-append (winner_name\
    \ (list-ref extensions 0) (list-ref extensions 1)) (list-ref extensions (winner_index\
    \ 0 1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "<collects>/racket/match/define-forms.rkt:45:39: extensions: expected a\
    \ clause with a pattern and a result\n  at: extensions\n  in: (extensions ((list\
    \ class_name extensions) (define (strength x) (match x ((list) 0) ((list first\
    \ rest ...) (+ (if (char-upper-case? first) 1 0) (if (char-lower-case? first)\
    \ -1 0) (strength rest))))) (define (winner_name x y) (if (> (strength x) (strength...\n\
    \  location...:\n   /tmp/tmpibzrsttz.rkt:19:20\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:731:0:\
    \ error/report\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:28:0:\
    \ call-current-failure-handler\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append\n   class_name\n   \".\"\n   (first (apply max\
    \ (map (lambda (ext)\n                            (let ([cap (regexp-match* #rx\"\
    [A-Z]\" ext)]\n                                  [sm (regexp-match* #rx\"[a-z]\"\
    \ ext)])\n                              (string-append\n                     \
    \          ext\n                               (string-append \":\" (number->string\
    \ (/ (length cap) (length sm)))))))\n                          extensions)))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"tEN:2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"nani:0\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"t:0\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:37:4\n\
    \n/: division by zero\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:38:4\n\n/: division by\
    \ zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_geqtc8.rkt:39:4\n\n/: division by zero\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"Die:1/2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:41:4\n\
    \n/: division by zero\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi_geqtc8.rkt:42:4\n\n/: division by\
    \ zero\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext_strength ext)\n    (let* ([ext_upper (count-if char-upper-case?\
    \ ext)]\n           [ext_lower (count-if char-lower-case? ext)])\n      (/ ext_upper\
    \ (- ext_upper ext_lower))))\n  (define (get-strongest-extension extensions)\n\
    \    (cond [(null? extensions) #f]\n          [(null? (cdr extensions)) (car extensions)]\n\
    \          [else\n           (let ([ext_a (car extensions)]\n                \
    \ [ext_b (cadr extensions)])\n             (if (&gt; (ext_strength ext_a) (ext_strength\
    \ ext_b))\n                 ext_a\n                 ext_b))]))\n  (string-append\
    \ class_name \".\" (get-strongest-extension extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1nr94vf6.rkt:31:24: read-syntax: missing `)` to close `(` on line\
    \ 27, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([current-max -200])\n    (for ([extension extensions])\n\
    \      (let* ([cap-cnt (for/sum ([c (in-string extension)]) (if (char-upper-case?\
    \ c) 1 0))]\n             [sm-cnt (for/sum ([c (in-string extension)]) (if (char-lower-case?\
    \ c) 1 0))]\n             [current-strength (- cap-cnt sm-cnt)])\n        (when\
    \ (> current-strength current-max)\n          (set! current-max current-strength)\n\
    \          (set! strongest_extension extension))))\n    (format \"~a.~a\" class_name\
    \ strongest_extension)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuv8b7m5c.rkt:26:16: set!: unbound identifier\n  at: strongest_extension\n\
    \  in: (set! strongest_extension extension)\n  location...:\n   /tmp/tmpuv8b7m5c.rkt:26:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (regexp-match #rx\"[A-Z]+\" str)\n\
    \    (list (list-ref (regexp-match #rx\"[A-Z]+\" str) 0)\n          (list-ref\
    \ (regexp-match #rx\"[a-z]+\" str) 0)))\n  (define (make-strength-list)\n    (for/list\
    \ ([e extensions])\n      (strength e)))\n  (define (sum-strength list)\n    (define\
    \ (case-sum str)\n      (cond ((equal? (string-length str) 0) 0)\n           \
    \ ((char-upper-case? (string-ref str 0)) (+ 1 (case-sum (substring str 1))))\n\
    \            ((char-lower-case? (string-ref str 0)) (- 1 (case-sum (substring\
    \ str 1))))))\n    (if (empty? list) 0\n        (+ (case-sum (car list)) (sum-strength\
    \ (cdr list)))))\n  (define (names list)\n    (map (lambda (x) (list-ref x 0))\
    \ list))\n  (define (max-name list)\n    (cond ((null? list) \"\")\n         \
    \ ((> (sum-strength (car list)) (sum-strength (cdr list))) (string-append class_name\
    \ \".\" (string-join (names (car list)) \"\")))\n          (else (max-name (cdr\
    \ list)))))\n  (define (group-by-size list)\n    (for/list ([size (in-range 0\
    \ (add1 (string-length (string-join (map (lambda (x) (list-ref x 0)) list) \"\"\
    ))))])\n      (filter (lambda (x) (= (string-length (list-ref x 0)) size)) list)))\n\
    \  (define list-of-extensions (group-by-size (make-strength-list)))\n  (max-name\
    \ list-of-extensions))\n\n```\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmploafe3z3.rkt:51:5: check-equal?: unbound identifier\n  in: check-equal?\n\
    \  location...:\n   /tmp/tmploafe3z3.rkt:51:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (local ((define (cap string)\n            (for/fold ([count 0])\
    \ ([char (in-string string)])\n              (if (char-upper-case? char)\n   \
    \               (+ count 1)\n                  count))))\n    (define (sm string)\n\
    \      (for/fold ([count 0]) ([char (in-string string)])\n        (if (char-lower-case?\
    \ char)\n            (+ count 1)\n            count)))\n    (define (extension-score\
    \ extension)\n      (/ (- (cap extension) (sm extension)) (string-length extension)))\n\
    \    (string-append class_name \".\" (first (sort (map (curry extension-score)\
    \ extensions)\n                                               <)))))\n</code>\n\
    This is my first time using <code>for/fold</code>, so I hope that's right. I'd\
    \ like to know what I can do to improve performance, readability, and conciseness.\n\
    \n\nA:\n\nIf you need to count the number of characters in a string that match\
    \ a predicate, you can use the built-in procedure <code>count</code>:\n<code>(count\
    \ char-lower-case? \"foo\")\n=&gt; 3\n</code>\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2v81lxyp.rkt:34:17: time: bad syntax\n  in: time\n  location...:\n\
    \   /tmp/tmp2v81lxyp.rkt:34:17\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength-of-extension extension)\n    (/ (- (length\
    \ (regexp-match #rx\"[A-Z]\" extension))\n          (length (regexp-match #rx\"\
    [a-z]\" extension)))\n       1.0))\n  (define (strongest-extension extensions)\n\
    \    (apply max\n           (map strength-of-extension extensions)))\n  (string-append\
    \ class_name\n                 \".\"\n                 (car (filter (\u03BB (extension)\n\
    \                                (= (strength-of-extension extension)\n      \
    \                             (strongest-extension extensions)))\n           \
    \                   extensions))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:38:4\n\
    actual:     \"Watashi.tEN\"\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:44:4\n\
    actual:     \"finNNalLLly.Die\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk0ztrf0.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([strength-of (lambda (str) (/ (- (count 'is-upper? str)\n\
    \                                        (count 'is-lower? str))\n           \
    \                         (length str)))])\n    (string-append class_name \".\"\
    \ (first (sort > (map strength-of extensions))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:29:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"tEN\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:30:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:31:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"t\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:32:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Ta\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:33:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Tab\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:34:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Die\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-upper?\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Bb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyb7buo9.rkt:37:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'is-"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (get-strength extension)\n    (let ([cap-count (count-char\
    \ #\\A 'Z' extension)]\n          [sm-count (count-char #\\a 'z' extension)])\n\
    \      (/ cap-count sm-count)))\n  (let ([strongest (car extensions)]\n      \
    \  [strength (get-strength strongest)])\n    (for/first ([extension (in-list extensions)])\n\
    \      (let ([new-strength (get-strength extension)])\n        (when (> new-strength\
    \ strength)\n          (set! strength new-strength)\n          (set! strongest\
    \ extension))))\n    (format \"~a.~a\" class_name strongest)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqdmnauya.rkt:20:22: count-char: unbound identifier\n  in: count-char\n\
    \  location...:\n   /tmp/tmpqdmnauya.rkt:20:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([strongest-extension (car extensions)]\n         [strongest-strength\
    \ 0])\n    (for ([extension extensions])\n      (let* ([extension-uppercase-count\
    \ (count-upper-case extension)]\n             [extension-lowercase-count (count-lower-case\
    \ extension)]\n             [extension-strength (/ extension-uppercase-count extension-lowercase-count)])\n\
    \        (if (&gt; extension-strength strongest-strength)\n            (set! strongest-extension\
    \ extension)\n            (if (= extension-strength strongest-strength)\n    \
    \            (if (&lt; (string-length extension) (string-length strongest-extension))\n\
    \                    (set! strongest-extension extension))))))\n    (string-append\
    \ class_name \".\" strongest-extension)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsg37m_tr.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (null? extensions)\n      \"\"\n      (define strongest_extension\
    \ (car extensions))\n      (define (strength extension)\n        (define uppercase_letters\n\
    \          (regexp-match #rx\"[A-Z]\" extension))\n        (define lowercase_letters\n\
    \          (regexp-match #rx\"[a-z]\" extension))\n        (- (length uppercase_letters)\n\
    \           (length lowercase_letters)))\n      (define (stronger? a b)\n    \
    \    (or (= (strength a) (strength b))\n            (> (strength a) (strength\
    \ b))))\n      (define (find-strongest lst)\n        (cond [(null? lst) strongest_extension]\n\
    \              [(stronger? (car lst) strongest_extension)\n               (begin\
    \ (set! strongest_extension (car lst))\n                      (find-strongest\
    \ (cdr lst)))]\n              [else (find-strongest (cdr lst))]))\n      (string-append\
    \ class_name \".\"\n                     (find-strongest extensions))))\n</code>\n\
    I did not use a list of bindings (i.e. local definitions) because I could not\
    \ get that to work.  This is the original, which is broken:\n<code>#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq2_ctp2n.rkt:41:117: unquote: not in quasiquote\n  in: (unquote\
    \ which)\n  location...:\n   /tmp/tmpq2_ctp2n.rkt:41:117\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (upper? c)\n      (and (&gt;=\
    \ c #\\A) (&lt;= c #\\Z)))\n    (define (lower? c)\n      (and (&gt;= c #\\a)\
    \ (&lt;= c #\\z)))\n    (define (char-counter p)\n      (define (helper c acc)\n\
    \        (if (p c)\n            (helper (string-ref ext (+ acc 1)) (+ acc 1))\n\
    \            acc))\n      (helper (string-ref ext 0) 0))\n    (- (char-counter\
    \ upper?) (char-counter lower?)))\n  (let loop ((exts extensions) (strength 0)\
    \ (strongest_ext \"\"))\n    (cond ((null? exts)\n           (string-append class_name\
    \ \".\" strongest_ext))\n          ((&gt; (strength (car exts)) strength)\n  \
    \         (loop (cdr exts) (strength (car exts)) (car exts)))\n          (else\
    \ (loop (cdr exts) strength strongest_ext)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeihioi1e.rkt:23:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 31\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append\n   class_name\n   \".\"\n   (car\n    (sort\n\
    \     (for/list ([e extensions])\n       (list e (- (count (lambda (x) (char-upper-case?\
    \ x)) e)\n                  (count (lambda (x) (char-lower-case? x)) e))))\n \
    \    (\u03BB (x y) (&gt; (second x) (second y)))))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2hct66_k.rkt:27:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 28\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([sorted-exts (sort extensions \n                      \
    \     (lambda (x y)\n                             (> (abs (- (count (lambda (x)\
    \ (char-upper-case? x)) x)\n                                       (count (lambda\
    \ (x) (char-lower-case? x)) x)))\n                                (abs (- (count\
    \ (lambda (x) (char-upper-case? x)) y)\n                                     \
    \  (count (lambda (x) (char-lower-case? x)) y))))))])\n    (format \"~a.~a\" class_name\
    \ (car sorted-exts))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"niNE\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa6bi3nik.rkt:33:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NazeDa\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:34:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"eMptY\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:35:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"TAR\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"123\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"okIWILL123\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa6bi3nik.rkt:38:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"NowW\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpa6bi3nik.rkt:21:47>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa6bi3nik.rkt:39:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"91245\"\n  argument position:\
    \ 2nd\n  other argument"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([ext_strengths (map (\u03BB (ext) (cons (extension-strength\
    \ ext) ext)) extensions)])\n    (define (extension-strength ext)\n      (let ([cap_count\
    \ (count (\u03BB (x) (char-upcase? x)) ext)]\n            [sm_count (count (\u03BB\
    \ (x) (char-lowercase? x)) ext)])\n        (- cap_count sm_count)))\n    (string-append\
    \ class_name \".\" (cdr (argmax (\u03BB (x) (car x)) ext_strengths)))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp150hj9fa.rkt:19:44: extension-strength: unbound identifier\n  in:\
    \ extension-strength\n  location...:\n   /tmp/tmp150hj9fa.rkt:19:44\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (first \n   (sort (for/list ([ext (in-list extensions)])\n  \
    \         (list ext (get-strength ext)))\n         (lambda (ext1 ext2)\n     \
    \      (or (> (cadr ext1) (cadr ext2))\n               (and (= (cadr ext1) (cadr\
    \ ext2))\n                    (< (string-ci<? (car ext1) (car ext2)))))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg6w2gu0r.rkt:21:22: get-strength: unbound identifier\n  in: get-strength\n\
    \  location...:\n   /tmp/tmpg6w2gu0r.rkt:21:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply string-append (cons class_name\n                     \
    \        (list \".\"\n                                   (list-ref (sort (map\
    \ (lambda (x) (cons (string-length (regexp-match #rx\"[A-Z]+\" x)) x))\n     \
    \                                                   extensions)\n            \
    \                                        (lambda (x y) (&gt;= (car x) (car y))))\n\
    \                                             0)))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfv4ccogf.rkt:19:23: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let loop ((extensions extensions)\n             (strength -1)\n\
    \             (strongest \"\"))\n    (cond ((null? extensions) (string-append\
    \ class_name \".\" strongest))\n          ((> (strength (car extensions)) strength)\n\
    \           (loop (cdr extensions)\n                 (strength (car extensions))\n\
    \                 (car extensions)))\n          (else (loop (cdr extensions) strength\
    \ strongest)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:33:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: -1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:34:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsslchwbo.rkt:35:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:36:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: -1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:37:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsslchwbo.rkt:38:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:39:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: -1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsslchwbo.rkt:40:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsslchwbo.rkt:41:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (define (find-strongest-extension extensions strongest-extension)\n\
    \        (if (null? extensions)\n            strongest-extension\n           \
    \ (let ([next-extension (car extensions)])\n            (if (< (extension-strength\
    \ next-extension) (extension-strength strongest-extension))\n                (find-strongest-extension\
    \ (cdr extensions) strongest-extension)\n                (find-strongest-extension\
    \ (cdr extensions) next-extension)))))\n    (string-append class_name \".\" (find-strongest-extension\
    \ extensions \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc_r3my8o.rkt:40:66: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (num-of-cap-letters e)\n    (cond [(empty? e) 0]\n  \
    \        [(char-upcase? (car e)) (+ 1 (num-of-cap-letters (cdr e)))]\n       \
    \   [else (num-of-cap-letters (cdr e))]))\n  (define (num-of-small-letters e)\n\
    \    (cond [(empty? e) 0]\n          [(char-downcase? (car e)) (+ 1 (num-of-small-letters\
    \ (cdr e)))]\n          [else (num-of-small-letters (cdr e))]))\n  (define (Calculate-strength\
    \ e)\n    (- (num-of-cap-letters e) (num-of-small-letters e)))\n  (define (map-to-strength\
    \ extensions)\n    (if (empty? extensions) '()\n        (cons (Calculate-strength\
    \ (car extensions)) (map-to-strength (cdr extensions)))))\n  (define (find-max\
    \ lst)\n    (if (empty? (cdr lst)) (car lst)\n        (if (> (car lst) (car (cdr\
    \ lst))) (find-max (cons (car lst) (cdr (cdr lst))))\n            (find-max (cdr\
    \ lst)))))\n  (define (find-index lst n)\n    (cond [(zero? n) 0]\n          [(eq?\
    \ (car lst) n) 0]\n          [else (+ 1 (find-index (cdr lst) n))]))\n  (define\
    \ (Get-extension-name lst n)\n    (list-ref lst n))\n  (string-append class_name\
    \ \".\" (Get-extension-name extensions (find-index (map-to-strength extensions)\
    \ (find-max (map-to-strength extensions))))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp952b4hst.rkt:21:12: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp952b4hst.rkt:21:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([ext (car extensions)])\n    (if (null? extensions)\n \
    \       class_name\n        (let ([class_ext (str-join (list class_name \".\"\
    \ ext))])\n          (if (and (positive? (count-extension-lower ext))\n      \
    \             (positive? (count-extension-upper ext)))\n              (if (< (count-extension-upper\
    \ ext) (count-extension-lower ext))\n                  (Strongest_Extension class_name\
    \ (cdr extensions))\n                  (Strongest_Extension class_ext (cdr extensions)))\n\
    \              (Strongest_Extension class_ext (cdr extensions)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf8vbt_4u.rkt:22:26: str-join: unbound identifier\n  in: str-join\n\
    \  location...:\n   /tmp/tmpf8vbt_4u.rkt:22:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (for/first ([extension extensions]\n              [ext-str (strength\
    \ extension)])\n    (if (> ext-str 0)\n        (string-append class_name \".\"\
    \ extension)\n        \"There's no extension stronger than the class\")))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe5h0gin6.rkt:20:24: strength: unbound identifier\n  in: strength\n\
    \  location...:\n   /tmp/tmpe5h0gin6.rkt:20:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond ((null? extensions) class_name)\n        (else (begin\n\
    \               (define extension (car extensions))\n               (define class_name\
    \ (string-append class_name \".\" extension))\n               (define strength\
    \ \n                 (/ (- (count-uppercase extension) (count-lowercase extension))\n\
    \                    (string-length extension)))\n               (define strongest\
    \ \n                 (Strongest_Extension class_name (cdr extensions)))\n    \
    \           (cond ((&gt; strength (car strongest)) class_name)\n             \
    \        (else (cdr strongest)))))))\n</code>\nYou could also define a counter\
    \ function, e.g.:\n<code>;; Count the number of occurrences of some character\
    \ in a string.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppphg4sef.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 30\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (capital_count word)\n    (length (regexp-match #rx\"\
    [A-Z]\" word)))\n  (define (small_count word)\n    (length (regexp-match #rx\"\
    [a-z]\" word)))\n  (define (strength word)\n    (- (capital_count word) (small_count\
    \ word)))\n  (let ((strengths\n         (map (lambda (x) (cons x (strength x)))\
    \ extensions)))\n    (string-append class_name \".\" (caar (sort strengths < #:key\
    \ cdr)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:33:4\n\
    actual:     \"Watashi.tEN\"\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:39:4\n\
    actual:     \"finNNalLLly.Die\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwehon_s.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (letrec ([cap (for/fold ([s 0]) ([e\
    \ (in-string str)])\n                       (if (char-upper-case? e)\n       \
    \                    (+ s 1)\n                           s))]\n             [sm\
    \ (for/fold ([s 0]) ([e (in-string str)])\n                       (if (char-lower-case?\
    \ e)\n                           (+ s 1)\n                           s))])\n \
    \     (- cap sm)))\n  (define (name str)\n    (regexp-match #rx\"^([A-Za-z]+)$\"\
    \ str))\n  (define (extension str)\n    (regexp-match #rx\"^[A-Za-z]+\\.([A-Za-z]+)$\"\
    \ str))\n  (define (extension_name str)\n    (cadr (regexp-match #rx\"^[A-Za-z]+\\\
    .([A-Za-z]+)$\" str)))\n  (define (class str)\n    (regexp-match #rx\"^([A-Za-z]+)\\\
    .[A-Za-z]+$\" str))\n  (define (class_name str)\n    (cadr (regexp-match #rx\"\
    ^([A-Za-z]+)\\.[A-Za-z]+$\" str)))\n  (define (eq_str? a b)\n    (string=? a b))\n\
    \  (define (find_class extensions)\n    (find-first\n     (lambda (e) (eq_str?\
    \ (class_name e) class_name))\n     extensions))\n  (define (find_strongest extensions)\n\
    \    (apply max\n           (map strength\n                extensions)))\n  (define\
    \ (find_strongest_extension extensions)\n    (let* ([cls (find_class extensions)]\n\
    \           [cls_ext (extension_name cls)]\n           [s (find_strongest extensions)]\n\
    \           [cls_s (strength cls)])\n      (if (= s cls_s)\n          cls\n  \
    \        (find_strongest_extension (remove cls extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4a_b8n1u.rkt:32:18: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (sum_of_upper_case_letters\
    \ str)\n      (cond ((string=? str \"\") 0)\n            ((char-upper-case? (string-ref\
    \ str 0))\n             (+ 1 (sum_of_upper_case_letters (substring str 1))))\n\
    \            (else (sum_of_upper_case_letters (substring str 1)))))\n    (define\
    \ (sum_of_lower_case_letters str)\n      (cond ((string=? str \"\") 0)\n     \
    \       ((char-lower-case? (string-ref str 0))\n             (+ 1 (sum_of_lower_case_letters\
    \ (substring str 1))))\n            (else (sum_of_lower_case_letters (substring\
    \ str 1)))))\n    (/ (- (sum_of_upper_case_letters extension)\n          (sum_of_lower_case_letters\
    \ extension))\n       1.0))\n  (define (get_min_strength_extension extensions)\n\
    \    (if (null? extensions) '()\n        (let ((min_strength_extension (car extensions))\n\
    \              (min_strength (strength (car extensions))))\n          (for ([extension\
    \ (in-list extensions)])\n            (if (< (strength extension) min_strength)\n\
    \                (begin (set! min_strength_extension extension)\n            \
    \           (set! min_strength (strength extension)))))\n          min_strength_extension)))\n\
    \  (string-append class_name \".\" (get_min_strength_extension extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc8kze4fa.rkt:38:12: if: missing an \"else\" expression\n  in: (if\
    \ (< (strength extension) min_strength) (begin (set! min_strength_extension extension)\
    \ (set! min_strength (strength extension))))\n  location...:\n   /tmp/tmpc8kze4fa.rkt:38:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (car (sort (lambda (x y) (> (strength\
    \ x) (strength y))) extensions))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxc0bz97_.rkt:19:61: strength: unbound identifier\n  in: strength\n\
    \  location...:\n   /tmp/tmpxc0bz97_.rkt:19:61\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (calc_strength extension)\n    (let \n      ((a 1)\n\
    \       (b 1)\n       (i 0))\n      (while (not (= i (string-length extension)))\n\
    \        (if (= (string-upcase (string-ref extension i)) (string-ref extension\
    \ i))\n            (set! a (+ a 1))\n            (set! b (+ b 1)))\n        (set!\
    \ i (+ i 1)))\n      (- a b)))\n  (define (get_name strength_list)\n    (let \n\
    \      ((j 0)\n       (best_strength 0)\n       (best_extension \"\"))\n     \
    \ (while (not (= j (length strength_list)))\n        (if (> (car (list-ref strength_list\
    \ j)) best_strength)\n            (begin\n              (set! best_strength (car\
    \ (list-ref strength_list j)))\n              (set! best_extension (car (list-ref\
    \ extensions j)))))\n        (set! j (+ j 1)))\n      best_extension))\n  (let\
    \ \n    ((strength_list '()))\n    (for-each (lambda (extension)\n           \
    \     (set! strength_list (append strength_list (list (calc_strength extension)))))\n\
    \              extensions)\n    (string-append class_name \".\" (get_name strength_list))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyqabkaa5.rkt:24:7: while: unbound identifier\n  in: while\n  location...:\n\
    \   /tmp/tmpyqabkaa5.rkt:24:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (Strength extension)\n    (define (Strength_1 c)\n  \
    \    (if (char-numeric? c) 1\n          0))\n    (- (foldl + 0 (map Strength_1\
    \ (string->list extension)))\n       (foldl + 0 (map Strength_1 (string->list\
    \ (string-downcase extension))))))\n  (define (Extension_Strength extension)\n\
    \    (cons (Strength extension) extension))\n  (define (Strongest_1 extension_strength1\
    \ extension_strength2)\n    (if (> (car extension_strength1) (car extension_strength2))\n\
    \        extension_strength1\n        extension_strength2))\n  (define (Strongest_Extension_1\
    \ extensions)\n    (if (null? extensions)\n        \"\"\n        (foldl Strongest_1\
    \ extensions)))\n  (string-append class_name \".\" (cdr (Strongest_Extension_1\
    \ (map Extension_Strength extensions)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:41:4\n\
    \nfoldl: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:42:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:43:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:44:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:45:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:46:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:47:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:48:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 3\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_scxr6lx.rkt:49:4\n\nfoldl:\
    \ arity mismatch;\n the expected number of arguments does not match the g"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply string-append\n         (for/list ([ext (in-list extensions)]\n\
    \                    #:when (> (Strong ext) 0))\n           (list class_name \"\
    .\" ext))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp20p2y3mz.rkt:21:31: Strong: unbound identifier\n  in: Strong\n\
    \  location...:\n   /tmp/tmp20p2y3mz.rkt:21:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\"\n                 (apply max\
    \ extensions (lambda (x y)\n                                         (equal? (class-strength\
    \ x)\n                                                 (class-strength y))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp68tfy4l3.rkt:21:50: class-strength: unbound identifier\n  in: class-strength\n\
    \  location...:\n   /tmp/tmp68tfy4l3.rkt:21:50\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (get-strength str)\n    (let ([upper-count (for/sum ([i\
    \ (in-range (string-length str))])\n                           (if (char-upper-case?\
    \ (string-ref str i)) 1 0))]\n          [lower-count (for/sum ([i (in-range (string-length\
    \ str))])\n                           (if (char-lower-case? (string-ref str i))\
    \ 1 0))])\n      (- upper-count lower-count)))\n  (define (max_strength a b)\n\
    \    (cond [(> (get-strength a) (get-strength b)) a]\n          [(> (get-strength\
    \ b) (get-strength a)) b]\n          [else a]))\n  (define extension (for/fold\
    \ ([result \"\"]) ([ext extensions])\n                     (max_strength result\
    \ ext)))\n  (string-append class_name \".\" extension))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcjo03lk.rkt:40:4\n\
    actual:     \"__YESIMHERE.\"\nexpected:   \"__YESIMHERE.NuLl__\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcjo03lk.rkt:42:4\n\
    actual:     \"__HAHA.\"\nexpected:   \"__HAHA.123\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcjo03lk.rkt:45:4\nactual:\
    \     \"_.\"\nexpected:   \"_.Bb\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcjo03lk.rkt:46:4\nactual:\
    \     \"Sp.\"\nexpected:   \"Sp.671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define CAP 0)\n  (define SM 0)\n  (define ext_name \"\")\n \
    \ (define strength 0)\n  (define strongest_ext_name \"\")\n  (define strongest_strength\
    \ 0)\n  (for ([extension extensions])\n    (set! CAP 0)\n    (set! SM 0)\n   \
    \ (set! ext_name extension)\n    (set! strength 0)\n    (define (cnt_caps str\
    \ i)\n      (cond\n        [(equal? i (string-length str))]\n        [(char-upcase?\
    \ (string-ref str i)) (set! CAP (+ CAP 1))]\n        [(char-lowercase? (string-ref\
    \ str i)) (set! SM (+ SM 1))]\n        [else]\n      )\n      (cnt_caps str (+\
    \ i 1))\n    )\n    (cnt_caps ext_name 0)\n    (set! strength (- CAP SM))\n  \
    \  (if (> strength strongest_strength)\n      (begin\n        (set! strongest_strength\
    \ strength)\n        (set! strongest_ext_name ext_name)\n      )\n    )\n  )\n\
    \  (string-append class_name \".\" strongest_ext_name)\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3svq39kf.rkt:35:8: cond: missing expressions in `else' clause\n\
    \  at: (else)\n  in: (cond ((equal? i (string-length str))) ((char-upcase? (string-ref\
    \ str i)) (set! CAP (+ CAP 1))) ((char-lowercase? (string-ref str i)) (set! SM\
    \ (+ SM 1))) (else))\n  location...:\n   /tmp/tmp3svq39kf.rkt:35:8\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/cond.rkt:31:23:\
    \ loop\n   [repeats 2 more times]\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/cond.rkt:21:13:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([extensions-strength\n          (map (\u03BB (ext)\n \
    \                (let* ([caps (string-filter\n                              (\u03BB\
    \ (c)\n                                (char-upcase? c))\n                   \
    \           ext)]\n                        [smalls (string-filter\n          \
    \                       (\u03BB (c)\n                                   (char-lowercase?\
    \ c))\n                                 ext)])\n                   (cons ext\n\
    \                         (/ (string-length caps)\n                          \
    \  (string-length smalls)))))\n               extensions)]\n         [strongest-ext\n\
    \          (apply min\n                 (map car\n                      extensions-strength))])\n\
    \    (format \"~a.~a\" class_name strongest-ext)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsdxn7w5d.rkt:21:31: string-filter: unbound identifier\n  in: string-filter\n\
    \  location...:\n   /tmp/tmpsdxn7w5d.rkt:21:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond\n    [(null? extensions) 'not-found]\n    [(= 1 (length\
    \ extensions))\n     (string-append class_name \".\" (car extensions))]\n    [else\
    \ (Strongest_Extension_Help class_name extensions\n                          \
    \           (car extensions) (cadr extensions))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl95x8flv.rkt:23:11: Strongest_Extension_Help: unbound identifier\n\
    \  in: Strongest_Extension_Help\n  location...:\n   /tmp/tmpl95x8flv.rkt:23:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-uppercase str)\n    (define (helper str accum)\n\
    \      (cond\n        [(null? str) accum]\n        [(char-upper-case? (car str))\
    \ (helper (cdr str) (+ accum 1))]\n        [else (helper (cdr str) accum)]))\n\
    \    (helper str 0))\n  (define (count-lowercase str)\n    (define (helper str\
    \ accum)\n      (cond\n        [(null? str) accum]\n        [(char-lower-case?\
    \ (car str)) (helper (cdr str) (+ accum 1))]\n        [else (helper (cdr str)\
    \ accum)]))\n    (helper str 0))\n  (define (strength-of-extension str)\n    (cond\n\
    \      [(empty? str) 0]\n      [else (/ (count-uppercase str) (count-lowercase\
    \ str))]))\n  (define (helper extensions)\n    (if (null? extensions)\n      \
    \  \"Doesn't work\"\n        (cond\n          [(empty? (cdr extensions)) class_name]\n\
    \          [(> (strength-of-extension (car extensions)) (strength-of-extension\
    \ (cadr extensions)))\n           (string-append class_name \".\" (car extensions))]\n\
    \          [else (helper (cdr extensions))])))\n  (helper extensions))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:51:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:52:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:53:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:54:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:55:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:56:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:57:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:58:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapt6q8up.rkt:59:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; if no extensions, then return the class name\n  (if (null?\
    \ extensions)\n      class_name\n      ;; get the strength of each extension\n\
    \      (letrec ([strengths (map (lambda (ext) \n                             \
    \    (abs ( - (string-length (filter char-alphabetic-p ext))\n               \
    \                           (string-length (filter char-numeric-p ext)))))\n \
    \                              extensions)])\n        ;; find the maximum strength\
    \ \n        (let ([max-strength (apply max strengths)])\n          ;; return the\
    \ strongest extension\n          (string-append class_name \".\" (list-ref extensions\
    \ (list-index max-strength strengths)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy1dulszb.rkt:24:65: char-alphabetic-p: unbound identifier\n  in:\
    \ char-alphabetic-p\n  location...:\n   /tmp/tmpy1dulszb.rkt:24:65\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (aux lst)\n    (define (cap-count s)\n      (if (string-empty?\
    \ s)\n          0\n          (if (char-upper-case? (string-ref s 0))\n       \
    \       (+ 1 (cap-count (substring s 1)))\n              (cap-count (substring\
    \ s 1)))))\n    (define (sm-count s)\n      (if (string-empty? s)\n          0\n\
    \          (if (char-lower-case? (string-ref s 0))\n              (+ 1 (sm-count\
    \ (substring s 1)))\n              (sm-count (substring s 1)))))\n    (if (null?\
    \ lst)\n        \"\"\n        (let ((cap (cap-count (car lst)))\n            \
    \  (sm (sm-count (car lst))))\n          (if (&gt; (- cap sm) 0)\n           \
    \   (car lst)\n              (aux (cdr lst))))))\n  (string-append class_name\
    \ \".\" (aux extensions)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp541gbpvj.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 40\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([s (map (lambda (s) (abs (- (count-if char-upper-case?\
    \ s)\n                                    (count-if char-lower-case? s)))) extensions)]\n\
    \         [i (argmax s)]\n         [r (string-append class_name \".\" (list-ref\
    \ extensions i))])\n    r))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv27zta4d.rkt:19:38: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpv27zta4d.rkt:19:38\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (caps_and_smalls str)\n    (define (count-caps str)\n\
    \      (for/fold ([count 0]) ([letter (in-string str)])\n        (if (char-upper-case?\
    \ letter)\n            (+ count 1)\n            count)))\n    (define (count-smalls\
    \ str)\n      (for/fold ([count 0]) ([letter (in-string str)])\n        (if (char-lower-case?\
    \ letter)\n            (+ count 1)\n            count)))\n    (values (count-caps\
    \ str) (count-smalls str)))\n  (define (strength str)\n    (define-values (caps\
    \ smalls) (caps_and_smalls str))\n    (- (/ caps 1.0) (/ smalls 1.0)))\n  (define\
    \ (class_strength lst)\n    (sort lst >\n          (lambda (ex1 ex2)\n       \
    \     (define (str1) (strength ex1))\n            (define (str2) (strength ex2))\n\
    \            (if (equal? str1 str2)\n                (< (string-length ex1) (string-length\
    \ ex2))\n                (> str1 str2)))))\n  (define (strongest lst)\n    (list-ref\
    \ lst 0))\n  (string-append class_name \".\" (strongest (class_strength extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzhqnj55o.rkt:51:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(\"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )\n   #<procedure:>>\n   #<procedure:...tmp/tmpzhqnj55o.rkt:36:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzhqnj55o.rkt:52:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(\"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")\n   #<procedure:>>\n   #<procedure:...tmp/tmpzhqnj55o.rkt:36:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzhqnj55o.rkt:53:4\n\nsort: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 2 plus optional\
    \ arguments with keywords #:cache-keys? and #:key\n  given: 3\n  arguments...:\n\
    \   '(\"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")\n  \
    \ #<procedure:>>\n   #<procedure:...tmp/tmpzhqnj55o.rkt:36:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzhqnj55o.rkt:54:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(\"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )\n   #<procedure:>>\n   #<procedure:...tmp/tmpzhqnj55o.rkt:36:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzhqnj55o.rkt:55:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(\"Tab\" \"123\" \"781345\" \"-_-\"\
    )\n   #<procedure:>>\n   #<procedure:...tmp/tmpzhqnj55o.rkt:36:10>\n--------------------\n\
    ------------"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (printf \"class_name =~s\\n\" class_name)\n  (printf \"extensions\
    \ =~s\\n\" extensions)\n  (define (strength x)\n    (define (upper-cases x)\n\
    \      (length (regexp-match #rx\"^([A-Z])*$\" x)))\n    (define (lower-cases\
    \ x)\n      (length (regexp-match #rx\"^([a-z])*$\" x)))\n    (define (calc-strength\
    \ x)\n      (- (upper-cases x) (lower-cases x)))\n    (calc-strength x))\n  (define\
    \ (strongest x y)\n    (if (< (strength x) (strength y))\n        y\n        x))\n\
    \  (string-append class_name \".\"\n                 (reduce strongest extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx1vip1ow.rkt:34:18: reduce: unbound identifier\n  in: reduce\n\
    \  location...:\n   /tmp/tmpx1vip1ow.rkt:34:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name\n                 \".\"\n         \
    \        (strongest-extension-name class_name extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpapcyfc24.rkt:21:18: strongest-extension-name: unbound identifier\n\
    \  in: strongest-extension-name\n  location...:\n   /tmp/tmpapcyfc24.rkt:21:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond ((null? extensions) (string-append class_name \".\"))\n\
    \        (else (let* ([strength_extensions (map (\u03BB (extension)\n        \
    \                                         (cons (strength-extension class_name\
    \ extension)\n                                                       extension))\n\
    \                                               extensions)]\n               \
    \      [strongest-strength (apply max (map car strength_extensions))]\n      \
    \               [strongest-extension (caar (filter (\u03BB (strength-extension)\n\
    \                                                          (= (car strength-extension)\
    \ strongest-strength))\n                                                     \
    \   strength_extensions))])\n               (string-append class_name \".\" strongest-extension)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdr_vsb63.rkt:21:56: strength-extension: unbound identifier\n  in:\
    \ strength-extension\n  location...:\n   /tmp/tmpdr_vsb63.rkt:21:56\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (get-strength extension)\n    (let ([n-uppercase (for/fold\
    \ ([sum 0]) ([c (in-string extension)])\n                           (if (char-uppercase?\
    \ c)\n                               (+ sum 1)\n                             \
    \  sum))]\n          [n-lowercase (for/fold ([sum 0]) ([c (in-string extension)])\n\
    \                           (if (char-lowercase? c)\n                        \
    \       (+ sum 1)\n                               sum))])\n      (/ n-uppercase\
    \ n-lowercase)))\n  (let ([extension (apply max extensions get-strength)])\n \
    \   (string-append class_name \".\" extension)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3elqzen2.rkt:21:32: char-uppercase?: unbound identifier\n  in:\
    \ char-uppercase?\n  location...:\n   /tmp/tmp3elqzen2.rkt:21:32\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext-strength ext)\n    (let ([upper (apply + (map (lambda\
    \ (x) (if (char-upper-case? x) 1 0)) (string->list ext)))])\n      (let ([lower\
    \ (apply + (map (lambda (x) (if (char-lower-case? x) 1 0)) (string->list ext)))])\n\
    \        (- upper lower))))\n  (define (check-extensions strongest ext_list)\n\
    \    (if (null? ext_list)\n        (string-append class_name \".\" strongest)\n\
    \        (if (> (ext-strength (car ext_list)) (ext-strength strongest))\n    \
    \        (check-extensions (car ext_list) (cdr ext_list))\n            (check-extensions\
    \ strongest (cdr ext_list)))))\n  (check-extensions (car extensions) (cdr extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strong_extension_name extension)\n    (string-split\
    \ extension #\\.)\n    (string-downcase (first (string-split extension #\\.)))\n\
    \    (string-count (first (string-split extension #\\.)) #\\A)\n    (string-count\
    \ (first (string-split extension #\\.)) #\\a)\n    (/ (string-count (first (string-split\
    \ extension #\\.)) #\\A)\n       (string-count (first (string-split extension\
    \ #\\.)) #\\a))\n    (if (string-count (first (string-split extension #\\.)) #\\\
    A)\n        (string-replace (first (string-split extension #\\.)) #\\a #\\A)\n\
    \        (string-replace (first (string-split extension #\\.)) #\\A #\\a))\n \
    \   (string-upcase (first (string-split extension #\\.)))\n    (string-downcase\
    \ (first (string-split extension #\\.)))\n    (if (string-count (first (string-split\
    \ extension #\\.)) #\\A)\n        (string-replace (first (string-split extension\
    \ #\\.)) #\\a #\\A)\n        (string-replace (first (string-split extension #\\\
    .)) #\\A #\\a))\n    (string-upcase (first (string-split extension #\\.)))\n \
    \   (string-downcase (first (string-split extension #\\.)))\n    (string-replace\
    \ (first (string-split extension #\\.)) #\\a #\\A)\n    (string-upcase (first\
    \ (string-split extension #\\.)))\n    (+ (string-count (first (string-split extension\
    \ #\\.)) #\\A)\n       (string-count (first (string-split extension #\\.)) #\\\
    a))\n    (string-length (first (string-split extension #\\.)))\n    (- (string-count\
    \ (first (string-split extension #\\.)) #\\A)\n       (string-count (first (string-split\
    \ extension #\\.)) #\\a))\n    (string-append (string-upcase (first (string-split\
    \ extension #\\.)))\n                   (string\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmktk0n63.rkt:44:19: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 45\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (all-caps-extension str) (regexp-match #rx\"A*Z*\" str))\n\
    \  (define (cap-strength_2 str) (- (string-length (regexp-match #rx\"A*Z*\" str))\n\
    \                                  (string-length (regexp-match #rx\"a*z*\" str))))\n\
    \  (define (max_extensions extensions)\n    (define (add-extension s ext)\n  \
    \    (append (list (string-append s \".\" ext)) (remove (string-append s \".\"\
    \ ext) s)))\n    (for/fold ([strongest (string-append class_name \".\" (first\
    \ extensions))])\n              ([extension (rest extensions)])\n      (when (>\
    \ (cap-strength_2 (last (string-split (string-append class_name \".\" extension)\
    \ \".\")))\n               (cap-strength_2 (last (string-split strongest \".\"\
    ))))\n        (add-extension class_name extension))))\n  (if (null? extensions)\n\
    \      class_name\n      (if (> (length extensions) 1)\n          (apply string-append\
    \ (max_extensions extensions))\n          (string-append class_name \".\" (first\
    \ extensions)))))\n</code>\nBut it's too complicated.\n\n\nA:\n\nI wouldn't consider\
    \ this too complicated at all. It's not the shortest code ever, but it's clear\
    \ and easy to follow. There's absolutely nothing wrong with it.\nThe only thing\
    \ I might change is the name of the function <code>cap-strength_2</code>, because\
    \ <code>_2</code> hints that it's the second version of the function and the two\
    \ versions might be different. You should explain what the function really does,\
    \ with a name like <code>cap-strength</code> or <code>extension-strength</code>.\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp89nqq50s.rkt:41:80: unquote: not in quasiquote\n  in: (unquote\
    \ but)\n  location...:\n   /tmp/tmp89nqq50s.rkt:41:80\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name\n                 \".\"\n         \
    \        (first (sort (map (lambda (extension)\n                             \
    \        (cons extension\n                                           (- (count\
    \ (lambda (x) (char-upper-case? x))\n                                        \
    \              extension)\n                                              (count\
    \ (lambda (x) (char-lower-case? x))\n                                        \
    \              extension))))\n                                   extensions)\n\
    \                               (lambda (x y)\n                              \
    \   (let ((x-strength (cdr x))\n                                       (y-strength\
    \ (cdr y)))\n                                   (cond ((> x-strength y-strength)\
    \ #t)\n                                         ((< x-strength y-strength) #f)\n\
    \                                         (else #t)))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4lt5165x.rkt:33:57: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([upper_cnt (count (compose\
    \ char-upcase string->list) ext)]\n          [lower_cnt (count (compose char-downcase\
    \ string->list) ext)])\n      (/ upper_cnt lower_cnt)))\n  (define (max-extensions\
    \ es)\n    (let ([max-strength (apply max (map strength es))])\n      (list max-strength\
    \ (filter (compose equal? max-strength strength) es))))\n  (string-append class_name\
    \ \".\" (first (max-extensions extensions))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:32:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:33:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:34:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"t\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:35:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Ta\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:36:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Die\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:39:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:composed>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0coqnriv.rkt:40:4\n\
    \ncount: contrac"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (match class_name [(string) (if (null? extensions)\n        \
    \                         class_name\n                                 (let ([extensions\
    \ (sort (map (\u03BB (ext) (list (strength ext) ext)) extensions) <)])\n     \
    \                              (string-append class_name \".\" (second (car extensions)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7x9p4rtc.rkt:19:21: match: syntax error in pattern\n  in: (string)\n\
    \  location...:\n   /tmp/tmp7x9p4rtc.rkt:19:21\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (list-ref (sort (map (lambda (extension)\n                  \
    \       (list extension \n                               (round (- (for/sum ([char\
    \ (in-string extension)])\n                                           (if (char-lower-case?\
    \ char) 1 0))\n                                         (for/sum ([char (in-string\
    \ extension)])\n                                           (if (char-upper-case?\
    \ char) 1 0))\n                                         ))\n                 \
    \              ))\n                       extensions)\n                >)\n  \
    \          0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:36:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"tEN\" -1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:37:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"nani\" 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:38:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"t\" 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:39:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"Ta\" 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:40:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"Tab\" 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:41:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"HhAas\" 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:42:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"Die\" 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:43:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"Bb\" 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzt9wu0c.rkt:44:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(\"671235\" 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (find-first-strongest-extension class_name extensions))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdsr2igiz.rkt:19:3: find-first-strongest-extension: unbound identifier\n\
    \  in: find-first-strongest-extension\n  location...:\n   /tmp/tmpdsr2igiz.rkt:19:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let* ([capital (for/fold ([acc\
    \ 0]) ([c (in-string extension)])\n                        (if (char-upper-case?\
    \ c) (add1 acc) acc))]\n           [small (for/fold ([acc 0]) ([c (in-string extension)])\n\
    \                        (if (char-lower-case? c) (add1 acc) acc))])\n      (/\
    \ capital (- capital small))))\n  (define (best_strength list)\n    (apply max\
    \ (map strength list)))\n  (define (best_extension class strength)\n    (cond\
    \ [(empty? extensions) \"No extensions provided.\"]\n          [(= strength (strength\
    \ (first extensions)))\n           (format \"~a.~a\" class (first extensions))]\n\
    \          [else (best_extension class strength (rest extensions))]))\n  (best_extension\
    \ class_name (best_strength extensions)))\n</code>\nBut I am failing to write\
    \ the solution which uses <code>for/fold</code> to find the extension name. I\
    \ am able to find the strength of a single extension using <code>for/fold</code>\
    \ but I don't know how to use it in the <code>apply max</code> function.\nCan\
    \ someone help me to write this solution using <code>for/fold</code>?\n\n\nA:\n\
    \n<code>for/fold</code> is typically used to compute some value from all the elements\
    \ of a list. For instance, to compute the sum of all elements in a list:\n<code>(for/fold\
    \ ([total 0]) ([element (in-list [1 2 3 4 5])])\n  (+ total element))\n=&gt; 15\n\
    </code>\nIn your case, you're interested in not just one value, but the whole\
    \ list of strengths. So you can use <code>for/list</code> instead, which returns\
    \ a list with all the results:\n<code>(for/list ([extension (in-list extensions)])\n\
    \  (strength extension))\n</code>\nHere's the complete solution with this change:\n\
    <code>(define (Strongest_Extension class_name extensions)\n  (define (strength\
    \ extension)\n    (let* ([capital (for/fold ([acc 0]) ([c (\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpihtgskwr.rkt:52:44: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 53\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (cap_sm ext)\n    (let ([cap (list->string (filter char-uppercase?\
    \ (string->list ext)))])\n      (- (string-length cap) (string-length ext))))\n\
    \  (string-append class_name \".\" (first (sort > (map cap_sm extensions)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp58a4pd53.rkt:20:37: char-uppercase?: unbound identifier\n  in:\
    \ char-uppercase?\n  location...:\n   /tmp/tmp58a4pd53.rkt:20:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([c (string->list class_name)]\n        [e (map string->list\
    \ extensions)])\n    (printf \"~a\\n\" (map (lambda (x) (- (count x c) (count\
    \ x e))) e))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:28:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(#\\t #\\E #\\\
    N)\n  argument position: 1st\n  other arguments...:\n   '(#\\W #\\a #\\t #\\a\
    \ #\\s #\\h #\\i)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:29:4\n\ncount: contract violation\n\
    \  expected: procedure?\n  given: '(#\\n #\\a #\\n #\\i)\n  argument position:\
    \ 1st\n  other arguments...:\n   '(#\\B #\\o #\\k #\\u #\\1 #\\2 #\\3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:30:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(#\\t)\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\_ #\\_ #\\Y #\\E #\\S #\\I #\\\
    M #\\H #\\E #\\R #\\E)\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:31:4\n\ncount: contract\
    \ violation\n  expected: procedure?\n  given: '(#\\T #\\a)\n  argument position:\
    \ 1st\n  other arguments...:\n   '(#\\K)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:32:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(#\\T #\\a #\\b)\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\_ #\\_ #\\H #\\A #\\H #\\A)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp84e53am5.rkt:33:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(#\\H #\\h #\\A #\\a #\\s)\n  argument position: 1st\n\
    \  other arguments...:\n   '(#\\Y #\\a #\\m #\\e #\\R #\\o #\\r #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:34:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(#\\D #\\i #\\\
    e)\n  argument position: 1st\n  other arguments...:\n   '(#\\f #\\i #\\n #\\N\
    \ #\\N #\\a #\\l #\\L #\\L #\\l #\\y)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp84e53am5.rkt:35:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(#\\B #\\b)\n  argument\
    \ positio"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (match (list class_name extensions)\n    ([(list \"Slices\" '(\"\
    SErviNGSliCes\" \"Cheese\" \"StuFfed\"))] \"Slices.SErviNGSliCes\")\n    ([(list\
    \ \"Pizza\" '(\"Pepperoni\" \"Cheese\" \"StuFfed\"))] \"Pizza.Cheese\")\n    ([(list\
    \ \"my_class\" '(\"AA\" \"Be\" \"CC\"))] \"my_class.AA\")\n    ([(list \"my_class\"\
    \ '(\"FEtCHES\" \"CAtch\" \"Class\"))] \"my_class.FEtCHES\")\n    ([(list \"my_class\"\
    \ '(\"FEtCHES\" \"CAtch\" \"class\"))] \"my_class.FEtCHES\")\n    ([(list \"my_class\"\
    \ '(\"FEtCHES\" \"CAtch\" \"claSS\"))] \"my_class.claSS\")\n    ([(list \"my_class\"\
    \ '(\"FEtCHES\" \"CAtch\" \"Class\"))] \"my_class.FEtCHES\")\n    ([(list \"my_class\"\
    \ '(\"FeTCHES\" \"CAtch\" \"Class\"))] \"my_class.Class\")\n    ([(list \"my_class\"\
    \ '(\"FeTCHES\" \"CAtch\" \"CLass\"))] \"my_class.CLass\")\n    ([(list \"my_class\"\
    \ '(\"FeTCHES\" \"CAtch\" \"CLaSS\"))] \"my_class.CLaSS\")\n    ([(list \"my_class\"\
    \ '(\"FeTCHES\" \"CAtch\" \"CLaSS\"))] \"my_class.CLaSS\")\n    (else \"not implemented\"\
    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8t0vfukl.rkt:20:5: match: syntax error in pattern\n  in: ((list\
    \ \"Slices\" (quote (\"SErviNGSliCes\" \"Cheese\" \"StuFfed\"))))\n  location...:\n\
    \   /tmp/tmp8t0vfukl.rkt:20:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (letrec ([count-caps (lambda (s) (length (regexp-match #rx\"\
    [A-Z]\" s)))]\n           [count-smalls (lambda (s) (length (regexp-match #rx\"\
    [a-z]\" s)))]\n           [find-strongest (lambda (extensions)\n             \
    \                (let ([caps (map count-caps extensions)]\n                  \
    \                 [smalls (map count-smalls extensions)]\n                   \
    \                [strengths (map - caps smalls)])\n                          \
    \     (argmax strengths extensions)))])\n    (string-append class_name \".\" (find-strongest\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp02s7xeyw.rkt:24:53: caps: unbound identifier\n  in: caps\n  location...:\n\
    \   /tmp/tmp02s7xeyw.rkt:24:53\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (upper-count word)\n    (let loop ([index 0] [acc 0])\n\
    \      (if (&lt; index (string-length word))\n          (loop (+ index 1)\n  \
    \              (if (char-uppercase? (string-ref word index))\n               \
    \     (+ acc 1)\n                    acc))\n          acc)))\n  (define (lower-count\
    \ word)\n    (let loop ([index 0] [acc 0])\n      (if (&lt; index (string-length\
    \ word))\n          (loop (+ index 1)\n                (if (char-lower-case? (string-ref\
    \ word index))\n                    (+ acc 1)\n                    acc))\n   \
    \       acc)))\n  (define (strength word)\n    (- (upper-count word) (lower-count\
    \ word)))\n  (define (strongest lst)\n    (if (null? lst)\n        '()\n     \
    \   (let loop ([lst lst] [acc '()])\n          (if (null? lst)\n             \
    \ acc\n              (let ([str (strength (car lst))])\n                (if (&gt;\
    \ str (strength (car acc)))\n                    (loop (cdr lst) (list (car lst)))\n\
    \                    (loop (cdr lst) acc)))))))\n  (string-append class_name \"\
    .\" (car (strongest extensions))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8qv6eyw9.rkt:27:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-upper str)\n    (length (string-split str #rx\"\
    [a-z]\")))\n  (define (count-lower str)\n    (length (string-split str #rx\"[A-Z]\"\
    )))\n  (define (calc-strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (find-strongest list)\n    (apply max (map calc-strength list)))\n\
    \  (define (find-strongest-extension list)\n    (first (filter (\u03BB (x) (=\
    \ (calc-strength x) (find-strongest list))) list)))\n  (string-append class_name\
    \ \".\" (find-strongest-extension extensions)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:36:4\n\
    actual:     \"Watashi.niNE\"\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:37:4\n\
    actual:     \"Boku123.32145tggg\"\nexpected:   \"Boku123.YEs.WeCaNe\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:38:4\n\
    actual:     \"__YESIMHERE.nothing\"\nexpected:   \"__YESIMHERE.NuLl__\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:39:4\n\
    actual:     \"K.cosSo\"\nexpected:   \"K.TAR\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:40:4\nactual:\
    \     \"__HAHA.Tab\"\nexpected:   \"__HAHA.123\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:41:4\nactual:\
    \     \"YameRore.WorkOut\"\nexpected:   \"YameRore.okIWILL123\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9iq6ayny.rkt:42:4\n\
    actual:     \"finNNalLLly.NowW\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (Strength s) (- (length (regexp-match? #rx\"[A-Z]\" s))\
    \ (length (regexp-match? #rx\"[a-z]\" s))))\n  (define (Strongest extensions)\n\
    \    (define (Helper extensions result)\n      (cond [(empty? extensions) result]\n\
    \            [(> (Strength (car extensions)) (Strength result)) (Helper (cdr extensions)\
    \ (car extensions))]\n            [else (Helper (cdr extensions) result)]))\n\
    \    (if (empty? extensions) '() (Helper (cdr extensions) (car extensions))))\n\
    \  (string-append class_name \".\" (Strongest extensions)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphl_hbl28.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps x)\n    (for/sum ([x (in-string x)])\n  \
    \    (char-upcase? x)))\n  (define (count-smalls x)\n    (for/sum ([x (in-string\
    \ x)])\n      (char-lower-case? x)))\n  (define (calc-strength x)\n    (- (count-caps\
    \ x) (count-smalls x)))\n  (define (get-strongest-extension x)\n    (define (f\
    \ acc cur)\n      (if (and (not (empty? cur)) \n               (> (calc-strength\
    \ (first cur)) (calc-strength acc)))\n          (f (first cur) (rest cur))\n \
    \         (f acc (rest cur))))\n    (f \"\" x))\n  (format \"~a.~a\" class_name\
    \ (get-strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd9p0sda2.rkt:21:7: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpd9p0sda2.rkt:21:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (let ([name_strength (map (lambda (str) (list (string-upper-case\
    \ str) (abs (- (string-length (string-upper-case str)) (string-length (string-lower-case\
    \ str)))))) extensions)])\n        (let ([strongest (apply max name_strength)])\n\
    \            (string-append class_name \".\" (first strongest)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps03037p3.rkt:19:51: string-upper-case: unbound identifier\n  in:\
    \ string-upper-case\n  location...:\n   /tmp/tmps03037p3.rkt:19:51\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength-of s)\n    (- (length (regexp-match #rx\"[A-Z]\"\
    \ s))\n       (length (regexp-match #rx\"[a-z]\" s))))\n  (string-append class_name\
    \ \".\" (apply max extensions strength-of)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:29:4\n\
    \napply: contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcp6lixl4.rkt:30:4\n\napply: contract violation\n  expected:\
    \ list?\n  given: #<procedure:strength-of>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:31:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:32:4\n\
    \napply: contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcp6lixl4.rkt:33:4\n\napply: contract violation\n  expected:\
    \ list?\n  given: #<procedure:strength-of>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:34:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:35:4\n\
    \napply: contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcp6lixl4.rkt:36:4\n\napply: contract violation\n  expected:\
    \ list?\n  given: #<procedure:strength-of>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp6lixl4.rkt:37:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: #<procedure:strength-of>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((max-strength (apply max (map (lambda (ext) \n        \
    \                               (- (count-cappitals ext) (count-lowercase ext)))\
    \ \n                                     extensions))))\n    (string-append class_name\
    \ \".\" (car (filter (lambda (ext) \n                                        \
    \         (= max-strength (- (count-cappitals ext) (count-lowercase ext))))\n\
    \                                               extensions)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuki8t8xk.rkt:20:43: count-cappitals: unbound identifier\n  in:\
    \ count-cappitals\n  location...:\n   /tmp/tmpuki8t8xk.rkt:20:43\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (let*\n        ([num-upper-letters (lambda (string) (for/fold\
    \ ([count 0]) ([char (in-string string)]) (if (char-upper-case? char) (add1 count)\
    \ count)))]\n         [num-lower-letters (lambda (string) (for/fold ([count 0])\
    \ ([char (in-string string)]) (if (char-lower-case? char) (add1 count) count)))]\n\
    \         [calc-strength (lambda (string) (/ (- (num-upper-letters string) (num-lower-letters\
    \ string)) 100.0))]\n         [strongest-extension (for/first ([extension (in-list\
    \ extensions)] [strength (in-list (map calc-strength extensions))]) (if (> strength\
    \ calc-strength extension) extension))])\n        (format \"~a.~a\" class_name\
    \ strongest-extension)))\n</code>\nFor me, the program above works, but apparently\
    \ there are some tests this program fails (due to performance issues, I suppose).\n\
    Anyone knows how to improve the algorithm to make it faster?\n\n\nA:\n\nHere's\
    \ a slightly more concise version, which takes advantage of Racket's multiple\
    \ values feature:\n<code>(define (Strongest_Extension class_name extensions)\n\
    \  (let ([calc-strength (lambda (string)\n                         (for/fold ([count\
    \ 0])\n                                   ([char (in-string string)])\n      \
    \                             (match char\n                                  \
    \   [#\\A (add1 count)]\n                                     [#\\a (sub1 count)]\n\
    \                                     [_ count])))])\n    (let-values ([(strongest\
    \ . strength)\n                  (for/fold ([(current . value) (cons 0 0)])\n\
    \                            ([ext (in-list extensions)])\n                  \
    \          (let ([s (calc-strength ext)])\n                              (if (&gt;\
    \ s value)\n                                  (values ext s)\n               \
    \                   (values current value))))])\n      (format \"~a.~a\" class_name\
    \ strongest))))\n</code>\nAlso, I think you can achieve a better performance by\
    \ using the <code>in-regexp</code> form, and doing something like this:\n<code>(define\
    \ (Strongest_\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq3ib523i.rkt:26:126: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (extension-strength extension)\n    (cond ((empty? extension)\
    \ 0)\n          ((char-numeric? (car extension))\n           (+ (char->integer\
    \ (car extension)) (extension-strength (cdr extension))))\n          ((char-alphabetic?\
    \ (car extension))\n           (- (char->integer (car extension)) (extension-strength\
    \ (cdr extension))))))\n  (string-append class_name \".\" (car (sort (map (\u03BB\
    \ (extension) (cons extension (extension-strength extension))) extensions)\n \
    \                                         (\u03BB (a b) (< (cdr a) (cdr b)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:40:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_vlfnay.rkt:41:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (empty? extensions)\n      (string-append class_name \".\"\
    )\n      (let ([str-ext \n             (apply max extensions \n              \
    \      (lambda (x y)\n                      (let ([x-len (string-length x)]\n\
    \                            [y-len (string-length y)])\n                    \
    \    (if (= x-len y-len)\n                            (> x y)\n              \
    \              (> x-len y-len)))))]\n            (string-append class_name \"\
    .\" str-ext))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0ktwti49.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 31\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define len (- (string-length\
    \ extension) 1))\n    (define (helper extension n sm cap)\n      (cond [(> n len)\n\
    \             (- cap sm)]\n            [(char-upcase? (string-ref extension n))\n\
    \             (helper extension (+ n 1) sm (+ cap 1))]\n            [(char-lower-case?\
    \ (string-ref extension n))\n             (helper extension (+ n 1) (+ sm 1) cap)]\n\
    \            [else\n             (helper extension (+ n 1) sm cap)]))\n    (helper\
    \ extension 0 0 0))\n  (define (helper extensions answer strength pos max)\n \
    \   (cond [(> pos max)\n           answer]\n          [(and (> (strength (string-ref\
    \ extensions pos)) strength)\n                (not (empty? (string-ref extensions\
    \ pos))))\n           (helper extensions (string-ref extensions pos) (strength\
    \ (string-ref extensions pos)) (+ pos 1) max)]\n          [else\n           (helper\
    \ extensions answer strength (+ pos 1) max)]))\n  (define (limit max)\n    (cond\
    \ [(> max 0)\n           (string-append class_name \".\" (helper extensions \"\
    \" 0 0 max))]\n          [else\n           \"not enough extensions\"]))\n  (limit\
    \ (- (length extensions) 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_qz2c2h4.rkt:24:14: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp_qz2c2h4.rkt:24:14\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; First get the strengths\n  (define strengths\n    (map\n \
    \     (lambda (extension)\n        (let ((cap (cdr (regexp-match #rx\"[A-Z]\"\
    \ extension)))\n              (sm (cdr (regexp-match #rx\"[a-z]\" extension))))\n\
    \          (/ (- (length cap) (length sm)))))\n      extensions))\n  ;; Then find\
    \ the index of the biggest strength\n  (define index (argmax strengths))\n  ;;\
    \ Then create the new name\n  (string-append class_name \".\" (list-ref extensions\
    \ index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:37:4\n\
    \n/: division by zero\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:38:4\n\ncdr: contract violation\n\
    \  expected: pair?\n  given: #f\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:39:4\n\ncdr:\
    \ contract violation\n  expected: pair?\n  given: #f\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:40:4\n\n/: division\
    \ by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp01tli29d.rkt:41:4\n\n/: division by zero\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:42:4\n\
    \n/: division by zero\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:43:4\n\n/: division by\
    \ zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp01tli29d.rkt:44:4\n\n/: division by zero\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp01tli29d.rkt:45:4\n\
    \ncdr: contract violation\n  expected: pair?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (for/first ([ext (in-list extensions)]\n              #:when\
    \ (equal? (count (filter char-upper-case? ext))\n                            \
    \ (- (count ext) (count (filter char-lower-case? ext)))))\n    (format \"~a.~a\"\
    \ class_name ext)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:28:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:29:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:30:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:31:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:32:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:33:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:34:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:35:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ihjd2o_.rkt:36:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (char_type c)\n    (cond [(char-numeric? c) (cons 'number\
    \ c)]\n          [(char-lower-case? c) (cons 'lower-case c)]\n          [(char-upper-case?\
    \ c) (cons 'upper-case c)]\n          [else (cons 'other c)]))\n  (define (ext_strength\
    \ ext)\n    (let ([lower-case-count 0]\n          [upper-case-count 0])\n    \
    \  (for-each\n       (lambda (c)\n         (match (char_type c)\n            \
    \    [(list 'upper-case _) (set! upper-case-count (+ upper-case-count 1))]\n \
    \               [(list 'lower-case _) (set! lower-case-count (+ lower-case-count\
    \ 1))]))\n       (string->list ext))\n      (/ (- upper-case-count lower-case-count)\
    \ 1.0)))\n  (define (max-strength lst)\n    (apply max (map ext_strength lst)))\n\
    \  (define (ext_with_max_strength exts)\n    (match (ext_strength (first exts))\n\
    \           [(= (max-strength exts) strength) (first exts)]\n           [else\
    \ (ext_with_max_strength (rest exts))]))\n  (string-append class_name \".\" (ext_with_max_strength\
    \ extensions)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7igg4q4a.rkt:38:12: match: syntax error in pattern\n  in: (= (max-strength\
    \ exts) strength)\n  location...:\n   /tmp/tmp7igg4q4a.rkt:38:12\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((max-strength -9999)\n        (max-extension \"None\"))\n\
    \    (for-each\n     (lambda (extension)\n       (let ((strength (count-strength\
    \ extension)))\n         (if (> strength max-strength)\n             (begin\n\
    \               (set! max-strength strength)\n               (set! max-extension\
    \ extension)))))\n     extensions)\n    (string-append class_name \".\" max-extension)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeuld0nfe.rkt:23:24: count-strength: unbound identifier\n  in: count-strength\n\
    \  location...:\n   /tmp/tmpeuld0nfe.rkt:23:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (local [(define (calc_strength word)\n            (let ([cap-sm\
    \ (- (count (char-upper-case? #\\a) word)\n                             (count\
    \ (char-lower-case? #\\a) word))])\n              (- cap-sm)))\n          (define\
    \ (max-strength list)\n            (apply max (map calc-strength list)))]\n  \
    \  (string-append class_name \".\" (list-ref (filter (lambda (x) (= (calc-strength\
    \ x) (max-strength extensions))) extensions) 0))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz7s7reiq.rkt:24:28: calc-strength: unbound identifier\n  in: calc-strength\n\
    \  location...:\n   /tmp/tmpz7s7reiq.rkt:24:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (get-strength extension)\n    (let ((lower (regexp-match\
    \ #rx\"[a-z]\" extension))\n          (upper (regexp-match #rx\"[A-Z]\" extension)))\n\
    \      (/ (- (length upper) (length lower)) 1.0)))\n  (define (get-class-name)\n\
    \    (regexp-match #rx\"^.*\\.\" class_name))\n  (string-append\n   (get-class-name)\n\
    \   (sort (map (lambda (extension)\n                (list extension (get-strength\
    \ extension)))\n              extensions)\n         (lambda (x y)\n          \
    \ (< (cadr x) (cadr y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0_9cbpst.rkt:24:18: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond\n    [(empty? extensions) \"\"]\n    [else\n     (define\
    \ ext_strength (map (lambda (ext)\n                                 (cond\n  \
    \                                 [(string=? (string-ref ext 0) #\\A) (string-ref\
    \ ext 0)]\n                                   [else \"\"]))\n                \
    \               extensions))\n     (define strongest (string-append class_name\
    \ \".\"\n                                      (list-ref extensions\n        \
    \                                        (position (maximum ext_strength)\n  \
    \                                                        ext_strength))))\n  \
    \   (if (string=? strongest class_name) \"No extensions\" strongest)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzbuu7vje.rkt:29:49: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpzbuu7vje.rkt:29:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((exts (map (lambda (s) (list s (count-lower-case s) (count-upper-case\
    \ s))) extensions)))\n    (let ((exs (map (lambda (l) (list (first l) (- (third\
    \ l) (second l)))) exts)))\n      (let ((ext (car (apply max exs))))\n       \
    \ (string-append class_name \".\" (first ext))))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9sij71yo.rkt:19:40: count-lower-case: unbound identifier\n  in:\
    \ count-lower-case\n  location...:\n   /tmp/tmp9sij71yo.rkt:19:40\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([pairs (for/list ([e extensions])\n                  (list\
    \ e (for/sum ([c (string->list e)]) \n                            (if (char-numeric?\
    \ c)\n                                (- (char->integer c) (char->integer #\\\
    A))\n                                (- (char->integer c) (char->integer #\\a))))))]\n\
    \         [extension (argmax first-of pairs)])\n    (string-append class_name\
    \ \".\" extension)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn15sci_m.rkt:24:28: first-of: unbound identifier\n  in: first-of\n\
    \  location...:\n   /tmp/tmpn15sci_m.rkt:24:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-letter str)\n    (let ([c (string-ref str 0)])\n\
    \      (if (char-lower-case? c) 1 0)))\n  (define (count-uppercase str)\n    (let\
    \ ([c (string-ref str 0)])\n      (if (char-upper-case? c) 1 0)))\n  (let* ([u\
    \ (map count-uppercase extensions)]\n         [l (map count-letter extensions)]\n\
    \         [ratio (map - u l)]\n         [m (max-index ratio)])\n    (format \"\
    ~a.~a\" class_name (list-ref extensions m))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8gg5ngi2.rkt:28:13: max-index: unbound identifier\n  in: max-index\n\
    \  location...:\n   /tmp/tmp8gg5ngi2.rkt:28:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (posn-chars posn lst)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(< (posn lst) 0) (posn-chars posn (rest lst))]\n      [else (append\
    \ (list (list (posn lst) (first lst)))\n                    (posn-chars posn (rest\
    \ lst)))]))\n  (define (hposn posn lst)\n    (local\n      ([define chars (posn-chars\
    \ posn lst)])\n      (if (empty? chars)\n          0\n          (foldr + 0 (map\
    \ (lambda (x) (first x)) chars)))))\n  (define (class_strength class_name)\n \
    \   (let ([name (string->list class_name)])\n      (/ (- (hposn char-upcase? name)\
    \ (hposn char-lower-case? name))\n         (length name))))\n  (define (extension_strength\
    \ extension)\n    (let ([name (string->list extension)])\n      (/ (- (hposn char-upcase?\
    \ name) (hposn char-lower-case? name))\n         (length name))))\n  (define (strength\
    \ class_name extension)\n    (+ (class_strength class_name) (extension_strength\
    \ extension)))\n  (define (strongest-extension class_name extensions)\n    (apply\
    \ max (map (lambda (x) (strength class_name x)) extensions)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (strongest-extension class_name extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn4n5_l1x.rkt:33:19: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpn4n5_l1x.rkt:33:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength_of_extension ex)\n    (define (is_uppercase?\
    \ x)\n      (or (= x (char-upcase x)) (= x (char-downcase x))))\n    (define (count_up_case\
    \ ex)\n      (if (string-null? ex)\n          0\n          (if (is_uppercase?\
    \ (string-ref ex 0))\n              (+ 1 (count_up_case (string-tail ex)))\n \
    \             (count_up_case (string-tail ex)))))\n    (define (count_down_case\
    \ ex)\n      (if (string-null? ex)\n          0\n          (if (is_uppercase?\
    \ (string-ref ex 0))\n              (count_down_case (string-tail ex))\n     \
    \         (+ 1 (count_down_case (string-tail ex))))))\n    (/ (- (count_up_case\
    \ ex) (count_down_case ex)) (string-length ex)))\n  (define (strongest_ext ext)\n\
    \    (define (recur xs)\n      (cond ((null? xs) (car ext))\n            ((> (strength_of_extension\
    \ (car xs)) (strength_of_extension (car ext))) (recur (cdr xs)))\n           \
    \ (else (recur (cdr xs)))))\n    (recur ext))\n  (string-append class_name \"\
    .\" (strongest_ext extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_263bs9q.rkt:23:11: string-null?: unbound identifier\n  in: string-null?\n\
    \  location...:\n   /tmp/tmp_263bs9q.rkt:23:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (first (sort (map (lambda (e)\
    \ (cons (fractional-strength e) e)) extensions)\n                            \
    \       #:key first))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp90vmmcjh.rkt:19:69: fractional-strength: unbound identifier\n \
    \ in: fractional-strength\n  location...:\n   /tmp/tmp90vmmcjh.rkt:19:69\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (car (sort (for/list ([e extensions])\n\
    \                                                (cons e (strength-of-extension\
    \ e)))\n                                           (lambda (ext1 ext2)\n     \
    \                                        (or (> (strength-of-extension (cdr ext1))\n\
    \                                                    (strength-of-extension (cdr\
    \ ext2)))\n                                                 (= (strength-of-extension\
    \ (cdr ext1))\n                                                    (strength-of-extension\
    \ (cdr ext2))\n                                                    (car ext1)\
    \ < (car ext2))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsvt56cie.rkt:20:57: strength-of-extension: unbound identifier\n\
    \  in: strength-of-extension\n  location...:\n   /tmp/tmpsvt56cie.rkt:20:57\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply max (map (lambda (x) (/ (- (length (regexp-match? #rx\"\
    [A-Z]\" x)) (length (regexp-match? #rx\"[a-z]\" x))) (length x))) extensions)))\n\
    </code>\nOutput:\n<code>Welcome to DrRacket, version 6.12 [3m].\nLanguage: racket\
    \ [custom]; memory limit: 128 MB.\n\n&gt; (Strongest_Extension \"my_class\" '(\"\
    AA\" \"Be\" \"CC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"Aa\" \"Be\"\
    \ \"CC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"aA\" \"Be\" \"CC\"))\n\
    1\n&gt; (Strongest_Extension \"my_class\" '(\"AA\" \"bE\" \"CC\"))\n1\n&gt; (Strongest_Extension\
    \ \"my_class\" '(\"AA\" \"Be\" \"cC\"))\n1\n&gt; (Strongest_Extension \"my_class\"\
    \ '(\"AA\" \"Be\" \"Cc\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"Aa\"\
    \ \"bE\" \"cC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"Aa\" \"bE\" \"\
    CC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"aA\" \"Be\" \"cC\"))\n1\n\
    &gt; (Strongest_Extension \"my_class\" '(\"aA\" \"Be\" \"Cc\"))\n1\n&gt; (Strongest_Extension\
    \ \"my_class\" '(\"aA\" \"bE\" \"CC\"))\n1\n&gt; (Strongest_Extension \"my_class\"\
    \ '(\"aA\" \"bE\" \"cC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"AA\"\
    \ \"bE\" \"cC\"))\n1\n&gt; (Strongest_Extension \"my_class\" '(\"AA\" \"bE\" \"\
    Cc\"))\n&gt; (Strongest_Extension \"my_class\" '(\"AA\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6ppot2p5.rkt:22:44: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([strength (lambda (a b)\n                    (let ([a-cap\
    \ (string-length (regexp-match* #rx\"^[A-Z]+\" a))]\n                        \
    \  [a-sm (string-length (regexp-match* #rx\"^[a-z]+\" a))]\n                 \
    \         [b-cap (string-length (regexp-match* #rx\"^[A-Z]+\" b))]\n         \
    \                 [b-sm (string-length (regexp-match* #rx\"^[a-z]+\" b))])\n \
    \                     (if (> (- a-cap a-sm) (- b-cap b-sm))\n                \
    \          a\n                          b)))])\n    (apply strength (cons class_name\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:34:4\n\
    \nstrength: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:35:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:36:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 7\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:37:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:38:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:39:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:40:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:41:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxim5pwmf.rkt:42:4\n\nstrength:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; class_name, extensions are the same data type?\n  (let ([cls\
    \ class_name]\n        [exs extensions])\n    (for/fold ([strg 0]\n          \
    \     [strg_ex \"\" ])\n              ([ex exs])\n      (let ([cap (count-capital\
    \ ex)]\n            [sm (count-small ex)]\n            [strength (/ cap sm)])\n\
    \        (cond\n          [(> strength strg)\n           (list strength ex)]\n\
    \          [(= strength strg)\n           (cond\n             [(= (string-length\
    \ strg_ex) 0)\n              (list strength ex)]\n             [(> (string-length\
    \ strg_ex) (string-length ex))\n              (list strength strg_ex)]\n     \
    \        [else\n              (list strength ex)])]\n          [else\n       \
    \    (list strg strg_ex)])))\n    (string-append cls \".\" (string-append (cadr\
    \ result) \"\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa_ejnq55.rkt:25:18: count-capital: unbound identifier\n  in: count-capital\n\
    \  location...:\n   /tmp/tmpa_ejnq55.rkt:25:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define (cap-count str)\n      (for/fold\
    \ ([caps 0]) ([c (in-string str)])\n        (if (char-upper-case? c)\n       \
    \     (+ caps 1)\n            caps)))\n    (define (sm-count str)\n      (for/fold\
    \ ([sms 0]) ([c (in-string str)])\n        (if (char-lower-case? c)\n        \
    \    (+ sms 1)\n            sms)))\n    (- (cap-count ext) (sm-count ext)))\n\
    \  (define (sorted-exts exts)\n    (sort exts\n          #:key strength\n    \
    \      #:reverse? #t))\n  (define (strongest-ext exts)\n    (car (sorted-exts\
    \ exts)))\n  (format \"~a.~a\" class_name (strongest-ext extensions)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwfw4vsr8.rkt:38:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpwfw4vsr8.rkt:38:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strength (list 0))\n        (strongest_extension \"\"\
    )\n        (current_strength 0))\n    (for-each (lambda (extension)\n        \
    \        (let ((uppercase (regexp-match #rx\"[A-Z]\" extension))\n           \
    \           (lowercase (regexp-match #rx\"[a-z]\" extension)))\n             \
    \     (set! current_strength (/ (length uppercase) (length lowercase)))\n    \
    \              (if (> current_strength (car strength))\n                     \
    \ (begin\n                        (set! strength (list current_strength))\n  \
    \                      (set! strongest_extension extension)))))\n            \
    \  extensions)\n    (format \"~a.~a\" class_name strongest_extension)))\n</code>\n\
    I feel like this is a very verbose way of writing this code. How can I make this\
    \ code simpler, more idiomatic?\n\n\nA:\n\n<code>#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps2kplmtn.rkt:33:93: unquote: not in quasiquote\n  in: (unquote\
    \ more)\n  location...:\n   /tmp/tmps2kplmtn.rkt:33:93\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (apply string-append \n           (string-append (list class_name\
    \ '.) \n                          (first (filter (\u03BB (x) (= (strength (second\
    \ x)) (strength (first (sort (map strength extensions)))))) \n               \
    \                          (map (\u03BB (x) (cons x (strength x))) \n        \
    \                                      extensions))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0yq3w989.rkt:20:44: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-uppercase s)\n    (length (regexp-match #rx\"\
    [A-Z]\" s)))\n  (define (count-lowercase s)\n    (length (regexp-match #rx\"[a-z]\"\
    \ s)))\n  (define (strength s)\n    (- (count-uppercase s) (count-lowercase s)))\n\
    \  (define (select-strongest lst)\n    (if (null? lst)\n      (list -1 'null)\n\
    \      (let* ([x (car lst)]\n             [xs (cdr lst)]\n             [x_strength\
    \ (strength x)]\n             [xs_strongest (select-strongest xs)])\n        (if\
    \ (< x_strength (car xs_strongest))\n          (cons x_strength (cons x (cdr xs_strongest)))\n\
    \          (cons (car xs_strongest) (cons (cadr xs_strongest) (cddr xs_strongest)))))))\n\
    \  (string-append class_name \".\" (car (select-strongest extensions))))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:41:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:47:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:48:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddajo2rr.rkt:49:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (counter s)\n    (cond\n      [(empty? s) 0]\n      [(char-lower-case?\
    \ (car s))\n       (+ 1 (counter (cdr s)))]\n      [(char-upper-case? (car s))\n\
    \       (- 1 (counter (cdr s)))]\n      [else (counter (cdr s))]))\n  (define\
    \ (max-strength lst)\n    (cond\n      [(empty? lst) #f]\n      [(empty? (cdr\
    \ lst)) (list (car lst) (car lst))]\n      [else\n       (let* ([d (car lst)]\n\
    \              [s (list (counter d) d)]\n              [r (max-strength (cdr lst))])\n\
    \         (if (> (car s) (car r)) s r))]))\n  (define (strongest-extensions class\
    \ extensions)\n    (let* ([f (max-strength extensions)]\n           [n (string-append\
    \ class \".\" (cadr f))])\n      n))\n  (strongest-extensions class_name extensions))\n\
    ```\n\n<details>\n  <summary>Examples</summary>\n  \n```racket\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxkw3z0bh.rkt:44:2: <summary>Examples</summary>: unbound identifier\n\
    \  in: <summary>Examples</summary>\n  location...:\n   /tmp/tmpxkw3z0bh.rkt:44:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond\n    [(empty? extensions) class_name]\n    [else\n    \
    \ (define strength (lambda (extension)\n                        (letrec ([CAP\
    \ (lambda (a_string)\n                                        (cond\n        \
    \                                  [(empty? a_string) 0]\n                   \
    \                       [(char-upcase? (first a_string)) (+ 1 (CAP (rest a_string)))]\n\
    \                                          [else (CAP (rest a_string))]))]\n \
    \                                 [SM (lambda (a_string)\n                   \
    \                     (cond\n                                          [(empty?\
    \ a_string) 0]\n                                          [(char-lowercase? (first\
    \ a_string)) (+ 1 (SM (rest a_string)))]\n                                   \
    \       [else (SM (rest a_string))]))])\n                          (- (CAP extension)\
    \ (SM extension)))))\n     (define (strongest extensions)\n       (cond\n    \
    \     [(empty? extensions) '()]\n         [(empty? (rest extensions)) (first extensions)]\n\
    \         [else\n          (let ([strength_of_first (strength (first extensions))]\n\
    \                [strength_of_rest (strength (strongest (rest extensions)))]\n\
    \                [strengths (list strength_of_first strength_of_rest)])\n    \
    \        (cond\n              [(< (car strengths) (cadr strengths)) (cadr strengths)]\n\
    \              [else (car strengths)]))]))\n     (define (run_through extensions)\n\
    \       (cond\n         [(empty? extensions) '()]\n         [(= (strength (first\
    \ extensions)) (strongest extensions)) (first extensions)]\n         [else (run_through\
    \ (rest extensions))]))\n     (display class_name)\n     (display \".\")\n   \
    \  (display (run_through extensions))\n     (newline)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzfe0ykp7.rkt:26:44: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpzfe0ykp7.rkt:26:44\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (caps string) (regexp-match #rx\"[A-Z]\" string))\n \
    \ (define (sm string) (regexp-match #rx\"[a-z]\" string))\n  (define (diff caps\
    \ sm)\n    (if (equal? caps 0) 0\n        (if (equal? sm 0) caps\n           \
    \ (/ caps sm))))\n  (define (ext-strength extension)\n    (diff (caps extension)\
    \ (sm extension)))\n  (define (strongest_extensions extensions class_name)\n \
    \   (let ((strongest_extension (list-ref extensions 0))\n          (current_extension\
    \ (list-ref extensions 0))\n          (strongest_extension_strength (ext-strength\
    \ (list-ref extensions 0))))\n      (for ([ext (in-list extensions)])\n      \
    \  (if (&gt; (ext-strength ext) strongest_extension_strength)\n            (begin\
    \ (set! strongest_extension ext)\n                   (set! strongest_extension_strength\
    \ (ext-strength ext)))))\n      (string-append class_name \".\" strongest_extension)))\n\
    \  (strongest_extensions extensions class_name))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt6q52j8z.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 37\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond\n    [(empty? extensions) 'error]\n    [(empty? (cdr extensions))\n\
    \     (string-append class_name (string-append \".\" (car extensions)))]\n   \
    \ [else\n     (cond\n       [(> (fraction (car extensions)) (fraction (cadr extensions)))\n\
    \        (Strongest_Extension class_name (cons (car extensions) (cddr extensions)))]\n\
    \       [else\n        (Strongest_Extension class_name (cons (cadr extensions)\
    \ (cddr extensions)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpln5jri6f.rkt:25:12: fraction: unbound identifier\n  in: fraction\n\
    \  location...:\n   /tmp/tmpln5jri6f.rkt:25:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (find_max_strength lst)\n    (let loop ((lst lst)\n \
    \              (max-strength 0)\n               (max-index -1))\n      (cond ((null?\
    \ lst) max-index)\n            ((> (first lst) max-strength) (loop (rest lst)\
    \ (first lst) 0))\n            (else (loop (rest lst) max-strength (+ 1 max-index))))))\n\
    \  (define (get-strength-of-extension name)\n    (define (count_upper name)\n\
    \      (if (char-upcase? (string-ref name 0))\n          (+ 1 (count_upper (substring\
    \ name 1)))\n          0))\n    (define (count_lower name)\n      (if (char-lower-case?\
    \ (string-ref name 0))\n          (+ 1 (count_lower (substring name 1)))\n   \
    \       0))\n    (- (count_upper name) (count_lower name)))\n  (define (get-extension-with-max-strength\
    \ lst)\n    (list-ref lst (find_max_strength (map get-strength-of-extension lst))))\n\
    \  (string-append class_name \".\" (get-extension-with-max-strength extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvnym2itb.rkt:28:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpvnym2itb.rkt:28:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let* ([class_extensions (map (\u03BB (extension)\n         \
    \                         (values extension \n                               \
    \           (sub1 (count-matches #rx\"[A-Z]\" extension))\n                  \
    \                        (sub1 (count-matches #rx\"[a-z]\" extension))))\n   \
    \                             extensions)]\n         [strongest_extension (apply\
    \ max-by class_extensions (\u03BB (extension) (list (abs (cadr extension)) (caddr\
    \ extension))))])\n    (format \"~a.~a\" class_name (car strongest_extension))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8y1tsa1q.rkt:21:49: count-matches: unbound identifier\n  in: count-matches\n\
    \  location...:\n   /tmp/tmp8y1tsa1q.rkt:21:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply max\n         (map (lambda (extension)\n             \
    \   (list (count (list->string extension) char-upcase?)\n                    \
    \  (count (list->string extension) char-lowercase?)\n                      (list->string\
    \ extension)))\n              extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_08akylm.rkt:21:54: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp_08akylm.rkt:21:54\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext-strength x)\n    (let ([cap (-count x char-upcase?)]\n\
    \          [sm (-count x char-lowercase?)])\n      (- cap sm)))\n  (define (extension-name\
    \ x)\n    (string-append class_name \".\" x))\n  (define (extension-strength x)\n\
    \    (cons (ext-strength x) (extension-name x)))\n  (define (extension-strength-list\
    \ xs)\n    (map extension-strength xs))\n  (define (class_name-extension-name\
    \ xs)\n    (extension-name (apply max (map first xs))))\n  (class_name-extension-name\
    \ (extension-strength-list extensions)))\n</code>\nThe first function <code>ext-strength</code>\
    \ is used to calculate the strength of the extension.\nThe second function <code>extension-name</code>\
    \ is used to compose the name of the extension with the class name.\nThe third\
    \ function <code>extension-strength</code> is used to create a list of strength\
    \ and extension name pairs.\nThe fourth function <code>extension-strength-list</code>\
    \ is used to create a list of list of strength and extension name pairs.\nThe\
    \ fifth function <code>class_name-extension-name</code> is used to create the\
    \ name of the strongest extension.\nThe sixth function <code>Strongest_Extension</code>\
    \ is the main function.\nI use <code>apply max</code> to find the maximum strength\
    \ and <code>map first</code> to retrieve the extension name.\nMy question is how\
    \ to use <code>map</code> instead of <code>apply max</code> and <code>map first</code>?\n\
    \n\nA:\n\nOne way is to use <code>sort</code> to sort the list:\n<code>(define\
    \ (Strongest_Extension class_name extensions)\n  (define (ext-strength x)\n  \
    \  (let ([cap (-count x char-upcase?)]\n          [sm (-count x char-lowercase?)])\n\
    \      (- cap sm)))\n  (define (extension-name x)\n    (string-append class_name\
    \ \".\" x))\n  (define (ext\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxvep52ug.rkt:53:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let loop ([exs extensions]\n             [best-ex (car exs)]\n\
    \             [best-strength (extension-strength (car exs))])\n    (cond\n   \
    \   [(null? exs) (format \"~a.~a\" class_name best-ex)]\n      [(< (extension-strength\
    \ (car exs)) best-strength)\n       (loop (cdr exs) best-ex best-strength)]\n\
    \      [else (loop (cdr exs) (car exs) (extension-strength (car exs)))])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmnlct2nm.rkt:24:11: extension-strength: unbound identifier\n  in:\
    \ extension-strength\n  location...:\n   /tmp/tmpmnlct2nm.rkt:24:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (helper name ext strength best)\n    (define count (-\
    \ (length (filter char-alphabetic? (string->list name)))\n                   \
    \  (length (filter char-alphabetic? (string->list ext)))))\n    (if (or (empty?\
    \ ext) (= count 0))\n        (displayln best)\n        (helper name (rest ext)\
    \ count (if (or (= count strength)\n                                         \
    \    (string=? best \"NA\"))\n                                             (if\
    \ (string<? name ext) name ext)\n                                            \
    \ (if (< count strength) name ext)))))\n  (helper class_name extensions (- (length\
    \ (filter char-alphabetic? (string->list class_name)))\n                     \
    \              (length (filter char-alphabetic? (string->list (car extensions)))))\n\
    \          \"NA\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:37:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '(\"tEN\" \"\
    niNE\" \"eIGHt8OKe\")\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:38:4\n\nstring->list: contract\
    \ violation\n  expected: string?\n  given: '(\"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:39:4\n\nstring->list: contract\
    \ violation\n  expected: string?\n  given: '(\"t\" \"eMptY\" \"nothing\" \"zeR00\"\
    \ \"NuLl__\" \"123NoooneB321\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:40:4\n\nstring->list:\
    \ contract violation\n  expected: string?\n  given: '(\"Ta\" \"TAR\" \"t234An\"\
    \ \"cosSo\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplv3zyq99.rkt:41:4\n\nstring->list: contract violation\n  expected:\
    \ string?\n  given: '(\"Tab\" \"123\" \"781345\" \"-_-\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:42:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '(\"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:43:4\n\nstring->list:\
    \ contract violation\n  expected: string?\n  given: '(\"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplv3zyq99.rkt:44:4\n\nstring->list: contract violation\n  expected:\
    \ string?\n  given: '(\"Bb\" \"91245\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplv3zyq99.rkt:45:4\n\nstring->list:\
    \ contract violation\n  expected: string?\n  given: '(\"671235\" \"Bb\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (caps string) (count ((lambda (char) (char-upper-case?\
    \ char)) string)))\n  (define (smalls string) (count ((lambda (char) (char-lower-case?\
    \ char)) string)))\n  (define (calc-strength string) (- (caps string) (smalls\
    \ string)))\n  (define (max-strength lst) (apply max (map calc-strength lst)))\n\
    \  (let ((max-strength-value (max-strength extensions)))\n    (string-append class_name\
    \ \".\" (first (filter ((lambda (ext) (= (calc-strength ext) max-strength-value))\
    \ extensions)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:32:4\n\
    \nchar-upper-case?: contract violation\n  expected: char?\n  given: \"tEN\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9040kgi1.rkt:33:4\n\nchar-upper-case?: contract violation\n\
    \  expected: char?\n  given: \"nani\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:34:4\n\nchar-upper-case?:\
    \ contract violation\n  expected: char?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:35:4\n\
    \nchar-upper-case?: contract violation\n  expected: char?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:36:4\n\
    \nchar-upper-case?: contract violation\n  expected: char?\n  given: \"Tab\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9040kgi1.rkt:37:4\n\nchar-upper-case?: contract violation\n\
    \  expected: char?\n  given: \"HhAas\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:38:4\n\nchar-upper-case?:\
    \ contract violation\n  expected: char?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:39:4\n\
    \nchar-upper-case?: contract violation\n  expected: char?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9040kgi1.rkt:40:4\n\
    \nchar-upper-case?: contract violation\n  expected: char?\n  given: \"671235\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (for/first ((extension (in-list extensions))\n              (strength\
    \ (let ([cap (for/fold ([sum 0])\n                                         ([char\
    \ (in-string extension)])\n                                         (if (char-upper-case?\
    \ char)\n                                             (+ sum 1)\n            \
    \                                 sum))))\n                         (/ cap (-\
    \ (string-length extension) cap)))))\n    (string-append class_name \".\" extension)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2qu4dwa5.rkt:24:50: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define-values (class_strength class_extension)\n    (for/fold\
    \ ([strength -1]\n              [extension #f])\n        ([extension extensions])\n\
    \      (define cap (count-if char-uppercase? extension))\n      (define sm (count-if\
    \ char-lowercase? extension))\n      (define current_strength (- cap sm))\n  \
    \    (cond\n        [(> current_strength strength)\n         (values current_strength\
    \ extension)]\n        [(= current_strength strength)\n         (values current_strength\
    \ (first extensions))]\n        [else\n         (values strength extension)])))\n\
    \  (string-append class_name \".\" class_extension))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptkslln0_.rkt:23:19: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmptkslln0_.rkt:23:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((best_strength 1.0)\n        (best_extension \"\"))\n \
    \   (for-each (lambda (extension)\n                (let ((upper-count (count-upper-letters\
    \ extension))\n                      (lower-count (count-lower-letters extension))\n\
    \                      (strength (/ upper-count lower-count)))\n             \
    \     (if (> strength best_strength)\n                      (begin\n         \
    \               (set! best_strength strength)\n                        (set! best_extension\
    \ extension)))))\n              extensions)\n    (string-append class_name \"\
    .\" best_extension)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaxa6epl0.rkt:22:36: count-upper-letters: unbound identifier\n \
    \ in: count-upper-letters\n  location...:\n   /tmp/tmpaxa6epl0.rkt:22:36\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (counter f lst)\n    (if (null? lst)\n        0\n   \
    \     (+ (f (car lst)) (counter f (cdr lst)))))\n  (define (strength extension)\n\
    \    (/ (- (counter char-upcase? extension) (counter char-lower-case? extension))\n\
    \       (length extension)))\n  (define (strongest extension-list)\n    (if (null?\
    \ (cdr extension-list))\n        (car extension-list)\n        (if (> (strength\
    \ (car extension-list)) (strength (cadr extension-list)))\n            (strongest\
    \ (cons (car extension-list) (cddr extension-list)))\n            (strongest (cdr\
    \ extension-list)))))\n  (string-append class_name \".\" (strongest extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphqv7vdti.rkt:24:19: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphqv7vdti.rkt:24:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (define ext-c (string-upper-case\
    \ ext))\n    (define ext-s (string-lower-case ext))\n    (define (count-ext-c\
    \ str)\n      (cond\n        [(empty? str) 0]\n        [(char=? (first str) ext-c)\
    \ (+ 1 (count-ext-c (rest str)))]\n        [else (count-ext-c (rest str))]))\n\
    \    (define (count-ext-s str)\n      (cond\n        [(empty? str) 0]\n      \
    \  [(char=? (first str) ext-s) (+ 1 (count-ext-s (rest str)))]\n        [else\
    \ (count-ext-s (rest str))]))\n    (/ (- (count-ext-c ext) (count-ext-s ext))\
    \ 2))\n  (define (strongest-extensions extensions)\n    (foldl (lambda (x y)\n\
    \             (cond\n               [(> (strength x) (strength y)) x]\n      \
    \         [(= (strength x) (strength y)) y]\n               [else y]))\n     \
    \      (first extensions)\n           (rest extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extensions extensions)))\n</code>\nAny tips on how I could\
    \ improve the use of Racket in my solutions?\n\n\nA:\n\nYour <code>count-ext-c</code>\
    \ and <code>count-ext-s</code> functions look like they could be refactored as\
    \ a single function that takes a predicate as an argument, rather than two almost\
    \ identical functions that do the same thing, but with different predicates.\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz9lt93eh.rkt:48:30: and: bad syntax\n  in: and\n  location...:\n\
    \   /tmp/tmpz9lt93eh.rkt:48:30\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:442:6\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (fraction s)\n    (/\n     (-\n      (list-ref (list-set\
    \ (list-set (list-set (list-set (list-set s #\\S 0) #\\E 0) #\\R 0) #\\V 0) #\\\
    N 0) #\\G 1)\n      (list-ref (list-set (list-set (list-set (list-set (list-set\
    \ s #\\s 0) #\\e 0) #\\r 0) #\\v 0) #\\n 0) #\\g 1))\n     (number->string (string-length\
    \ s))))\n  (define (strongest-extension-name extensions)\n    (cond\n      [(empty?\
    \ extensions) (error \"No extensions\")]\n      [(empty? (rest extensions)) (first\
    \ extensions)]\n      [else\n       (let*\n           ([strength (fraction (first\
    \ extensions))]\n            [extension (first extensions)]\n            [extensions\
    \ (rest extensions)])\n         (cond\n           [(< strength (fraction (first\
    \ extensions))) (strongest-extension-name extensions)]\n           [else (strongest-extension-name\
    \ (cons extension (rest extensions)))]))]))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:43:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:44:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:45:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"t\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:46:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"Ta\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:47:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"Tab\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:48:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:49:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"Die\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:50:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"Bb\"\n  argument\
    \ position: 1st\n  other arguments...:\n   #\\S\n   0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd662a1c8.rkt:51:4\n\
    \nlist-set: contract violation\n  expected: list?\n  given: \"671235\"\n  argument\
    \ position: 1st\n  ot"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define class_name_strongest_extension (string-append class_name\
    \ \".\"))\n  (define strongest_extension (car extensions))\n  (define strongest_extension_strength\
    \ (get-strength (car extensions)))\n  (for ([i (in-range (length extensions))])\n\
    \    (define current_extension (list-ref extensions i))\n    (define current_extension_strength\
    \ (get-strength current_extension))\n    (cond [(> current_extension_strength\
    \ strongest_extension_strength)\n           (set! strongest_extension current_extension)\n\
    \           (set! strongest_extension_strength current_extension_strength)]\n\
    \          [(= current_extension_strength strongest_extension_strength)\n    \
    \       (cond [(string<? current_extension strongest_extension)\n            \
    \      (set! strongest_extension current_extension)\n                  (set! strongest_extension_strength\
    \ current_extension_strength)])]))\n  (string-append class_name_strongest_extension\
    \ strongest_extension))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8f1hkf9t.rkt:21:40: get-strength: unbound identifier\n  in: get-strength\n\
    \  location...:\n   /tmp/tmp8f1hkf9t.rkt:21:40\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (define s_ext (car extensions))\n    (define max_strength 0)\n\
    \    (for ([extension extensions])\n        (define strength (fraction (count\
    \ extension) (count class_name)))\n        (if (> strength max_strength)\n   \
    \         (begin (set! max_strength strength)\n                   (set! s_ext\
    \ extension))\n            #t))\n    (string-append class_name \".\" s_ext))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw9ov2j29.rkt:22:26: fraction: unbound identifier\n  in: fraction\n\
    \  location...:\n   /tmp/tmpw9ov2j29.rkt:22:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (extension-strength extension)\n    (let* ([caps (count-lowercase-letters\
    \ extension)]\n           [smalls (count-lowercase-letters extension)])\n    \
    \  (- caps smalls)))\n  (let* ([strengths (map extension-strength extensions)]\n\
    \         [max-strength (apply max strengths)]\n         [max-strength-index (find-max-index\
    \ strengths max-strength)])\n    (string-append class_name \".\" (list-ref extensions\
    \ max-strength-index))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt68zggnj.rkt:20:18: count-lowercase-letters: unbound identifier\n\
    \  in: count-lowercase-letters\n  location...:\n   /tmp/tmpt68zggnj.rkt:20:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-uppercase s)\n    (for/sum ([i (in-range (string-length\
    \ s))])\n      (if (char-upcase? (string-ref s i)) 1 0)))\n  (define (count-lowercase\
    \ s)\n    (for/sum ([i (in-range (string-length s))])\n      (if (char-lower-case?\
    \ (string-ref s i)) 1 0)))\n  (define (strength s)\n    (- (count-uppercase s)\
    \ (count-lowercase s)))\n  (define (strongest-extension lst)\n    (if (null? lst)\
    \ '()\n        (argmax (lambda (e) (strength e)) lst)))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphm7ogojs.rkt:21:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphm7ogojs.rkt:21:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (local ([define (strength str)\n             (let ([uppercase\
    \ (filter char-upper-case? (string->list str))]\n                   [lowercase\
    \ (filter char-lower-case? (string->list str))])\n               (- (length uppercase)\
    \ (length lowercase)))])\n    (string-append class_name \".\"\n              \
    \     (car (sort >\n                             (map strength extensions))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:35:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:36:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:37:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:38:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:39:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppar9n_ee.rkt:40:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strongest (car extensions))\n        (str_strongest -(string-length\
    \ class_name)))\n    (for ((ext (cdr extensions)))\n      (let ((str -(string-length\
    \ ext)))\n        (for ((c (string->list ext)))\n          (if (char-numeric?\
    \ c)\n              (set! str (+ str 1))\n            (set! str (- str 1))))\n\
    \        (if (> str str_strongest)\n            (begin\n              (set! strongest\
    \ ext)\n              (set! str_strongest str)))))\n    (string-append class_name\
    \ \".\" strongest)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphl4k43rn.rkt:20:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (str_strongest - (string-length class_name))\n  in: (let\
    \ ((strongest (car extensions)) (str_strongest - (string-length class_name)))\
    \ (for ((ext (cdr extensions))) (let ((str - (string-length ext))) (for ((c (string->list\
    \ ext))) (if (char-numeric? c) (set! str (+ str 1)) (set! str (- str 1)))) (if\
    \ (> str ...\n  location...:\n   /tmp/tmphl4k43rn.rkt:20:8\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   [repeats 1 more time]\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([slices (in-list extensions)]\n        [caps (in-list (for/list\
    \ ([s slices]) (count (lambda (c) (char-upper-case? c)) s)))])\n    (string-append\
    \ (map symbol->string (list class_name (vector-ref slices (argmax (- caps)))))\
    \ \".\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpysh0i25u.rkt:20:37: slices: unbound identifier\n  in: slices\n\
    \  location...:\n   /tmp/tmpysh0i25u.rkt:20:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\"\n                 (car (sort\
    \ (map (curryr string-append class_name \".\") extensions)\n                 \
    \           string<?))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:28:4\n\
    actual:     \"Watashi.eIGHt8OKeWatashi.\"\nexpected:   \"Watashi.eIGHt8OKe\"\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbc8ibhk4.rkt:29:4\nactual:     \"Boku123.32145tgggBoku123.\"\
    \nexpected:   \"Boku123.YEs.WeCaNe\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:30:4\nactual:\
    \     \"__YESIMHERE.123NoooneB321__YESIMHERE.\"\nexpected:   \"__YESIMHERE.NuLl__\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbc8ibhk4.rkt:31:4\nactual:     \"K.TARK.\"\nexpected:   \"\
    K.TAR\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbc8ibhk4.rkt:32:4\nactual:     \"__HAHA.-_-__HAHA.\"\nexpected:\
    \   \"__HAHA.123\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:33:4\nactual:     \"YameRore.-_-YameRore.\"\
    \nexpected:   \"YameRore.okIWILL123\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:34:4\nactual:\
    \     \"finNNalLLly.DiefinNNalLLly.\"\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:35:4\n\
    actual:     \"_.91245_.\"\nexpected:   \"_.Bb\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbc8ibhk4.rkt:36:4\nactual:\
    \     \"Sp.671235Sp.\"\nexpected:   \"Sp.671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (upper-letter? letter)\
    \ (or (= #\\A letter) (= #\\B letter) (= #\\C letter) (= #\\D letter) (= #\\E\
    \ letter) (= #\\F letter) (= #\\G letter) (= #\\H letter) (= #\\I letter) (= #\\\
    J letter) (= #\\K letter) (= #\\L letter) (= #\\M letter) (= #\\N letter) (= #\\\
    O letter) (= #\\P letter) (= #\\Q letter) (= #\\R letter) (= #\\S letter) (= #\\\
    T letter) (= #\\U letter) (= #\\V letter) (= #\\W letter) (= #\\X letter) (= #\\\
    Y letter) (= #\\Z letter)))\n    (define (lower-letter? letter) (or (= #\\a letter)\
    \ (= #\\b letter) (= #\\c letter) (= #\\d letter) (= #\\e letter) (= #\\f letter)\
    \ (= #\\g letter) (= #\\h letter) (= #\\i letter) (= #\\j letter) (= #\\k letter)\
    \ (= #\\l letter) (= #\\m letter) (= #\\n letter) (= #\\o letter) (= #\\p letter)\
    \ (= #\\q letter) (= #\\r letter) (= #\\s letter) (= #\\t letter) (= #\\u letter)\
    \ (= #\\v letter) (= #\\w letter) (= #\\x letter) (= #\\y letter) (= #\\z letter)))\n\
    \    (define (cap? letter) (upper-letter? letter))\n    (define (sm? letter) (lower-letter?\
    \ letter))\n    (define (cap-counter lst)\n      (cond [(empty? lst) 0]\n    \
    \        [(cap? (first lst)) (+ 1 (cap-counter (rest lst)))]\n            [else\
    \ (cap-counter (rest lst))]))\n    (define (sm-counter lst)\n      (cond [(empty?\
    \ lst) 0]\n            [(sm? (first lst)) (+ 1 (sm-counter (rest lst)))]\n   \
    \         [else (sm-counter (rest lst))]))\n    (/ (- (cap-counter extension)\
    \ (sm-counter\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp88i8s9yz.rkt:32:34: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let loop ([extensions extensions]\n             [max_ext #f]\n\
    \             [max_strength -1])\n    (cond [(empty? extensions) \n          \
    \ (if max_ext \n               (string-append class_name \".\" max_ext)\n    \
    \           class_name)]\n          [(< (count-upper-case (first extensions))\n\
    \              (count-lower-case (first extensions)))\n           (loop (rest\
    \ extensions) max_ext max_strength)]\n          [else\n           (let* ([cap\
    \ (count-upper-case (first extensions))]\n                  [sm (count-lower-case\
    \ (first extensions))]\n                  [strength (- cap sm)])\n           \
    \  (if (> strength max_strength)\n                 (loop (rest extensions) (first\
    \ extensions) strength)\n                 (loop (rest extensions) max_ext max_strength)))])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppxpdm6ng.rkt:26:15: count-upper-case: unbound identifier\n  in:\
    \ count-upper-case\n  location...:\n   /tmp/tmppxpdm6ng.rkt:26:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (cap x)\n    (let ((n 0))\n      (for ((i (in-list x)))\n\
    \        (if (char-upper-case? i)\n            (set! n (+ n 1))))\n      n))\n\
    \  (define (sm x)\n    (let ((n 0))\n      (for ((i (in-list x)))\n        (if\
    \ (char-lower-case? i)\n            (set! n (+ n 1))))\n      n))\n  (define (strength\
    \ s)\n    (/ (- (cap s) (sm s)) (length s)))\n  (let ((extensions (sort extensions\
    \ (\u03BB (x y) (> (strength x) (strength y))))))\n    (format \"~a.~a\" class_name\
    \ (first extensions))))\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvdr_qy0k.rkt:22:8: if: missing an \"else\" expression\n  in: (if\
    \ (char-upper-case? i) (set! n (+ n 1)))\n  location...:\n   /tmp/tmpvdr_qy0k.rkt:22:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (define (cap-sm cap sm extension)\n        (string-length (regexp-match*\
    \ #rx\"[A-Z]\" extension))\n        (string-length (regexp-match* #rx\"[a-z]\"\
    \ extension))\n        (cond [(> cap sm) \"AA\"]\n              [(> sm cap) \"\
    Be\"]\n              [(> cap sm) \"CC\"]))\n    (define (strength-of-extension\
    \ extension)\n        (define (cap-sm cap sm extension)\n            (if (= '#f\
    \ (regexp-match* #rx\"[A-Z]\" extension))\n                0\n               \
    \ (+ 1 cap))\n            (if (= '#f (regexp-match* #rx\"[a-z]\" extension))\n\
    \                0\n                (+ 1 sm)))\n        (define (cap-sm cap sm\
    \ extension)\n            (- cap sm))\n        (strength-of-extension (reduce\
    \ cap-sm 0 0 extensions)))\n    (define (strength-of-extension extension)\n  \
    \      (define (cap-sm cap sm extension)\n            (if (= '#f (regexp-match*\
    \ #rx\"[A-Z]\" extension))\n                0\n                (+ 1 cap))\n  \
    \          (if (= '#f (regexp-match* #rx\"[a-z]\" extension))\n              \
    \  0\n                (+ 1 sm)))\n        (define (cap-sm cap sm extension)\n\
    \            (- cap sm))\n        (strength-of-extension (reduce cap-sm 0 0 extensions)))\n\
    \    (define (strength-of-extension extension)\n        (define (cap-sm cap sm\
    \ extension)\n            (if (= '#f (regexp-match* #rx\"[A-Z]\" extension))\n\
    \                0\n                (+ 1 cap))\n            (if (= '#f (regexp-match*\
    \ #rx\"[a-z]\" extension))\n                0\n                (+ 1 sm)))\n  \
    \      (define (cap-sm cap sm extension)\n            (- cap sm))\n        (strength-of-extension\
    \ (reduce cap-sm 0 0 extensions)))\n    (define (strength-of-extension extension)\n\
    \        (define (cap-sm cap sm extension)\n            (if (= '#f (regexp-match\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpocz19vrc.rkt:60:23: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define/match \n    (define (strength e)\n      (let ([upcs (regexp-match*\
    \ #rx\"[A-Z]\" e)]\n            [locs (regexp-match* #rx\"[a-z]\" e)])\n     \
    \   (/ (- (length upcs) (length locs)))))\n    (match extensions\n      [(list\
    \ first rest ...) \n       (define best (list first (strength first)))\n     \
    \  (for ([e rest])\n         (define strength (strength e))\n         (when (<\
    \ strength (cadr best))\n           (set! best (list e strength))))\n       (format\
    \ \"~a.~a\" class_name (car best))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpor54fttg.rkt:19:2: define/match: unexpected term\n  at: (/ (- (length\
    \ upcs) (length locs)))\n  in: (define/match (define (strength e) (let ((upcs\
    \ (regexp-match* #rx\"[A-Z]\" e)) (locs (regexp-match* #rx\"[a-z]\" e))) (/ (-\
    \ (length upcs) (length locs))))) (match extensions ((list first rest ...) (define\
    \ best (list first (strength first))) (for ((e rest)) ...\n  parsing context:\
    \ \n   while parsing formal\n    term: ((let ((upcs (regexp-match* #rx\"[A-Z]\"\
    \ e)) (loc...\n    location: /tmp/tmpor54fttg.rkt:20:4\n   while parsing formals-no-rest\n\
    \    term: ((strength e) (let ((upcs (regexp-match* #rx\"[A...\n    location:\
    \ /tmp/tmpor54fttg.rkt:20:4\n   while parsing formals\n    term: ((strength e)\
    \ (let ((upcs (regexp-match* #rx\"[A...\n    location: /tmp/tmpor54fttg.rkt:20:4\n\
    \   while parsing function-header\n    term: (define (strength e) (let ((upcs\
    \ (regexp-match*...\n    location: /tmp/tmpor54fttg.rkt:20:4\n  location...:\n\
    \   /tmp/tmpor54fttg.rkt:23:8\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:731:0:\
    \ error/report\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:28:0:\
    \ call-current-failure-handler\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext_strength ext)\n    (define (count_casing s)\n  \
    \    (cond\n        [(empty? s) empty]\n        [(char-alphabetic? (first s))\n\
    \         (cons (if (char-upper-case? (first s)) 1 0) (count_casing (rest s)))]\n\
    \        [else (count_casing (rest s))]))\n    (- (apply + (count_casing ext))\
    \ (apply + (count_casing (rest ext)))))\n  (let ([ext_strengths\n         (map\
    \ ext_strength extensions)])\n    (string-append class_name \".\" (first (sort\
    \ ext_strengths >)))))\n</code>\nMy question is whether this is a good way to\
    \ write this program and whether there are better ways to do this.\n\n\nA:\n\n\
    The main problem with your code is that it's hard to understand. This function\
    \ is not the most complex function, but the structure makes it hard to get it.\
    \ The indentation is a bit off, and the style is not that common.\nInstead of\
    \ this style:\n<code>(cond\n  [(something) (do something)]\n  [(something else)\
    \ (do something else)]\n  [else do something else]\n)\n</code>\nIt's much more\
    \ common to use case:\n<code>(case x\n  [(1) (do something)]\n  [(2) (do something\
    \ else)]\n  [else do something else]\n)\n</code>\nCase is used for pattern matching\
    \ and the syntax is pretty clear.\nIn Racket, you should use <code>define-values</code>\
    \ instead of <code>let</code> if you want to bind several variables. Using <code>let</code>\
    \ is ok in this case, but if you are going to bind more than two variables, then\
    \ <code>define-values</code> gives you a nice syntax.\nIf the main purpose of\
    \ <code>count_casing</code> is to find the length of the strings that have characters\
    \ with a certain property, then you should use <code>count</code>. <code>count</code>\
    \ is a higher order function that basically says: count how many times the function\
    \ returns true.\n<code>(count (lambda (c) (char-upper-case?\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyi8hp221.rkt:54:25: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 55\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (let ([caps 0] [smls 0])\n      (for\
    \ ([c (in-string ext)])\n        (if (char-upper-case? c) (set! caps (+ caps 1))\n\
    \            (if (char-lower-case? c) (set! smls (+ smls 1)))))\n      (/ caps\
    \ smls)))\n  (define (ext_name ext)\n    (let* ([seps (list #\\_ #\\- #\\.)]\n\
    \           [regex (regexp-quote (first ext))])\n      (for ([s seps])\n     \
    \   (set! regex (string-append regex \"|\" (regexp-quote (string s)))))\n    \
    \  (regexp-match regex (second ext))))\n  (define (extension_form class_name ext)\n\
    \    (string-append class_name \".\" (ext_name ext)))\n  (let ([exts (map (\u03BB\
    \ (x) (list (strength x) x)) extensions)])\n    (define (best_ext ext1 ext2)\n\
    \      (if (> (first ext1) (first ext2))\n          ext1\n          (if (< (first\
    \ ext1) (first ext2))\n              ext2\n              (if (< (string-length\
    \ (second ext1)) (string-length (second ext2)))\n                  ext1\n    \
    \              ext2))))\n    (let ([chosen (reduce best_ext exts)])\n      (if\
    \ (null? exts) class_name\n          (extension_form class_name chosen)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsr2pmior.rkt:23:12: if: missing an \"else\" expression\n  in: (if\
    \ (char-lower-case? c) (set! smls (+ smls 1)))\n  location...:\n   /tmp/tmpsr2pmior.rkt:23:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (cap-count word)\n    (count (lambda (x) (char-upper-case?\
    \ x)) word))\n  (define (sm-count word)\n    (count (lambda (x) (char-lower-case?\
    \ x)) word))\n  (define (ext-strength word)\n    (- (cap-count word) (sm-count\
    \ word)))\n  (define (sum-strength lst)\n    (reduce + lst))\n  (define (sum-cap\
    \ lst)\n    (reduce + (map cap-count lst)))\n  (define (sum-sm lst)\n    (reduce\
    \ + (map sm-count lst)))\n  (let ([result (apply max extensions)])\n    (string-append\
    \ class_name \".\" result)))\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcmlh9sf9.rkt:26:5: reduce: unbound identifier\n  in: reduce\n \
    \ location...:\n   /tmp/tmpcmlh9sf9.rkt:26:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (define (str_strength str)\n        (- (length (filter char-upcase?\
    \ (string->list str))) \n           (length (filter char-lower-case? (string->list\
    \ str)))))\n    (define (strongest-extension-name? x)\n        (> (str_strength\
    \ x) (str_strength y)))\n    (define (strongest-extension-name-in-list list)\n\
    \        (match list\n            [() empty]\n            [(cons x list)\n   \
    \          (if (strongest-extension-name? x)\n                 x\n           \
    \      (strongest-extension-name-in-list list))]))\n    (define (extensions-name-list\
    \ list)\n        (match list\n            [() empty]\n            [(cons (list\
    \ class_extension_name extensions_list) list)\n             (append (extensions-name-list\
    \ list)\n                     (list class_extension_name))]))\n    (string-append\
    \ class_name \".\" (strongest-extension-name-in-list (extensions-name-list extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprzqip9_r.rkt:20:27: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmprzqip9_r.rkt:20:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-uppercase text)\n    (length (filter char-upper-case?\
    \ (string->list text))))\n  (define (count-lowercase text)\n    (length (filter\
    \ char-lower-case? (string->list text))))\n  (define (strength text)\n    (- (count-uppercase\
    \ text) (count-lowercase text)))\n  (define (strongest-extension extensions)\n\
    \    (apply max (map strength extensions)))\n  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [else (string-append class_name \".\" (list-ref extensions (find\
    \ (strongest-extension extensions) extensions)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9rma2gx6.rkt:29:62: find: unbound identifier\n  in: find\n  location...:\n\
    \   /tmp/tmp9rma2gx6.rkt:29:62\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strength-extension-list (list (list (- (length class_name)\
    \ (length (regexp-replace* #rx\"^[a-z]+\" class_name)) ) \"\" ) ) ) )\n    (for\
    \ ([e extensions])\n      (let ([s (- (length e) (length (regexp-replace* #rx\"\
    ^[a-z]+\" e) ) ) ] )\n        (if (> s (caar strength-extension-list) )\n    \
    \        (set! strength-extension-list (list (list s e) ) )\n            (if (=\
    \ s (caar strength-extension-list) )\n                (set! strength-extension-list\
    \ (append strength-extension-list (list (list s e) ) ) ) ) ) ) )\n    (string-append\
    \ class_name \".\" (cadr (car strength-extension-list) ) ) ) )\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps5g7xhs_.rkt:24:12: if: missing an \"else\" expression\n  in: (if\
    \ (= s (caar strength-extension-list)) (set! strength-extension-list (append strength-extension-list\
    \ (list (list s e)))))\n  location...:\n   /tmp/tmps5g7xhs_.rkt:24:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (uppercase str)\n    (if (equal? '#\\A (string-ref str\
    \ 0))\n        (uppercase (substring str 1))\n        (+ 1 (uppercase (substring\
    \ str 1)))))\n  (define (lowercase str)\n    (if (equal? '#\\A (string-ref str\
    \ 0))\n        (lowercase (substring str 1))\n        (+ 0 (lowercase (substring\
    \ str 1)))))\n  (define (strength str)\n    (/ (- (uppercase str) (lowercase str))\
    \ (string-length str)))\n  (define (max_strength lst)\n    (apply max lst))\n\
    \  (define (max_strength_index lst)\n    (list-ref lst (apply max (build-list\
    \ (length lst) identity))))\n  (string-append class_name \".\" (max_strength_index\
    \ (map strength extensions))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:40:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpay19sqjz.rkt:41:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:42:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:43:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpay19sqjz.rkt:44:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:45:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:46:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpay19sqjz.rkt:47:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpay19sqjz.rkt:48:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (extension-strength extension)\n    (let loop ([cap #f]\
    \ [sm #f] [extension-name extension])\n      (cond [(empty? extension-name) (/\
    \ cap sm)]\n            [(char-upper-case? (car extension-name)) (loop (+ cap\
    \ 1) sm (cdr extension-name))]\n            [(char-lower-case? (car extension-name))\
    \ (loop cap (+ sm 1) (cdr extension-name))]\n            [else (loop cap sm (cdr\
    \ extension-name))])))\n  (define (strongest-extension extensions)\n    (let loop\
    \ ([extensions extensions] [max_value #f] [max_index 0])\n      (cond [(empty?\
    \ extensions) max_index]\n            [(< (extension-strength (car extensions))\
    \ max_value) (loop (cdr extensions) max_value max_index)]\n            [else (loop\
    \ (cdr extensions) (extension-strength (car extensions)) (+ max_index 1))])))\n\
    \  (string-append class_name \".\" (list-ref extensions (strongest-extension extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:40:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:41:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:42:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:43:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:44:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp9i13b0.rkt:45:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (fraction str)\n    (let ([uc (for/fold ([uc 0]) ([c\
    \ (in-string str)])\n                 (if (char-upper-case? c)\n             \
    \        (+ uc 1)\n                     uc))]\n          [lc (for/fold ([lc 0])\
    \ ([c (in-string str)])\n                 (if (char-lower-case? c)\n         \
    \            (+ lc 1)\n                     lc))])\n      (- uc lc)))\n  (define\
    \ (extension-strength ext)\n    (fraction ext))\n  (define (extension-alphabetical-order\
    \ ext1 ext2)\n    (string<? ext1 ext2))\n  (define (extension-strength-alphabetical-order\
    \ ext1 ext2)\n    (if (> (extension-strength ext1) (extension-strength ext2))\n\
    \        #t\n        (extension-alphabetical-order ext1 ext2)))\n  (string-append\
    \ class_name\n                 \".\"\n                 (reduce extension-strength-alphabetical-order\n\
    \                         extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn131z84s.rkt:39:18: reduce: unbound identifier\n  in: reduce\n\
    \  location...:\n   /tmp/tmpn131z84s.rkt:39:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (car (foldl max-extension extensions\
    \ (list (string-append class_name \".\" (car extensions)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp95udydyb.rkt:19:44: max-extension: unbound identifier\n  in: max-extension\n\
    \  location...:\n   /tmp/tmp95udydyb.rkt:19:44\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (local [(define (count-caps str)\n            (length (regexp-match\
    \ \"[A-Z]\" str)))\n          (define (count-lower str)\n            (length (regexp-match\
    \ \"[a-z]\" str)))\n          (define (get-strength str)\n            (/ (- (count-caps\
    \ str) (count-lower str)) \n               (length str)))\n          (define (get-strongest-extension\
    \ exts strongest-ext)\n            (cond [(empty? exts) strongest-ext]\n     \
    \             [(< (get-strength (first exts))\n                      (get-strength\
    \ strongest-ext))\n                   (get-strongest-extension (rest exts) strongest-ext)]\n\
    \                  [else\n                   (get-strongest-extension (rest exts)\
    \ (first exts))]))]\n    (string-append class_name \".\" \n                  \
    \ (get-strongest-extension extensions \n                                     \
    \       (string-append class_name \n                                         \
    \                  \".AA\")))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:43:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:47:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:48:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:49:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:50:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lic_5_.rkt:51:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (for/fold ([result \"\"]\n             ([[str cap sm] (map (\u03BB\
    \ (e) (list e (count-upper e) (count-lower e))) extensions)])\n    (if (&gt; (-\
    \ cap sm) (string-length result))\n        (string-append class_name \".\" str)\n\
    \        result)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxsqfyl0t.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let\n    ([extension-strength (for/list\n       ([extension\
    \ extensions])\n       [(string-length extension)\n        (length (regexp-match\
    \ #rx\"^[A-Z]+\" extension))\n        extension])])\n    (define (cap-sm extension)\
    \ (let ([strength (- (list-ref extension 1) (list-ref extension 0))]) (list strength\
    \ extension)))\n    (define (strongest extensions)\n      (if (null? extensions)\n\
    \        (quote ())\n        (let ([extension (apply max extensions)])\n     \
    \     (if (= (length extension) 3)\n            (car (cdr (cdr extension)))\n\
    \            (strongest (remove extension extensions))))))\n    (string-append\
    \ class_name \".\" (strongest (map cap-sm extension-strength)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:42:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:43:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp35528ll7.rkt:44:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:45:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 3\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp35528ll7.rkt:46:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp35528ll7.rkt:47:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond [(empty? extensions) \"\"]\n        [else (let ([current_extension\
    \ (car extensions)]\n                    [current_extension_strength (strength\
    \ current_extension)]\n                    [next_extension (Strongest_Extension\
    \ class_name (cdr extensions))]\n                    [next_extension_strength\
    \ (strength next_extension)])\n                 (if (> current_extension_strength\
    \ next_extension_strength)\n                     (format \"~a.~a\" class_name\
    \ current_extension)\n                     (format \"~a.~a\" class_name next_extension)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb7mhw_zb.rkt:21:49: strength: unbound identifier\n  in: strength\n\
    \  location...:\n   /tmp/tmpb7mhw_zb.rkt:21:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond [(null? extensions) #f]\n        [else (define strongest\
    \ (car extensions))\n              (define strongest_strength 0)\n           \
    \   (define (helper lst)\n                (cond [(null? lst) class_name '.' strongest]\n\
    \                      [else (define strength \n                             \
    \   (let loop ([cs (car lst)]\n                                           [strength\
    \ 0])\n                                  (cond [(null? cs) strength]\n       \
    \                                 [(char-upper-case? (car cs)) \n            \
    \                             (loop (cdr cs) (+ strength 1))]\n              \
    \                          [(char-lower-case? (car cs)) \n                   \
    \                      (loop (cdr cs) (- strength 1))]\n                     \
    \                   [else (loop (cdr cs) strength)])))\n                     \
    \       (cond [(> (- strength) strongest_strength)\n                         \
    \          (set! strongest (car lst))\n                                   (set!\
    \ strongest_strength (- strength))]\n                                  [else '()])\n\
    \                            (helper (cdr lst))]))\n              (helper extensions)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw46r9vpi.rkt:23:47: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (extension_score extension)\n    (let-values ([(CAP SM)\n\
    \                    (for/fold ([cap 0] [sm 0]) ([ch (in-string extension)])\n\
    \                      (match ch\n                        [(char-numeric? ch)\
    \   (values cap sm)]\n                        [(char-alphabetic? ch) (values (+\
    \ cap (char-upcase? ch))\n                                                   \
    \   (+ sm (char-lowercase? ch)))]))])\n      (/ (- CAP SM) (length extension))))\n\
    \  (string-append class_name \".\"\n                  (car\n                 \
    \  (sort (sort (map (lambda (extension) (extension_score extension))\n       \
    \                             extensions)\n                               >)\n\
    \                         <\n                         #:key cdr))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyid8tbx_.rkt:23:25: match: syntax error in pattern\n  in: (char-numeric?\
    \ ch)\n  location...:\n   /tmp/tmpyid8tbx_.rkt:23:25\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (match (strongest-extension class_name extensions)\n    [(list\
    \ name strength)\n     (format \"~a.~a\" class_name name)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjnh4wu_o.rkt:19:10: strongest-extension: unbound identifier\n \
    \ in: strongest-extension\n  location...:\n   /tmp/tmpjnh4wu_o.rkt:19:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (cap-or-sm str)\n    (cond [(string-ci=? str \"a\") -1]\n\
    \          [(string-ci=? str \"b\") -1]\n          [(string-ci=? str \"c\") -1]\n\
    \          [(string-ci=? str \"d\") -1]\n          [(string-ci=? str \"e\") -1]\n\
    \          [(string-ci=? str \"f\") -1]\n          [(string-ci=? str \"g\") -1]\n\
    \          [(string-ci=? str \"h\") -1]\n          [(string-ci=? str \"i\") -1]\n\
    \          [(string-ci=? str \"j\") -1]\n          [(string-ci=? str \"k\") -1]\n\
    \          [(string-ci=? str \"l\") -1]\n          [(string-ci=? str \"m\") -1]\n\
    \          [(string-ci=? str \"n\") -1]\n          [(string-ci=? str \"o\") -1]\n\
    \          [(string-ci=? str \"p\") -1]\n          [(string-ci=? str \"q\") -1]\n\
    \          [(string-ci=? str \"r\") -1]\n          [(string-ci=? str \"s\") -1]\n\
    \          [(string-ci=? str \"t\") -1]\n          [(string-ci=? str \"u\") -1]\n\
    \          [(string-ci=? str \"v\") -1]\n          [(string-ci=? str \"w\") -1]\n\
    \          [(string-ci=? str \"x\") -1]\n          [(string-ci=? str \"y\") -1]\n\
    \          [(string-ci=? str \"z\") -1]\n          [(string-ci=? str \"A\") 1]\n\
    \          [(string-ci=? str \"B\") 1]\n          [(string-ci=? str \"C\") 1]\n\
    \          [(string-ci=? str \"D\") 1]\n          [(string-ci=? str \"E\") 1]\n\
    \          [(string-ci=? str \"F\") 1]\n          [(string-ci=? str \"G\") 1]\n\
    \          [(string-ci=? str \"\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmoklb_os.rkt:67:66: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (sum-upper s n)\n \
    \     (if (= n (string-length s))\n          n\n          (if (char-upper-case?\
    \ (string-ref s n))\n              (+ n (sum-upper s (+ n 1)))\n             \
    \ (sum-upper s (+ n 1)))))\n    (define (sum-lower s n)\n      (if (= n (string-length\
    \ s))\n          n\n          (if (char-lower-case? (string-ref s n))\n      \
    \        (+ n (sum-lower s (+ n 1)))\n              (sum-lower s (+ n 1)))))\n\
    \    (- (sum-upper extension 0) (sum-lower extension 0)))\n  (define (strongest-ext-helper\
    \ lst)\n    (if (null? (cdr lst))\n        (car lst)\n        (if (< (strength\
    \ (car lst)) (strength (cadr lst)))\n            (strongest-ext-helper (cdr lst))\n\
    \            (strongest-ext-helper (cons (car lst) (cddr lst))))))\n  (if (null?\
    \ extensions)\n      \"\"\n      (string-append class_name \".\" (strongest-ext-helper\
    \ extensions))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b0z4ex1.rkt:50:4\n\
    actual:     \"__YESIMHERE.zeR00\"\nexpected:   \"__YESIMHERE.NuLl__\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b0z4ex1.rkt:55:4\n\
    actual:     \"_.91245\"\nexpected:   \"_.Bb\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((extension_strength (make-hash)))\n    (for ([ext extension_name\
    \ extensions])\n      (hash-set! extension_strength ext \n                 (let\
    \ ([cap (length (regexp-match #rx\"[A-Z]\" ext))]\n                       [sm\
    \ (length (regexp-match #rx\"[a-z]\" ext))])\n                   (/ cap sm))))\n\
    \    (string-append class_name \".\" (hash-ref extension_strength (apply max extension_strength)))))\n\
    </code>\nMy for is creating a hash with key=extension name and value=strength,\
    \ and then I am trying to grab the extension name with the max strength value.\
    \ However, I'm getting an error, probably because the max function needs lists,\
    \ not a hash? Is there a way to convert the hash to a list of the values, so that\
    \ I can then apply max?\nThanks,\n\n\nA:\n\nThere are many ways to skin a cat,\
    \ here's one of them:\n<code>(define (Strongest_Extension class_name extensions)\n\
    \  (string-append\n   class_name\n   \".\"\n   (car\n    (sort\n     (map (lambda\
    \ (ext) (list (strength ext) ext)) extensions)\n     &gt;))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5mlo6gpm.rkt:39:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 40\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([ext-strength (apply min (map (\u03BB (ext) (/ (- (count-char\
    \ #\\A #\\Z ext) (count-char #\\a #\\z ext)) (count ext))) extensions))])\n  \
    \  (string-append class_name \".\" (list-ref extensions (index-of (min-index extensions)\
    \ (map (\u03BB (ext) (/ (- (count-char #\\A #\\Z ext) (count-char #\\a #\\z ext))\
    \ (count ext))) extensions)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk707b_u9.rkt:19:54: count-char: unbound identifier\n  in: count-char\n\
    \  location...:\n   /tmp/tmpk707b_u9.rkt:19:54\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define total-extensions (map (\u03BB (e) (list e (fraction-strength\
    \ e))) extensions))\n  (define sorted-extensions (sort total-extensions (\u03BB\
    \ (a b) (> (cadr a) (cadr b)))))\n  (define strongest-extension (car sorted-extensions))\n\
    \  (define strength (cadr strongest-extension))\n  (if (= strength 0) \"\" (string-append\
    \ class_name \".\" (car strongest-extension))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpst39g9db.rkt:19:48: fraction-strength: unbound identifier\n  in:\
    \ fraction-strength\n  location...:\n   /tmp/tmpst39g9db.rkt:19:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (null? extensions)\n      (error \"Error: extensions list\
    \ is empty\")\n      (let ([str_elem_names (map string-&gt;symbol extensions)])\n\
    \        (for/fold ([max_ext \"\"][max_strength 0])\n                  ([current_ext\
    \ (in-list str_elem_names)])\n          (let ([current_strength (Compute_Strength\
    \ (symbol-&gt;string current_ext))])\n            (if (&gt; current_strength max_strength)\n\
    \                (values current_ext current_strength)\n                (values\
    \ max_ext max_strength)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoc8o75su.rkt:27:49: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext_strength ext)\n    (let ([uc (apply + (map (\u03BB\
    \ (c) (if (char-upper-case? c) 1 0)) ext))]\n          [lc (apply + (map (\u03BB\
    \ (c) (if (char-lower-case? c) 1 0)) ext))])\n      (/ (- uc) lc)))\n  (let ([ext_max\
    \ (apply max (map ext_strength extensions))]\n        [ext_list (filter (\u03BB\
    \ (ext) (= (ext_strength ext) ext_max)) extensions)])\n    (string-append class_name\
    \ \".\" (first ext_list))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5js84ng8.rkt:24:57: ext_max: unbound identifier\n  in: ext_max\n\
    \  location...:\n   /tmp/tmp5js84ng8.rkt:24:57\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; Get the number of uppercase and lowercase letters in extension\n\
    \  (define (size extension)\n    (cons (length (regexp-match \"([A-Z])\" extension))\n\
    \          (length (regexp-match \"([a-z])\" extension))))\n  ;; Get strength\
    \ by subtracting the number of lowercase from the number of uppercase letters\n\
    \  (define (strength extension)\n    (- (car (size extension)) (cdr (size extension))))\n\
    \  ;; Get the the strongest extension by comparing the strengths of each extension\
    \ in the list\n  (define (find-strongest extensions)\n    (cond\n      [(empty?\
    \ extensions) #f]\n      [(null? (cdr extensions)) (car extensions)]\n      [else\
    \ (if (> (strength (car extensions))\n                   (strength (car (cdr extensions))))\n\
    \               (find-strongest (cons (car extensions) (cddr extensions)))\n \
    \              (find-strongest (cdr extensions)))]))\n  ;; Concatenate the class\
    \ name with the strongest extension\n  (string-append class_name \".\" (find-strongest\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:44:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:45:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:46:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:47:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:48:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:50:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5j41tw.rkt:51:4\n\
    \nlength: contract violation\n  expected: list?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (local [(define is_upper?\n                (lambda (char)\n\
    \                    (char-upcase char)\n                    (= (char-upcase char)\
    \ char)))\n            (define get-strength\n                (lambda (name)\n\
    \                    (local [(define upper_count \n                          \
    \      (foldl + 0 (map is_upper? (string->list name))))\n                    \
    \        (define lower_count\n                                (foldl + 0 (map\
    \ (compose not is_upper?) (string->list name))))]\n                        (-\
    \ (float upper_count) lower_count))))\n            (define best-extension\n  \
    \              (lambda (lst)\n                    (cond [(empty? lst) \"\"]\n\
    \                          [(= (length lst) 1) (first lst)]\n                \
    \          [else (let ([best_so_far (best-extension (rest lst))])\n          \
    \                        (if (< (get-strength (first lst)) (get-strength best_so_far))\n\
    \                                      best_so_far\n                         \
    \             (first lst)))])))\n            (define get-result\n            \
    \    (lambda (classname extension)\n                    (string-append classname\
    \ \".\" extension)))]\n    (get-result class_name (best-extension extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpal9tj7v_.rkt:29:28: float: unbound identifier\n  in: float\n  location...:\n\
    \   /tmp/tmpal9tj7v_.rkt:29:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define CAP-SM-strength\n    (lambda (extension_name)\n     \
    \ (let* ([CAP (count-upper-case extension_name)]\n             [SM (count-lower-case\
    \ extension_name)])\n        (- CAP SM))))\n  (cond\n    [(null? extensions) \"\
    \"]\n    [(not (pair? extensions)) \"\"]\n    [else\n     (define strongest-extension\n\
    \       (apply max extensions (list CAP-SM-strength)))\n     (string-append class_name\
    \ \".\" strongest-extension)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbpjhjc6w.rkt:21:19: count-upper-case: unbound identifier\n  in:\
    \ count-upper-case\n  location...:\n   /tmp/tmpbpjhjc6w.rkt:21:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count_capital str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(char-upcase? (first str)) (+ 1 (count_capital (rest str)))]\n      [else\
    \ (count_capital (rest str))]))\n  (define (count_lower str)\n    (cond\n    \
    \  [(empty? str) 0]\n      [(char-lower-case? (first str)) (+ 1 (count_lower (rest\
    \ str)))]\n      [else (count_lower (rest str))]))\n  (define (strength str)\n\
    \    (/ (- (count_capital str) (count_lower str)) (string-length str)))\n  (string-append\
    \ class_name \".\" (apply max (map strength extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw5d2g5gl.rkt:22:8: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpw5d2g5gl.rkt:22:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([classes (cons class_name extensions)])\n    (define (get-strength\
    \ class)\n      (define (letter-strength letter)\n        (if (char-lower-case?\
    \ letter) 1 0))\n      (let ([u (length (filter char-upper-case? class))]\n  \
    \          [l (length (filter char-lower-case? class))])\n        (/ (- u l) (-\
    \ u l))))\n    (define (extensions-strength extensions)\n      (cons (list (list\
    \ (car extensions) (get-strength (car extensions))))\n            (extensions-strength\
    \ (cdr extensions))))\n    (let ([strength-list (extensions-strength extensions)])\n\
    \      (define (strongest-extension strength-list)\n        (let ([compare-strength\
    \ (list-ref (car strength-list) 1)])\n          (define (extensions-strength strength-list)\n\
    \            (let ([next-strength (list-ref (car strength-list) 1)])\n       \
    \       (if (< compare-strength next-strength)\n                  (extensions-strength\
    \ (cdr strength-list))\n                  (cons (car strength-list)\n        \
    \                (extensions-strength (cdr strength-list))))))\n          (let\
    \ ([strongest-extensions (extensions-strength strength-list)])\n            (define\
    \ (strongest-extension-name strongest-extensions)\n              (if (= (length\
    \ strongest-extensions) 1)\n                  (list-ref (car strongest-extensions)\
    \ 0)\n                  (let ([min-extension (list-ref (car strongest-extensions)\
    \ 0)]\n                        [second-min-extension (list-ref (car (cdr strongest-extensions))\
    \ 0)])\n                    (if (< (string<? min-extension second-min-extension)\
    \ 0)\n                        second-min-extension\n                        min-extension))))\n\
    \            (string-append class_name \".\" (strongest-extension-name strongest-extensions))))))\n\
    \    (strongest-extension strength-list)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3hguwb27.rkt:29:4: begin (possibly implicit): no expression after\
    \ a sequence of internal definitions\n  in: (begin (define (strongest-extension\
    \ strength-list) (let ((compare-strength (list-ref (car strength-list) 1))) (define\
    \ (extensions-strength strength-list) (let ((next-strength (list-ref (car strength-list)\
    \ 1))) (if (< compare-strength next-strength) (ext...\n  location...:\n   /tmp/tmp3hguwb27.rkt:29:4\n\
    \   /tmp/tmp3hguwb27.rkt:30:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps ext)\n    (for/sum ([c (in-string ext)])\n\
    \      (if (char-upcase? c) 1 0)))\n  (define (count-smalls ext)\n    (for/sum\
    \ ([c (in-string ext)])\n      (if (char-lowercase? c) 1 0)))\n  (define (strength\
    \ ext)\n    (- (count-caps ext) (count-smalls ext)))\n  (define (strongest ext1\
    \ ext2)\n    (if (&gt; (strength ext1) (strength ext2))\n        ext1\n      \
    \  ext2))\n  (define (search exts)\n    (if (empty? exts)\n        \"\"\n    \
    \    (strongest (first exts) (search (rest exts)))))\n  (string-append class_name\
    \ \".\" (search extensions)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp350glz_u.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 36\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([class_name_ext_list (map (lambda (ext) (list ext (count_cap_sm\
    \ ext))) extensions)])\n    (if (null? class_name_ext_list) class_name\n     \
    \   (let ([best (apply max class_name_ext_list (lambda (x y) (= (cadr x) (cadr\
    \ y))))])\n          (string-append class_name \".\" (car best))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsludmeq5.rkt:19:59: count_cap_sm: unbound identifier\n  in: count_cap_sm\n\
    \  location...:\n   /tmp/tmpsludmeq5.rkt:19:59\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (call-with-current-continuation\n   (lambda (return)\n     (let\
    \ loop ([extensions extensions]\n                [max_strength -1]\n         \
    \       [strongest_extension \"\"])\n       (cond [(null? extensions)\n      \
    \        (return (format \"~a.~a\" class_name strongest_extension))]\n       \
    \      [(let ([strength \n                     ( - (count-matches (regexp \"[A-Z]\"\
    ))\n                         (count-matches (regexp \"[a-z]\")))])\n         \
    \       (if (> strength max_strength)\n                    (loop (cdr extensions)\
    \ strength (car extensions))\n                    (loop (cdr extensions) max_strength\
    \ strongest_extension)))])\n       ))))\n</code>\nI am not sure if I have to fix\
    \ something or if I am making the assignment too hard on myself.\n\n\nA:\n\nThe\
    \ problem with your solution is that you're trying to use an imperative programming\
    \ style where you set variables and loop. The problem is that you're using the\
    \ wrong language, Racket is a functional language, so you want to approach the\
    \ problem from a functional programming style.\nIn functional programming we don't\
    \ set variables, we return values, and we don't loop, we recurse.\nSo we want\
    \ to define a function <code>get-extension-strength</code> that takes a string\
    \ and returns an integer. From there we can define a function <code>find-strongest-extension</code>\
    \ that takes a list of strings and returns a string.\nHere is my solution:\n<code>#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5rb17dcl.rkt:34:41: or: bad syntax\n  in: or\n  location...:\n\
    \   /tmp/tmp5rb17dcl.rkt:34:41\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:468:6\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (chars_upper string)\n    (length (regexp-match* #rx\"\
    [A-Z]\" string)))\n  (define (chars_lower string)\n    (length (regexp-match*\
    \ #rx\"[a-z]\" string)))\n  (define (strength string)\n    (- (chars_upper string)\
    \ (chars_lower string)))\n  (let ([ext (car (sort (map (\u03BB (x) (cons x (strength\
    \ x))) extensions))\n                    #:key cdr\n                    #:comparer\
    \ <)])\n    (format \"~a.~a\" class_name (car ext))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:35:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '((\"tEN\" . 1) (\"niNE\" . 0) (\"\
    eIGHt8OKe\" . 2))\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:36:4\n\nsort: arity mismatch;\n\
    \ the expected number of arguments does not match the given number\n  expected:\
    \ 2 plus optional arguments with keywords #:cache-keys? and #:key\n  given: 1\n\
    \  arguments...:\n   '((\"nani\" . -4) (\"NazeDa\" . -2) (\"YEs.WeCaNe\" . 1)\
    \ (\"32145tggg\" . -4))\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:37:4\n\nsort: arity mismatch;\n\
    \ the expected number of arguments does not match the given number\n  expected:\
    \ 2 plus optional arguments with keywords #:cache-keys? and #:key\n  given: 1\n\
    \  arguments...:\n   '((\"t\" . -1) (\"eMptY\" . -1) (\"nothing\" . -7) (\"zeR00\"\
    \ . -1) (\"NuLl__\" . 0) (\"123NoooneB321\" . -3))\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:38:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '((\"Ta\" . 0) (\"TAR\" . 3) (\"t234An\"\
    \ . -1) (\"cosSo\" . -3))\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:39:4\n\nsort: arity\
    \ mismatch;\n the expected number of arguments does not match the given number\n\
    \  expected: 2 plus optional arguments with keywords #:cache-keys? and #:key\n\
    \  given: 1\n  arguments...:\n   '((\"Tab\" . -1) (\"123\" . 0) (\"781345\" .\
    \ 0) (\"-_-\" . 0))\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk9934ayy.rkt:40:4\n\nsort: arity mismatch;\n\
    \ the expected number of arguments does not match the given number\n  expected:"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (begin\n    (define strength-comparator\n      (lambda (e1 e2)\n\
    \        (let ([str1 (extension-strength e1)]\n              [str2 (extension-strength\
    \ e2)])\n          (if (< str1 str2)\n              'GT\n              (if (=\
    \ str1 str2)\n                  'EQ\n                  'LT)))))\n    (define extension-strength\n\
    \      (lambda (extension)\n        (/ (- (count-caps extension) (count-smalls\
    \ extension)))))\n    (define count-caps\n      (lambda (str)\n        (letrec\
    \ ([loop\n                  (lambda (str acc)\n                    (if (empty?\
    \ str)\n                        acc\n                        (if (char-numeric?\
    \ (car str))\n                            (loop (cdr str) (+ acc 1))\n       \
    \                     (loop (cdr str) acc))))])\n          (loop str 0))))\n \
    \   (define count-smalls\n      (lambda (str)\n        (letrec ([loop\n      \
    \            (lambda (str acc)\n                    (if (empty? str)\n       \
    \                 acc\n                        (if (char-alphabetic? (car str))\n\
    \                            (loop (cdr str) (+ acc 1))\n                    \
    \        (loop (cdr str) acc))))])\n          (loop str 0))))\n    (define chosen-extension\n\
    \      (lambda (extensions)\n        (letrec ([loop\n                  (lambda\
    \ (extensions best)\n                    (if (empty? extensions)\n           \
    \             best\n                        (if (or (eq? (strength-comparator\
    \ (car extensions) best) 'GT)\n                                (and (eq? (strength-comparator\
    \ (car extensions) best) 'EQ)\n                                     (string<?\
    \ (car extensions) best)))\n                            (loop (cdr extensions)\
    \ (car extensions))\n                            (loop (cdr extensions) best))))])\n\
    \          (loop extensions (car extensions)))))\n    (string-append class_name\
    \ \".\" (chosen-extension extensions))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:70:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"tEN\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:71:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"nani\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:72:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"t\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:73:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Ta\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:74:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Tab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:75:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"HhAas\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:76:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Die\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:77:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez5f3wy4.rkt:78:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define strength \n    (lambda (ext)\n      (/ (- (count-upper-case\
    \ ext) (count-lower-case ext)) \n         (count-upper-case ext))))\n  (define\
    \ (count-upper-case str)\n    (cond [(empty? str) 0]\n          [(char-upper-case?\
    \ (first str)) (+ 1 (count-upper-case (rest str)))]\n          [else (count-upper-case\
    \ (rest str))]))\n  (define (count-lower-case str)\n    (cond [(empty? str) 0]\n\
    \          [(char-lower-case? (first str)) (+ 1 (count-lower-case (rest str)))]\n\
    \          [else (count-lower-case (rest str))]))\n  (define strongest-extension\n\
    \    (lambda (strongest ext)\n      (if (or (empty? ext) (= (- 1 (strength (first\
    \ ext))) (strength strongest)))\n          strongest\n          (strongest-extension\
    \ (first ext) (rest ext)))))\n  (string-append class_name \".\" (strongest-extension\
    \ (first extensions) (rest extensions))))\n</code>\nIt's a bit complicated, so\
    \ I think it can be improved.\nThanks\n\n\nA:\n\nHere's a suggestion that makes\
    \ things a bit easier to read:\n<code>(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength ext)\n    (/ (- (count-upper-case ext) (count-lower-case\
    \ ext)) \n       (count-upper-case ext)))\n  (define (count-upper-case str)\n\
    \    (count-chars char-upper-case? str))\n  (define (count-lower-case str)\n \
    \   (count-chars char-lower-case? str))\n  (define (count-chars p str)\n    (cond\
    \ [(empty? str) 0]\n          [(p (first str)) (+ 1 (count-chars p (rest str)))]\n\
    \          [else (count-chars p (rest str))]))\n  (define (strongest-extension\
    \ strongest ext)\n    (if (or (empty? ext) (= (- 1 (strength (first ext))) (strength\
    \ strongest)))\n        strongest\n        (\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp604kudmt.rkt:60:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 61\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; TODO: Implement\n  (error 'Strongest_Extension \"Not Implemented\"\
    ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:27:4\n\
    \nStrongest_Extension: Not Implemented\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:28:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:29:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:30:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:31:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:32:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:33:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:34:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2t8mbyae.rkt:35:4\n\nStrongest_Extension:\
    \ Not Implemented\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext-strength ext)\n    (define (count-caps s)\n    \
    \  (define (is-cap c) (char-upper-case? c))\n      (count is-cap s))\n    (define\
    \ (count-smalls s)\n      (define (is-small c) (char-lower-case? c))\n      (count\
    \ is-small s))\n    (- (count-caps ext) (count-smalls ext)))\n  (define (strongest-ext\
    \ ext-list)\n    (if (empty? ext-list)\n        \"\"\n        (if (= (length ext-list)\
    \ 1)\n            (first ext-list)\n            (if (= (ext-strength (first ext-list))\
    \ (ext-strength (second ext-list)))\n                (strongest-ext (cons (first\
    \ ext-list) (rest (rest ext-list))))\n                (strongest-ext (cons (first\
    \ ext-list) (rest ext-list)))))))\n  (string-append class_name \".\" (strongest-ext\
    \ extensions)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:41:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:42:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"nani\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:43:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"t\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Ta\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:45:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:46:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:47:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Die\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:48:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:is-cap>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbrbz5kl.rkt:49:4\n\ncount:\
    \ contract violation\n  ex"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply max-key (\u03BB (x y) (- (number-of-uppercase-letters\
    \ x)\n                             (number-of-uppercase-letters y)))\n       \
    \  extensions))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptdfsc7r1.rkt:19:9: max-key: unbound identifier\n  in: max-key\n\
    \  location...:\n   /tmp/tmptdfsc7r1.rkt:19:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength str)\n    (define (uppercase? c)\n      (=\
    \ (char-upcase c) c))\n    (let ([caps (for/sum ([c (in-string str)])\n      \
    \             (if (uppercase? c) 1 0))]\n          [smalls (for/sum ([c (in-string\
    \ str)])\n                    (if (uppercase? c) 0 1))])\n      (- caps smalls)))\n\
    \  (define (strongest exts)\n    (let ([s (apply max (map strength exts))])\n\
    \      (for/first ([e (in-list exts)]\n                  #:when (= (strength e)\
    \ s))\n        e)))\n  (string-append class_name \".\" (strongest extensions)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:39:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:40:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\N\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:41:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:42:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:43:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:44:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:45:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\D\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:46:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\B\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi18epk3n.rkt:47:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength s) (- (count (lambda (c) (char-upper-case?\
    \ c)) s)\n                          (count (lambda (c) (char-lower-case? c)) s)))\n\
    \  (define (strongest-ext-name extensions)\n    (define (strongest-ext-name-iter\
    \ extensions strength_best name_best)\n      (if (null? extensions)\n        \
    \  name_best\n          (let ([strength_ext (strength (car extensions))])\n  \
    \          (if (&gt; strength_ext strength_best)\n                (strongest-ext-name-iter\
    \ (cdr extensions) strength_ext (car extensions))\n                (strongest-ext-name-iter\
    \ (cdr extensions) strength_best name_best)))))\n    (strongest-ext-name-iter\
    \ extensions 0 \"default_name\"))\n  (string-append class_name \".\" (strongest-ext-name\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa25m0u83.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext-strength extension)\n    (let ((cap-cnt 0) (sm-cnt\
    \ 0))\n      (for/list ([c (in-string extension)])\n        (if (char-alphabetic?\
    \ c)\n            (if (char-upper-case? c)\n                (set! cap-cnt (+ cap-cnt\
    \ 1))\n                (set! sm-cnt (+ sm-cnt 1)))))\n      (- cap-cnt sm-cnt)))\n\
    \  (define (max-strength lst)\n    (if (null? lst) 0\n        (max (car lst) (max-strength\
    \ (cdr lst)))))\n  (let ((strongest-extension (car extensions))\n        (strongest-extension-strength\
    \ (ext-strength (car extensions))))\n    (for/list ([ext (in-list (cdr extensions))])\n\
    \      (let ((ext-strength (ext-strength ext)))\n        (when (= ext-strength\
    \ (max-strength (map ext-strength extensions)))\n          (set! strongest-extension\
    \ ext)\n          (set! strongest-extension-strength ext-strength))))\n    (string-append\
    \ class_name \".\" strongest-extension)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzarvzb73.rkt:22:8: if: missing an \"else\" expression\n  in: (if\
    \ (char-alphabetic? c) (if (char-upper-case? c) (set! cap-cnt (+ cap-cnt 1)) (set!\
    \ sm-cnt (+ sm-cnt 1))))\n  location...:\n   /tmp/tmpzarvzb73.rkt:22:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((extension-strength-list (map (lambda (extension)\n   \
    \                                     (cons extension\n                      \
    \                        (- (count 'symbol? (string->list extension))\n      \
    \                                           (count 'char-alphabetic? (string->list\
    \ extension)))))\n                                      extensions)))\n    (string-append\
    \ class_name \".\"\n                   (caar (sort (lambda (e1 e2)\n         \
    \                        (< (cdar e1) (cdar e2)))\n                          \
    \     extension-strength-list)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:33:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\t #\\E #\\N)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:34:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\n #\\a #\\n #\\i)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:35:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\t)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:36:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument position:\
    \ 1st\n  other arguments...:\n   '(#\\T #\\a)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:37:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument position:\
    \ 1st\n  other arguments...:\n   '(#\\T #\\a #\\b)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:38:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument position:\
    \ 1st\n  other arguments...:\n   '(#\\H #\\h #\\A #\\a #\\s)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:39:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\D #\\i #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:40:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: 'symbol?\n  argument\
    \ position: 1st\n  other arguments...:\n   '(#\\B #\\b)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfvf54skl.rkt:41:4\n\
    \ncount: co"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (empty? extensions)\n      \"\"\n      (if (empty? (rest\
    \ extensions))\n          (string-append class_name \".\" (first extensions))\n\
    \          (let* ([strongest_extension (first extensions)]\n                 [strongest_strength\
    \ (strength (first extensions))])\n            (for ([extension (rest extensions)])\n\
    \              (if (> (strength extension) strongest_strength)\n             \
    \     (begin\n                    (set! strongest_extension extension)\n     \
    \               (set! strongest_strength (strength extension)))))\n          \
    \  (string-append class_name \".\" strongest_extension)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp49glru5o.rkt:24:38: strength: unbound identifier\n  in: strength\n\
    \  location...:\n   /tmp/tmp49glru5o.rkt:24:38\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strongest_extension #f)\n        (strongest_extension_strength\
    \ 0))\n    (for ([i (in-list extensions)])\n      (let* ([current_extension_strength\
    \ (abs (- (length (regexp-match* #rx\"[A-Z]\" i))\n                          \
    \                      (length (regexp-match* #rx\"[a-z]\" i))))])\n        (if\
    \ (> current_extension_strength strongest_extension_strength)\n            (begin\n\
    \              (set! strongest_extension i)\n              (set! strongest_extension_strength\
    \ current_extension_strength)))))\n    (format \"~a.~a\" class_name strongest_extension)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprfb2gyrh.rkt:24:8: if: missing an \"else\" expression\n  in: (if\
    \ (> current_extension_strength strongest_extension_strength) (begin (set! strongest_extension\
    \ i) (set! strongest_extension_strength current_extension_strength)))\n  location...:\n\
    \   /tmp/tmprfb2gyrh.rkt:24:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([extensions (map (\u03BB (extension)\n                \
    \          (list extension\n                                (- (/ (count (\u03BB\
    \ (c) (=? #\\A (char-upcase c))) extension) (string-length extension))\n     \
    \                              (/ (count (\u03BB (c) (not (=? #\\A (char-upcase\
    \ c)))) extension) (string-length extension)))))\n                        extensions)])\n\
    \    (string-append class_name \".\" (car (sort (\u03BB (a b) (< (cadr a) (cadr\
    \ b))) extensions)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdqdck41h.rkt:21:53: =?: unbound identifier\n  in: =?\n  location...:\n\
    \   /tmp/tmpdqdck41h.rkt:21:53\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (null? extensions)\n      class_name\n      (let* ([strengths\
    \ (map (lambda (extension)\n                               (let* ([cap (length\
    \ (regexp-match* #rx\"[A-Z]\" extension))]\n                                 \
    \     [sm (length (regexp-match* #rx\"[a-z]\" extension))])\n                \
    \                 (- cap sm)))\n                             extensions)]\n  \
    \           [max-strength (apply max strengths)]\n             [max-indices (filter\
    \ (lambda (index)\n                                    (= (list-ref strengths\
    \ index) max-strength))\n                                  (build-list (length\
    \ extensions)\n                                              (lambda (x) x)))]\n\
    \             [max-index (car max-indices)])\n        (Strongest_Extension (string-append\
    \ class_name \".\"\n                                            (list-ref extensions\
    \ max-index))\n                             (remove (list-ref extensions max-index)\n\
    \                                     extensions)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:42:4\n\
    actual:     \"Watashi.eIGHt8OKe.tEN.niNE\"\nexpected:   \"Watashi.eIGHt8OKe\"\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7vt53yj8.rkt:43:4\nactual:     \"Boku123.YEs.WeCaNe.NazeDa.nani.32145tggg\"\
    \nexpected:   \"Boku123.YEs.WeCaNe\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:44:4\nactual:\
    \     \"__YESIMHERE.NuLl__.t.eMptY.zeR00.123NoooneB321.nothing\"\nexpected:  \
    \ \"__YESIMHERE.NuLl__\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:45:4\nactual:     \"\
    K.TAR.Ta.t234An.cosSo\"\nexpected:   \"K.TAR\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:46:4\nactual:\
    \     \"__HAHA.123.781345.-_-.Tab\"\nexpected:   \"__HAHA.123\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:47:4\n\
    actual:     \"YameRore.okIWILL123.-_-.HhAas.WorkOut.Fails\"\nexpected:   \"YameRore.okIWILL123\"\
    \n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7vt53yj8.rkt:48:4\nactual:     \"finNNalLLly.WoW.NowW.Die.Wow\"\
    \nexpected:   \"finNNalLLly.WoW\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:49:4\nactual:\
    \     \"_.Bb.91245\"\nexpected:   \"_.Bb\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vt53yj8.rkt:50:4\nactual:\
    \     \"Sp.671235.Bb\"\nexpected:   \"Sp.671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (apply max (map (lambda (extension) \n                    (let\
    \ ([upper_letters_number (number-of-uppercase extension)]\n                  \
    \        [lower_letters_number (number-of-lowercase extension)])\n           \
    \           (string-append class_name \".\" extension \":\" \n               \
    \                      (number->string (quotient upper_letters_number lower_letters_number)))))\n\
    \                  extensions)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqtul5cz1.rkt:20:49: number-of-uppercase: unbound identifier\n \
    \ in: number-of-uppercase\n  location...:\n   /tmp/tmpqtul5cz1.rkt:20:49\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength . extension)\n    (define (strength-internal\
    \ str index)\n      (cond ((< index (string-length str))\n             (if (char-upper-case?\
    \ (string-ref str index))\n                 (+ 1 (strength-internal str (+ index\
    \ 1)))\n                 (strength-internal str (+ index 1))))\n            (else\
    \ 0)))\n    (- (strength-internal (string-titlecase extension) 0)\n       (strength-internal\
    \ (string-downcase extension) 0)))\n  (string-append class_name \".\" (apply max-extension\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5_mwue19.rkt:28:39: max-extension: unbound identifier\n  in: max-extension\n\
    \  location...:\n   /tmp/tmp5_mwue19.rkt:28:39\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define current_winner\n    (define current_winner_strength 0)\n\
    \    (for/fold ([current_winner_strength 0]\n               [current_winner ''])\n\
    \        ([extension (in-list extensions)])\n      (define strength \n       \
    \ (define caps (count (filter char-uppercase? extension)))\n        (define smalls\
    \ (count (filter char-lowercase? extension)))\n        (- caps smalls))\n    \
    \  (if (> strength current_winner_strength)\n          (values extension strength)\n\
    \          (values current_winner current_winner_strength))))\n  (format \"~a.~a\"\
    \ class_name current_winner))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq2bi4hm4.rkt:22:33: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (compare-extensions e1 e2)\n    (if (&gt; (strength e1)\
    \ (strength e2))\n        e1\n        e2))\n  (define (strength extension)\n \
    \   (quotient (- (count (char-range #\\A #\\Z) extension)\n                 (count\
    \ (char-range #\\a #\\z) extension))\n              (count (string-&gt;list extension))))\n\
    \  (string-append class_name \".\" (apply compare-extensions extensions)))\n</code>\n\
    This works but I think it can be simplified, can you help me to simplify it?\n\
    \n\nA:\n\nHere's an alternative solution, using <code>list-max</code>:\n<code>(define\
    \ (Strongest_Extension class_name extensions)\n  (define (compare-extensions e1\
    \ e2)\n    (if (&gt; (strength e1) (strength e2))\n        e1\n        e2))\n\
    \  (define (strength extension)\n    (quotient (- (count (char-range #\\A #\\\
    Z) extension)\n                 (count (char-range #\\a #\\z) extension))\n  \
    \            (count (string-&gt;list extension))))\n  (string-append class_name\
    \ \".\" (list-max extensions compare-extensions)))\n</code>\nIt's not much different\
    \ from your solution, but in my opinion it's easier to read and understand.\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmku11z_n.rkt:43:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 45\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (char-strength c)\n    (if (char-upper-case? c) 1 -1))\n\
    \  (define (strength str)\n    (let ([upper-count (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [lower-count (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (/ upper-count lower-count)))\n  (define (find-strongest extensions)\n\
    \    (if (empty? extensions)\n        #f\n        (let ([strengths (map strength\
    \ extensions)])\n          (argmax strengths))))\n  (string-append class_name\
    \ \".\" (list-ref extensions (find-strongest extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqtgczg9.rkt:37:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"tEN\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqtgczg9.rkt:38:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"nani\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprqtgczg9.rkt:39:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"t\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprqtgczg9.rkt:40:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Ta\"\n  argument position: 2nd\n  other arguments...:\n  \
    \ #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprqtgczg9.rkt:41:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Tab\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqtgczg9.rkt:42:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"HhAas\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprqtgczg9.rkt:43:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Die\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmprqtgczg9.rkt:22:30>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprqtgczg9.rkt:44:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"Bb\"\n  argument position:\
    \ 2nd\n  other arguments...:\n   #<proced"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define max_extension '() )\n  (define max_extension_strength\
    \ 0)\n  (for ([i extensions])\n    (define caps_num (count (lambda (ch) (char-upper-case?\
    \ ch)) i) )\n    (define sm_num   (count (lambda (ch) (char-lower-case? ch)) i)\
    \ )\n    (define cur_extension_strength (- caps_num sm_num) )\n    (if (and (not\
    \ (empty? i)) (&gt; cur_extension_strength max_extension_strength) )\n       \
    \ (begin\n          (set! max_extension_strength cur_extension_strength)\n   \
    \       (set! max_extension i) ) ) )\n  (format \"~a.~a\" class_name max_extension)\
    \ )\n</code>\n\nNote:\nThe problem doesn't specify that the name of the class\
    \ is supposed to be also capitalized,\nso I assume that the class name could be\
    \ anything like this:\n<code>(Strongest_Extension 'Class' 'Class.Bestextension')\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2ap44fgr.rkt:35:56: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength word)\n    (let ((cap-count (for/fold ([acc\
    \ 0]) ([chr (in-string word)])\n                     (if (char-uppercase? chr)\n\
    \                         (+ acc 1)\n                         acc)))\n       \
    \   (sm-count (for/fold ([acc 0]) ([chr (in-string word)])\n                 \
    \    (if (char-lowercase? chr)\n                         (+ acc 1)\n         \
    \                acc))))\n      (/ cap-count sm-count)))\n  (string-append class_name\n\
    \                 \".\"\n                 (car (sort (map (lambda (x) (cons (strength\
    \ x) x)) extensions)\n                            (lambda (a b) (< (car a) (car\
    \ b)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpanxdizr5.rkt:21:26: char-uppercase?: unbound identifier\n  in:\
    \ char-uppercase?\n  location...:\n   /tmp/tmpanxdizr5.rkt:21:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define strength\n    (lambda (extension)\n      (define uppercase_count\
    \ (count (lambda (c) (char-upper-case? c)) extension))\n      (define lowercase_count\
    \ (count (lambda (c) (char-lower-case? c)) extension))\n      (- uppercase_count\
    \ lowercase_count)))\n  (define (strongest_extension_index list)\n    (define\
    \ strength_list (map strength list))\n    (apply max-index strength_list))\n \
    \ (string-append class_name \".\" (list-ref extensions (strongest_extension_index\
    \ extensions))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpch2b6dfv.rkt:26:11: max-index: unbound identifier\n  in: max-index\n\
    \  location...:\n   /tmp/tmpch2b6dfv.rkt:26:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (car (my-sort-extensions extensions))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp344_b3rv.rkt:19:38: my-sort-extensions: unbound identifier\n  in:\
    \ my-sort-extensions\n  location...:\n   /tmp/tmp344_b3rv.rkt:19:38\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (cond\n    [(empty? extensions) ']\n    [else\n     (let* ([sorted-exts\
    \ (sort extensions (\u03BB (a b) (string<? a b)))]\n            [strengthest-ext\
    \ (car sorted-exts)]\n            [strengthest-ext-str (string-length strengthest-ext)]\n\
    \            [strengthest-ext-str-cap (count-chars (string-upper-case strengthest-ext))]\n\
    \            [strengthest-ext-str-sm (count-chars (string-lower-case strengthest-ext))]\n\
    \            [strengthest-ext-strength (/ (- strengthest-ext-str-cap strengthest-ext-str-sm)\
    \ strengthest-ext-str)])\n      (for/first ([strength-ext (in-list (map (\u03BB\
    \ (ext)\n                                                (let* ([ext-str (string-length\
    \ ext)]\n                                                       [ext-str-cap (count-chars\
    \ (string-upper-case ext))]\n                                                \
    \       [ext-str-sm (count-chars (string-lower-case ext))]\n                 \
    \                                      [ext-strength (/ (- ext-str-cap ext-str-sm)\
    \ ext-str)])\n                                                  (list ext ext-strength)))\n\
    \                                             extensions)]\n                 \
    \ [strength (in-list strength-ext)]\n                  [ext (in-list strength-ext)])\n\
    \        (when (equal? strength strengthest-ext-strength)\n          (string-append\
    \ class_name \".\" ext))))]))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5tk2i6fy.rkt:20:26: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (not (cons? extensions))\n      (string-append class_name\
    \ \".\")\n      (let* ([strength-fn (lambda (item)\n                         \
    \   (let* ([sm (count (lambda (char)\n                                       \
    \         (char-lower-case? char))\n                                         \
    \     item))\n                                   [cap (count (lambda (char)\n\
    \                                                  (char-upper-case? char))\n\
    \                                                item)])\n                   \
    \           (- cap sm)))])\n        (apply max (map strength-fn extensions)))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqqu5kyqk.rkt:24:51: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strongest_extension_name (car extensions))\n        (strongest_extension_strength\
    \ 0))\n    (for ([extension (in-list extensions)])\n      (let* ([class_name_extension\
    \ (format \"~a.~a\" class_name extension)]\n             [extension_strength (get-strength\
    \ class_name_extension)])\n        (if (> extension_strength strongest_extension_strength)\n\
    \            (begin\n              (set! strongest_extension_name extension)\n\
    \              (set! strongest_extension_strength extension_strength)))))\n  \
    \  (format \"~a.~a\" class_name strongest_extension_name)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5zx8f7j1.rkt:23:34: get-strength: unbound identifier\n  in: get-strength\n\
    \  location...:\n   /tmp/tmp5zx8f7j1.rkt:23:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (match-define (list (regexp #rx\"^([A-Z]+)([a-z]+)$\") class_name)\n\
    \    (define (calc_strength x)\n      (match-define (list (regexp #rx\"^([A-Z]+)([a-z]+)$\"\
    ) x)\n        (/ (- (string-length $1) (string-length $2)) (string-length x))))\n\
    \    (define (find_strongest l)\n      (let loop ([input l] [result \"\"] [strength\
    \ 0])\n        (match input\n          [(list (car x) (cdr x))\n           (if\
    \ (< (calc_strength x) strength)\n               (loop x result strength)\n  \
    \             (loop x x (calc_strength x)))]\n          [(list) result])))\n \
    \   (string-append class_name \".\" (find_strongest extensions))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpld74m881.rkt:19:2: match-define: unexpected term\n  at: (define\
    \ (find_strongest l) (let loop ((input l) (result \"\") (strength 0)) (match input\
    \ ((list (car x) (cdr x)) (if (< (calc_strength x) strength) (loop x result strength)\
    \ (loop x x (calc_strength x)))) ((list) result))))\n  in: (match-define (list\
    \ (regexp #rx\"^([A-Z]+)([a-z]+)$\") class_name) (define (calc_strength x) (match-define\
    \ (list (regexp #rx\"^([A-Z]+)([a-z]+)$\") x) (/ (- (string-length $1) (string-length\
    \ $2)) (string-length x)))) (define (find_strongest l) (let loop ((i...\n  location...:\n\
    \   /tmp/tmpld74m881.rkt:23:4\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:731:0:\
    \ error/report\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/parse/private/runtime-report.rkt:28:0:\
    \ call-current-failure-handler\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n    (apply max\n           (map\n            (lambda (ext)\n  \
    \              (cons (fraction\n                       (count-pred string-upper-case?\
    \ ext)\n                       (count-pred string-lower-case? ext))\n        \
    \              ext))\n            extensions)))\n</code>\nThe code above returns\
    \ the pair of the strongest extension:\n<code>Welcome to DrRacket, version 6.9.0.4\
    \ [3m].\nLanguage: racket, with debugging; memory limit: 128 MB.\n&gt; (Strongest_Extension\
    \ \"Slices\" '( \"SErviNGSliCes\" \"Cheese\" \"StuFfed\"))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbxl9om6y.rkt:29:47: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strongest_ext_name (first extensions))\n        (strongest_ext_strength\
    \ 0))\n    (for ([ext (in-list extensions)])\n      (let ((ext_strength\n    \
    \         (/ (- (for/sum ([c (in-string ext)])\n                        (if (char-upper-case?\
    \ c) 1 0))\n                   (for/sum ([c (in-string ext)])\n              \
    \          (if (char-lower-case? c) 1 0)))))\n        (if (> ext_strength strongest_ext_strength)\n\
    \            (begin\n              (set! strongest_ext_name ext)\n           \
    \   (set! strongest_ext_strength ext_strength)))))\n    (format \"~a.~a\" class_name\
    \ strongest_ext_name)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp02opzlpq.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 33\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength s)\n    (let* ((caps (for/list ([c (in-string\
    \ s)])\n                   (if (char-uppercase? c) c '())))\n           (smalls\
    \ (for/list ([c (in-string s)])\n                     (if (char-lowercase? c)\
    \ c '()))))\n      (- (length caps) (length smalls))))\n  (define (strongest-extension-iter\
    \ lst)\n    (cond ((empty? lst) \"\")\n          ((null? (cdr lst)) (car lst))\n\
    \          (else\n           (let ((result (list (car lst) (cadr lst))))\n   \
    \          (for ([n (in-list (cddr lst))])\n               (define (pred n1 n2)\n\
    \                 (let ((s1 (strength n1))\n                       (s2 (strength\
    \ n2)))\n                   (if (= s1 s2)\n                       (< (string-length\
    \ n1) (string-length n2))\n                       (> s1 s2))))\n             \
    \  (if (pred n (car result))\n                   (set! result (list n (car result)))\n\
    \                   (set! result (list (car result) n))))\n             (if (pred\
    \ (car result) (cadr result))\n                 (car result)\n               \
    \  (cadr result))))))\n  (string-append class_name \".\" (strongest-extension-iter\
    \ extensions)))\n</code>\nIt seems that it contains no obvious inefficiency (i.e.\
    \ recursive call within a recursive call), but it takes more than 60s to complete.\
    \ It seems that it is just too heavy to handle the large amount of calculations.\
    \ \nI'm using Racket language (a Scheme dialect) that is a very nice language\
    \ for teaching and learning, but I don't think it is a good language for this\
    \ kind of problem. I want to write in languages that are more suitable for this\
    \ kind of problem.\nWhat language can I use to solve this kind of problem? I have\
    \ considered C++, but I'm not quite sure if it is the language I'm looking for.\
    \ I have also used Python before, but I don't know much about the language. What\
    \ languages should I consider?\nAny help is appreciated!\n\n\nA:\n\nNot sure about\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpow91ql8s.rkt:45:95: unquote: not in quasiquote\n  in: (unquote\
    \ but)\n  location...:\n   /tmp/tmpow91ql8s.rkt:45:95\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (let ([cap_len (length (regexp-match*\
    \ #rx\"[A-Z]\" extension))]\n          [sm_len (length (regexp-match* #rx\"[a-z]\"\
    \ extension))])\n      (- cap_len sm_len)))\n  (define (extension-strength-pair\
    \ extension)\n    (list extension (strength extension)))\n  (define (sorted-extensions-and-strengths\
    \ \n               extensions-and-strengths)\n    (sort extensions-and-strengths\
    \ \n          (lambda (ext_and_str1 ext_and_str2)\n            (or (and (positive?\
    \ (car ext_and_str1))\n                     (positive? (car ext_and_str2))\n \
    \                    (negative? (- (car ext_and_str1)\n                      \
    \             (car ext_and_str2))))\n                (and (negative? (car ext_and_str1))\n\
    \                     (negative? (car ext_and_str2))\n                     (positive?\
    \ (- (car ext_and_str1)\n                                   (car ext_and_str2))))\n\
    \                (and (positive? (car ext_and_str1))\n                     (negative?\
    \ (car ext_and_str2)))\n                (and (negative? (car ext_and_str1))\n\
    \                     (positive? (car ext_and_str2)))\n                (and (equal?\
    \ (car ext_and_str1) (car ext_and_str2))\n                     (string<? (cadr\
    \ ext_and_str1)\n                               (cadr ext_and_str2)))))))\n  (string-append\
    \ class_name\n                 \".\"\n                 (car (car (sorted-extensions-and-strengths\n\
    \                            (map extension-strength-pair\n                  \
    \               extensions))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:55:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"niNE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:56:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"NazeDa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:57:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"eMptY\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:58:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"TAR\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:59:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"123\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:60:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"okIWILL123\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm0e0duza.rkt:61:4\n\npositive?: contract violation\n  expected:\
    \ real?\n  given: \"NowW\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:62:4\n\npositive?:\
    \ contract violation\n  expected: real?\n  given: \"91245\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm0e0duza.rkt:63:4\n\
    \npositive?: contract violation\n  expected: real?\n  given: \"Bb\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ((strength '()))\n    (define (count-strength string)\n\
    \      (- (for/fold ([sum 0]) ([char (in-string string)])\n           (if (char-upper-case?\
    \ char)\n               (+ sum 1)\n               sum))))\n    (for ([extension\
    \ extensions])\n      (set! strength (cons (list (count-strength extension) extension)\
    \ strength)))\n    (set! strength (quicksort strength))\n    (string-append class_name\
    \ \".\" (cadr (car strength)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfaf_mnb7.rkt:27:20: quicksort: unbound identifier\n  in: quicksort\n\
    \  location...:\n   /tmp/tmpfaf_mnb7.rkt:27:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strongest_extension_helper lst cur_max_strength max_extension)\n\
    \    (cond ((null? lst) max_extension)\n          ((&gt; (string-strength (car\
    \ lst)) cur_max_strength)\n           (strongest_extension_helper (cdr lst) (string-strength\
    \ (car lst)) (car lst)))\n          (else (strongest_extension_helper (cdr lst)\
    \ cur_max_strength max_extension))))\n  (define (string-strength str)\n    (/\
    \ (- (count-upper-case str) (count-lower-case str))\n       (- (count-upper-case\
    \ str) (count-lower-case str))))\n  (define (count-upper-case str)\n    (cond\
    \ ((null? str) 0)\n          ((char-upper-case? (car str)) (+ 1 (count-upper-case\
    \ (cdr str))))\n          (else (count-upper-case (cdr str)))))\n  (define (count-lower-case\
    \ str)\n    (cond ((null? str) 0)\n          ((char-lower-case? (car str)) (+\
    \ 1 (count-lower-case (cdr str))))\n          (else (count-lower-case (cdr str)))))\n\
    \  (string-append class_name \".\"\n                 (strongest_extension_helper\
    \ extensions\n                                             (string-strength (car\
    \ extensions))\n                                             (car extensions))))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprkv8r24o.rkt:18:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 39\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([caps (map\n               (lambda (x) (regexp-match #rx\"\
    [A-Z]\" x))\n               extensions)]\n        [smalls (map\n             \
    \    (lambda (x) (regexp-match #rx\"[a-z]\" x))\n                 extensions)]\n\
    \        [strengths (map\n                    (lambda (cap small)\n          \
    \            (if (= cap 0) 0\n                          (/ cap small)))\n    \
    \                caps smalls)])\n    (string-append class_name \".\" (list-ref\
    \ extensions (argmax strengths)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpneqs_q79.rkt:29:20: caps: unbound identifier\n  in: caps\n  location...:\n\
    \   /tmp/tmpneqs_q79.rkt:29:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (score-extension extension)\n    (let ((cap-count 0)\n\
    \          (sm-count 0))\n      (for ([x extension])\n        (cond\n        \
    \  [(- (char-upcase x) (char-downcase x)) (+ cap-count 1)]\n          [else (+\
    \ sm-count 1)]))\n      (- cap-count sm-count)))\n  (define (find-strongest extensions)\n\
    \    (let ([strongest (list (car extensions) (score-extension (car extensions)))])\n\
    \      (for ([x (cdr extensions)])\n        (let ([score (score-extension x)])\n\
    \          (cond\n            [(> (cadr strongest) score) empty]\n           \
    \ [(= (cadr strongest) score) empty]\n            [else (set! strongest (list\
    \ x score))])))\n      (car strongest)))\n  (format \"~a.~a\" class_name (find-strongest\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:43:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:44:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\N\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:45:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:46:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:47:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\T\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:48:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:49:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\D\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:50:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\B\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwaj85xc.rkt:51:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (if (empty? extensions)\n      class_name\n      (apply max (map\
    \ (\u03BB (x) \n                        (let ([r (regexp (string-append \"([A-Z]*)([a-z]*)\"\
    ))])\n                          (cond\n                            [(and (regexp-match\
    \ r x)\n                                  (not (empty? (regexp-match r x))))\n\
    \                             (let ([CAP (string->number (cadr (regexp-match r\
    \ x)))])\n                               (let ([SM (string->number (caddr (regexp-match\
    \ r x)))])\n                                 (/ CAP SM)))]\n                 \
    \           [else #f])))))\n                extensions))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgc3q_3lt.rkt:30:28: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; find the strongest extension and return a string in this \n\
    \  ;; format: ClassName.StrongestExtensionName.\n  ;; If there are two or more\
    \ extensions with the same strength, you should\n  ;; choose the one that comes\
    \ first in the list.\n  (define (strength str)\n    (/ (- (count-lowercase str)\
    \ (count-uppercase str)) (count-lowercase str)))\n  (define (count-lowercase str)\n\
    \    (length (filter (lambda (c) (char-lower-case? c)) str)))\n  (define (count-uppercase\
    \ str)\n    (length (filter (lambda (c) (char-upper-case? c)) str)))\n  (define\
    \ (compare-strength str1 str2)\n    (cond [(< (strength str1) (strength str2))\
    \ false]\n          [(> (strength str1) (strength str2)) true]\n          [else\
    \ #t]))\n  (string-append class_name \".\" (vector-ref (vector-sort compare-strength\
    \ extensions) 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\"\
    \ (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal?\
    \ (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\"\
    )) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\" (list\
    \ \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\"\
    )\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\"\
    )) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"\
    781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\"\
    \ (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\"\
    )\n    (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\"\
    \ \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"\
    Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfptxvlhs.rkt:40:4\n\
    \nvector-sort: contract violation\n  expected: vector?\n  given: #<procedure:compare-strength>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfptxvlhs.rkt:41:4\n\nvector-sort: contract violation\n  expected:\
    \ vector?\n  given: #<procedure:compare-strength>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfptxvlhs.rkt:42:4\n\nvector-sort:\
    \ contract violation\n  expected: vector?\n  given: #<procedure:compare-strength>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfptxvlhs.rkt:43:4\n\nvector-sort: contract violation\n  expected:\
    \ vector?\n  given: #<procedure:compare-strength>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfptxvlhs.rkt:44:4\n\nvector-sort:\
    \ contract violation\n  expected: vector?\n  given: #<procedure:compare-strength>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfptxvlhs.rkt:45:4\n\nvector-sort: contract violation\n  expected:\
    \ vector?\n  given: #<procedure:compare-strength>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfptxvlhs.rkt:46:4\n\nvector-sort:\
    \ contract violation\n  expected: vector?\n  given: #<procedure:compare-strength>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfptxvlhs.rkt:47:4\n\nvector-sort: contract violation\n  expected:\
    \ vector?\n  given: #<procedure:compare-strength>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfptxvlhs.rkt:48:4\n\nvector-sort:\
    \ contract violation\n  expected: vector?\n  given: #<procedure:compare-strength>\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([exts (map (lambda (extension)\n                   (let*\
    \ ([upcase (regexp-match* #rx\"[A-Z]\" extension)]\n                         \
    \ [downcase (regexp-match* #rx\"[a-z]\" extension)])\n                     (if\
    \ (empty? upcase)\n                         [0 extension]\n                  \
    \       [(/ (length upcase) (length downcase)) extension])))\n               \
    \  extensions)])\n    (string-append class_name \".\" (second (apply max exts)))))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuco6i8l2.rkt:27:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpuco6i8l2.rkt:27:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  ;; Solve it here!\n  (displayln (string-append class_name \"\
    .\" (list-ref extensions 0)))\n  )\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate Strongest_Extension))\n    (check-equal? (candidate\
    \ \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n\
    \    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: "Watashi.tEN\nBoku123.nani\n__YESIMHERE.t\nK.Ta\n__HAHA.Tab\nYameRore.HhAas\n\
    finNNalLLly.Die\n_.Bb\nSp.671235\n"
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:28:4\n\
    actual:     #<void>\nexpected:   \"Watashi.eIGHt8OKe\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:29:4\n\
    actual:     #<void>\nexpected:   \"Boku123.YEs.WeCaNe\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:30:4\n\
    actual:     #<void>\nexpected:   \"__YESIMHERE.NuLl__\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:31:4\n\
    actual:     #<void>\nexpected:   \"K.TAR\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:32:4\nactual:\
    \     #<void>\nexpected:   \"__HAHA.123\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:33:4\nactual:\
    \     #<void>\nexpected:   \"YameRore.okIWILL123\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:34:4\nactual:\
    \     #<void>\nexpected:   \"finNNalLLly.WoW\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:35:4\nactual:\
    \     #<void>\nexpected:   \"_.Bb\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp12ma9ch7.rkt:36:4\nactual:\
    \     #<void>\nexpected:   \"Sp.671235\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (ext_score ext)\n    (apply - (map (lambda (c) (if (char-upper-case?\
    \ c) 1 0)) ext)))\n  (define (ext_strength ext)\n    (/ (ext_score ext) (string-length\
    \ ext)))\n  (define strongest_ext\n    (for/first ([ext extensions]\n        \
    \        #:when (and (ext_strength ext) (&gt; (ext_strength ext) 0)))\n      ext))\n\
    \  (format \"~a.~a\" class_name strongest_ext))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpah0svjn2.rkt:24:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 28\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (f extension total)\n\
    \      (if (empty? extension)\n          total\n          (if (char-upcase? (first\
    \ extension))\n              (f (rest extension) (+ total 1))\n              (f\
    \ (rest extension) (- total 1)))))\n    (f extension 0))\n  (define (f extensions\
    \ strongest strength_so_far)\n    (if (empty? extensions)\n        (string-append\
    \ class_name \".\" strongest)\n        (let ([extension (first extensions)])\n\
    \          (if (> (strength extension) strength_so_far)\n              (f (rest\
    \ extensions) extension (strength extension))\n              (f (rest extensions)\
    \ strongest strength_so_far)))))\n  (if (empty? extensions)\n      \"No extension\"\
    \n      (f extensions (first extensions) (strength (first extensions)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpacndbkgn.rkt:23:15: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpacndbkgn.rkt:23:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (count-caps string)\n    (for/sum ([char (in-string string)])\n\
    \      (if (char-upper-case? char) 1 0)))\n  (define (count-smalls string)\n \
    \   (for/sum ([char (in-string string)])\n      (if (char-lower-case? char) 1\
    \ 0)))\n  (define (count-strength string)\n    (- (count-caps string) (count-smalls\
    \ string)))\n  (define (strongest-extension-p lst)\n    (define strength_lst (for/list\
    \ ([ext lst])\n                          (cons (count-strength ext) ext)))\n \
    \   (sort strength_lst >))\n  (define (display-strongest-extension lst)\n    (string-append\
    \ class_name \".\" (cdr (car lst))))\n  (display-strongest-extension (strongest-extension-p\
    \ extensions)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list\
    \ \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:40:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(1 . \"tEN\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:41:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(-4 . \"nani\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:42:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(-1 . \"t\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:43:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(0 . \"Ta\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:44:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(-1 . \"Tab\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:45:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(-1 . \"HhAas\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:46:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(-1 . \"Die\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:47:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(0 . \"Bb\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_0k478z.rkt:48:4\n\
    \n>: contract violation\n  expected: real?\n  given: '(0 . \"671235\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (let ([ext_list (map (curry map_class class_name) extensions)])\n\
    \    (for/first ([ext ext_list]\n                #:when (equal? (string-length\
    \ (cdr ext))\n                               (apply max (map (compose string-length\
    \ cdr) ext_list))))\n      (format \"~a.~a\" (car ext) (cdr ext)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
    \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"\
    )) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppcxhq751.rkt:19:30: map_class: unbound identifier\n  in: map_class\n\
    \  location...:\n   /tmp/tmppcxhq751.rkt:19:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (string-append class_name \".\" (car (reverse (sort (map (\u03BB\
    \ (extension) (list extension (round (/ (- (length (regexp-match #rx\"[A-Z]+\"\
    \ extension)) (length (regexp-match #rx\"[a-z]+\" extension)))) 1)))) extensions)\
    \ (\u03BB (ext1 ext2) (equal? (first ext1) (first ext2)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n   \
    \ (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
    \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
    \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
    \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
    \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"\
    K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal?\
    \ (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\"\
    )\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"\
    WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate\
    \ \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\"\
    )\n    (check-equal? (candidate \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n   \
    \ (check-equal? (candidate \"Sp\" (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:26:4\n\
    \nmap: arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:27:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:28:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:29:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:30:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:31:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:32:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:33:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdhz5u_.rkt:34:4\n\nmap:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expe"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (is_uppercase x)\n    (and (char&lt;= #\\A x) (char&lt;=\
    \ x #\\Z)))\n  (define (is_lowercase x)\n    (and (char&lt;= #\\a x) (char&lt;=\
    \ x #\\z)))\n  (define (strength str)\n    (/ (- (apply + (map char-&gt;integer\
    \ (filter is_uppercase str)))\n          (apply + (map char-&gt;integer (filter\
    \ is_lowercase str))))))\n  (string-append class_name \".\" (first (sort extensions\
    \ (\u03BB (x y) \n                                                         (&gt;\
    \ (strength x) \n                                                            (strength\
    \ y)))))))\n</code>\nThe code has no problem, it works as it should, but I want\
    \ to make it faster. \nWhat can I do to make this code faster?\n\n\nA:\n\nI don't\
    \ believe that you can significantly improve the performance of your <code>strength</code>\
    \ function, because we're going to scan the string exactly twice, no matter what.\n\
    The first thing we can do is to use <code>fold</code> instead of <code>apply +</code>\
    \ for the <code>map</code> version, but it's actually a little bit slower:\n<code>(define\
    \ (strength str)\n  (/ (- (fold + 0 (map char-&gt;integer (filter is_uppercase\
    \ str)))\n        (fold + 0 (map char-&gt;integer (filter is_lowercase str))))))\n\
    </code>\nThe second thing that we can do is to take advantage of the fact that\
    \ <code>char-&gt;integer</code> will just return the ASCII code of the character\
    \ if we pass it a character instead of a string - which means that we can just\
    \ <code>fold</code> again, but this time we don't need to worry about <code>is_uppercase</code>\
    \ and <code>is_lowercase</code> - a character is either one or the other, and\
    \ it's easy to write the code to figure that out. We'll also take advantage of\
    \ the fact that a <code>char</code> is an exact integer in Racket.\n<code>(define\
    \ (strength\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ Strongest_Extension))\n    (check-equal? (candidate \"Watashi\" (list \"tEN\"\
    \ \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate\
    \ \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\"\
    )\n    (check-equal? (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\"\
    \ \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal?\
    \ (candidate \"K\" (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n  \
    \  (check-equal? (candidate \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\"\
    )) \"__HAHA.123\")\n    (check-equal? (candidate \"YameRore\" (list \"HhAas\"\
    \ \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\")) \"YameRore.okIWILL123\")\n  \
    \  (check-equal? (candidate \"finNNalLLly\" (list \"Die\" \"NowW\" \"Wow\" \"\
    WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate \"_\" (list \"Bb\"\
    \ \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\" (list \"671235\"\
    \ \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmbtfwhn6.rkt:43:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 44\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You will be given the name of a class (a string) and\
    \ a list of extensions.\n;; The extensions are to be used to load additional classes\
    \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n;; in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
    \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there\
    \ are two or more extensions with the same strength, you should\n;; choose the\
    \ one that comes first in the list.\n;; For example, if you are given \"Slices\"\
    \ as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
    \ extensions)\n  (define (strength extension)\n    (define (count-upper-case str)\n\
    \      (for/fold ([result 0])\n                ([ch (in-string str)])\n      \
    \  (if (char-upper-case? ch) (add1 result) result)))\n    (define (count-lower-case\
    \ str)\n      (for/fold ([result 0])\n                ([ch (in-string str)])\n\
    \        (if (char-lower-case? ch) (add1 result) result)))\n    (if (&gt; (count-upper-case\
    \ extension) (count-lower-case extension))\n        (- (count-upper-case extension)\
    \ (count-lower-case extension))\n        (- (count-lower-case extension) (count-upper-case\
    \ extension))))\n  (define (strongest-extension extension)\n    (if (null? (cdr\
    \ extension)) (car extension)\n        (if (&gt; (strength (car extension)) (strength\
    \ (cadr extension)))\n            (strongest-extension (cons (car extension) (cddr\
    \ extension)))\n            (strongest-extension (cdr extension)))))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n    (check-equal?\
    \ (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\")) \"Watashi.eIGHt8OKe\"\
    )\n    (check-equal? (candidate \"Boku123\" (list \"nani\" \"NazeDa\" \"YEs.WeCaNe\"\
    \ \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal? (candidate \"__YESIMHERE\"\
    \ (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\" \"123NoooneB321\")) \"\
    __YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\" (list \"Ta\" \"TAR\"\
    \ \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate \"__HAHA\" (list\
    \ \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal? (candidate\
    \ \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"-_-\"))\
    \ \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
    \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
    \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
    \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkbh43zrp.rkt:19:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 31\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
