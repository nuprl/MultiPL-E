name: HumanEval_57_monotonic
language: rkt
results:
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-iter l state)\n    (cond\n      [(null? l) (not state)]\n\
    \      [(or (= (car l) (cadr l)) (< (car l) (cadr l)) (> (car l) (cadr l)))\n\
    \       (monotonic-iter (cdr l) #t)]\n      [else #f]))\n  (if (null? l) #t (monotonic-iter\
    \ (cdr l) #t)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpszvkmslp.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpszvkmslp.rkt:25:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszvkmslp.rkt:26:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpszvkmslp.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpszvkmslp.rkt:28:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszvkmslp.rkt:29:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpszvkmslp.rkt:30:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpszvkmslp.rkt:31:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([monotonic? (cond [(equal? (first l) (second l)) #t]\n         \
    \                 [(< (first l) (second l)) (lambda (l) (and (not (negative? (cadr\
    \ l)))\n                                                                     \
    \ (monotonic (cdr l))))]\n                          [else (lambda (l) (and (not\
    \ (positive? (cadr l)))\n                                                 (monotonic\
    \ (cdr l))))])])\n    (if (null? (cdr l))\n        #t\n        (monotonic? l))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:30:4\n\nsecond: list contains\
    \ too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyalxy0zl.rkt:31:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((= (length l) 1)\n         #t)\n        ((= (length l) 2)\n   \
    \      (if (< (car l) (cadr l))\n             #t\n             #f))\n        (else\n\
    \         (let ((diff (dif-helper l)))\n           (cond ((= (abs diff) (length\
    \ l))\n                  #t)\n                 ((> diff 0)\n                 \
    \ (monotonic (cdr l)))\n                 ((< diff 0)\n                  (monotonic\
    \ (reverse l))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq4_myc71.rkt:18:22: dif-helper: unbound identifier\n  in: dif-helper\n\
    \  location...:\n   /tmp/tmpq4_myc71.rkt:18:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(or (=\
    \ (first l) (first (rest l))) (< (first l) (first (rest l)))) (monotonic (rest\
    \ l))]\n    [(or (= (first l) (first (rest l))) (> (first l) (first (rest l))))\
    \ (monotonic (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8afiljz.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe8afiljz.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (inc x y) (< x y))\n  (define (dec x y) (> x y))\n  (define (cmp?\
    \ x y)\n    (or (inc x y) (dec x y)))\n  (define (mono? x y)\n    (not (and (cmp?\
    \ x y) (cmp? y x))))\n  (or (apply mono? l) (apply cmp? l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:24:4\n\
    \nmono?: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:25:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:26:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:27:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:28:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:29:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:30:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9g2mm50g.rkt:31:4\n\nmono?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 4\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      true\n      (if (null? (cdr l))\n          true\n\
    \          (let ([c1 (car l)]\n                [c2 (car (cdr l))])\n         \
    \   (if (&lt; c1 c2)\n                (monotonic (cdr l))\n                (if\
    \ (&gt; c1 c2)\n                    (monotonic (cdr l))\n                    false))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0mvu818c.rkt:11:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([prev (first l)])\n    (for/and ([el (in-list (rest l))])\n    \
    \  (and (or (> el prev) (< el prev)) (set! prev el)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:20:4\n\
    actual:     #<void>\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:21:4\nactual:\
    \     #<void>\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:22:4\nactual:     #<void>\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:23:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:24:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx7kt7ncb.rkt:25:4\nactual:     #<void>\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:26:4\n\
    actual:     #<void>\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7kt7ncb.rkt:27:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (let* ((current (car l))\n            \
    \ (rest (cdr l))\n             (increasing? (lambda (last current)\n         \
    \                   (if (null? current)\n                                #t\n\
    \                                (and (<= last (car current))\n              \
    \                       (increasing? (car current) (cdr current))))))\n      \
    \       (decreasing? (lambda (last current)\n                            (if (null?\
    \ current)\n                                #t\n                             \
    \   (and (>= last (car current))\n                                     (decreasing?\
    \ (car current) (cdr current)))))))\n        (or (increasing? current rest)\n\
    \            (decreasing? current rest)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc65ltadr.rkt:19:38: increasing?: unbound identifier\n  in: increasing?\n\
    \  location...:\n   /tmp/tmpc65ltadr.rkt:19:38\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(= (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [(> (car l) (cadr l)) (monotonic (cdr l))]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacjwnug.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxacjwnug.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (increasing? l) (decreasing? l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf2sm7t5y.rkt:11:7: increasing?: unbound identifier\n  in: increasing?\n\
    \  location...:\n   /tmp/tmpf2sm7t5y.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) True]\n        [(null? (cdr l)) True]\n        [(> (car\
    \ l) (cadr l)) (monotonic (cdr l))]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else False]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp89063nox.rkt:11:19: True: unbound identifier\n  in: True\n  location...:\n\
    \   /tmp/tmp89063nox.rkt:11:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #t)\n    ((and (< (car\
    \ l) (cadr l))\n          (monotonic (cdr l))) #t)\n    ((and (> (car l) (cadr\
    \ l))\n          (monotonic (cdr l))) #t)\n    (else #f)))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpctydfjx8.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpctydfjx8.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpctydfjx8.rkt:29:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpctydfjx8.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([l l] [increasing? #t] [decreasing? #t])\n    (cond\n     \
    \ [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(and (and increasing? (and\
    \ (number? (car l))\n                                  (number? (cadr l))\n  \
    \                                (< (car l) (cadr l))))\n            (and decreasing?\
    \ (and (number? (car l))\n                                  (number? (cadr l))\n\
    \                                  (> (car l) (cadr l)))))\n       (loop (cdr\
    \ l) #t #t)]\n      [(and (and increasing? (and (number? (car l))\n          \
    \                        (number? (cadr l))\n                                \
    \  (< (car l) (cadr l))))\n            (decreasing? (and (number? (car l))\n \
    \                             (number? (cadr l))\n                           \
    \   (> (car l) (cadr l)))))\n       (loop (cdr l) #t #f)]\n      [(and (and increasing?\
    \ (and (number? (car l))\n                                  (number? (cadr l))\n\
    \                                  (< (car l) (cadr l))))\n            (not decreasing?))\n\
    \       (loop (cdr l) #t #t)]\n      [(and (and decreasing? (and (number? (car\
    \ l))\n                                  (number? (cadr l))\n                \
    \                  (> (car l) (cadr l))))\n            (not increasing?))\n  \
    \     (loop (cdr l) #f #t)]\n      [(and (and decreasing? (and (number? (car l))\n\
    \                                  (number? (cadr l))\n                      \
    \            (> (car l) (cadr l))))\n            (not increasing?))\n       (loop\
    \ (cdr l) #f #t)]\n      [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:51:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:52:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk4iiorm1.rkt:53:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:54:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:55:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:56:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:57:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk4iiorm1.rkt:58:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else false]))\n```\n\n[Back to problem](#P42)\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr0h_a57j.rkt:19:18: read-syntax: bad syntax `#P`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (and (>=\
    \ (car l) (car (cdr l))) (monotonic (cdr l)))\n          (and (<= (car l) (car\
    \ (cdr l))) (monotonic (cdr l)))) #t]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxc9z56j.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphxc9z56j.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphxc9z56j.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphxc9z56j.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxc9z56j.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first\
    \ l) (second l)) (monotonic-decreasing l)]\n        [(< (first l) (second l))\
    \ (monotonic-increasing l)]\n        [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi35gswpo.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpi35gswpo.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (iter l first second increasing)\n    (cond\n      [(empty? l)\
    \ #t]\n      [(> first second)\n       (and\n        (equal? increasing #f)\n\
    \        (iter (rest l) second (first l) #f))]\n      [(< first second)\n    \
    \   (and\n        (equal? increasing #t)\n        (iter (rest l) second (first\
    \ l) #t))]\n      [else #f]))\n  (and (not (empty? l))\n       (iter (rest l)\
    \ (first l) (first l) #t)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vjoz5p2.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2vjoz5p2.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2vjoz5p2.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2vjoz5p2.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vjoz5p2.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2vjoz5p2.rkt:38:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (>=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n```\n\n### Problem 8\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp976eoscb.rkt:19:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #f]\n    [(and (negative? (first l)) (positive?\
    \ (second l))) #f]\n    [(and (positive? (first l)) (negative? (second l))) #f]\n\
    \    [else (monotonic (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:22:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:23:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:27:4\n\nsecond: list\
    \ contains too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:28:4\n\nsecond:\
    \ list contains too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpafwdzmxu.rkt:29:4\n\nsecond:\
    \ list contains too few elements\n  list: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (empty? l)\n      #t\n      (define (monotonic-helper l dir)\n   \
    \     (if (empty? l)\n            #t\n            (if (equal? dir 'down)\n   \
    \             (and (>= (car l) (cadr l)) (monotonic-helper (cdr l) dir))\n   \
    \             (and (<= (car l) (cadr l)) (monotonic-helper (cdr l) dir)))))\n\
    \      (if (and (> (car l) (cadr l)) (< (car l) (cadr l)))\n          #f\n   \
    \       (if (> (car l) (cadr l))\n              (monotonic-helper (cdr l) 'down)\n\
    \              (monotonic-helper (cdr l) 'up)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2z44a86d.rkt:11:2: if: bad syntax\n  in: (if (empty? l) #t (define\
    \ (monotonic-helper l dir) (if (empty? l) #t (if (equal? dir (quote down)) (and\
    \ (>= (car l) (cadr l)) (monotonic-helper (cdr l) dir)) (and (<= (car l) (cadr\
    \ l)) (monotonic-helper (cdr l) dir))))) (if (and (> (car l) (cadr l)) (< ...\n\
    \  location...:\n   /tmp/tmp2z44a86d.rkt:11:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (= (length l) 1)\n      #t\n      (if (list? (rest l))\n         \
    \ (if (and (>= (car l) (car (rest l)))\n                   (monotonic (rest l)))\n\
    \              #t\n              #f)\n          #f)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf97v4u7j.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf97v4u7j.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf97v4u7j.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (iter l f)\n    (if (or (empty? l) (empty? (cdr l))) #t\n    \
    \    (if (f (car l) (cadr l)) (iter (cdr l) f) #f)))\n  (let ((cmp (apply-generic\
    \ > l)))\n    (if (eq? cmp <) (iter l >) (iter l <))))\n```\n\n```racket\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzm9sa9d9.rkt:19:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (mo? l acc)\n    (if (null? l)\n        #t\n        (cond\n  \
    \       [(= (car l) (car acc)) (mo? (cdr l) acc)]\n         [(> (car l) (car acc))\
    \ (mo? (cdr l) (cons (car l) acc))]\n         [(< (car l) (car acc)) (mo? (cdr\
    \ l) (cons (car l) acc))]\n         [else #f])))\n  (mo? (cdr l) (list (car l))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk9o3c11_.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk9o3c11_.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([l l] [i 0])\n    (if (&lt; i (length l))\n        (let ([v\
    \ (nth l i)])\n          (if (&lt; i 1)\n              (loop l (+ i 1))\n    \
    \          (let ([prev (nth l (- i 1))])\n                (if (&lt; v prev)\n\
    \                    (if (for/and ([i (in-range 0 (- i 1))])\n               \
    \                  (&lt; (nth l i) prev))\n                        #t\n      \
    \                  #f)\n                    (if (for/and ([i (in-range 0 (- i\
    \ 1))])\n                                 (&gt; (nth l i) prev))\n           \
    \             #t\n                        #f)))))\n        #t)))\n</code>\nIs\
    \ there a cleaner way to accomplish this?\n\n\nA:\n\nA few other observations:\n\
    \nThere's no reason for <code>i</code> to be an index. You could just as well\
    \ write <code>(loop (cdr l) (car l))</code>.\nYou can use <code>&lt;=</code> in\
    \ your innermost <code>if</code>'s instead of <code>&lt;</code> and <code>&gt;</code>.\n\
    You can get rid of the inner <code>if</code>'s and use a <code>cond</code> instead.\n\
    \nHere's what I got:\n<code>(define (monotonic l)\n  (let loop ([l l] [prev undefined])\n\
    \    (cond\n      [(empty? l) #t]\n      [(and (defined? prev) (zero? (- (car\
    \ l) prev))) #f]\n      [else (loop (cdr l) (car l))])))\n</code>\nAnd here's\
    \ a one-liner that uses the <code>in-order?</code> procedure from <code>racket/list</code>:\n\
    <code>(define (monotonic l)\n  (in-order? &lt;= l))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpggejkck_.rkt:49:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 50\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((empty? l) #t)\n        ((= (length l) 1) #t)\n        ((= (length\
    \ l) 2) \n         (or (= (first l) (second l))\n             (= (first l) (-\
    \ (second l) 1))\n             (= (first l) (+ (second l) 1))))\n        (else\n\
    \         (let ([a (first l)]\n               [b (second l)])\n           (cond\
    \ ((= a b) (monotonic (rest l)))\n                 ((< a b) (and (monotonic (rest\
    \ l))\n                               (< (first (rest l)) (second (rest l)))))\n\
    \                 ((> a b) (and (monotonic (rest l))\n                       \
    \        (> (first (rest l)) (second (rest l))))))))))\n```\n\n### Solution 4\n\
    \n```#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5adqe3rl.rkt:27:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic' l incr)\n    (cond\n      [(empty? l) true]\n    \
    \  [(= 1 (length l)) true]\n      [(and (empty? (rest l)) (cons? (rest l))) true]\n\
    \      [(if incr\n           (<= (first l) (first (rest l)))\n           (>= (first\
    \ l) (first (rest l))))\n       (monotonic' (rest l) incr)]\n      [else false]))\n\
    \  (cond\n    [(empty? l) true]\n    [(= 1 (length l)) true]\n    [(and (empty?\
    \ (rest l)) (cons? (rest l))) true]\n    [(and (<= (first l) (first (rest l)))\n\
    \          (>= (first l) (first (rest l))))\n     true]\n    [(and (< (first l)\
    \ (first (rest l)))\n          (monotonic' (rest l) true))]\n    [(and (> (first\
    \ l) (first (rest l)))\n          (monotonic' (rest l) false))]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuyrc5fht.rkt:11:24: define: default-value expression missing\n\
    \  at: incr\n  in: (define (monotonic (quote l) incr) (cond ((empty? l) true)\
    \ ((= 1 (length l)) true) ((and (empty? (rest l)) (cons? (rest l))) true) ((if\
    \ incr (<= (first l) (first (rest l))) (>= (first l) (first (rest l)))) (monotonic\
    \ (quote (rest l)) incr)) (else false)))\n  location...:\n   /tmp/tmpuyrc5fht.rkt:11:24\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:73:58:\
    \ try-next\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:45:33:\
    \ simple-proto\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:133:33:\
    \ general-proto\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:16:6:\
    \ try-next\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:165:4:\
    \ normalize-definition\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1117:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprnu4kwc8.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprnu4kwc8.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprnu4kwc8.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprnu4kwc8.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(= (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(or (= (first l) (+ (second l) 1))\
    \ (= (first l) (- (second l) 1)))\n     (monotonic (rest l))]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz0268lqq.rkt:24:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz0268lqq.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz0268lqq.rkt:27:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz0268lqq.rkt:28:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz0268lqq.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (define (helper l1 l2)\n        (if (null?\
    \ l1)\n            #t\n            (if (<= (car l1) (car l2))\n              \
    \  (helper (cdr l1) (cdr l2))\n                #f)))\n      (helper (rest l) l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjunj4m3w.rkt:11:2: if: bad syntax\n  in: (if (null? l) #t (define\
    \ (helper l1 l2) (if (null? l1) #t (if (<= (car l1) (car l2)) (helper (cdr l1)\
    \ (cdr l2)) #f))) (helper (rest l) l))\n  location...:\n   /tmp/tmpjunj4m3w.rkt:11:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(< (second\
    \ l) (first l))\n     (monotonic-decreasing (cdr l))]\n    [(> (second l) (first\
    \ l))\n     (monotonic-increasing (cdr l))]\n    [else\n     #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9cnyy1gk.rkt:15:6: monotonic-decreasing: unbound identifier\n \
    \ in: monotonic-decreasing\n  location...:\n   /tmp/tmp9cnyy1gk.rkt:15:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((= (length l) 1) #t)\n        ((not (eq?\
    \ (signum (sub1 (first l))) (signum (sub1 (second l))))) #f)\n        (else (monotonic\
    \ (rest l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprk9qzmno.rkt:13:20: signum: unbound identifier\n  in: signum\n\
    \  location...:\n   /tmp/tmprk9qzmno.rkt:13:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(or (empty? l) (empty? (rest l))) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4mb2xibl.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4mb2xibl.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4mb2xibl.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4mb2xibl.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((null? (cdr l)) #t)\n        ((< (car l)\
    \ (cadr l)) (monotonic (cdr l)))\n        ((> (car l) (cadr l)) (monotonic (cdr\
    \ l)))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppgzvrt1g.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppgzvrt1g.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppgzvrt1g.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppgzvrt1g.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (empty? l)\n      #t\n      (let ([is-increasing (positive? (car l))])\n\
    \        (for/and ([x (cdr l)])\n          (cond\n            [(positive? x) is-increasing]\n\
    \            [(negative? x) (not is-increasing)]\n            [else (error 'monotonic\
    \ \"Impossible case\")])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7ezssxh.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph7ezssxh.rkt:28:4\n\nmonotonic:\
    \ Impossible case\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph7ezssxh.rkt:29:4\n\nmonotonic: Impossible\
    \ case\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmph7ezssxh.rkt:30:4\nactual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(or (and (null? (cdr l)) true)\n    \
    \         (and (monotonic (cdr l))\n                  (or (and (= (car l) (- (cadr\
    \ l) 1)) true)\n                      (and (= (car l) (+ (cadr l) 1)) true)\n\
    \                      (and (= (car l) (cadr l)) true)\n                     \
    \ false))) true]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqznul4zj.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqznul4zj.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqznul4zj.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqznul4zj.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqznul4zj.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ((current (first l))\n        (increasing? (first l &lt;= (second\
    \ l))))\n    (for/and ([next (in-list (rest l))])\n      (if increasing?\n   \
    \       (&lt;= current next)\n          (&gt;= current next)))))\n</code>\nAll\
    \ the tests pass successfully.\n\n\nA:\n\nYou used <code>for/and</code> and <code>in-list</code>\
    \ where you probably don't need to. The following code should work just as well\
    \ without all the extra baggage.\n<code>(define (monotonic l)\n  (let ([current\
    \ (first l)]\n        [increasing? (first l &lt;= (second l))])\n    (andmap (\u03BB\
    \ (next)\n              (if increasing?\n                  (&lt;= current next)\n\
    \                  (&gt;= current next)))\n            (rest l))))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphicc3sn9.rkt:27:12: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(= (length l) 1) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf4sxv3cn.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf4sxv3cn.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf4sxv3cn.rkt:26:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf4sxv3cn.rkt:28:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (all-increasing l)\n    (or (null? l)\n        (and (null? (cdr\
    \ l))\n             true)\n        (and (<= (car l) (cadr l))\n             (all-increasing\
    \ (cdr l)))))\n  (define (all-decreasing l)\n    (or (null? l)\n        (and (null?\
    \ (cdr l))\n             true)\n        (and (>= (car l) (cadr l))\n         \
    \    (all-decreasing (cdr l)))))\n  (or (all-increasing l)\n      (all-decreasing\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(number?\
    \ (first l))\n         (if (and (= (first l) (second l)) (monotonic (rest l)))\n\
    \             true\n             (if (and (< (first l) (second l)) (monotonic\
    \ (rest l)))\n                 true\n                 (if (and (> (first l) (second\
    \ l)) (monotonic (rest l)))\n                     true\n                     false)))]\n\
    \        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoeh5uqv0.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoeh5uqv0.rkt:33:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(null? (cddr\
    \ l)) #t]\n        [else\n         (let* ([diffs (map - (cdr l) l)]\n        \
    \        [inc (not (member -1 diffs))]\n                [dec (not (member 1 diffs))])\n\
    \           (or inc dec))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:25:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:26:4\n\nmap:\
    \ all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:27:4\n\nmap:\
    \ all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:28:4\n\nmap:\
    \ all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:29:4\n\nmap:\
    \ all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:30:4\n\nmap:\
    \ all lists must have same size\n  first list length: 5\n  other list length:\
    \ 6\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:31:4\n\nmap:\
    \ all lists must have same size\n  first list length: 5\n  other list length:\
    \ 6\n  procedure: #<procedure:->\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsq7s9s3u.rkt:32:4\n\nmap:\
    \ all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:->\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((null? (cdr l)) #t)\n        ((> (car l)\
    \ (cadr l))\n         (and (monotonic (cdr l)) (or (positive? (car l)) (negative?\
    \ (cadr l)))))\n        ((< (car l) (cadr l))\n         (and (monotonic (cdr l))\
    \ (or (negative? (car l)) (positive? (cadr l)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uqne0eq.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2uqne0eq.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2uqne0eq.rkt:30:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (andmap\n   (\u03BB (x y) (or (> x y) (< x y)))\n   l\n   (rest l)))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:20:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:21:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:22:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:23:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:24:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:25:4\n\
    \nandmap: all lists must have same size\n  first list length: 6\n  other list\
    \ length: 5\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:26:4\n\
    \nandmap: all lists must have same size\n  first list length: 6\n  other list\
    \ length: 5\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps377pt31.rkt:27:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmps377pt31.rkt:12:3>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_b2f9or.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz_b2f9or.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz_b2f9or.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz_b2f9or.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (<= (car\
    \ l) (cadr l)) (monotonic (cdr l))) #t]\n    [(and (>= (car l) (cadr l)) (monotonic\
    \ (cdr l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsvrgv2o.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfsvrgv2o.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (f result a b)\n    (cond\n      [(empty? l) result]\n      [(or\
    \ (and (zero? result) (> a b))\n           (and (> result 0) (> b a))\n      \
    \     (and (< result 0) (< b a))) #f]\n      [else (f (if (> a b) 1 -1) b (car\
    \ l))]))\n  (if (null? l) #t\n      (f 0 (car l) (cadr l))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn5cwxiqx.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn5cwxiqx.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpn5cwxiqx.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn5cwxiqx.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn5cwxiqx.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([lst l] [increasing? #t] [decreasing? #t])\n    (cond [(empty?\
    \ lst)\n           (or increasing? decreasing?)]\n          [(null? (cdr lst))\n\
    \           (or increasing? decreasing?)]\n          [(and increasing? (< (car\
    \ lst) (cadr lst)))\n           (loop (cdr lst) #t #f)]\n          [(and decreasing?\
    \ (> (car lst) (cadr lst)))\n           (loop (cdr lst) #f #t)]\n          [else\
    \ #f])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptdxhcx5o.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptdxhcx5o.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl1c1pf5l.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmpl1c1pf5l.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     #t]\n    [(= (length l) 1)\n     #t]\n  \
    \  [(and (= (length l) 2)\n          (<= (first l) (second l)))\n     #t]\n  \
    \  [(and (= (length l) 2)\n          (>= (first l) (second l)))\n     #t]\n  \
    \  [(<= (first l) (second l))\n     (monotonic (rest l))]\n    [(>= (first l)\
    \ (second l))\n     (monotonic (rest l))]\n    [else\n     #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1xl14mh2.rkt:36:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1xl14mh2.rkt:39:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(and (<=\
    \ (car l) (cadr l))\n              (monotonic (cdr l))) #t]\n        [(and (>=\
    \ (car l) (cadr l))\n              (monotonic (cdr l))) #t]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbik1she0.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbik1she0.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (compare l n)\n    (cond [(empty? l) true]\n          [(or (<\
    \ n (first l)) (> n (first l))) false]\n          [else (compare (rest l) (first\
    \ l))]))\n  (compare (rest l) (first l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3cbwrfhg.rkt:22:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3cbwrfhg.rkt:23:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3cbwrfhg.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3cbwrfhg.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3cbwrfhg.rkt:28:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let* ((len (length l))\n         (increasing? (apply (lambda (a b) (<\
    \ a b)) (take (sub1 len) l)))\n         (decreasing? (apply (lambda (a b) (> a\
    \ b)) (take (sub1 len) l))))\n    (or increasing? decreasing?)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:21:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1\
    \ 2 4 10)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:22:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1\
    \ 2 4 20)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:23:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1\
    \ 20 4 10)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:24:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(4\
    \ 1 0 -10)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:25:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(4\
    \ 1 1 0)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:26:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1\
    \ 2 3 2 5 60)\n  argument position: 2nd\n  other arguments...:\n   5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:27:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1\
    \ 2 3 4 5 60)\n  argument position: 2nd\n  other arguments...:\n   5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgakzgr7n.rkt:28:4\n\
    \ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(9\
    \ 9 9 9)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l))\n     (if (empty? (rest (rest l)))\n         true\n         (if\
    \ (and (> (second l) (third l)) (monotonic (rest (rest l))))\n             true\n\
    \             false))]\n    [(< (first l) (second l))\n     (if (empty? (rest\
    \ (rest l)))\n         true\n         (if (and (< (second l) (third l)) (monotonic\
    \ (rest (rest l))))\n             true\n             false))]\n    [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9cufdo7.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn9cufdo7.rkt:40:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic_helper lst asc)\n    (cond\n      [(null? lst) (if\
    \ asc #t #f)]\n      [(null? (cdr lst)) #t]\n      [(and (> (car lst) (cadr lst))\
    \ (or asc #f))\n       (monotonic_helper (cdr lst) #f)]\n      [(and (< (car lst)\
    \ (cadr lst)) (or (not asc) #f))\n       (monotonic_helper (cdr lst) #t)]\n  \
    \    [else #f]))\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(=\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic_helper\
    \ (cdr l) #f)]\n    [else (monotonic_helper (cdr l) #t)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj03kfbm9.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj03kfbm9.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj03kfbm9.rkt:34:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj03kfbm9.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj03kfbm9.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj03kfbm9.rkt:38:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([len (length l)])\n    (define (m l i)\n      (if (< i len)\n  \
    \      (if (or (< (list-ref l i) (list-ref l (+ i 1)))\n                (> (list-ref\
    \ l i) (list-ref l (+ i 1))))\n          (m l (+ i 1))\n          #f)\n      \
    \  #t))\n    (m l 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:26:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(1 2 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:27:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(1 2 4 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:28:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(1 20 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:29:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 1 0 -10)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:31:4\n\nlist-ref: index\
    \ too large for list\n  index: 6\n  in: '(1 2 3 2 5 60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:32:4\n\
    \nlist-ref: index too large for list\n  index: 6\n  in: '(1 2 3 4 5 60)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b8na3nb.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l first-element)\n    (cond\n      [(null? l)\
    \ true]\n      [(> (car l) first-element) (monotonic-helper (cdr l) (car l))]\n\
    \      [(< (car l) first-element) (monotonic-helper (cdr l) (car l))]\n      [else\
    \ false]))\n  (monotonic-helper (cdr l) (car l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynij1gz6.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpynij1gz6.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpynij1gz6.rkt:29:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpynij1gz6.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (same-sign n)\n    (cond ((= n 0) true)\n          ((> n 0) 'positive)\n\
    \          ((< n 0) 'negative)))\n  (if (null? l)\n      true\n      (let* ([rest\
    \ (cdr l)]\n             [first (car l)]\n             [sign (same-sign (- (car\
    \ rest) first))])\n        (if (null? rest)\n            true\n            (and\
    \ (cond ((eq? sign 'positive) (> (- (car rest) first) 0))\n                  \
    \     ((eq? sign 'negative) (< (- (car rest) first) 0)))\n                 (monotonic\
    \ rest))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvra5gq6.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9j9rqe1b.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmp9j9rqe1b.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(not (= (cadr\
    \ l) (car l)))\n         (monotonic (cdr l))]\n        [else\n         (and (null?\
    \ (memq (cadr l) (cddr l)))\n              (monotonic (cdr l)))]))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6zf7b78p.rkt:18:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp6zf7b78p.rkt:18:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l)\n         true]\n        [(= (length l) 1)\n       \
    \  true]\n        [(< (length l) 3)\n         (or (= (first l) (second l))\n \
    \            (and (zero? (modulo (first l) (second l)))\n                  (=\
    \ (first l) (* (second l) -1))))]\n        [else\n         (let ([c (modulo (first\
    \ l) (second l))])\n           (if (zero? c)\n               (or (= (first l)\
    \ (second l))\n                   (and (zero? (modulo (first l) (third l)))\n\
    \                        (= (first l) (* (third l) -1))))\n               (let\
    \ ([c2 (modulo (second l) (third l))])\n                 (if (zero? c2)\n    \
    \                 (or (= (second l) (third l))\n                         (and\
    \ (zero? (modulo (second l) (last l)))\n                              (= (second\
    \ l) (* (last l) -1))))\n                     (and (or (= (first l) (second l))\n\
    \                              (and (zero? (modulo (first l) (third l)))\n   \
    \                                (= (first l) (* (third l) -1))))\n          \
    \                (or (= (second l) (third l))\n                              (and\
    \ (zero? (modulo (second l) (last l)))\n                                   (=\
    \ (second l) (* (last l) -1)))))))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphu454_5r.rkt:42:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphu454_5r.rkt:43:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmphu454_5r.rkt:45:4\n\nmodulo: division by\
    \ zero\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphu454_5r.rkt:46:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphu454_5r.rkt:48:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (and (monotonic (cdr l)) (<= (car l) (cadr l)))]\n    [(< (car l) (cadr\
    \ l)) (and (monotonic (cdr l)) (>= (car l) (cadr l)))]\n    [else (monotonic (cdr\
    \ l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjatys2_k.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjatys2_k.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjatys2_k.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjatys2_k.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjatys2_k.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ((trend (cons 'up l)))\n    (cond\n      [(null? l) #t]\n      [(null?\
    \ (cdr l)) #t]\n      [(and (cons? trend)\n            (or (and (< (car trend)\
    \ (cadr trend))\n                     (monotonic (cdr l)))\n                (and\
    \ (> (car trend) (cadr trend))\n                     (monotonic (cdr l)))))\n\
    \       #t]\n      [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:28:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:29:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:30:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:31:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:32:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:33:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:34:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp947i1efc.rkt:35:4\n\
    \n<: contract violation\n  expected: real?\n  given: 'up\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      true\n      (if (< (car l) (cadr l))\n          (monotonic\
    \ (cdr l))\n          (if (< (car l) (cadr l))\n              (monotonic (cdr\
    \ l))\n              true))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpkhkxyz.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpkhkxyz.rkt:25:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxpkhkxyz.rkt:26:4\nactual:\
    \     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxpkhkxyz.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpxpkhkxyz.rkt:30:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (inc? l)\n    (if (null? (cdr l))\n        #t\n        (if (<\
    \ (car l) (cadr l))\n            (inc? (cdr l))\n            #f)))\n  (define\
    \ (dec? l)\n    (if (null? (cdr l))\n        #t\n        (if (> (car l) (cadr\
    \ l))\n            (dec? (cdr l))\n            #f)))\n  (or (inc? l) (dec? l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3fw9_4r.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk3fw9_4r.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l)\n     #t]\n    [(null? (cdr l))\n     #t]\n    [(and\
    \ (>= (car l) (cadr l)) (monotonic (cdr l)))\n     #t]\n    [(and (<= (car l)\
    \ (cadr l)) (monotonic (cdr l)))\n     #t]\n    [else\n     #f]))\n```\n\n```\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjhzu9jql.rkt:25:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (helper lst)\n    (cond [(empty? lst)\n           #t]\n      \
    \    [(and (empty? (rest lst))\n                #t)\n           #t]\n        \
    \  [(and (empty? (rest (rest lst)))\n                (cons? (rest lst))\n    \
    \            #t)\n           #t]\n          [(and (< (first lst) (second lst))\n\
    \                (helper (rest lst)))\n           #t]\n          [(and (> (first\
    \ lst) (second lst))\n                (helper (rest lst)))\n           #t]\n \
    \         [else\n           #f]))\n  (helper l))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0fyni021.rkt:37:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0fyni021.rkt:39:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0fyni021.rkt:40:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0fyni021.rkt:42:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l) #t\n      (letrec ([inc (cons #t (map (\u03BB (x y) (< x\
    \ y)) (cdr l) l))]\n               [dec (cons #t (map (\u03BB (x y) (> x y)) (cdr\
    \ l) l))])\n        (or (andmap identity inc)\n            (andmap identity dec)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:22:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:23:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:24:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:25:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:26:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:27:4\n\
    \nmap: all lists must have same size\n  first list length: 5\n  other list length:\
    \ 6\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:28:4\n\
    \nmap: all lists must have same size\n  first list length: 5\n  other list length:\
    \ 6\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfzea2n1_.rkt:29:4\n\
    \nmap: all lists must have same size\n  first list length: 3\n  other list length:\
    \ 4\n  procedure: #<procedure:...tmp/tmpfzea2n1_.rkt:12:34>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9ftszl79.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmp9ftszl79.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (apply <= l)\n      (apply >= l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) (error \"empty list\")]\n        [(null? (cdr l)) #t]\n\
    \        [(< (car l) (cadr l))\n         (for/and ([el (in-list (cdr l))])\n \
    \          (<= (car l) el))]\n        [(> (car l) (cadr l))\n         (for/and\
    \ ([el (in-list (cdr l))])\n           (>= (car l) el))]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpevizwqul.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpevizwqul.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpevizwqul.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(= (length l) 1) #t]\n        [(and (monotonic\
    \ (rest l))\n              (or (= (first l) (first (rest l)))\n              \
    \    (< (first l) (first (rest l))))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9vave77x.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9vave77x.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (match (length l)\n    [(> 2)\n     (cond [(> (first l) (second l)) (and\
    \ (monotonic (rest l)) (< (first l) (second l)))]\n           [else (and (monotonic\
    \ (rest l)) (> (first l) (second l)))])]\n    [(= 2) (or (> (first l) (second\
    \ l)) (< (first l) (second l)))]\n    [else #t]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpugydj3n3.rkt:12:5: match: syntax error in pattern\n  in: (> 2)\n\
    \  location...:\n   /tmp/tmpugydj3n3.rkt:12:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (sign x)\n    (if (< x 0) -1\n        (if (> x 0) 1\n        \
    \    0)))\n  (for/or ([i (in-range (length l))])\n    (if (= i 0)\n        #t\n\
    \        (let ([prev (list-ref l (- i 1))]\n              [curr (list-ref l i)])\n\
    \          (= (sign (- curr prev))\n             (sign (- (list-ref l 0)\n   \
    \                   (list-ref l 1))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg7f0jji8.rkt:31:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg7f0jji8.rkt:34:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) 'True)\n        ((null? (cdr l)) 'True)\n        ((>\
    \ (car l) (cadr l)) (monotonic (cdr l)))\n        ((< (car l) (cadr l)) (monotonic\
    \ (cdr l)))\n        (else 'False)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:21:4\n\
    actual:     'True\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:22:4\nactual:\
    \     'True\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:23:4\nactual:     'True\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:24:4\nactual:     'True\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:25:4\nactual:     'False\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:26:4\nactual:     'True\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:27:4\nactual:     'True\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd6vs3pv.rkt:28:4\nactual:     'False\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (all < l))]\n    [(< (first l) (second l)) (and (monotonic (rest l))\
    \ (all > l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx_9vh_qz.rkt:15:57: all: unbound identifier\n  in: all\n  location...:\n\
    \   /tmp/tmpx_9vh_qz.rkt:15:57\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([diff (map (lambda (x y) (- x y)) (cdr l) l)])\n    (eq? '() diff)\n\
    \    (equal? (remp diff (lambda (x) (<= x 0))) (remp diff (lambda (x) (> x 0))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb6uu8kam.rkt:13:13: remp: unbound identifier\n  in: remp\n  location...:\n\
    \   /tmp/tmpb6uu8kam.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(null? (cdr l)) true]\n        [(null?\
    \ (cddr l)) true]\n        [else\n         (= (- (cadr l) (car l)) (- (caddr l)\
    \ (cadr l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpw51z80.rkt:22:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkpw51z80.rkt:23:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkpw51z80.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkpw51z80.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpw51z80.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpae8w0iq5.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmpae8w0iq5.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (and (monotonic (cdr l)) #t)]\n    [(> (car l) (cadr l)) (and (monotonic\
    \ (cdr l)) #t)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4qt7z8l8.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4qt7z8l8.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4qt7z8l8.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4qt7z8l8.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (or (and\n           (andmap (lambda (x y)\n                     (and\
    \ (integer? x) (integer? y) (>= x y)))\n                   l (rest l))\n     \
    \      (or (apply = l) (apply = (reverse l))))\n          (and\n           (andmap\
    \ (lambda (x y)\n                     (and (integer? x) (integer? y) (<= x y)))\n\
    \                   l (rest l))\n           (or (apply = l) (apply = (reverse\
    \ l)))))\n      (and (andmap integer? l) (or (apply = l) (apply = (reverse l))))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:27:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:28:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:29:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:30:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:31:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:32:4\n\
    \nandmap: all lists must have same size\n  first list length: 6\n  other list\
    \ length: 5\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:33:4\n\
    \nandmap: all lists must have same size\n  first list length: 6\n  other list\
    \ length: 5\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld5__htp.rkt:34:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:...tmp/tmpld5__htp.rkt:12:19>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((null? (cdr l)) #t)\n        ((and (and\
    \ (and (= (car l) (car (cdr l)))\n                      (= (car l) (car (cdr (cdr\
    \ l)))))\n                    (= (car l) (car (cdr (cdr (cdr l))))))\n       \
    \       (not (= (car l) (car (cdr (cdr (cdr (cdr l))))))))\n         #t)\n   \
    \     ((not (or (apply < l) (apply > l))) #f)\n        (else #t)))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxs3sadj.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsxs3sadj.rkt:32:4\n\ncar: contract\
    \ violation\n  expected: pair?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic? l dir)\n    (cond\n      [(null? l) true]\n      [(null?\
    \ (cdr l)) true]\n      [(and (= dir 1) (< (car l) (cadr l))) (monotonic? (cdr\
    \ l) dir)]\n      [(and (= dir -1) (> (car l) (cadr l))) (monotonic? (cdr l) dir)]\n\
    \      [else false]))\n  (let ([a (car l)]\n        [b (cadr l)])\n    (cond\n\
    \      [(= a b) (monotonic? (cdr l) 0)]\n      [(> a b) (monotonic? l -1)]\n \
    \     [else (monotonic? l 1)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9xg1vh_.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv9xg1vh_.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (equal? (length l) 1)\n      #t\n      (if (equal? (length l) 2)\n\
    \          (if (equal? (car l) (cadr l))\n              #t\n              (if\
    \ (> (car l) (cadr l))\n                  (and (> (car l) (cadr l))\n        \
    \               (monotonic (cdr l)))\n                  (and (< (car l) (cadr\
    \ l))\n                       (monotonic (cdr l)))))\n          (if (> (car l)\
    \ (cadr l))\n              (and (> (car l) (cadr l))\n                   (monotonic\
    \ (cdr l)))\n              (and (< (car l) (cadr l))\n                   (monotonic\
    \ (cdr l)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr8_531ka.rkt:34:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr8_531ka.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpr8_531ka.rkt:37:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpr8_531ka.rkt:39:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(cons? l)\n     (define l2 (cdr l))\n\
    \     (define l1 (car l))\n     (if (empty? l2) true\n       (define l3 (cdr l2))\n\
    \       (define l2 (car l2))\n       (and\n        (if (< l1 l2)\n           \
    \ (loop [(x l3)]\n              (cond\n                [(empty? x) true]\n   \
    \             [(cons? x)\n                 (define x2 (cdr x))\n             \
    \    (define x1 (car x))\n                 (if (< x1 x2)\n                   \
    \  (loop [x2 x2])\n                     false)]))\n            (loop [(x l3)]\n\
    \              (cond\n                [(empty? x) true]\n                [(cons?\
    \ x)\n                 (define x2 (cdr x))\n                 (define x1 (car x))\n\
    \                 (if (> x1 x2)\n                     (loop [x2 x2])\n       \
    \              false)])))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp22k0oqjh.rkt:16:5: if: bad syntax\n  in: (if (empty? l2) true (define\
    \ l3 (cdr l2)) (define l2 (car l2)) (and (if (< l1 l2) (loop ((x l3)) (cond ((empty?\
    \ x) true) ((cons? x) (define x2 (cdr x)) (define x1 (car x)) (if (< x1 x2) (loop\
    \ (x2 x2)) false)))) (loop ((x l3)) (cond ((empty? x) true) ((c...\n  location...:\n\
    \   /tmp/tmp22k0oqjh.rkt:16:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (and (increasing? l) (decreasing? l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv2vr_t4w.rkt:11:8: increasing?: unbound identifier\n  in: increasing?\n\
    \  location...:\n   /tmp/tmpv2vr_t4w.rkt:11:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l)\n    (if (or (empty? l) (empty? (cdr l)))\n\
    \        #t\n        (let* ([a (car l)]\n               [b (cadr l)])\n      \
    \    (and (cond ((and (&lt; a b) (&lt;= b (caddr l))) #t)\n                  \
    \   ((and (&gt; a b) (&gt;= b (caddr l))) #t)\n                     (else #f))\n\
    \               (monotonic-helper (cdr l))))))\n  (monotonic-helper l))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphsico11k.rkt:16:15: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp644xdtfx.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmp644xdtfx.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(null? (cdr l)) true]\n        [(< (car\
    \ l) (cadr l))\n         (and (monotonic (cdr l)) true)]\n        [(> (car l)\
    \ (cadr l))\n         (and (monotonic (cdr l)) true)]\n        [else false]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplephmygx.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplephmygx.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmplephmygx.rkt:29:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplephmygx.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(or (empty? l) (empty? (rest l))) #t]\n        [(< (first l) (second\
    \ l))\n         (monotonic-decreasing (rest l))]\n        [(> (first l) (second\
    \ l))\n         (monotonic-increasing (rest l))]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvoi4mm8t.rkt:13:10: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpvoi4mm8t.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (empty? l)\n      #t\n      (define (monotonic-helper l sign)\n  \
    \      (if (empty? l)\n            #t\n            (let ([current (first l)]\n\
    \                  [next (second l)])\n              (if (or (and (> current next)\
    \ (= sign -1))\n                      (and (< current next) (= sign 1)))\n   \
    \               (monotonic-helper (rest l) sign)\n                  #f))))\n \
    \     (let ([first (first l)]\n            [second (second l)])\n        (if (=\
    \ first second)\n            (monotonic-helper (rest l) 0)\n            (monotonic-helper\
    \ (rest l)\n                              (if (> first second) -1 1))))))\n```\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5_4tvgo8.rkt:31:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (match l\n    [($ (? number? a) (? number? b) ...)\n     (if (or (and\
    \ (&lt; a b) (monotonic (rest l)))\n             (and (&gt; a b) (monotonic (rest\
    \ l))))\n         #t\n         #f)]\n    [(else #f)]))\n</code>\nbut this code\
    \ does not work for this example:\n<code>&gt; (monotonic '(1 2 4 20))\n#t\n&gt;\
    \ (monotonic '(1 20 4 10))\n#f\n&gt; (monotonic '(4 1 0 -10))\n#f\n</code>\nWhat's\
    \ wrong with my code?\nThanks.\n\n\nA:\n\nYou can do it like this:\n<code>(define\
    \ (monotonic l)\n  (cond\n    [(empty? l) #t]\n    [(&lt; (first l) (second l))\
    \ \n     (every &lt; l)]\n    [(&gt; (first l) (second l)) \n     (every &gt;\
    \ l)]\n    [else #f]))\n</code>\nThe pattern here is\n\nCheck if there are enough\
    \ elements to compare.\nCheck if the list is ascending and if it is use <code>every</code>\
    \ to check all elements.\nCheck if the list is descending and if it is use <code>every</code>\
    \ to check all elements.\n\nIf the list has length 1, it will return true.\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2n0q95sp.rkt:16:12: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (< (first\
    \ l) (second l)) (> (first l) (second l)))\n     (monotonic (rest l))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpja22g14q.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpja22g14q.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpja22g14q.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpja22g14q.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (increasing l) (decreasing l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_f5flzde.rkt:11:7: increasing: unbound identifier\n  in: increasing\n\
    \  location...:\n   /tmp/tmp_f5flzde.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (sign x)\n    (if (&lt; x 0) \n        -1\n        (if (&gt; x\
    \ 0)\n            1\n            0)))\n  (let ([s (sign (vector-ref l 1) - (vector-ref\
    \ l 0))])\n    (and (not (zero? s))\n         (for/and ([v (in-vector l)])\n \
    \          (= s (sign (- v (vector-ref l 0))))))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpva2mstv7.rkt:11:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 21\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(monotonic-helper\
    \ (first l) (rest l)) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuq04thf0.rkt:14:6: monotonic-helper: unbound identifier\n  in:\
    \ monotonic-helper\n  location...:\n   /tmp/tmpuq04thf0.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     #t]\n    [(empty? (rest l))\n     #t]\n \
    \   [(= (first l) (second l))\n     (monotonic (rest l))]\n    [(< (first l) (second\
    \ l))\n     (and (andmap < l (rest l)) (monotonic (rest l)))]\n    [(> (first\
    \ l) (second l))\n     (and (andmap > l (rest l)) (monotonic (rest l)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:28:4\n\
    \nandmap: all lists must have same size\n  first list length: 4\n  other list\
    \ length: 3\n  procedure: #<procedure:<>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:29:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 4\n  other list length:\
    \ 3\n  procedure: #<procedure:<>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:30:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 4\n  other list length:\
    \ 3\n  procedure: #<procedure:<>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:31:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 4\n  other list length:\
    \ 3\n  procedure: #<procedure:>>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:32:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 4\n  other list length:\
    \ 3\n  procedure: #<procedure:>>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:33:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 6\n  other list length:\
    \ 5\n  procedure: #<procedure:<>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcfsemkgj.rkt:34:4\n\nandmap:\
    \ all lists must have same size\n  first list length: 6\n  other list length:\
    \ 5\n  procedure: #<procedure:<>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(<= (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(>= (first l) (second l)) (monotonic (rest l))]\n    [else\
    \ false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:22:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:23:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:26:4\n\
    \nsecond: list contains too few elements\n  list: '(0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:27:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:28:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98l8rnqv.rkt:29:4\n\
    \nsecond: list contains too few elements\n  list: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (mono l n)\n    (cond [(empty? l) true]\n          [(= n (first\
    \ l)) (mono (rest l) n)]\n          [(and (> n (first l)) (positive? n))\n   \
    \         (mono (rest l) (first l))]\n          [(and (< n (first l)) (negative?\
    \ n))\n            (mono (rest l) (first l))]\n          [else false]))\n  (cond\
    \ [(empty? l) true]\n        [else (mono (rest l) (first l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpddso4kc7.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpddso4kc7.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpddso4kc7.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpddso4kc7.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfi4dmbu.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnfi4dmbu.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnfi4dmbu.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnfi4dmbu.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([f (car l)])\n    (for ([i (cdr l)])\n      (if (> i f)\n      \
    \    (set! f i)\n          (if (< i f)\n              (set! f i)\n           \
    \   (return #f))))\n    #t))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl57j3eim.rkt:17:15: return: unbound identifier\n  in: return\n\
    \  location...:\n   /tmp/tmpl57j3eim.rkt:17:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (and (or (and (not (null? l))\n                (null? (cdr l)))\n    \
    \       (and (not (null? l))\n                (not (null? (cdr l)))\n        \
    \        (or (and (positive? (car l))\n                         (positive? (cadr\
    \ l)))\n                    (and (negative? (car l))\n                       \
    \  (negative? (cadr l))))\n                (monotonic (cdr l))))\n       #t))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuceiny2s.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuceiny2s.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuceiny2s.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuceiny2s.rkt:31:4\nactual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(null? (cdr l)) #t]\n    [(or (> (car\
    \ l) (cadr l)) (< (car l) (cadr l)))\n     (monotonic (cdr l))]\n    [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwi7hlda_.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwi7hlda_.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwi7hlda_.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwi7hlda_.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l incr)\n    (cond\n      [(null? l) #t]\n \
    \     [(null? (cdr l)) #t]\n      [(and incr (not (positive? (- (cadr l) (car\
    \ l))))) #f]\n      [(and (not incr) (not (negative? (- (cadr l) (car l))))) #f]\n\
    \      [else (monotonic-helper (cdr l) incr)]))\n  (if (null? l) #t\n      (let\
    \ ([d (- (cadr l) (car l))])\n        (cond\n          [(positive? d) (monotonic-helper\
    \ (cdr l) #t)]\n          [(negative? d) (monotonic-helper (cdr l) #f)]\n    \
    \      [else #t]))))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpylr5w90v.rkt:27:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (asc? l)\n    (and (not (null? (cdr l)))\n         (or (and (not\
    \ (null? (cddr l))) (asc? (cdr l)))\n             (and (= (car l) (cadr l))\n\
    \                  (asc? (cdr l)))\n             (< (car l) (cadr l)))))\n  (define\
    \ (desc? l)\n    (and (not (null? (cdr l)))\n         (or (and (not (null? (cddr\
    \ l))) (desc? (cdr l)))\n             (and (= (car l) (cadr l))\n            \
    \      (desc? (cdr l)))\n             (> (car l) (cadr l)))))\n  (if (null? l)\
    \ true\n      (if (null? (cdr l)) true\n          (and (asc? l) (desc? l)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:34:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9jfso_es.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:37:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9jfso_es.rkt:38:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9jfso_es.rkt:39:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l)\n         true]\n        [(or (empty? (rest l))\n  \
    \           (and (integer? (first l))\n                  (integer? (first (rest\
    \ l)))))\n         (monotonic (rest l))]\n        [else\n         false]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmyxnkp9l.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmyxnkp9l.rkt:30:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (let ((direction (if (< (car l) (cadr l))\
    \ 1 -1)))\n        (if (null? (cdr l))\n            #t\n            (if (= direction\
    \ (if (< (cadr l) (caddr l)) 1 -1))\n                (monotonic (cdr l))\n   \
    \             #f)))))\n```\n\n```scheme\n#lang racket\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4vqg13w2.rkt:22:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp092blt76.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp092blt76.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (positive?\
    \ (diff (car l) (cadr l)))\n          (positive? (diff (cadr l) (caddr l))))\n\
    \     (monotonic (cdr l))]\n    [(and (negative? (diff (car l) (cadr l)))\n  \
    \        (negative? (diff (cadr l) (caddr l))))\n     (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqgduy8cs.rkt:14:22: diff: unbound identifier\n  in: diff\n  location...:\n\
    \   /tmp/tmpqgduy8cs.rkt:14:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (increasing l) (decreasing l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplc35fhsq.rkt:11:7: increasing: unbound identifier\n  in: increasing\n\
    \  location...:\n   /tmp/tmplc35fhsq.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or\n   (monotonic-increasing? l)\n   (monotonic-decreasing? l)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5hppdqmz.rkt:12:4: monotonic-increasing?: unbound identifier\n\
    \  in: monotonic-increasing?\n  location...:\n   /tmp/tmp5hppdqmz.rkt:12:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (and (apply\
    \ < (cdr l)) (apply < (cdr l)))\n          (monotonic (cdr l))) #t]\n    [(and\
    \ (and (apply > (cdr l)) (apply > (cdr l)))\n          (monotonic (cdr l))) #t]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zoqcw27.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6zoqcw27.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     true]\n    [(= (length l) 1)\n     true]\n\
    \    [(cond\n       [(< (first l) (second l))\n        (> (first l) (second l))])\n\
    \     false]\n    [else\n     (monotonic (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6xc6b1q.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp6xc6b1q.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpp6xc6b1q.rkt:35:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(< (length l) 2) #t]\n    [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n\
    \    [else #f]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwi3vs7k2.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwi3vs7k2.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwi3vs7k2.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwi3vs7k2.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) true]\n    [(= (length l) 1) true]\n    [(< (car\
    \ l) (cadr l))\n     (monotonic (cdr l))]\n    [(> (car l) (cadr l))\n     (monotonic\
    \ (cdr l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zpskhv1.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6zpskhv1.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6zpskhv1.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6zpskhv1.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(or (and\
    \ (null? (cdr (cdr l)))\n                  (or (< (car l) (cadr l))\n        \
    \              (> (car l) (cadr l))))\n             (and (< (car l) (cadr l))\n\
    \                  (monotonic (cdr l)))) #t]\n        [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0grx17t.rkt:28:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb0grx17t.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb0grx17t.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (loop l increasing)\n    (cond\n      [(empty? l) true]\n    \
    \  [(empty? (rest l)) true]\n      [(equal? increasing\n               (cond\n\
    \                 [(> (first l) (second l)) #t]\n                 [(< (first l)\
    \ (second l)) #f]\n                 [else 'equal]))\n       (loop (rest l) increasing)]\n\
    \      [else false]))\n  (loop l 'equal))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubsf3682.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpubsf3682.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpubsf3682.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpubsf3682.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubsf3682.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(or (and (positive?\
    \ (first l))\n            (negative? (second l)))\n         (and (negative? (first\
    \ l))\n            (positive? (second l))))\n     (monotonic (rest l))]\n    [(<\
    \ (first l) (second l))\n     (and (<= (first l) (second l))\n          (monotonic\
    \ (rest l)))]\n    [(> (first l) (second l))\n     (and (>= (first l) (second\
    \ l))\n          (monotonic (rest l)))]\n    [else #f]))\n```\n\nHere we use `cond`\
    \ to match the possible cases and\n`or`/`and` to combine logical expressions.\n\
    \n## `Monotonic-Lazy`\n\n```#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp90fzgg67.rkt:31:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(= (length l) 1) true]\n    [(< (second\
    \ l) (first l)) (and (monotonic (rest l))\n                                  \
    \ (monotonic (reverse l)))]\n    [(> (second l) (first l)) (monotonic (rest l))]\n\
    \    [else false]))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbmo9cm3j.rkt:21:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (mono l inc)\n    (cond [(empty? l) true]\n          [(empty?\
    \ (rest l)) true]\n          [(inc? (first l) (second l) inc) (mono (rest l) inc)]\n\
    \          [else false]))\n  (or (mono l true) (mono l false)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_03zu0q8.rkt:14:12: inc?: unbound identifier\n  in: inc?\n  location...:\n\
    \   /tmp/tmp_03zu0q8.rkt:14:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) #t)]\n        [(> (first l) (second l)) (and (monotonic (rest l))\
    \ #t)]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:21:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:22:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:23:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:26:4\n\nsecond: list\
    \ contains too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:27:4\n\nsecond:\
    \ list contains too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf1agczx.rkt:28:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (define (monotonic-helper l direction)\n\
    \        (cond ((null? l) #t)\n              ((null? (cdr l)) #t)\n          \
    \    ((= direction -1) (monotonic-helper (cdr l) -1))\n              ((= direction\
    \ 0) (monotonic-helper (cdr l) (* (- (car l) (cadr l))))\n              ((= direction\
    \ 1) (monotonic-helper (cdr l) 1))\n              (else #f)))\n      (monotonic-helper\
    \ l 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwim4_s0x.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) (error \"empty list\")]\n    [(null? (cdr l)) #t]\n\
    \    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqb963n_e.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqb963n_e.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqb963n_e.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqb963n_e.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((< (length l) 2) #t)\n    ((< (car l)\
    \ (cadr l)) (monotonic (cdr l)))\n    ((> (car l) (cadr l)) (monotonic (cdr l)))\n\
    \    (else #f)))\n```\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphpjbntul.rkt:23:5: check-equal?: unbound identifier\n  in: check-equal?\n\
    \  location...:\n   /tmp/tmphpjbntul.rkt:23:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (empty? l) #t\n      (cond ((empty? (rest l)) #t)\n            ((<\
    \ (first l) (second l)) (monotonic (rest l)))\n            ((> (first l) (second\
    \ l)) (monotonic (rest l)))\n            (else #f))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp704_fx35.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp704_fx35.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp704_fx35.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp704_fx35.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [(not (number?\
    \ (first l))) (error \"non number in the list\")]\n    [(not (number? (second\
    \ l))) (error \"non number in the list\")]\n    [(< (first l) (second l))\n  \
    \   (monotonic (rest l))]\n    [(> (first l) (second l))\n     (monotonic (rest\
    \ l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0vmqzyp.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb0vmqzyp.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb0vmqzyp.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb0vmqzyp.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(= (length l) 1) true]\n    [(< (first\
    \ l) (second l))\n     (monotonic (rest l))]\n    [(> (first l) (second l))\n\
    \     (monotonic (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputwu2b9z.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmputwu2b9z.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmputwu2b9z.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmputwu2b9z.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5q6lll4m.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5q6lll4m.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5q6lll4m.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5q6lll4m.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp90xvi54.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp90xvi54.rkt:26:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (apply <= l)\n      (apply >= l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([l l] [inc? #t] [dec? #t])\n    (cond\n      [(null? l) #t]\n\
    \      [(and inc? (not (negative? (sub1 (car l)) (cadr l))))\n       (loop (cdr\
    \ l) #t #f)]\n      [(and dec? (not (positive? (sub1 (car l)) (cadr l))))\n  \
    \     (loop (cdr l) #f #t)]\n      [else #f])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:25:4\n\
    \nnegative?: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:26:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:27:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:28:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:29:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:30:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:31:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnjpi8qkx.rkt:32:4\n\nnegative?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (or (monotonic-increasing l)\n        \
    \  (monotonic-decreasing l))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfa45ip9e.rkt:13:11: monotonic-increasing: unbound identifier\n\
    \  in: monotonic-increasing\n  location...:\n   /tmp/tmpfa45ip9e.rkt:13:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(null? (cdr\
    \ (cdr l))) #t]\n    [else\n     (if (< (car l) (cadr l))\n         (if (and\n\
    \              (monotonic (cdr l))\n              (apply < (cdr l)))\n       \
    \      #t\n             #f)\n         (if (and\n              (monotonic (cdr\
    \ l))\n              (apply > (cdr l)))\n             #t\n             #f))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrvunboq.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxrvunboq.rkt:40:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([sl (sort l)])\n    (or (equal? l sl)\n        (equal? l (reverse\
    \ sl)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:20:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(1 2 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:21:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(1 2 4 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:22:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(1 20 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:23:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(4 1 0 -10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:24:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(4 1 1 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:25:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(1 2 3 2 5 60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdoavazkg.rkt:26:4\n\
    \nsort: arity mismatch;\n the expected number o"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     #t]\n    [(empty? (rest l))\n     #t]\n \
    \   [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (apply\
    \ > (map second (partition 2 1 l)) ))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (apply < (map second (partition 2 1 l)) ))]\n\
    \    [else\n     #f]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:29:4\n\
    \npartition: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:30:4\n\npartition:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:31:4\n\npartition:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:32:4\n\npartition:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:33:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:34:4\n\npartition:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:35:4\n\npartition:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk0izq160.rkt:36:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l)\
    \ (second l)) (monotonic-increasing (rest l))]\n        [else true]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph49uok7y.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmph49uok7y.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     true]\n    [(empty? (rest l))\n     true]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (apply\
    \ < (rest l)))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (apply > (rest l)))]\n    [else\n     false]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdfgx0g8.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzdfgx0g8.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(null? (cdr l)) true]\n        [(< (car\
    \ l) (cadr l))\n         (and (monotonic (cdr l))\n              true)]\n    \
    \    [(> (car l) (cadr l))\n         (and (monotonic (cdr l))\n              true)]\n\
    \        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0k37l1p3.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0k37l1p3.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0k37l1p3.rkt:31:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0k37l1p3.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (match l\n    [(and (list x) (? list? rest))\n     (and (monotonic-rec\
    \ x rest) (monotonic rest))]\n    [_\n     #t]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_ey1et4f.rkt:13:11: monotonic-rec: unbound identifier\n  in: monotonic-rec\n\
    \  location...:\n   /tmp/tmp_ey1et4f.rkt:13:11\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/stxparam.rkt:61:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([ordered (or (list-sort (\u03BB (x y) (&lt; x y)) l)\n         \
    \            (list-sort (\u03BB (x y) (&gt; x y)) l))])\n    (equal? l ordered)))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpucyr5u26.rkt:12:21: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (is-monotonic? l ich)\n    (cond ((null? l) true)\n          ((null?\
    \ (cdr l)) true)\n          ((= (car l) (cadr l)) (is-monotonic? (cdr l) ich))\n\
    \          ((and (= (car l) (+ (cadr l) ich))\n                (is-monotonic?\
    \ (cdr l) ich)))\n          (else false)))\n  (cond ((null? l) true)\n       \
    \ ((null? (cdr l)) true)\n        ((= (car l) (cadr l)) (is-monotonic? (cdr l)\
    \ 0))\n        ((> (car l) (cadr l)) (is-monotonic? (cdr l) -1))\n        ((<\
    \ (car l) (cadr l)) (is-monotonic? (cdr l) 1))\n        (else false)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0ny610p.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy0ny610p.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy0ny610p.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy0ny610p.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0ny610p.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ((diff (diff-l l)))\n    (and (= (length diff) (- (length l) 1))\n\
    \         (every (lambda (x) (= 0 x)) diff))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcvjn9gi5.rkt:11:15: diff-l: unbound identifier\n  in: diff-l\n\
    \  location...:\n   /tmp/tmpcvjn9gi5.rkt:11:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (mono l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr\
    \ l)) #t]\n      [(> (car l) (cadr l)) (mono (cdr l))]\n      [(< (car l) (cadr\
    \ l)) (mono (cdr l))]\n      [else #f]))\n  (mono l))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4_sez6e2.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4_sez6e2.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4_sez6e2.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4_sez6e2.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (for/and ([x (in-list l)]\n                [y (in-list (rest l))])\n\
    \        (<= x y))\n      (for/and ([x (in-list l)]\n                [y (in-list\
    \ (rest l))])\n        (>= x y))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (all-equal x y)\n    (= x y))\n  (define (diff x y)\n    (- x\
    \ y))\n  (let ([dir (cond\n              [(> (car l) (cadr l)) #f]\n         \
    \     [(< (car l) (cadr l)) #t]\n              [else #f])])\n    (cond\n     \
    \ [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(all-equal dir (diff (car\
    \ l) (cadr l))) (monotonic (cdr l))]\n      [else #f])))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:29:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:30:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:31:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:32:4\n\
    \n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:33:4\n\
    \n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:34:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:35:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaesqos8m.rkt:36:4\n\
    \n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ((order 0))\n    (for ([element l])\n      (when (not (zero? order))\n\
    \        (if (< order 0)\n            (set! order (if (< element (cdr element))\
    \ 1 0))\n          (set! order (if (> element (cdr element)) -1 0))))\n      (set!\
    \ order (if (< element (cdr element)) 1 -1))))\n    (and (not (zero? order)) (>\
    \ 0 order))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpds_of9uy.rkt:18:42: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (every (curry >) l)\n      (every (curry <) l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdgauazaw.rkt:11:7: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpdgauazaw.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (increasing? l)\n    (cond\n      [(null? l) #t]\n      [(null?\
    \ (cdr l)) #t]\n      [(< (car l) (cadr l)) (increasing? (cdr l))]\n      [else\
    \ #f]))\n  (define (decreasing? l)\n    (cond\n      [(null? l) #t]\n      [(null?\
    \ (cdr l)) #t]\n      [(> (car l) (cadr l)) (decreasing? (cdr l))]\n      [else\
    \ #f]))\n  (or (increasing? l) (decreasing? l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuemds8o6.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuemds8o6.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (empty? l)\n      (error \"Empty list\")\n      (let ([a (car l)]\n\
    \            [rest (cdr l)])\n        (if (empty? rest)\n            #t\n    \
    \        (let ([b (car rest)])\n              (if (= a b)\n                  (monotonic\
    \ rest)\n                  (if (and (> a b)\n                           (every\
    \ < rest))\n                      #t\n                      (if (and (< a b)\n\
    \                               (every > rest))\n                          #t\n\
    \                          #f))))))))\n```\n\n```python\ndef monotonic(l):\n \
    \   if not l:\n        raise ValueError(\"Empty list\")\n    a = l[0]\n    rest\
    \ = l[1:]\n    if not rest:\n        return True\n    b = rest[0]\n    if a ==\
    \ b:\n        return monotonic(rest)\n    if a > b and all(map(lambda x: x < b,\
    \ rest)):\n        return True\n    if a < b and all(map(lambda x: x > b, rest)):\n\
    \        return True\n    return False\n```\n\n```scala\ndef monotonic(l: List[Int]):\
    \ Boolean = {\n  def go(l: List[Int]): Boolean = l match {\n    case Nil     \
    \ => true\n    case a :: Nil => true\n    case a :: b :: rest => if (a == b) go(b\
    \ :: rest)\n                           else if (a > b && rest.forall(_ < b)) true\n\
    \                           else if (a < b && rest.forall(_ > b)) true\n     \
    \                      else false\n  }\n  go(l)\n}\n```\n\n### Average\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8x55a6yh.rkt:61:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([l l] [acc true])\n    (if (null? l)\n        acc\n       \
    \ (if (<= (first l) (second l))\n            (loop (rest l) acc)\n           \
    \ (loop (rest l) false)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:23:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:26:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:27:4\n\
    \nsecond: list contains too few elements\n  list: '(0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:28:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:29:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc54779eq.rkt:30:4\n\
    \nsecond: list contains too few elements\n  list: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([res #t] [lst l])\n    (if (or (empty? lst) (empty? (cdr lst)))\n\
    \        res\n        (loop (and (if (positive? (difference (car lst) (cadr lst)))\n\
    \                      (> (car lst) (cadr lst))\n                      (< (car\
    \ lst) (cadr lst)))\n                  res)\n              (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbg6v0hee.rkt:14:35: difference: unbound identifier\n  in: difference\n\
    \  location...:\n   /tmp/tmpbg6v0hee.rkt:14:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((empty? l) #t)\n        ((= (first l) (last l)) #t)\n        ((>\
    \ (first l) (last l)) (monotonic (rest l)))\n        ((< (first l) (last l)) (monotonic\
    \ (rest l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xvgynb1.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9xvgynb1.rkt:26:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((null? (cdr l)) #t)\n        ((let ((a\
    \ (car l))\n               (b (cadr l)))\n           (if (or (= a b) (< a b) (>\
    \ a b))\n               (monotonic (cdr l))\n               #f)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7tbjw7rc.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7tbjw7rc.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(= (first\
    \ l) (second l))\n     (monotonic (rest l))]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l)) (all (lambda (x) (< (first l) x)) (rest l)))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l)) (all (lambda (x)\
    \ (> (first l) x)) (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphlx206dp.rkt:17:32: all: unbound identifier\n  in: all\n  location...:\n\
    \   /tmp/tmphlx206dp.rkt:17:32\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((zero? (sub1 (length l))) #t)\n        ((or (= (first l) (second\
    \ l))\n             (and (> (first l) (second l))\n                  (monotonic\
    \ (rest l)))\n             (and (< (first l) (second l))\n                  (monotonic\
    \ (rest l)))) #t)\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxtrbiwcy.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxtrbiwcy.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (or (= (length l) 1) (= (length l) 2))\n      #t\n      (if (<= (first\
    \ l) (second l))\n          (if (monotonic (rest l))\n              #t\n     \
    \         #f)\n          (if (monotonic (rest l))\n              #t\n        \
    \      #f))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp096gs1lh.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp096gs1lh.rkt:30:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzrh8a84n.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmpzrh8a84n.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l)\n         #t]\n        [(equal? (car l) (cadr l))\n\
    \         (monotonic (cdr l))]\n        [(< (car l) (cadr l))\n         (and (monotonic\
    \ (cdr l))\n              (<= (car l) (caddr l)))]\n        [(> (car l) (cadr\
    \ l))\n         (and (monotonic (cdr l))\n              (>= (car l) (caddr l)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyvwcngx.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiyvwcngx.rkt:28:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyvwcngx.rkt:29:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyvwcngx.rkt:30:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiyvwcngx.rkt:31:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyvwcngx.rkt:32:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyvwcngx.rkt:33:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiyvwcngx.rkt:34:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let\n    ([cmp (lambda (a b) (< a b))])\n    (cond\n      [(empty? l)\
    \ #t]\n      [(empty? (rest l)) #t]\n      [(cmp (first l) (second l)) (monotonic\
    \ (rest l))]\n      [(not (cmp (first l) (second l))) #f])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_k8ty4bu.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_k8ty4bu.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_k8ty4bu.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((or (and (null? (cdr l)) #t) (and (null? (cdr (cdr l))) #t)) #t)\n\
    \        ((= (car l) (car (cdr l))) (monotonic (cdr l)))\n        ((< (car l)\
    \ (car (cdr l))) (monotonic (cdr l)))\n        ((> (car l) (car (cdr l))) (monotonic\
    \ (cdr l)))\n        (else #f)))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmzv6hk4r.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmzv6hk4r.rkt:26:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (sign l)\n    (if (zero? (first l))\n        0\n        (let ([a\
    \ (first l)]\n              [b (second l)])\n          (if (< a b)\n         \
    \     1\n              -1))))\n  (if (or (null? l) (null? (rest l)))\n      #t\n\
    \      (if (sign l)\n          (let ([s (sign l)])\n            (if (equal? s\
    \ (sign (rest l)))\n                (monotonic (rest l))\n                #f))\n\
    \          #f)))\n</code>\nBut I'm getting a false false for the last test case,\
    \ and I can't find why.\n\n\nA:\n\nYou check for strict monotonicity.\nThe last\
    \ sequence you give is not strict monotonic, it is monotonic, if you allow <code>4\
    \ == 1</code>\nA fix could be\n<code>(define (monotonic l)\n  (define (sign l)\n\
    \    (if (zero? (first l))\n        0\n        (let ([a (first l)]\n         \
    \     [b (second l)])\n          (if (&lt;= a b)\n              1\n          \
    \    -1))))\n  (if (or (null? l) (null? (rest l)))\n      #t\n      (if (sign\
    \ l)\n          (let ([s (sign l)])\n            (if (equal? s (sign (rest l)))\n\
    \                (monotonic (rest l))\n                #f))\n          #f)))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa0nbcn1v.rkt:36:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 37\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (car\
    \ l) (cadr l))\n     (and (monotonic (rest l))\n          (<= (car l) (cadr l)))]\n\
    \    [(< (car l) (cadr l))\n     (and (monotonic (rest l))\n          (>= (car\
    \ l) (cadr l)))]\n    [else true]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxwu402yv.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxwu402yv.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxwu402yv.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxwu402yv.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxwu402yv.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) true]\n    [(null? (cdr l)) true]\n    [(< (car\
    \ l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp76ovofzn.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp76ovofzn.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp76ovofzn.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp76ovofzn.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([i 0] [b #t])\n    (cond\n      [(= i 1) b]\n      [(< (list-ref\
    \ l i) (list-ref l (- i 1)))\n       (loop (- i 1) #f)]\n      [else (loop (-\
    \ i 1) b)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:23:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:24:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:25:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:26:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:27:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:28:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:29:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mrrvm7c.rkt:30:4\n\
    \nlist-ref: index -1 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let ([delta 0])\n    (andmap (lambda (x)\n              (and (lambda\
    \ (y) (abs (- x y))\n                    (set! delta (abs (- x y)))\n        \
    \            #t)\n                   (lambda (y) (or (= (abs (- x y)) delta)\n\
    \                                   (= (abs (- x y)) 0)))))\n            l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:25:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:26:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:27:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:28:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:29:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:30:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:31:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz3db685.rkt:32:4\n\
    actual:     #<procedure:...tmp/tmpjz3db685.rkt:16:19>\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((empty? l) true)\n        ((null? (cdr l)) true)\n        ((or\
    \ (and (positive? (diff (car l) (cadr l)))\n                  (monotonic (cdr\
    \ l)))\n             (and (negative? (diff (car l) (cadr l)))\n              \
    \    (monotonic (cdr l))))\n         true)\n        (else false)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw9quktcr.rkt:13:30: diff: unbound identifier\n  in: diff\n  location...:\n\
    \   /tmp/tmpw9quktcr.rkt:13:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (=\
    \ (first l) (first (rest l)))\n             (and (monotonic (rest l))\n      \
    \            (or (> (first l) (first (rest l)))\n                      (< (first\
    \ l) (first (rest l))))))\n         #t]\n        [else #f]))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5cm9pjf8.rkt:19:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp5cm9pjf8.rkt:19:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (helper lst inc)\n    (cond\n      [(empty? lst) #t]\n      [(<\
    \ (first lst) (second lst)) (helper (rest lst) #t)]\n      [(> (first lst) (second\
    \ lst)) (helper (rest lst) #f)]\n      [(= (first lst) (second lst)) (helper (rest\
    \ lst) inc)]))\n  (helper l #t))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:26:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:27:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:28:4\n\
    \nsecond: list contains too few elements\n  list: '(0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:29:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:30:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4tpkd_5.rkt:31:4\n\
    \nsecond: list contains too few elements\n  list: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (helper l up)\n    (cond ((null? l) #t)\n          ((= (car l)\
    \ (cadr l)) (helper (cdr l) up))\n          ((or (null? (cdr l))\n           \
    \    (not (if up (< (car l) (cadr l)) (> (car l) (cadr l))))) #f)\n          (else\
    \ (helper (cdr l) up))))\n  (helper l #t))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdytlu966.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdytlu966.rkt:25:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdytlu966.rkt:27:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdytlu966.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpdytlu966.rkt:30:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdytlu966.rkt:31:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((= (length l) 0)\n         #t)\n        ((= (length l) 1)\n   \
    \      #t)\n        ((< (car l) (cadr l))\n         (cond ((> (length l) 2)\n\
    \                (monotonic (cdr l)))\n               ((= (length l) 2)\n    \
    \            #t)))\n        ((> (car l) (cadr l))\n         (cond ((> (length\
    \ l) 2)\n                (monotonic (cdr l)))\n               ((= (length l) 2)\n\
    \                #t)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t13h5v8.rkt:33:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0t13h5v8.rkt:35:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0t13h5v8.rkt:36:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0t13h5v8.rkt:38:4\nactual:     #<void>\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let* ([len (length l)]\n         [el (list-ref l 0)]\n         [first\
    \ (length (filter (lambda (e) (> e el)) (cdr l)))])\n    (if (= 0 first)\n   \
    \     (if (= len 1)\n            #t\n            (monotonic (cdr l)))\n      \
    \  (let* ([second (length (filter (lambda (e) (< e el)) (cdr l)))])\n        \
    \  (if (= 0 second)\n              (if (= len 1)\n                  #t\n     \
    \             (monotonic (cdr l)))\n              #f)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9d26tuvb.rkt:31:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(or (or (and\
    \ (> (car l) (cadr l)) (monotonic (cdr l)))\n                 (and (< (car l)\
    \ (cadr l)) (monotonic (cdr l))))\n             #t)\n         #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqli3rjm0.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqli3rjm0.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqli3rjm0.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqli3rjm0.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqli3rjm0.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqli3rjm0.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (all-negative? (rest l))]\n    [(< (first l) (second l)) (all-positive?\
    \ (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp70idihtd.rkt:14:31: all-negative?: unbound identifier\n  in: all-negative?\n\
    \  location...:\n   /tmp/tmp70idihtd.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic? ls p)\n    (match ls\n      ([x] p)\n      ([x y xs]\n\
    \       (monotonic? (cons y xs)\n                   (if (= p 'unset)\n       \
    \                (if (> x y) 'decreasing 'increasing)\n                      \
    \ (if (= (if (string=? p 'increasing) (string>? x y) (string<? x y)) #t)\n   \
    \                        p\n                           'not-monotonic))))))\n\
    \  (monotonic? l 'unset))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp9usx8j1.rkt:13:7: match: syntax error in pattern\n  in: (x)\n\
    \  location...:\n   /tmp/tmpp9usx8j1.rkt:13:7\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (not (null?\
    \ (cdr l)))\n          (> (car l) (cadr l))\n          (monotonic (cdr l))) #t]\n\
    \    [(and (not (null? (cdr l)))\n          (< (car l) (cadr l))\n          (monotonic\
    \ (cdr l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_q_r1z_y.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_q_r1z_y.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_q_r1z_y.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_q_r1z_y.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (positive?\
    \ (difference (first l) (second l)))\n         (negative? (difference (first l)\
    \ (second l))))\n     (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq4zu2qb1.rkt:14:21: difference: unbound identifier\n  in: difference\n\
    \  location...:\n   /tmp/tmpq4zu2qb1.rkt:14:21\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (iter l st)\n    (cond\n      [(empty? l) #t]\n      [(null? (cdr\
    \ l)) #t]\n      [(or (equal? st 'increasing) (equal? st 'decreasing))\n     \
    \  (if (and (>= (car l) (cadr l)) (<= (car l) (cadr l)))\n           (iter (cdr\
    \ l) st)\n           #f)]\n      [else\n       (if (< (car l) (cadr l))\n    \
    \       (iter (cdr l) 'increasing)\n           (iter (cdr l) 'decreasing))]))\n\
    \  (iter l 'undef))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0x3bpirs.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0x3bpirs.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0x3bpirs.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0x3bpirs.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0x3bpirs.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic? curr next)\n    (cond\n      ((> curr next) (cons\
    \ #t (monotonic? next (rest next))))\n      ((< curr next) (cons #t (monotonic?\
    \ next (rest next))))\n      (else #f)))\n  (if (empty? (rest l))\n      #t\n\
    \      (apply and (monotonic? (first l) (rest l)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpltl9fx9c.rkt:18:13: and: bad syntax\n  in: and\n  location...:\n\
    \   /tmp/tmpltl9fx9c.rkt:18:13\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:442:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) (printf \"True\\n\"))\n    ((null? (cdr l)) (printf\
    \ \"True\\n\"))\n    ((> (car l) (cadr l))\n     (cond\n       ((> (car l) (cadr\
    \ l)) (monotonic (cdr l)))\n       ((= (car l) (cadr l)) (monotonic (cdr l)))\n\
    \       (else (printf \"False\\n\"))))\n    ((< (car l) (cadr l))\n     (cond\n\
    \       ((< (car l) (cadr l)) (monotonic (cdr l)))\n       ((= (car l) (cadr l))\
    \ (monotonic (cdr l)))\n       (else (printf \"False\\n\"))))\n    (else (printf\
    \ \"True\\n\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:31:4\n\
    actual:     #<void>\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:32:4\nactual:\
    \     #<void>\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:33:4\nactual:     #<void>\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:34:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:35:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:36:4\nactual:     #<void>\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:37:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxfytonm.rkt:38:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) true]\n    [(or (= (first l) (second l))\n     \
    \    (and (> (first l) (second l))\n              (every (lambda (x) (> x (first\
    \ l))) (rest (rest l))))\n         (and (< (first l) (second l))\n           \
    \   (every (lambda (x) (< x (first l))) (rest (rest l)))))\n     true]\n    [else\
    \ false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi99ta8ef.rkt:15:15: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpi99ta8ef.rkt:15:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (let* ([rest (cdr l)]\n             [next\
    \ (car rest)])\n        (if (null? rest)\n            #t\n            (if (< (car\
    \ l) next)\n                (monotonic (cons next rest))\n                (if\
    \ (> (car l) next)\n                    (monotonic (cons next rest))\n       \
    \             #f))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s7ukpuz.rkt:28:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4s7ukpuz.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4s7ukpuz.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4s7ukpuz.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s7ukpuz.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4s7ukpuz.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg0nib1.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4jg0nib1.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4jg0nib1.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4jg0nib1.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(empty?\
    \ (rest (rest l))) #t]\n        [else\n         (let ([p (first l)]\n        \
    \       [q (first (rest l)]\n               [r (first (rest (rest l)))])\n   \
    \        (and (if (<= p q)\n                    (>= q r)\n                   \
    \ (<= q r))\n                (monotonic (rest l))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2kiahb9w.rkt:16:33: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (not (pair? l)) #t\n      (if (not (pair? (cdr l))) #t\n         \
    \ (if (and (>= (car l) (cadr l))\n                   (>= (cadr l) (caddr l)))\n\
    \              (monotonic (cdr l))\n              (monotonic (cddr l))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn8dyctwz.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpn8dyctwz.rkt:26:4\n\ncaddr: contract\
    \ violation\n  expected: (cons/c any/c (cons/c any/c pair?))\n  given: '(0 -10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn8dyctwz.rkt:27:4\n\ncaddr: contract violation\n  expected:\
    \ (cons/c any/c (cons/c any/c pair?))\n  given: '(1 0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn8dyctwz.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpn8dyctwz.rkt:30:4\n\ncaddr: contract\
    \ violation\n  expected: (cons/c any/c (cons/c any/c pair?))\n  given: '(9 9)\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([ls l] [last (first l)] [increasing? #t])\n    (cond [(empty?\
    \ ls) #t]\n          [(not increasing?) (loop (rest ls) (first ls) (not (positive?\
    \ (sub1 (first ls)) last))) ]\n          [(positive? (sub1 (first ls)) last) (loop\
    \ (rest ls) (first ls) #t)]\n          [else (loop (rest ls) (first ls) #f)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:22:4\n\
    \npositive?: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:23:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:24:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:25:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:26:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:27:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:28:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk4298m6b.rkt:29:4\n\npositive?:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (let* ([a (car l)]\n             [b (cadr\
    \ l)]\n             [c (caddr l)])\n        (cond\n         [(null? b) #t]\n \
    \        [(null? c) #t]\n         [(< a b c) (monotonic (cdr l))]\n         [(>\
    \ a b c) (monotonic (cdr l))]\n         [else #f]))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphedzf827.rkt:28:4\n\
    \ncaddr: contract violation\n  expected: (cons/c any/c (cons/c any/c pair?))\n\
    \  given: '(4 10)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphedzf827.rkt:29:4\n\ncaddr: contract violation\n\
    \  expected: (cons/c any/c (cons/c any/c pair?))\n  given: '(4 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphedzf827.rkt:31:4\n\
    \ncaddr: contract violation\n  expected: (cons/c any/c (cons/c any/c pair?))\n\
    \  given: '(0 -10)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphedzf827.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmphedzf827.rkt:34:4\n\ncaddr: contract violation\n\
    \  expected: (cons/c any/c (cons/c any/c pair?))\n  given: '(5 60)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphedzf827.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l)) (empty? (filter (lambda (x)\
    \ (< x (second l))) (rest l))))]\n        [(> (first l) (second l))\n        \
    \ (and (monotonic (rest l)) (empty? (filter (lambda (x) (> x (second l))) (rest\
    \ l))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprn5z9kiu.rkt:30:4\n\
    actual:     #<void>\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(or (equal?\
    \ (list-ref l 1) (list-ref l 0))\n         (and (< (list-ref l 1) (list-ref l\
    \ 0))\n              (monotonic (cdr l))))\n     #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplb29151e.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplb29151e.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmplb29151e.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((= (length l) 1) #t)\n        ((or (and\
    \ (< (car l) (cadr l)) (monotonic (cdr l)))\n             (and (> (car l) (cadr\
    \ l)) (monotonic (cdr l)))) #t)\n        (else #f)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdtbj3t_t.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdtbj3t_t.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdtbj3t_t.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdtbj3t_t.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ([l l] [pos? #t] [neg? #t])\n    (cond\n      [(empty? l) #t]\n\
    \      [(< (first l) (second l)) (loop (rest l) #t #f)]\n      [(> (first l) (second\
    \ l)) (loop (rest l) #f #t)]\n      [else (loop (rest l) pos? neg?)])))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:22:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:23:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:24:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:25:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:26:4\n\
    \nsecond: list contains too few elements\n  list: '(0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:27:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:28:4\n\
    \nsecond: list contains too few elements\n  list: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5z6fdbd.rkt:29:4\n\
    \nsecond: list contains too few elements\n  list: '(9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l))\n     (and (apply < (cdr l)) (monotonic (cdr l)))]\n    [(< (car l) (cadr\
    \ l))\n     (and (apply > (cdr l)) (monotonic (cdr l)))]\n    [else #f]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7x9piaa2.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7x9piaa2.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7x9piaa2.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7x9piaa2.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7x9piaa2.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7x9piaa2.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     #t]\n    [(empty? (rest l))\n     #t]\n \
    \   [(and (and (le? (first l) (second l))\n               (monotonic (rest l)))\n\
    \          (monotonic (rest l)))\n     #t]\n    [(and (and (ge? (first l) (second\
    \ l))\n               (monotonic (rest l)))\n          (monotonic (rest l)))\n\
    \     #t]\n    [else\n     #f]))\n</code>\nI used <code>le?</code> and <code>ge?</code>\
    \ instead of <code>&lt;=</code> and <code>&gt;=</code> because I though it would\
    \ help readability.\nIt works fine, but I am not sure I need to check twice (and\
    \ in the same function) if it is monotonically increasing or decreasing.\n\n\n\
    A:\n\nA single <code>cond</code> expression is usually not a good idea. You could\
    \ rewrite the above code as a <code>case</code> expression, which would make it\
    \ easier to read:\n<code>(define (monotonic l)\n  (case (first l)\n    [prev (cond\
    \ [(empty? (rest l))  #t]\n                [(monotonic/c prev prev (rest l)) \
    \ #t]\n                [else  #f])]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpheb6xqg2.rkt:27:24: and: bad syntax\n  in: and\n  location...:\n\
    \   /tmp/tmpheb6xqg2.rkt:27:24\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:442:6\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(or (= (first l) (second l))\n       \
    \      (and (> (first l) (second l))\n                  (monotonic (rest l))))\n\
    \         #t]\n        [else #f]))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfkjrzsva.rkt:22:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfkjrzsva.rkt:23:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpfkjrzsva.rkt:25:4\n\nsecond: list contains\
    \ too few elements\n  list: '(-10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfkjrzsva.rkt:28:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (null? l)\n      #t\n      (or (null? (cdr l))\n          (and (<=\
    \ (car l) (cadr l))\n               (monotonic (cdr l)))\n          (and (>= (car\
    \ l) (cadr l))\n               (monotonic (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_j0aks_.rkt:26:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk_j0aks_.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l))\n     (and (monotonic (cdr l)) (not (member (car l) (cdr l)))))\n    [(<\
    \ (car l) (cadr l))\n     (and (monotonic (cdr l)) (not (member (car l) (cdr l))))]\n\
    \    [else\n     #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw7oe6wms.rkt:15:61: read-syntax: missing `]` to close `[` on line\
    \ 14, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 15\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #t)\n        ((null? (cdr l)) #t)\n        ((let ((a\
    \ (car l))\n               (b (cadr l)))\n           (and (or (< a b) (> a b))\n\
    \                (monotonic (cdr l)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwqtqd6z.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcwqtqd6z.rkt:27:4\nactual:     #<void>\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpcwqtqd6z.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcwqtqd6z.rkt:30:4\nactual:     #<void>\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (or (apply < l) (apply > l))\n      #f))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt4xflyma.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt4xflyma.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4jikpzh.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc4jikpzh.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpc4jikpzh.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc4jikpzh.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (inc? a b) (< a b))\n  (define (dec? a b) (> a b))\n  (or (monotonic-increasing?\
    \ l) (monotonic-decreasing? l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1lzc0wb1.rkt:13:7: monotonic-increasing?: unbound identifier\n\
    \  in: monotonic-increasing?\n  location...:\n   /tmp/tmp1lzc0wb1.rkt:13:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (if (or (empty? l)\n          (null? (cdr l)))\n      #t\n      (let ((first\
    \ (car l))\n            (second (cadr l)))\n        (if (> first second)\n   \
    \         (and (monotonic (cons second (cddr l)))\n                 #t)\n    \
    \        (and (monotonic (cons second (cddr l)))\n                 #t)))))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpixhweej_.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpixhweej_.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (letrec ([monotonic-help (lambda (l)\n                             (cond\
    \ [(empty? l) '()]\n                                   [(< (first l) (second l))\n\
    \                                    (cons (first l) (monotonic-help (rest l)))]\n\
    \                                   [(> (first l) (second l))\n              \
    \                      (cons (first l) (monotonic-help (rest l)))]\n         \
    \                          [else (first l)]))])\n    (cond [(empty? l) #f]\n \
    \         [(= (length l) 1) #t]\n          [(> (length l) 1)\n           (if (and\
    \ (not (empty? (monotonic-help l)))\n                    (or (= (first (monotonic-help\
    \ l)) (last l))\n                        (if (and (equal? (second (monotonic-help\
    \ l)) (first l))\n                                 (equal? (first (monotonic-help\
    \ l)) (second l)))\n                            #t\n                         \
    \   #f)))\n               #t\n               #f)]\n          [else #f])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:36:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:37:4\n\
    \nsecond: list contains too few elements\n  list: '(20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:38:4\n\
    \nsecond: list contains too few elements\n  list: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:39:4\n\
    \nsecond: list contains too few elements\n  list: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:40:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '(4 . 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgdr_057d.rkt:41:4\n\nsecond: list contains too few elements\n\
    \  list: '(60)\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:42:4\n\nsecond: list contains\
    \ too few elements\n  list: '(60)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdr_057d.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (for/and ([x l] [y (in-list (cdr l))])\n    (or (< x y) (> x y))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1ui9qzm.rkt:21:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpd1ui9qzm.rkt:23:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpd1ui9qzm.rkt:24:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpd1ui9qzm.rkt:26:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
