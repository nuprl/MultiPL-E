name: HumanEval_51_remove_vowels
language: rkt
prompt: "#lang racket\n\n;; remove_vowels is a function that takes string and returns\
  \ string without vowels.\n;; >>> remove_vowels('')\n;; ''\n;; >>> remove_vowels('abcdef')\n\
  ;; 'bcdf'\n;; >>> remove_vowels('aaaaa')\n;; ''\n;; >>> remove_vowels('aaBAA')\n\
  ;; 'B'\n;; >>> remove_vowels('zbcd')\n;; 'zbcd'\n(define (remove_vowels text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"abcdef\n\
  ghijklm\") \"bcdf\nghjklm\")\n    (check-equal? (candidate \"fedcba\") \"fdcb\"\
  )\n    (check-equal? (candidate \"eeeee\") \"\")\n    (check-equal? (candidate \"\
  acBAA\") \"cB\")\n    (check-equal? (candidate \"EcBOO\") \"cB\")\n    (check-equal?\
  \ (candidate \"ybcd\") \"ybcd\")\n))\n\n(test-humaneval)"
completions: ["  (if (string=? text \"\")\n      \"\"\n      (if (or (string=? (substring\
    \ text 0 1) \"a\")\n              (string=? (substring text 0 1) \"e\")\n    \
    \          (string=? (substring text 0 1) \"i\")\n              (string=? (substring\
    \ text 0 1) \"o\")\n              (string=? (substring text 0 1) \"u\"))\n   \
    \       (remove_vowels (substring text 1))\n          (string-append (substring\
    \ text 0 1) (remove_vowels (substring text 1))))))", "  (define (is_vowel c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (cond\n    [(empty? text) empty]\n\
    \    [(is_vowel (first text)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouyAEIOUY]\"\
    \ text \"\"))\n", "  (define (to_upper character)\n    (if (char-&gt;integer character)\n\
    \        (- (char-&gt;integer character) 32)\n        (char-&gt;integer character)))\n\
    \  (define (to_lower character)\n    (if (char-&gt;integer character)\n      \
    \  (+ (char-&gt;integer character) 32)\n        (char-&gt;integer character)))\n\
    \  (define (remove_vowels_iter text)\n    (if (string-&gt;list text)\n       \
    \ (cond ((or (= (char-&gt;integer (string-ref text 0)) (to_upper #\\a))\n    \
    \               (= (char-&gt;integer (string-ref text 0)) (to_upper #\\e))\n \
    \                  (= (char-&gt;integer (string-ref text 0)) (to_upper #\\i))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_upper #\\o))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_upper #\\u)))\n\
    \               (remove_vowels_iter (substring text 1 (string-length text))))\n\
    \              ((or (= (char-&gt;integer (string-ref text 0)) (to_lower #\\a))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_lower #\\e))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_lower #\\i))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_lower #\\o))\n\
    \                   (= (char-&gt;integer (string-ref text 0)) (to_lower #\\u)))\n\
    \               (remove_vowels_iter (substring text 1 (string-length text))))\n\
    \              (else (string-append (string (string-ref text 0))\n           \
    \                        (remove_vowels_iter (substring text 1 (string-length\
    \ text))))))\n        (string)))\n  (remove_vowels_iter text))\n", "  (define\
    \ (helper text-list result)\n    (cond ((empty? text-list) result)\n         \
    \ ((char-is-vowel? (first text-list)) (helper (rest text-list) result))\n    \
    \      (else (helper (rest text-list) (concatenate result (list (first text-list)))))))\n\
    \  (helper (string->list text) '()))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n```\n\n\
    ```racket\n#lang racket\n", "  (string-append (regexp-match* #rx\"[^aeiou]\" text)))\n",
  "  (define (contains_vowel? text)\n    (cond\n      ((equal? (string-length text)\
    \ 0) #f)\n      ((equal? (string-length text) 1)\n       (equal? (string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0)) #t))\n      (else (or (equal? (string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0)) #t)\n                (contains_vowel? (substring\
    \ text 1))\n                ))))\n  (define (remove_first_vowel text)\n    (cond\n\
    \      ((equal? (string-length text) 0) text)\n      ((equal? (string-length text)\
    \ 1)\n       (cond\n         ((equal? (string-contains \"aeiouAEIOU\" (string-ref\
    \ text 0)) #t) \"\")\n         (else text)))\n      (else (cond\n            \
    \  ((equal? (string-contains \"aeiouAEIOU\" (string-ref text 0)) #t)\n       \
    \        (substring text 1))\n              (else (string-append (substring text\
    \ 0 1)\n                                   (remove_first_vowel (substring text\
    \ 1))))))))\n  (cond\n    ((equal? (string-length text) 0) text)\n    ((equal?\
    \ (string-length text) 1)\n     (cond\n       ((equal? (string-contains \"aeiouAEIOU\"\
    \ (string-ref text 0)) #t) \"\")\n       (else text)))\n    (else (if (contains_vowel?\
    \ text)\n              (remove_vowels (remove_first_vowel text))\n           \
    \   text))))\n", "  (if (empty? text)\n      \"\"\n      (if (or (char=? (first\
    \ text) #\\a)\n              (char=? (first text) #\\e)\n              (char=?\
    \ (first text) #\\i)\n              (char=? (first text) #\\o)\n             \
    \ (char=? (first text) #\\u))\n          (remove_vowels (rest text))\n       \
    \   (string-append (list (first text)) (remove_vowels (rest text))))))\n", " \
    \ (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiouAEIOU]\" text \"\"))\n", "  (string-join (remove (lambda (c) (string-contains\
    \ \"aeiou\" c)) (string->list text)) \"\"))\n\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (if (empty? text)\n      \"\"\n      (if (member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n          (remove_vowels\
    \ (rest text))\n          (string-append (first text) (remove_vowels (rest text))))))\n",
  "  (cond ((null? text) \"\")\n        ((or (member (string-upcase (string-ref text\
    \ 0)) (list #\\A #\\E #\\I #\\O #\\U))\n             (member (string-downcase\
    \ (string-ref text 0)) (list #\\a #\\e #\\i #\\o #\\u)))\n         (remove_vowels\
    \ (substring text 1)))\n        (else (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1))))))\n", "  (cond [(empty? text) empty]\n        [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n        [else (cons (first text)\
    \ (remove_vowels (rest text)))]))\n", '  (string-replace text #rx"a|e|i|o|u|A|E|I|O|U"
    ""))', "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond [(empty? text)\
    \ \"\"]\n        [(or (char=? (first text) #\\a) (char=? (first text) #\\e) (char=?\
    \ (first text) #\\i) (char=? (first text) #\\o) (char=? (first text) #\\u))\n\
    \         (remove_vowels (rest text))]\n        [else (string-append (string (first\
    \ text)) (remove_vowels (rest text)))]))\n", "  (define (remove_vowels_text text1)\n\
    \    (if (string=? text1 \"\")\n        \"\"\n        (let ([c (string-ref text1\
    \ 0)])\n          (cond\n            [(or (string=? c \"a\") (string=? c \"e\"\
    ) (string=? c \"i\") (string=? c \"o\") (string=? c \"u\"))\n             (remove_vowels_text\
    \ (substring text1 1))]\n            [else\n             (string-append c (remove_vowels_text\
    \ (substring text1 1)))]))))\n  (remove_vowels_text text))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n```\n\n```racket\n#lang racket\n", "  (apply\
    \ string (remove (lambda (x) (char-in-set? x \"aeiouAEIOU\" )) (string->list text))))\n",
  "  (define (aux text result)\n    (if (empty? text)\n        result\n        (let\
    \ ([current-char (first text)])\n          (if (or (char=? current-char #\\a)\n\
    \                  (char=? current-char #\\e)\n                  (char=? current-char\
    \ #\\i)\n                  (char=? current-char #\\o)\n                  (char=?\
    \ current-char #\\u))\n              (aux (rest text) result)\n              (aux\
    \ (rest text) (string-append result (string current-char)))))))\n  (aux text \"\
    \"))\n```\n\n## Tests\n\n```racket", "  (regexp-replace* #rx\"[aeiou]\" \"\" text))\n",
  "  (cond [(string=? text \"\") \"\"]\n        [(char-vowel? (string-ref text 0))\
    \ (remove_vowels (substring text 1))]\n        [else (string-append (string (string-ref\
    \ text 0))\n                             (remove_vowels (substring text 1)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (apply string (filter (lambda\
    \ (char)\n                          (not (member char '(\"a\" \"A\" \"e\" \"E\"\
    \ \"i\" \"I\" \"o\" \"O\" \"u\" \"U\"))))\n                        (string->list\
    \ text))))\n", "  (cond\n    ((string=? text \"\") \"\")\n    ((or (member (string-ref\
    \ text 0) '(#\\a #\\e #\\i #\\o #\\u))\n         (member (string-ref text 0) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n     (remove_vowels (substring text 1)))\n    (else\
    \ (string-append (substring text 0 1)\n                         (remove_vowels\
    \ (substring text 1))))))\n", "  (string-join (remove (lambda (c) (or (equal?\
    \ c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u))) (string->list\
    \ text)) \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ (list #\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (list->string (remove (curry char-alphabetic?) (string->list\
    \ text))))\n", "  (cond\n    [(empty? text) text]\n    [(in_set? (first text)\
    \ \"aeiouAEIOU\") (remove_vowels (rest text))]\n    [else (string-append (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text)\n   \
    \  (quote \"\")]\n    [(char-ci=? (first text) #\\a)\n     (remove_vowels (rest\
    \ text))]\n    [(char-ci=? (first text) #\\e)\n     (remove_vowels (rest text))]\n\
    \    [(char-ci=? (first text) #\\i)\n     (remove_vowels (rest text))]\n    [(char-ci=?\
    \ (first text) #\\o)\n     (remove_vowels (rest text))]\n    [(char-ci=? (first\
    \ text) #\\u)\n     (remove_vowels (rest text))]\n    [else\n     (string-append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (define (vowel? c)\n   \
    \ (or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u)))\n  (filter (lambda\
    \ (c) (not (vowel? c))) text))", "  (for/fold ([result '']) ([letter (in-string\
    \ text)])\n    (if (member letter '#(#\\a #\\e #\\i #\\o #\\u))\n        result\n\
    \        (string-append result (string letter)))))\n", "  (string-&gt;list text))\n",
  "  (if (= (string-length text) 0)\n      \"\"\n      (if (member (string-ref text\
    \ 0) \"aeiouAEIOU\")\n          (remove_vowels (substring text 1 (string-length\
    \ text)))\n          (string-append (string-ref text 0) (remove_vowels (substring\
    \ text 1 (string-length text)))))))\n", "  (define (is_vowel c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (filter (lambda (c) (not (is_vowel c))) text))\n",
  "  (cond [(string=? text \"\") text]\n        [(member (string-ref text 0) '(#\\\
    a #\\e #\\i #\\o #\\u)) (remove_vowels (substring text 1))]\n        [else (string-append\
    \ (string (string-ref text 0)) (remove_vowels (substring text 1)))]))\n", "  (define\
    \ vowels '(a e i o u))\n  (define (delete-every text lst)\n    (cond ((null? lst)\
    \ text)\n          ((is-substr? (car lst) text) (delete-every (delete-substr?\
    \ (car lst) text) (cdr lst)))\n          (else (delete-every text (cdr lst)))))\n\
    \  (delete-every text vowels))\n", "  (letrec ([vowels (string-filter (lambda\
    \ (c) (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))) text)]\n\
    \           [non-vowels (string-filter (lambda (c) (not (member c vowels))) text)])\n\
    \    non-vowels))", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define\
    \ (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n       \
    \ (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define\
    \ (remove_vowels-iter accum remaining)\n    (cond\n      [(empty? remaining) accum]\n\
    \      [(is_vowel? (first remaining)) (remove_vowels-iter accum (rest remaining))]\n\
    \      [else (remove_vowels-iter (snoc accum (first remaining)) (rest remaining))]))\n\
    \  (remove_vowels-iter empty text))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(char-in-set? (first text) \"aeiouAEIOU\") (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n \
    \   [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond ((null?\
    \ text) \"\")\n        ((vowel? (car text)) (remove_vowels (cdr text)))\n    \
    \    (else (cons (car text) (remove_vowels (cdr text))))))\n", "  (define (helper\
    \ text sofar)\n    (cond [(string=? text \"\") sofar]\n          [(member (string-ref\
    \ text 0) \"aeiouAEIOU\")\n           (helper (substring text 1) sofar)]\n   \
    \       [else (helper (substring text 1) (string-append sofar (string-ref text\
    \ 0)))]))\n  (helper text \"\"))\n", "  (string-join\n   (filter\n    (lambda\
    \ (x)\n      (not (char-set-contains? (string-&gt;char-set \"aeiou\") x)))\n \
    \   (string-&gt;list text))))\n", "  (let loop ([text text]\n             [result\
    \ '()])\n    (cond [(empty? text) (reverse result)]\n          [(char-vowel? (first\
    \ text)) (loop (rest text) result)]\n          [else (loop (rest text) (cons (first\
    \ text) result))])))", "    (regexp-replace* #rx\"[AEIOUaeiou]\" text \"\"))\n",
  "  (define (remove_vowels_help text)\n    (if (string-empty? text)\n        \"\"\
    \n        (if (member (string-ref text 0) \"aeiouAEIOU\")\n            (remove_vowels_help\
    \ (substring text 1))\n            (string-append (string (string-ref text 0))\
    \ (remove_vowels_help (substring text 1))))))\n  (remove_vowels_help text))\n",
  "  (for/fold ([res '']) ([c (in-string text)])\n    (if (char-set-contains? #\"\
    [aeiou]\" c)\n        res\n        (string-append res (string c)))))\n", "  (define\
    \ (is-vowel letter)\n    (member letter '(#\\a #\\e #\\i #\\o #\\u)))\n  (let\
    \ loop ((letter (string-ref text 0))\n             (index 1)\n             (out\
    \ (if (is-vowel letter)\n                      (string-append \"\" \"\")\n   \
    \                   (string-append (char->string letter) \"\"))))\n    (if (=\
    \ index (string-length text))\n        out\n        (let ((new-letter (string-ref\
    \ text index)))\n          (if (is-vowel new-letter)\n              (loop new-letter\
    \ (+ index 1) out)\n              (loop new-letter (+ index 1) (string-append\
    \ out (char->string new-letter))))))))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (if\
    \ (string=? text \"\")\n      \"\"\n      (if (or (char-ci=? (string-ref text\
    \ 0) #\\a)\n              (char-ci=? (string-ref text 0) #\\e)\n             \
    \ (char-ci=? (string-ref text 0) #\\i)\n              (char-ci=? (string-ref text\
    \ 0) #\\o)\n              (char-ci=? (string-ref text 0) #\\u))\n          (remove_vowels\
    \ (substring text 1))\n          (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1))))))\n", "  (if (string=? text \"\")\n      \"\"\n      (if\
    \ (string-contains \"aeiouAEIOU\" (string-ref text 0))\n          (remove_vowels\
    \ (substring text 1))\n          (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1))))))\n", "  (if (string=? text \"\")\n      \"\"\n      (if\
    \ (char-set-contains? (string->char-set \"aeiou\") (string-ref text 0))\n    \
    \      (remove_vowels (substring text 1 (string-length text)))\n          (string-append\
    \ (string (string-ref text 0)) (remove_vowels (substring text 1 (string-length\
    \ text)))))))\n", "  (let ([vowels (regexp-match* #rx\"[aeiouAEIOU]\" text)])\n\
    \    (string-replace* text vowels \"\")))\n", "  (define (is-vowel? c)\n    (string-contains\
    \ \"aeiouAEIOU\" c))\n  (filter is-vowel? text))\n", "  (regexp-replace* #rx\"\
    [aeiouyAEIOUY]\" text \"\"))\n", "  (cond\n    [(empty? text) text]\n    [(char-vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (string-append (first\
    \ text) (remove_vowels (rest text)))]))\n", "    (cond\n        [(empty? text)\
    \ \"\" ]\n        [(or (= (first text) #\\a)\n             (= (first text) #\\\
    e)\n             (= (first text) #\\i)\n             (= (first text) #\\o)\n \
    \            (= (first text) #\\u))\n            (remove_vowels (rest text))]\n\
    \        [else (string-append (string (first text)) (remove_vowels (rest text)))]))\n\
    \n", "  (define (has_vowel? text)\n    (cond\n      [(or (string=? \"a\" text)\
    \ (string=? \"e\" text) (string=? \"i\" text) (string=? \"o\" text) (string=?\
    \ \"u\" text)) #t]\n      [else #f]))\n  (cond\n    [(string=? \"\" text) text]\n\
    \    [(has_vowel? (string-ref text 0)) (remove_vowels (string-append (substring\
    \ text 1) \"\"))]\n    [else (string-append (string-ref text 0) (remove_vowels\
    \ (string-append (substring text 1) \"\")))]))\n```\n### [p3.rkt](p3.rkt)\n```#lang\
    \ racket\n", "  (define (vowel? ch)\n    (or (char=? ch #\\a)\n        (char=?\
    \ ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=?\
    \ ch #\\u)))\n  (string-remove vowel? text))\n", "  (string-join\n   (filter\n\
    \    (lambda (char)\n      (not (vowel? char)))\n    (string->list text))))\n",
  "  (cond\n    [(empty? text) text]\n    [(member (first text) '(a e i o u A E I\
    \ O U)) (remove_vowels (rest text))]\n    [else (string-append (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(string=? text \"\") text]\n    [(string-member text \"aeiouAEIOU\") (remove_vowels\
    \ (remove-char text))]\n    [else text]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (string-join\n   (filter (lambda (char)\n             (not\
    \ (member char '(#\\a #\\e #\\i #\\o #\\u))))\n           (string->list text))\n\
    \   \"\"))\n", "  (define (inner text)\n    (cond ((null? text) \"\")\n      \
    \    ((or (char=? (car text) #\\a)\n               (char=? (car text) #\\e)\n\
    \               (char=? (car text) #\\i)\n               (char=? (car text) #\\\
    o)\n               (char=? (car text) #\\u))\n           (inner (cdr text)))\n\
    \          (else (string-append (list (car text)) (inner (cdr text))))))\n  (inner\
    \ text))\n", "  (string-join (filter (lambda (x) (not (char-vowel? x))) (string->list\
    \ text)) \"\"))\n", "  (if (empty? text)\n      \"\"\n      (if (vowel? (first\
    \ text))\n          (remove_vowels (rest text))\n          (string-append (first\
    \ text) (remove_vowels (rest text))))))\n", "  (string-filter (compose char-alphabetic?\
    \ char-downcase) text))\n", "  (for/list ([x (in-string text)])\n    (if (char-set-contains\
    \ #\\a (set-of-chars text)) '#\\a\n        (if (char-set-contains #\\e (set-of-chars\
    \ text)) '#\\e\n            (if (char-set-contains #\\i (set-of-chars text)) '#\\\
    i\n                (if (char-set-contains #\\o (set-of-chars text)) '#\\o\n  \
    \                  (if (char-set-contains #\\u (set-of-chars text)) '#\\u\n  \
    \                      x)))))))\n", "  (string-filter (\u03BB (x) (not (or (char-vowel?\
    \ x) (char-in-general-category? #\\Latin x)))) text))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text)\n     (quote\
    \ ())]\n    [(vowel? (first text))\n     (remove_vowels (rest text))]\n    [else\n\
    \     (cons (first text) (remove_vowels (rest text)))]))\n", "  (define vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u))\n  (filter (lambda (letter) (not (member letter\
    \ vowels))) text))\n", "  (define vowels (list #\\a #\\e #\\i #\\o #\\u))\n  (filter\
    \ (lambda (char) (not (member char vowels))) text))\n", "  (cond [(empty? text)\
    \ \"\"]\n        [(char-in-range? (string-ref text 0) #\\a #\\z)\n         (if\
    \ (or (char=? (string-ref text 0) #\\a)\n                 (char=? (string-ref\
    \ text 0) #\\e)\n                 (char=? (string-ref text 0) #\\i)\n        \
    \         (char=? (string-ref text 0) #\\o)\n                 (char=? (string-ref\
    \ text 0) #\\u))\n             (remove_vowels (substring text 1))\n          \
    \   (string-append (string (string-ref text 0))\n                            (remove_vowels\
    \ (substring text 1))))]\n        [else text]))\n", "  (cond [(empty? text) \"\
    \"]\n        [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\"\
    \ \"I\" \"O\" \"U\"))\n         (remove_vowels (rest text))]\n        [else (string-append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (if (string=? text \"\"\
    )\n      \"\"\n      (if (char-vowel? (string-ref text 0))\n          (remove_vowels\
    \ (substring text 1))\n          (string-append (string (string-ref text 0))\n\
    \                         (remove_vowels (substring text 1))))))", "  (define\
    \ (exclude? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\\
    U)))\n  (define (loop result text)\n    (cond ((null? text) result)\n        \
    \  ((exclude? (car text)) (loop result (cdr text)))\n          (else (loop (string-append\
    \ result (list (car text))) (cdr text)))))\n  (loop \"\" text))\n", "  (regexp-replace*\
    \ #rx\"[aouiey]\" text \"\"))\n", "  (filter (lambda (x) (not (member x '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\")))) (string->list text)))\n", "  (regexp-replace* #rx\"\
    a|e|i|o|u|A|E|I|O|U\" text \"\"))\n", "  (cond\n    [(empty? text) '()]\n    [(not\
    \ (in-vowel? (first text))) (cons (first text) (remove_vowels (rest text)))]\n\
    \    [else (remove_vowels (rest text))]))\n", "  (if (string=? text \"\")\n  \
    \    \"\"\n      (if (member (string-ref text 0) \"aeiouAEIOU\")\n          (remove_vowels\
    \ (substring text 1))\n          (string-append (string (string-ref text 0)) (remove_vowels\
    \ (substring text 1))))))\n", "  (define (remove_vowels_iter text lis)\n    (if\
    \ (empty? text)\n        (list->string (reverse lis))\n        (if (memq (car\
    \ text) '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))\n            (remove_vowels_iter\
    \ (cdr text) lis)\n            (remove_vowels_iter (cdr text) (cons (car text)\
    \ lis)))))\n  (remove_vowels_iter (string->list text) '()))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond ((or (eq? text \"\") (eq? text\
    \ \"a\") (eq? text \"e\") (eq? text \"i\") (eq? text \"o\") (eq? text \"u\"))\
    \ \"\")\n        ((string-contains text #\\a) (remove_vowels (string-replace text\
    \ #\\a \"\")))\n        ((string-contains text #\\e) (remove_vowels (string-replace\
    \ text #\\e \"\")))\n        ((string-contains text #\\i) (remove_vowels (string-replace\
    \ text #\\i \"\")))\n        ((string-contains text #\\o) (remove_vowels (string-replace\
    \ text #\\o \"\")))\n        ((string-contains text #\\u) (remove_vowels (string-replace\
    \ text #\\u \"\")))\n        (else text)))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (string-filter (lambda (x) (not (member x '(#\\a #\\e #\\\
    i #\\o #\\u)))) text))\n\n", "  (cond\n    [(empty? text) empty]\n    [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (remove-vowels-helper text '()))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (define (is_vowel char)\n    (equal? (string-upcase char)\n  \
    \          (string-upcase (list-ref '(\"a\" \"e\" \"i\" \"o\" \"u\") (random 5)))))\n\
    \  (for/fold ([result '']) ([char (in-string text)])\n    (cond\n      [(is_vowel\
    \ char) result]\n      [else (string-append result char)])))\n", "  (regexp-replace*\
    \ #rx\"[AEIOUaeiou]\" text \"\"))\n", "  (define (is_vowel ch)\n    (or (char=?\
    \ ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=?\
    \ ch #\\o)\n        (char=? ch #\\u)))\n  (define (loop i)\n    (cond ((equal?\
    \ i (string-length text))\n           (make-string 0))\n          ((is_vowel (string-ref\
    \ text i))\n           (loop (+ i 1)))\n          (else\n           (string-append\
    \ (make-string 1 (string-ref text i))\n                          (loop (+ i 1))))))\n\
    \  (loop 0))\n", "  (cond [(empty? text) \"\"]\n        [(in-vowel? (first text))\
    \ (remove_vowels (rest text))]\n        [else (string-append (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (define (remove-helper text i acc)\n    (cond\n      [(= i (string-length text))\
    \ (string-append (reverse acc))]\n      [(string-contains \"aeiouAEIOU\" (string-ref\
    \ text i)) (remove-helper text (+ i 1) acc)]\n      [else (remove-helper text\
    \ (+ i 1) (string-append (list (string-ref text i)) acc))]))\n  (remove-helper\
    \ text 0 \"\"))\n", "  (string-filter (compose not char-is-vowel?) text))\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (local [(define (helper\
    \ text result)\n            (cond\n              [(empty? text) result]\n    \
    \          [(char-set=? (char-set \"aeiouAEIOU\") (char-set (string-ref text 0)))\n\
    \               (helper (substring text 1) result)]\n              [else (helper\
    \ (substring text 1) (string-append result (string (string-ref text 0))))]))]\n\
    \    (helper text \"\")))\n", "  (cond\n    [(string=? text \"\") text]\n    [(string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0)) (remove_vowels (substring text 1))]\n  \
    \  [else (string-append (string-ref text 0) (remove_vowels (substring text 1)))]))\n",
  "  (define (is_vowel? c)\n    (member (string-upcase c) '(\"A\" \"E\" \"I\" \"O\"\
    \ \"U\")))\n  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty?\
    \ text) text]\n    [(char-vowel? (first text)) (remove_vowels (rest text))]\n\
    \    [else (string-append (first text) (remove_vowels (rest text)))]))\n", " \
    \ (define (remove_letter char text)\n    (string-append (regexp-replace* #rx(char)\
    \ text \"\") (regexp-replace* #rx(char (upcase char)) text \"\")))\n  (define\
    \ (remove_vowels' text)\n    (cond\n      [(empty? text) empty]\n      [(member\
    \ (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels' (remove_letter\
    \ (first text) text))]\n      [else (cons (first text) (remove_vowels' (remove_letter\
    \ (first text) text)))]))\n  (remove_vowels' text))\n", "  (if (string=? text\
    \ \"\")\n      \"\"\n      (if (is_vowel (string-ref text 0))\n          (remove_vowels\
    \ (substring text 1 (string-length text)))\n          (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1 (string-length text)))))))", "  (define\
    \ (is-vowel? char)\n    (or (equal? char \"a\")\n        (equal? char \"e\")\n\
    \        (equal? char \"i\")\n        (equal? char \"o\")\n        (equal? char\
    \ \"u\")))\n  (define (remove_vowels-helper new-string text)\n    (cond ((equal?\
    \ \"\" text) new-string)\n          ((is-vowel? (string-ref text 0)) (remove_vowels-helper\
    \ new-string (substring text 1)))\n          (else (remove_vowels-helper (string-append\
    \ new-string (string-ref text 0)) (substring text 1)))))\n  (remove_vowels-helper\
    \ \"\" text))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (string-ci=?\
    \ (substring text 0 1) \"a\")\n          (remove_vowels (substring text 1))\n\
    \          (if (string-ci=? (substring text 0 1) \"e\")\n              (remove_vowels\
    \ (substring text 1))\n              (if (string-ci=? (substring text 0 1) \"\
    i\")\n                  (remove_vowels (substring text 1))\n                 \
    \ (if (string-ci=? (substring text 0 1) \"o\")\n                      (remove_vowels\
    \ (substring text 1))\n                      (if (string-ci=? (substring text\
    \ 0 1) \"u\")\n                          (remove_vowels (substring text 1))\n\
    \                          (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1))))))))))", "  (regexp-replace* #rx\"^[aeiou]*$\" text \"\"\
    ))\n", "  (cond\n    [(empty? text) \"\"]\n    [(vowel? (first text)) (remove_vowels\
    \ (rest text))]\n    [else (string-append (list (first text)) (remove_vowels (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(any_vowel? (first\
    \ text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (for/fold ([result '']) ([elem (in-string text)])\n\
    \    (define vowel? (string-member \"aeiouAEIOU\" elem))\n    (if vowel?\n   \
    \     result\n        (string-append result elem))))\n", "  (if (empty? text)\n\
    \      \"\"\n      (if (char-vowel? (first text))\n          (remove_vowels (rest\
    \ text))\n          (string-append (string (first text)) (remove_vowels (rest\
    \ text))))))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (vowel? (string-ref\
    \ text 0))\n          (remove_vowels (substring text 1 (string-length text)))\n\
    \          (string-append (substring text 0 1) (remove_vowels (substring text\
    \ 1 (string-length text)))))))\n", "  (define (remove_vowels_rec text result)\n\
    \    (cond\n      [(empty? text) (list->string result)]\n      [(char-vowel? (first\
    \ text)) (remove_vowels_rec (rest text) result)]\n      [else (remove_vowels_rec\
    \ (rest text) (append result (list (first text))))]))\n  (remove_vowels_rec text\
    \ '()))\n", "    (string-filter (lambda (c)\n                        (not (char-ci=?\
    \ c #\\a)\n                             (char-ci=? c #\\e)\n                 \
    \            (char-ci=? c #\\i)\n                             (char-ci=? c #\\\
    o)\n                             (char-ci=? c #\\u)))\n                   text))\n",
  "  (define (aux text)\n    (cond\n      [(empty? text) text]\n      [(member (first\
    \ text) '#(#\\a #\\e #\\i #\\o #\\u)) (aux (rest text))]\n      [else (cons (first\
    \ text) (aux (rest text)))]))\n  (list->string (aux (string->list text))))\n",
  "  (string-join (filter (lambda (s)\n                         (not (vowel? s)))\n\
    \                       (string->list text))\n               \"\"))", "  (if (string=?\
    \ text \"\")\n      \"\"\n      (let ([ch (string-ref text 0)])\n        (cond\n\
    \         [(char-ci=? ch #\\a) (remove_vowels (substring text 1))]\n         [(char-ci=?\
    \ ch #\\e) (remove_vowels (substring text 1))]\n         [(char-ci=? ch #\\i)\
    \ (remove_vowels (substring text 1))]\n         [(char-ci=? ch #\\o) (remove_vowels\
    \ (substring text 1))]\n         [(char-ci=? ch #\\u) (remove_vowels (substring\
    \ text 1))]\n         [else (string-append (string ch) (remove_vowels (substring\
    \ text 1)))]))))\n```\n\n1. \uD568\uC218\uB97C \uC791\uC131\uD558\uAE30 \uC804\
    \uC5D0 \uC815\uC758\uD558\uB294 \uAC83\uC774 \uC88B\uB2E4. \uD568\uC218\uAC00\
    \ \uBB34\uC5C7\uC744 \uD558\uB294\uC9C0 \uC815\uC758\uD558\uACE0 \uC65C \uD544\
    \uC694\uD55C\uC9C0 \uC815\uC758\uD558\uACE0 \uC5B4\uB5BB\uAC8C \uD558\uB294\uC9C0\
    \ \uC815\uC758\uD55C\uB2E4.\n\n    ```racket\n    ;; remove_vowels is a function\
    \ that takes string and returns string without vowels.\n    ```\n\n2. \uC774 \uD568\
    \uC218\uB294 \uAE30\uBCF8\uC801\uC73C\uB85C \uBB38\uC790\uC5F4\uC744 \uC0AD\uC81C\
    \uD558\uB294 \uD568\uC218\uC774\uB2E4. \uBB38\uC790\uC5F4\uC744 \uC0AD\uC81C\uD558\
    \uB294 \uD568\uC218\uB97C \uC791\uC131\uD560 \uB54C \uC7AC\uADC0\uB97C \uC0AC\uC6A9\
    \uD558\uB294 \uAC83\uC774 \uC88B\uB2E4. \uC774 \uD568\uC218\uC758", "  (if (string=?\
    \ text \"\")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\" (string-ref\
    \ text 0))\n          (remove_vowels (substring text 1))\n          (string-append\
    \ (string-ref text 0) (remove_vowels (substring text 1))))))\n", "  (define (remove_vowels_h\
    \ text)\n    (cond [(null? text) '()]\n          [(member (car text) '(#\\a #\\\
    e #\\i #\\o #\\u)) (remove_vowels_h (cdr text))]\n          [else (cons (car text)\
    \ (remove_vowels_h (cdr text)))]))\n  (list->string (remove_vowels_h (string->list\
    \ text))))\n", "  (regexp-replace* #rx\"[aeiouyAEIOUY]\" text \"\"))\n", "  (string-join\n\
    \   (filter (\u03BB (c) (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n \
    \          (string->list text))\n   \"\"))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (snoc (remove_vowels\
    \ (rest text)) (first text))]))\n", "  (regexp-replace* #rx\"a|e|i|o|u\" text\
    \ \"\"))\n", "  (cond\n    [(empty? text) text]\n    [(member (first text) '(#\\\
    a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (string-append\
    \ (string (first text)) (remove_vowels (rest text)))]))\n", "  (string-append\
    \ (list->string (filter (lambda (x)\n                                        \
    \ (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n                       \
    \                (string->list text)))))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (if (null? text)\n      \"\"\n      (if (or (char=? (car\
    \ text) #\\a)\n              (char=? (car text) #\\e)\n              (char=? (car\
    \ text) #\\i)\n              (char=? (car text) #\\o)\n              (char=? (car\
    \ text) #\\u))\n          (remove_vowels (cdr text))\n          (string-append\
    \ (string (car text)) (remove_vowels (cdr text))))))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (if (empty? text)\n      text\n      (if (member (first text) '(#\\a #\\e #\\\
    i #\\o #\\u))\n          (remove_vowels (rest text))\n          (cons (first text)\
    \ (remove_vowels (rest text))))))\n", "  (cond\n    [(empty? text)\n     '()]\n\
    \    [(in-vowel? (first text))\n     (remove_vowels (rest text))]\n    [else\n\
    \     (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (let loop ([text text]\n\
    \             [prev text])\n    (cond\n      [(string=? text \"\") prev]\n   \
    \   [(string-contains text \"a\") (loop (regexp-replace \"a\" text \"\") prev)]\n\
    \      [(string-contains text \"e\") (loop (regexp-replace \"e\" text \"\") prev)]\n\
    \      [(string-contains text \"i\") (loop (regexp-replace \"i\" text \"\") prev)]\n\
    \      [(string-contains text \"o\") (loop (regexp-replace \"o\" text \"\") prev)]\n\
    \      [(string-contains text \"u\") (loop (regexp-replace \"u\" text \"\") prev)]\n\
    \      [else (loop (substring text 1) (string-append prev (substring text 0 1)))])))\n",
  "  (string-join (list->set (regexp-split #rx\"[aeiouAEIOU]\" text)) \"\"))\n", " \
    \ (string-filter (lambda (ch) (not (member ch '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    )))) text))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (let loop\
    \ ([text text]\n             [result '()])\n    (cond\n      [(empty? text) (list->string\
    \ (reverse result))]\n      [(vowel? (first text)) (loop (rest text) result)]\n\
    \      [else (loop (rest text) (cons (first text) result))])))\n", "  (cond [(string=?\
    \ text \"\") text]\n        [(member (string-ref text 0) '(#\\a #\\e #\\i #\\\
    o #\\u))\n         (remove_vowels (substring text 1))]\n        [else (string-append\
    \ (substring text 0 1)\n                             (remove_vowels (substring\
    \ text 1)))]))\n", "  (string-filter (lambda (char) (not (member char \"aeiouAEIOU\"\
    ))) text))\n", "  (cond [(empty? text) \"\"]\n        [(member (first text) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n         (remove_vowels\
    \ (rest text))]\n        [else (string-append (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (string-join (remove (lambda (x) (string-contains \"aeiouAEIOU\"\
    \ x)) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (define (aux text res)\n    (if (eq? text \"\")\n        res\n\
    \        (if (char-ci=? (string-ref text 0) #\\a)\n            (aux (substring\
    \ text 1) res)\n            (if (char-ci=? (string-ref text 0) #\\e)\n       \
    \         (aux (substring text 1) res)\n                (if (char-ci=? (string-ref\
    \ text 0) #\\i)\n                    (aux (substring text 1) res)\n          \
    \          (if (char-ci=? (string-ref text 0) #\\o)\n                        (aux\
    \ (substring text 1) res)\n                        (if (char-ci=? (string-ref\
    \ text 0) #\\u)\n                            (aux (substring text 1) res)\n  \
    \                          (aux (substring text 1) (string-append res (string\
    \ (string-ref text 0))))))))))))\n  (aux text \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouyAEIOUY]\" text \"\"\
    ))\n", "  (for/fold ([text text]) ([letter (in-string \"aeiouAEIOU\")])\n    (string-replace\
    \ text letter \"\")))\n", "    (cond [(empty? text) empty]\n          [(member\
    \ (first text) '(#\\a #\\e #\\i #\\o #\\u))\n           (remove_vowels (rest text))]\n\
    \          [else (cons (first text) (remove_vowels (rest text)))]))\n```\n\n```\n\
    #lang racket\n", "  (cond\n    [(empty? text) \"\"]\n    [(member (first text)\
    \ '(a e i o u A E I O U)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"a|e|i|o|u\"\
    \ text \"\"))\n", "  (define (take-not-vowels c)\n    (if (or (equal? c #\\a)\
    \ (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u))\n        #\\\
    space\n        c))\n  (define (re-filter c)\n    (not (char=? c #\\space)))\n\
    \  (list->string (filter re-filter (string-map take-not-vowels text))))\n```\n\
    \n```racket\n#lang racket\n", "  (string-join (filter (lambda (c) (not (vowel?\
    \ c))) (string->list text))))\n", "  (string-join (regexp-match* #rx\"^(.)*$\"\
    \ text) \"\"))\n", "  (string-join (remove (lambda (x) (vowel? x)) (string->list\
    \ text)) \"\"))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0))\n          (remove_vowels (substring text\
    \ 1))\n          (string-append (string-append (string-ref text 0) \"\")\n   \
    \                      (remove_vowels (substring text 1))))))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (cond\n    [(string=? text \"\") \"\"]\n    [(string-contains \"aeiouAEIOU\"\
    \ (string-ref text 0)) (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (string-ref text 0) (remove_vowels (substring text 1)))]))\n", "  (list->string\n\
    \   (filter (lambda (x) (not (member x '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U))))\n           (string->list text))))\n", "  (local [(define (help\
    \ text result)\n            (cond [(string=? text \"\") result]\n            \
    \      [(vowel? (string-ref text 0)) (help (substring text 1) result)]\n     \
    \             [else (help (substring text 1) (string-append result (string-ref\
    \ text 0)))]))]\n    (help text \"\")))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (if (empty? text) \n      \"\"\n      (let ((first-char (first\
    \ text))\n            (rest-of-string (rest text)))\n        (cond\n         ((equal?\
    \ first-char #\\a) (remove_vowels rest-of-string))\n         ((equal? first-char\
    \ #\\e) (remove_vowels rest-of-string))\n         ((equal? first-char #\\i) (remove_vowels\
    \ rest-of-string))\n         ((equal? first-char #\\o) (remove_vowels rest-of-string))\n\
    \         ((equal? first-char #\\u) (remove_vowels rest-of-string))\n        \
    \ (else (string-append (string first-char) (remove_vowels rest-of-string)))))))\n",
  "  (if (string=? text \"\")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\"\
    \ (string-ref text 0))\n          (remove_vowels (substring text 1))\n       \
    \   (string-append (string-ref text 0) (remove_vowels (substring text 1))))))\n",
  "  (if (string=? text \"\") \"\"\n      (if (or (string=? (substring text 0 1) \"\
    a\") (string=? (substring text 0 1) \"e\") (string=? (substring text 0 1) \"i\"\
    ) (string=? (substring text 0 1) \"o\") (string=? (substring text 0 1) \"u\"))\n\
    \          (remove_vowels (substring text 1 (string-length text)))\n         \
    \ (string-append (substring text 0 1) (remove_vowels (substring text 1 (string-length\
    \ text)))))))", "  (apply string\n         (filter (lambda (ch)\n            \
    \       (not (vowel? ch)))\n                 (string->list text))))\n", "  (if\
    \ (string=? text \"\")\n      \"\"\n      (if (or (char-vowel? (string-ref text\
    \ 0))\n              (char-vowel? (string-ref text 0) #:use-locale? #t))\n   \
    \       (remove_vowels (substring text 1))\n          (string-append (string (string-ref\
    \ text 0))\n                         (remove_vowels (substring text 1))))))\n",
  "  (string-append (regexp-match* #rx\"[^aeiou]\" text)))\n", "  (if (string=? text\
    \ \"\")\n      \"\"\n      (if (string-ci=? (substring text 0 1) \"a\")\n    \
    \      (remove_vowels (substring text 1))\n          (if (string-ci=? (substring\
    \ text 0 1) \"e\")\n              (remove_vowels (substring text 1))\n       \
    \       (if (string-ci=? (substring text 0 1) \"i\")\n                  (remove_vowels\
    \ (substring text 1))\n                  (if (string-ci=? (substring text 0 1)\
    \ \"o\")\n                      (remove_vowels (substring text 1))\n         \
    \             (if (string-ci=? (substring text 0 1) \"u\")\n                 \
    \         (remove_vowels (substring text 1))\n                          (string-append\
    \ (substring text 0 1)\n                                         (remove_vowels\
    \ (substring text 1))))))))))\n", "  (define (vowel? ch)\n    (member ch '(#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (doer chs results)\n    (if (null? chs)\n\
    \        results\n        (doer (cdr chs)\n              (if (vowel? (car chs))\n\
    \                  results\n                  (cons (car chs) results)))))\n \
    \ (doer (string->list text) '()))\n", "  (filter (compose char-alpha? (compose\
    \ not string-contains? \"aeiouAEIOU\")) text))\n", "  (for/fold ([result '()])\n\
    \            ([c (in-string text)])\n            (if (or (char-ci=? c #\\a)\n\
    \                    (char-ci=? c #\\e)\n                    (char-ci=? c #\\\
    i)\n                    (char-ci=? c #\\o)\n                    (char-ci=? c #\\\
    u))\n                result\n                (cons c result))))\n", "  (string-join\
    \ (filter (compose not (string-contains \"aeiou\")) (string->list text)) \"\"\
    ))\n", "  (define (remove_char chars text)\n    (if (empty? text)\n        ''\n\
    \        (if (char-in-string (first text) chars)\n            (remove_char chars\
    \ (rest text))\n            (string-append (first text) (remove_char chars (rest\
    \ text))))))\n  (remove_char \"aeiou\" text))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (define (remove-vowels-from-list lst)\n    (cond [(empty?\
    \ lst) empty]\n          [(vowel? (first lst)) (remove-vowels-from-list (rest\
    \ lst))]\n          [else (cons (first lst) (remove-vowels-from-list (rest lst)))]))\n\
    \  (string-&gt;list (list-&gt;string (remove-vowels-from-list (string-&gt;list\
    \ text)))))\n", "  (string-&gt;list\n   (regexp-replace* #rx\"[aeiouAEIOU]\" (string-&gt;list\
    \ text) \"\")))\n", "  (define (is_vowel ch)\n    (member ch '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (remove_vowels_helper\
    \ text result)\n    (cond\n      [(empty? text) (reverse result)]\n      [(is_vowel\
    \ (first text)) (remove_vowels_helper (rest text) result)]\n      [else (remove_vowels_helper\
    \ (rest text) (cons (first text) result))]))\n  (remove_vowels_helper text '()))\n",
  "  (cond\n    ((string=? text \"\") \"\")\n    ((char-vowel? (string-ref text 0))\
    \ (remove_vowels (substring text 1)))\n    (else (string-append (string (string-ref\
    \ text 0)) (remove_vowels (substring text 1))))))\n", "  (regexp-replace* #rx\"\
    [aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"a|e|i|o|u\" text \"\"\
    ))\n", "  (cond\n    [(empty? text) text]\n    [(vowel? (first text)) (remove_vowels\
    \ (rest text))]\n    [else (string-append (list (first text)) (remove_vowels (rest\
    \ text)))]))\n", "  (string-map (lambda (char)\n                (if (member char\
    \ '#(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n         \
    \           (string-append \"\")\n                    (string char)))\n      \
    \        text))", "  (filter (lambda (c) (not (member c '(#\\a #\\e #\\i #\\o\
    \ #\\u #\\A #\\E #\\I #\\O #\\U)))) text))\n", "  (if (not (string? text))\n \
    \     (error \"text is not a string\")\n      (let lp ((text text) (acc \"\"))\n\
    \        (cond ((null? text) acc)\n              ((member (car text) '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n               (lp (cdr\
    \ text) acc))\n              (else (lp (cdr text) (string-append acc (car text))))))))\n",
  "  (string-join (filter (lambda (c) (not (member c '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")))) (string->list text)) \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (string-join\
    \ (remove\n                (lambda (x) (or (char-ci=? x #\\a)\n              \
    \                  (char-ci=? x #\\e)\n                                (char-ci=?\
    \ x #\\i)\n                                (char-ci=? x #\\o)\n              \
    \                  (char-ci=? x #\\u)))\n                (string->list text))\n\
    \               \"\"))\n", "  (string-join (remove \n                (lambda (s)\
    \ (member s '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \                (string-split text \"\") \"\") \"\"))\n", "  (define (iter text\
    \ result)\n    (cond ((empty? text) result)\n          ((char-ci=? (first text)\
    \ #\\a) (iter (rest text) result))\n          ((char-ci=? (first text) #\\e) (iter\
    \ (rest text) result))\n          ((char-ci=? (first text) #\\i) (iter (rest text)\
    \ result))\n          ((char-ci=? (first text) #\\o) (iter (rest text) result))\n\
    \          ((char-ci=? (first text) #\\u) (iter (rest text) result))\n       \
    \   (else (iter (rest text) (string-append result (string (first text)))))))\n\
    \  (iter text \"\"))\n", "  (cond ((string=? text \"\") \"\")\n        ((member\
    \ (string-ref text 0) '#(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\"\
    \ \"U\")) (remove_vowels (substring text 1)))\n        (else (string-append (string\
    \ (string-ref text 0)) (remove_vowels (substring text 1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
