name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> vowels_count(\"\
  abcde\")\n;; 2\n;; >>> vowels_count(\"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (list-length (filter (lambda (e) (or (equal? e #\\a) (equal? e #\\\
    e) (equal? e #\\i) (equal? e #\\o) (equal? e #\\u))) s)))\n", "  (local ((define\
    \ (is_vowel? s)\n            (char-set-contains?\n             (char-set #\\a\
    \ #\\e #\\i #\\o #\\u #\\y)\n             (string-ref s 0))))\n    (if (empty?\
    \ s)\n        0\n        (+ (if (is_vowel? s) 1 0)\n           (vowels_count (substring\
    \ s 1))))))\n", "  (define (is_vowel c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\")))\n  (define (find-vowels s i n)\n    (cond\n      [(empty? s) n]\n\
    \      [(is_vowel (string-ref s i)) (find-vowels s (+ i 1) (+ n 1))]\n      [else\
    \ (find-vowels s (+ i 1) n)]))\n  (find-vowels s 0 0))\n", "  (local ((define\
    \ (is-vowel? c)\n            (char-set-contains? (char-set #\\a #\\e #\\i #\\\
    o #\\u) c)))\n    (if (string-empty? s)\n        0\n        (if (is-vowel? (string-ref\
    \ s 0))\n            (+ 1 (vowels_count (substring s 1)))\n            (vowels_count\
    \ (substring s 1))))))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (vowels_count_helper s i acc)\n    (if (=\
    \ i (string-length s))\n        acc\n        (if (is_vowel (string-ref s i))\n\
    \            (vowels_count_helper s (+ i 1) (+ acc 1))\n            (vowels_count_helper\
    \ s (+ i 1) acc))))\n  (vowels_count_helper s 0 0))\n", "  (cond [(empty? s) 0]\n\
    \        [(string-contains \"aeiou\" (string-ref s (sub1 (string-length s))))\
    \ 1]\n        [else 0]))\n", "  (define (char->num c)\n    (cond\n      [(char=?\
    \ c #\\a) 1]\n      [(char=? c #\\e) 1]\n      [(char=? c #\\i) 1]\n      [(char=?\
    \ c #\\o) 1]\n      [(char=? c #\\u) 1]\n      [(char=? c #\\y) 1]\n      [else\
    \ 0]))\n  (letrec ([func (lambda (s)\n                   (cond\n             \
    \        [(empty? s) 0]\n                     [(char=? (first s) #\\y)\n     \
    \                 (if (empty? (rest s)) 1 0)]\n                     [else (+ (char->num\
    \ (first s)) (func (rest s)))]))])\n    (func s)))\n", "  (cond\n    [(string=?\
    \ s \"\") 0]\n    [(or (string=? (substring s 0 1) \"a\")\n         (string=?\
    \ (substring s 0 1) \"e\")\n         (string=? (substring s 0 1) \"i\")\n    \
    \     (string=? (substring s 0 1) \"o\")\n         (string=? (substring s 0 1)\
    \ \"u\")\n         (string=? (substring s 0 1) \"y\"))\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n", "  (if (or\
    \ (= (string-length s) 0)\n          (= (string-length s) 1))\n      0\n     \
    \ (cond\n       ((or (char=? (string-ref s (- (string-length s) 1)) #\\a)\n  \
    \          (char=? (string-ref s (- (string-length s) 1)) #\\e)\n            (char=?\
    \ (string-ref s (- (string-length s) 1)) #\\i)\n            (char=? (string-ref\
    \ s (- (string-length s) 1)) #\\o)\n            (char=? (string-ref s (- (string-length\
    \ s) 1)) #\\u)\n            (char=? (string-ref s (- (string-length s) 1)) #\\\
    y))\n        (+ 1 (vowels_count (substring s 0 (- (string-length s) 1)))))\n \
    \      (else (vowels_count (substring s 0 (- (string-length s) 1)))))))", "  (define\
    \ (is_vowel c)\n    (cond\n      [(equal? c #\\a) #t]\n      [(equal? c #\\e)\
    \ #t]\n      [(equal? c #\\i) #t]\n      [(equal? c #\\o) #t]\n      [(equal?\
    \ c #\\u) #t]\n      [(equal? c #\\y) #t]\n      [else #f]))\n  (if (equal? (string-length\
    \ s) 0)\n      0\n      (if (is_vowel (string-ref s (sub1 (string-length s))))\n\
    \          (+ 1 (vowels_count (substring s 0 (sub1 (string-length s)))))\n   \
    \       (vowels_count (substring s 0 (sub1 (string-length s)))))))\n", "  (cond\
    \ [(string=? s \"\") 0]\n        [(or (string=? (substring s 0 1) \"a\")\n   \
    \          (string=? (substring s 0 1) \"e\")\n             (string=? (substring\
    \ s 0 1) \"i\")\n             (string=? (substring s 0 1) \"o\")\n           \
    \  (string=? (substring s 0 1) \"u\")\n             (string=? (substring s 0 1)\
    \ \"y\"))\n         (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count\
    \ (substring s 1))]))\n", "  (length (filter (lambda (c) (char-vowel? c)) (string->list\
    \ s))))\n", "  (cond [(string=? (substring s (sub1 (string-length s)) (string-length\
    \ s)) \"y\")\n         (+ (vowels_count (substring s 0 (sub1 (string-length s))))\
    \ 1)]\n        [(or (char=? (string-ref s 0) #\\a)\n             (char=? (string-ref\
    \ s 0) #\\e)\n             (char=? (string-ref s 0) #\\i)\n             (char=?\
    \ (string-ref s 0) #\\o)\n             (char=? (string-ref s 0) #\\u))\n     \
    \    (+ (vowels_count (substring s 1 (string-length s))) 1)]\n        [else (vowels_count\
    \ (substring s 1 (string-length s)))]))\n", "  (vowels_helper s '()))\n", "  (let\
    \ loop ([s s] [vowels 0])\n    (if (string-empty? s)\n        vowels\n       \
    \ (let ([c (string-ref s 0)])\n          (if (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\y))\n              (loop (substring s 1) (+ vowels 1))\n              (loop\
    \ (substring s 1) vowels))))))", "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n\
    \  (define (vowels-aux s list)\n    (if (null? s)\n        0\n        (if (member\
    \ (car s) list)\n            (+ 1 (vowels-aux (cdr s) list))\n            (vowels-aux\
    \ (cdr s) list))))\n  (if (and (not (null? s)) (equal? (car (reverse s)) #\\y))\n\
    \      (+ 1 (vowels-aux (reverse (cdr (reverse s))) vowels))\n      (vowels-aux\
    \ s vowels)))\n", "  (cond\n    [(empty? s) 0]\n    [(not (string-contains-ci?\
    \ \"aeiou\" (string-ref s 0))) (vowels_count (substring s 1))]\n    [else (+ 1\
    \ (vowels_count (substring s 1)))]))\n", "  (define (vowels)\n    (list 'a 'e\
    \ 'i 'o 'u 'y))\n  (define (helper str v)\n    (cond ((null? str) v)\n       \
    \   ((member (car str) vowels) (helper (cdr str) (+ v 1)))\n          (else (helper\
    \ (cdr str) v))))\n  (helper (string->list s) 0))", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u)) (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s)\
    \ #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n```\n\n###\
    \ Question 2\n\n```\n#lang racket\n", "  (letrec ([vowels-list (list #\\a #\\\
    e #\\i #\\o #\\u #\\y)]\n           [last-char (last s)]\n           [is-last-char-vowel?\
    \ (member (string-downcase last-char) vowels-list)])\n    (cond\n      [(empty?\
    \ s) 0]\n      [(member (string-downcase (first s)) vowels-list)\n       (+ 1\
    \ (vowels_count (rest s)))]\n      [(and (not (empty? last-char))\n          \
    \  (equal? (first s) (string-upcase last-char))\n            (not is-last-char-vowel?))\n\
    \       (vowels_count (rest s))]\n      [else\n       (vowels_count (rest s))])))\n\
    ```\n\n#### GCD\n\n``` #lang racket\n", "  (if (or (string=? s \"\") (string=?\
    \ s \"y\"))\n      0\n      (if (or (string=? (substring s -1) \"a\")\n      \
    \        (string=? (substring s -1) \"e\")\n              (string=? (substring\
    \ s -1) \"i\")\n              (string=? (substring s -1) \"o\")\n            \
    \  (string=? (substring s -1) \"u\")\n              (string=? (substring s -1)\
    \ \"y\"))\n          (+ 1 (vowels_count (substring s 0 -1)))\n          (vowels_count\
    \ (substring s 0 -1)))))\n```\n\n## Question 2 - Letter Frequency\n```racket\n\
    #lang racket\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\\
    e #\\i #\\o #\\u)) (+ 1 (vowels_count (rest s)))]\n    [(and (eq? (rest s) '())\
    \ (eq? (first s) #\\y)) 1]\n    [else (vowels_count (rest s))]))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (if (= i (string-length s))\n        count\n        (if\
    \ (member (string-ref s i) \"aeiou\")\n            (loop (+ i 1) (+ count 1))\n\
    \            (loop (+ i 1) count)))))\n", "  (cond\n    [(string=? s \"\") 0]\n\
    \    [(or\n      (string=? (substring s 0 1) \"a\")\n      (string=? (substring\
    \ s 0 1) \"e\")\n      (string=? (substring s 0 1) \"i\")\n      (string=? (substring\
    \ s 0 1) \"o\")\n      (string=? (substring s 0 1) \"u\")\n      (string=? (substring\
    \ s 0 1) \"y\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (define (helper i acc)\n    (if (= i (string-length\
    \ s))\n        acc\n        (let ([c (string-ref s i)])\n          (cond\n   \
    \         [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u))\n     \
    \        (helper (+ i 1) (+ acc 1))]\n            [(and (= c #\\y) (= i (- (string-length\
    \ s) 1)))\n             (helper (+ i 1) (+ acc 1))]\n            [else (helper\
    \ (+ i 1) acc)]))))\n  (helper 0 0))\n", "  (cond\n    ((null? s) 0)\n    ((not\
    \ (not (equal? 'y (string-ref s (sub1 (string-length s))))))\n     (if (or (equal?\
    \ 'a (string-ref s 0))\n             (equal? 'e (string-ref s 0))\n          \
    \   (equal? 'i (string-ref s 0))\n             (equal? 'o (string-ref s 0))\n\
    \             (equal? 'u (string-ref s 0)))\n         (+ 1 (vowels_count (substring\
    \ s 0 (- (string-length s) 1))))\n         (vowels_count (substring s 0 (- (string-length\
    \ s) 1)))))\n    ((or (equal? 'a (string-ref s 0))\n         (equal? 'e (string-ref\
    \ s 0))\n         (equal? 'i (string-ref s 0))\n         (equal? 'o (string-ref\
    \ s 0))\n         (equal? 'u (string-ref s 0)))\n     (+ 1 (vowels_count (substring\
    \ s 1))))\n    (else (vowels_count (substring s 1)))))\n", "  (local [(define\
    \ (helper acc i)\n            (cond [(string=? (substring s i (+ i 1)) \"a\")\
    \ (helper (+ acc 1) (+ i 1))]\n                  [(string=? (substring s i (+\
    \ i 1)) \"e\") (helper (+ acc 1) (+ i 1))]\n                  [(string=? (substring\
    \ s i (+ i 1)) \"i\") (helper (+ acc 1) (+ i 1))]\n                  [(string=?\
    \ (substring s i (+ i 1)) \"o\") (helper (+ acc 1) (+ i 1))]\n               \
    \   [(string=? (substring s i (+ i 1)) \"u\") (helper (+ acc 1) (+ i 1))]\n  \
    \                [(string=? (substring s i (+ i 1)) \"y\") (helper (+ acc 1) (+\
    \ i 1))]\n                  [(string=? (substring s i (+ i 1)) \"Y\") (helper\
    \ (+ acc 1) (+ i 1))]\n                  [(= i (- (string-length s) 1)) (helper\
    \ acc (+ i 1))]\n                  [else (helper acc (+ i 1))]))]\n    (helper\
    \ 0 0)))\n```\n\n### Question 6\n\n``` #lang racket\n", "  (define (helper i)\n\
    \    (cond [(eq? i (string-length s)) 0]\n          [(or (char=? (string-ref s\
    \ i) #\\a)\n               (char=? (string-ref s i) #\\e)\n               (char=?\
    \ (string-ref s i) #\\i)\n               (char=? (string-ref s i) #\\o)\n    \
    \           (char=? (string-ref s i) #\\u)\n               (and (= i (- (string-length\
    \ s) 1))\n                    (char=? (string-ref s i) #\\y)))\n           (+\
    \ 1 (helper (+ i 1)))]\n          [else (helper (+ i 1))]))\n  (helper 0))", " \
    \ (length (regexp-match-positions #rx\"[aeiou]|y$\" s)))\n", "  (length (vowels\
    \ s)))\n", "  (cond\n    [(null? s) 0]\n    [(or (= (char-downcase (car s)) #\\\
    a)\n         (= (char-downcase (car s)) #\\e)\n         (= (char-downcase (car\
    \ s)) #\\i)\n         (= (char-downcase (car s)) #\\o)\n         (= (char-downcase\
    \ (car s)) #\\u))\n     (+ 1 (vowels_count (cdr s)))]\n    [(and (= (char-downcase\
    \ (car s)) #\\y)\n          (null? (cdr s)))\n     (+ 1 (vowels_count (cdr s)))]\n\
    \    [else (vowels_count (cdr s))]))\n", "  (cond [(string=? \"\" s) 0]\n    \
    \    [(string-contains-ci? \"AEIOUY\" (string-ref s 0)) (+ 1 (vowels_count (substring\
    \ s 1 (string-length s))))]\n        [else (vowels_count (substring s 1 (string-length\
    \ s)))]))\n", "  (define (count c)\n    (if (or (char=? c #\\a)\n            (char=?\
    \ c #\\e)\n            (char=? c #\\i)\n            (char=? c #\\o)\n        \
    \    (char=? c #\\u))\n        1\n        0))\n  (if (empty? s)\n      0\n   \
    \   (+ (count (first s))\n         (if (or (char=? (first s) #\\y)\n         \
    \        (char=? (first s) #\\Y))\n             0\n             (vowels_count\
    \ (rest s))))))\n", "  (cond ((equal? (substring s (- (string-length s) 1) (string-length\
    \ s)) \"y\")\n         (+ 1 (vowels_count (substring s 0 (- (string-length s)\
    \ 1)))))\n        ((member (substring s 0 1) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \         (+ 1 (vowels_count (substring s 1 (string-length s)))))\n        (else\
    \ (vowels_count (substring s 1 (string-length s))))))\n", "  (let ([s (string-downcase\
    \ s)])\n    (cond\n      [(string=? s \"\") 0]\n      [(member (string-ref s 0)\
    \ '(#\\a #\\e #\\i #\\o #\\u))\n       (+ 1 (vowels_count (substring s 1)))]\n\
    \      [(and (string=? (substring s -1) \"y\")\n            (not (member (string-ref\
    \ s 0) '(#\\a #\\e #\\i #\\o #\\u))))\n       (+ 1 (vowels_count (substring s\
    \ 1)))]\n      [else (vowels_count (substring s 1))])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(equal? 'a (first s))\n     (+ 1 (vowels_count (rest s)))]\n   \
    \ [(equal? 'e (first s))\n     (+ 1 (vowels_count (rest s)))]\n    [(equal? 'i\
    \ (first s))\n     (+ 1 (vowels_count (rest s)))]\n    [(equal? 'o (first s))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(equal? 'u (first s))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? 'y (first s))\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(or (char=? (string-ref s 0) #\\a)\n         \
    \    (char=? (string-ref s 0) #\\e)\n             (char=? (string-ref s 0) #\\\
    i)\n             (char=? (string-ref s 0) #\\o)\n             (char=? (string-ref\
    \ s 0) #\\u))\n         (+ 1 (vowels_count (substring s 1 (string-length s))))]\n\
    \        [(or (char=? (string-ref s 0) #\\A)\n             (char=? (string-ref\
    \ s 0) #\\E)\n             (char=? (string-ref s 0) #\\I)\n             (char=?\
    \ (string-ref s 0) #\\O)\n             (char=? (string-ref s 0) #\\U))\n     \
    \    (+ 1 (vowels_count (substring s 1 (string-length s))))]\n        [(and (char=?\
    \ (string-ref s 0) #\\y)\n              (= (string-length s) 1))\n         1]\n\
    \        [else (vowels_count (substring s 1 (string-length s)))]))\n", "  (if\
    \ (empty? s)\n      0\n      (if (or (equal? (first s) 'a)\n              (equal?\
    \ (first s) 'e)\n              (equal? (first s) 'i)\n              (equal? (first\
    \ s) 'o)\n              (equal? (first s) 'u)\n              (and (equal? (first\
    \ s) 'y)\n                   (empty? (rest s))))\n          (+ 1 (vowels_count\
    \ (rest s)))\n          (vowels_count (rest s)))))\n", "  (cond [(or (string=?\
    \ s \"\") (string=? s \"y\")) 0]\n        [(member (string-head s) '(\"a\" \"\
    e\" \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count (string-tail s)))]\n    \
    \    [else (vowels_count (string-tail s))]))\n", "  (define (aux s n)\n    (cond\
    \ ((null? s) n)\n          ((char-ci=? (car s) #\\a) (aux (cdr s) (+ n 1)))\n\
    \          ((char-ci=? (car s) #\\e) (aux (cdr s) (+ n 1)))\n          ((char-ci=?\
    \ (car s) #\\i) (aux (cdr s) (+ n 1)))\n          ((char-ci=? (car s) #\\o) (aux\
    \ (cdr s) (+ n 1)))\n          ((char-ci=? (car s) #\\u) (aux (cdr s) (+ n 1)))\n\
    \          ((and (null? (cdr s)) (char-ci=? (car s) #\\y)) (aux (cdr s) (+ n 1)))\n\
    \          (else (aux (cdr s) n))))\n  (aux s 0))", "  (define (vowels)\n    (list\
    \ 'a 'e 'i 'o 'u 'y))\n  (define (is_vowel? c)\n    (memq c (vowels)))\n  (define\
    \ (vowels-in lst)\n    (cond\n      [(null? lst) 0]\n      [(is_vowel? (car lst))\
    \ (+ 1 (vowels-in (cdr lst)))]\n      [else (vowels-in (cdr lst))]))\n  (vowels-in\
    \ (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n    [(char-vowel? (first\
    \ s)) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (car s) #\\a) (+ 1 (vowels_count (cdr\
    \ s)))]\n    [(equal? (car s) #\\e) (+ 1 (vowels_count (cdr s)))]\n    [(equal?\
    \ (car s) #\\i) (+ 1 (vowels_count (cdr s)))]\n    [(equal? (car s) #\\o) (+ 1\
    \ (vowels_count (cdr s)))]\n    [(equal? (car s) #\\u) (+ 1 (vowels_count (cdr\
    \ s)))]\n    [(equal? (car s) #\\y) (if (empty? (cdr s))\n                   \
    \          (+ 1 (vowels_count (cdr s)))\n                             (vowels_count\
    \ (cdr s)))]\n    [else (vowels_count (cdr s))]))\n", "  (cond [(eq? (substring\
    \ s (sub1 (string-length s)) (string-length s)) \"y\")\n         (+ (vowels_count\
    \ (substring s 0 (sub1 (string-length s)))) 1)]\n        [(or (member (substring\
    \ s (sub1 (string-length s)) (string-length s)) '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    ))\n             (member (substring s (sub1 (string-length s)) (string-length\
    \ s)) '(\"A\" \"E\" \"I\" \"O\" \"U\")))\n         (+ (vowels_count (substring\
    \ s 0 (sub1 (string-length s)))) 1)]\n        [else (vowels_count (substring s\
    \ 0 (sub1 (string-length s))))]))", "  (letrec ([lst s]\n           [vowels '(#\\\
    a #\\e #\\i #\\o #\\u)]\n           [is-vowel (lambda (ch) (if (member ch vowels)\
    \ 1 0))]\n           [vowels-at-end (lambda (lst-vowels) (length lst-vowels))]\n\
    \           [vowels-at-beginning (lambda (lst-vowels) (length lst-vowels))]\n\
    \           [vowels-at-middle (lambda (lst-vowels) (length lst-vowels))])\n  \
    \  (if (empty? lst)\n        0\n        (+ (is-vowel (first lst))\n          \
    \ (if (empty? (rest lst))\n               (vowels-at-end lst)\n              \
    \ (if (empty? (rest (rest lst)))\n                   (vowels-at-beginning lst)\n\
    \                   (vowels-at-middle lst)))))))\n", "  (cond [(empty? s) 0]\n\
    \        [(or (char=? (first s) #\\a)\n             (char=? (first s) #\\e)\n\
    \             (char=? (first s) #\\i)\n             (char=? (first s) #\\o)\n\
    \             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (char=? (first s) #\\y)\n              (not (empty? (rest s))))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(consonant? (first s)) (vowels_count (rest s))]\n\
    \    [else (+ 1 (vowels_count (rest s)))]))\n", "  (cond\n    [(string=? s \"\"\
    ) 0]\n    [(or (string=? (substring s 0 1) \"a\")\n     (string=? (substring s\
    \ 0 1) \"e\")\n     (string=? (substring s 0 1) \"i\")\n     (string=? (substring\
    \ s 0 1) \"o\")\n     (string=? (substring s 0 1) \"u\"))\n     (+ 1 (vowels_count\
    \ (substring s 1 (string-length s))))]\n    [(or (string=? (substring s (string-length\
    \ s) (string-length s)) \"a\")\n     (string=? (substring s (string-length s)\
    \ (string-length s)) \"e\")\n     (string=? (substring s (string-length s) (string-length\
    \ s)) \"i\")\n     (string=? (substring s (string-length s) (string-length s))\
    \ \"o\")\n     (string=? (substring s (string-length s) (string-length s)) \"\
    u\"))\n     (+ 1 (vowels_count (substring s 0 (string-length s))))]\n    [else\
    \ (vowels_count (substring s 1 (string-length s)))]))", "  (if (string=? s \"\"\
    )\n      0\n      (if (or (string=? (substring s 0 1) \"a\")\n              (string=?\
    \ (substring s 0 1) \"e\")\n              (string=? (substring s 0 1) \"i\")\n\
    \              (string=? (substring s 0 1) \"o\")\n              (string=? (substring\
    \ s 0 1) \"u\")\n              (string=? (substring s 0 1) \"y\"))\n         \
    \ (+ 1 (vowels_count (substring s 1)))\n          (vowels_count (substring s 1)))))\n",
  "  (cond\n    [(or (string=? s \"\") (string=? s \"y\")) 0]\n    [(string-contains\
    \ \"aeiouy\" (string-ref s 0)) (+ 1 (vowels_count (substring s 1)))]\n    [else\
    \ (vowels_count (substring s 1))]))\n```\n\n```\n#lang racket\n", "  (define (vowels_count\
    \ s)\n    (cond ((null? s) 0)\n          ((member (string-downcase (car s)) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\"))\n           (+ 1 (vowels_count (cdr s))))\n    \
    \      (else (vowels_count (cdr s)))))\n  (vowels_count (string-&gt;list s)))\n\
    </code>\nBut it fails. I can't figure out why.\nWhat's wrong with this code?\n\
    \n\nA:\n\nThere are two problems with your code. First you have to check if the\
    \ <code>y</code> is the last character, and second, when you have <code>y</code>\
    \ as the last character, it doesn't count as a vowel. The following code addresses\
    \ both issues:\n<code>(define (vowels_count s)\n  (define (vowels_count s)\n \
    \   (cond ((null? s) 0)\n          ((and (member (string-downcase (car s)) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\"))\n                (or (null? (cdr s)) (not (eq? (car\
    \ s) \"y\"))))\n           (+ 1 (vowels_count (cdr s))))\n          (else (vowels_count\
    \ (cdr s)))))\n  (vowels_count (string-&gt;list s)))\n</code>\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(and (char-ci=? (first s) #\\y) (empty? (rest s))) 1]\n\
    \    [(char-set=? (first s) #\"aeiou\") (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is-vowel-end c)\n    (and (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))\n         (or (null? (cdr s))\n  \
    \           (not (member (car (cdr s)) '(\"a\" \"e\" \"i\" \"o\" \"u\"))))))\n\
    \  (define (helper lst)\n    (if (null? lst)\n        0\n        (+ (if (is-vowel-end\
    \ (car lst)) 1 0)\n           (helper (cdr lst)))))\n  (helper (string->list s)))\n",
  "  ;; YOUR CODE HERE\n  )\n", "  (let ([len (string-length s)])\n    (let loop ([i\
    \ 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(or (char=?\
    \ (string-ref s i) #\\a)\n             (char=? (string-ref s i) #\\e)\n      \
    \       (char=? (string-ref s i) #\\i)\n             (char=? (string-ref s i)\
    \ #\\o)\n             (char=? (string-ref s i) #\\u))\n         (loop (+ i 1)\
    \ (+ count 1))]\n        [(and (= i (- len 1))\n              (char=? (string-ref\
    \ s i) #\\y))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i\
    \ 1) count)]))))\n", "  (define (is_vowel c)\n    (let ([vowels (list #\\a #\\\
    e #\\i #\\o #\\u)])\n      (if (member c vowels)\n          (if (and (equal? c\
    \ #\\y) (not (equal? (char-downcase c) (string-ref s (- (string-length s) 1)))))\n\
    \              0\n              1)\n          0)))\n  (define (loop s c)\n   \
    \ (if (equal? (string-length s) c)\n        0\n        (+ (is_vowel (string-ref\
    \ s c)) (loop s (+ c 1)))))\n  (loop s 0))\n```\n\n```racket\n#lang racket\n",
  "  (let ((result 0))\n    (for ((i (in-range (string-length s))))\n      (let ((curr-char\
    \ (string-ref s i)))\n        (if (or (char=? curr-char #\\a)\n              \
    \  (char=? curr-char #\\e)\n                (char=? curr-char #\\i)\n        \
    \        (char=? curr-char #\\o)\n                (char=? curr-char #\\u)\n  \
    \              (and (char=? curr-char #\\y)\n                     (= i (- (string-length\
    \ s) 1))))\n            (set! result (+ result 1)))))\n    result))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (apply + (map (lambda (c) (if (or (char=? c #\\a)\n                         \
    \           (char=? c #\\e)\n                                    (char=? c #\\\
    i)\n                                    (char=? c #\\o)\n                    \
    \                (char=? c #\\u)\n                                    (and (char=?\
    \ c #\\y)\n                                         (= (string-length s) (sub1\
    \ (string-length (substring s 0 (sub1 (string-length s))))))))\n             \
    \           1 0))\n                 (string->list s))))", "  (count-if\n   (lambda\
    \ (ch)\n     (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n   s))\n", "  (define (vowels-count-helper\
    \ curr-count curr-str)\n    (cond\n      ((string=? curr-str \"\") curr-count)\n\
    \      ((string-contains \"aeiou\" (string-ref curr-str 0))\n       (vowels-count-helper\
    \ (+ curr-count 1) (substring curr-str 1)))\n      ((string-contains \"aeiouy\"\
    \ (string-ref curr-str (- (string-length curr-str) 1)))\n       (vowels-count-helper\
    \ (+ curr-count 1) (substring curr-str 0 (- (string-length curr-str) 1))))\n \
    \     (else (vowels-count-helper curr-count (substring curr-str 1)))))\n  (vowels-count-helper\
    \ 0 s))\n", "  (cond [(empty? s) 0]\n        [(char-ci=? (first s) #\\a) (+ 1\
    \ (vowels_count (rest s)))]\n        [(char-ci=? (first s) #\\e) (+ 1 (vowels_count\
    \ (rest s)))]\n        [(char-ci=? (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n\
    \        [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n        [(char-ci=?\
    \ (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n        [(char-ci=? (first s)\
    \ #\\y) (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define\
    \ (vowels-in lst)\n    (filter is-vowel lst))\n  (length (vowels-in (string->list\
    \ s))))\n", "  (define (is-vowel ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\\
    u #\\y)))\n  (cond\n    [(null? s) 0]\n    [(is-vowel (car s)) (+ 1 (vowels_count\
    \ (cdr s)))]\n    [else (vowels_count (cdr s))]))\n", "  (define (count-vowels\
    \ s index)\n    (cond [(or (= index (string-length s))\n               (char=?\
    \ (string-ref s index) #\\y)) 0]\n          [(or (char=? (string-ref s index)\
    \ #\\a)\n               (char=? (string-ref s index) #\\e)\n               (char=?\
    \ (string-ref s index) #\\i)\n               (char=? (string-ref s index) #\\\
    o)\n               (char=? (string-ref s index) #\\u))\n           (+ 1 (count-vowels\
    \ s (+ index 1)))]\n          [else (count-vowels s (+ index 1))]))\n  (count-vowels\
    \ s 0))\n", "  (cond [(zero? (string-length s)) 0]\n        [(or (= (string-ref\
    \ s 0) #\\a)\n             (= (string-ref s 0) #\\e)\n             (= (string-ref\
    \ s 0) #\\i)\n             (= (string-ref s 0) #\\o)\n             (= (string-ref\
    \ s 0) #\\u))\n         (+ 1 (vowels_count (substring s 1 (string-length s))))]\n\
    \        [(and (= (string-ref s 0) #\\y) (= (string-length s) 1)) 1]\n       \
    \ [else (vowels_count (substring s 1 (string-length s)))]))\n", "  (cond [(empty?\
    \ s) 0]\n        [(vowel? (first s))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [else (vowels_count (rest s))]))", "  (define (is_vowel c)\n    (or (string=?\
    \ c \"a\")\n        (string=? c \"e\")\n        (string=? c \"i\")\n        (string=?\
    \ c \"o\")\n        (string=? c \"u\")\n        (string=? c \"y\")))\n  (cond\n\
    \    ((string=? s \"\") 0)\n    ((is_vowel (string-ref s 0)) (+ 1 (vowels_count\
    \ (substring s 1))))\n    (else (vowels_count (substring s 1)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(vowel? (first s)) (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal? (first\
    \ s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u))\n  \
    \   (+ 1 (vowels_count (rest s)))]\n    [(empty? (rest s)) 0]\n    [(or (equal?\
    \ (last s) 'a)\n         (equal? (last s) 'e)\n         (equal? (last s) 'i)\n\
    \         (equal? (last s) 'o)\n         (equal? (last s) 'u))\n     (+ 1 (vowels_count\
    \ (butlast s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel?\
    \ c)\n    (or (eq? c #\\a)\n        (eq? c #\\e)\n        (eq? c #\\i)\n     \
    \   (eq? c #\\o)\n        (eq? c #\\u)))\n  (define (is_y? c)\n    (eq? c #\\\
    y))\n  (define (is_vowel?-y s)\n    (if (is_y? (string-ref s (sub1 (string-length\
    \ s))))\n        (+ 1 (vowels_count (substring s 0 (sub1 (string-length s)))))\n\
    \        (vowels_count s)))\n  (if (= (string-length s) 0)\n      0\n      (if\
    \ (is_vowel? (string-ref s 0))\n          (+ 1 (is_vowel?-y (substring s 1)))\n\
    \          (is_vowel?-y (substring s 1)))))\n", "  (if (empty? s)\n      0\n \
    \     (if (char-in-set? (string-ref s 0) \"aeiouy\")\n          (+ 1 (vowels_count\
    \ (substring s 1)))\n          (vowels_count (substring s 1)))))\n</code>\nI like\
    \ this solution because it relies on the emptyness of the string, rather than\
    \ on its length. But it is not very efficient, because it is doing a lot of redundant\
    \ work. Let's see if we can make it faster.\nHere is what I came up with:\n<code>#lang\
    \ racket\n", "  (cond [(string=? s \"\") 0]\n        [(string-contains-ci? \"\
    aeiouy\" (string-ref s 0))\n         (+ 1 (vowels_count (substring s 1 (string-length\
    \ s))))]\n        [else (vowels_count (substring s 1 (string-length s)))]))\n",
  "  (define (helper s)\n    (cond\n      [(empty? s) 0]\n      [(eq? (first s) 'a)\
    \ (add1 (helper (rest s)))]\n      [(eq? (first s) 'e) (add1 (helper (rest s)))]\n\
    \      [(eq? (first s) 'i) (add1 (helper (rest s)))]\n      [(eq? (first s) 'o)\
    \ (add1 (helper (rest s)))]\n      [(eq? (first s) 'u) (add1 (helper (rest s)))]\n\
    \      [(eq? (first s) 'y) (add1 (helper (rest s)))]\n      [else (helper (rest\
    \ s))]))\n  (if (empty? s) 0 (helper s)))\n```\n\n```racket\n#lang racket\n",
  "  (define vowels (list #\\a #\\e #\\i #\\o #\\u))\n  (define (vowels-count-sentinel-inner\
    \ s i acc)\n    (cond\n      [(>= i (string-length s)) acc]\n      [(member (string-ref\
    \ s i) vowels)\n       (vowels-count-sentinel-inner s (+ i 1) (+ acc 1))]\n  \
    \    [else (vowels-count-sentinel-inner s (+ i 1) acc)]))\n  (vowels-count-sentinel-inner\
    \ s 0 0))\n", "  (let ([vowels (regexp \"([aeiouy])\")])\n    (cond\n      [(regexp-match\
    \ vowels s) (+ 1 (vowels_count (substring s (regexp-match-end 0))))]\n      [else\
    \ 0])))\n```\n\n## Problem 3\n\n### 3.1\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (= \"y\" (first s)) (empty? (rest s))) 1]\n   \
    \ [(or (= \"a\" (first s)) (= \"e\" (first s)) (= \"i\" (first s)) (= \"o\" (first\
    \ s)) (= \"u\" (first s))) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n```\n\n```\n#lang racket\n", "  (define (no-y s) (regexp-replace*\
    \ #rx\"[Yy]\" s \"\"))\n  (define (vowels s) (regexp-replace* #rx\"[B-DF-HJ-NP-TV-Zb-df-hj-np-tv-z]\"\
    \ s \"\"))\n  (cond\n    ((string=? s \"\") 0)\n    ((string=? (substring s -1)\
    \ \"y\") (+ (string-length (vowels (substring s 0 -1))) 1))\n    (else (+ (string-length\
    \ (vowels s)) (vowels_count (no-y (substring s 1)))))))\n", "  (cond\n    [(=\
    \ (string-length s) 0) 0]\n    [(char-set-contains? #\\a #e #i #o #u (string-ref\
    \ s 0))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count (substring\
    \ s 1))]))\n", "  ;; TODO: complete me\n  )\n", "  (foldl (lambda (acc x)\n  \
    \         (cond ((or (equal? x #\\a)\n                      (equal? x #\\e)\n\
    \                      (equal? x #\\i)\n                      (equal? x #\\o)\n\
    \                      (equal? x #\\u))\n                  (+ acc 1))\n      \
    \           ((and (equal? x #\\y)\n                       (equal? (rest s) '()))\n\
    \                  (+ acc 1))\n                 (else acc)))\n         0\n   \
    \      s))\n", "  ;; define your function below\n  (define (helper s)\n    (if\
    \ (or (char=? (string-ref s 0) #\\a)\n\t    (char=? (string-ref s 0) #\\e)\n\t\
    \    (char=? (string-ref s 0) #\\i)\n\t    (char=? (string-ref s 0) #\\o)\n\t\
    \    (char=? (string-ref s 0) #\\u)\n\t    (and (char=? (string-ref s 0) #\\y)\n\
    \t\t (zero? (sub1 (string-length s)))))\n\t(add1 (helper (substring s 1)))\n\t\
    (helper (substring s 1))))\n  (helper s))\n", "  (define (check-end s0 s1)\n \
    \   (cond\n      [(string=? (substring s1 (- (string-length s1) 1)) \"y\")\n \
    \      (string-length s0)]\n      [else\n       (string-length s0)]))\n  (cond\n\
    \    [(empty? s)\n     0]\n    [(string-member (substring s 0 1) \"aeiouy\")\n\
    \     (check-end (substring s 1) s)]\n    [else\n     (vowels_count (substring\
    \ s 1))]))\n```\n\n```scheme\n#lang racket\n", "  (define (helper s counter)\n\
    \    (if (string-empty? s)\n        counter\n        (cond\n         ((char-ci=?\
    \ (string-ref s 0) #\\a) (helper (substring s 1) (+ counter 1)))\n         ((char-ci=?\
    \ (string-ref s 0) #\\e) (helper (substring s 1) (+ counter 1)))\n         ((char-ci=?\
    \ (string-ref s 0) #\\i) (helper (substring s 1) (+ counter 1)))\n         ((char-ci=?\
    \ (string-ref s 0) #\\o) (helper (substring s 1) (+ counter 1)))\n         ((char-ci=?\
    \ (string-ref s 0) #\\u) (helper (substring s 1) (+ counter 1)))\n         ((char-ci=?\
    \ (string-ref s 0) #\\y) (if (= (string-length s) 1)\n                       \
    \                        (+ counter 1)\n                                     \
    \          (helper (substring s 1) counter)))\n         (else (helper (substring\
    \ s 1) counter)))))\n  (helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(equal?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) #\\e)\
    \ (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n \
    \   [(equal? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n```\n\n```racket\n#lang racket\n", "  (cond [(null?\
    \ s) 0]\n        [(char-ci=? (car s) #\\a) (+ 1 (vowels_count (cdr s)))]\n   \
    \     [(char-ci=? (car s) #\\e) (+ 1 (vowels_count (cdr s)))]\n        [(char-ci=?\
    \ (car s) #\\i) (+ 1 (vowels_count (cdr s)))]\n        [(char-ci=? (car s) #\\\
    o) (+ 1 (vowels_count (cdr s)))]\n        [(char-ci=? (car s) #\\u) (+ 1 (vowels_count\
    \ (cdr s)))]\n        [(char-ci=? (car s) #\\y) (+ 1 (vowels_count (cdr s)))]\n\
    \        [else (vowels_count (cdr s))]))\n", "  (define (aux s acc)\n    (if (=\
    \ acc 0)\n        acc\n        (if (or (char=? (string-ref s (- acc 1)) #\\a)\n\
    \                (char=? (string-ref s (- acc 1)) #\\e)\n                (char=?\
    \ (string-ref s (- acc 1)) #\\i)\n                (char=? (string-ref s (- acc\
    \ 1)) #\\o)\n                (char=? (string-ref s (- acc 1)) #\\u)\n        \
    \        (and (char=? (string-ref s (- acc 1)) #\\y) (= acc (string-length s))))\n\
    \            (aux s (- acc 1))\n            (aux s (- acc 1)))))\n  (aux s (string-length\
    \ s)))\n", "  (string-length (string-replace* \"aeiou\" \"\" (string-downcase\
    \ s))))\n```\n\n```scheme\n#lang racket\n", "  (length (filter (lambda (char)\n\
    \                    (or (equal? char #\\a)\n                        (equal? char\
    \ #\\e)\n                        (equal? char #\\i)\n                        (equal?\
    \ char #\\o)\n                        (equal? char #\\u)))\n                 \
    \ s)))\n", "  (cond\n    [(null? s) 0]\n    [(char-ci=? (car s) #\\a) (+ 1 (vowels_count\
    \ (cdr s)))]\n    [(char-ci=? (car s) #\\e) (+ 1 (vowels_count (cdr s)))]\n  \
    \  [(char-ci=? (car s) #\\i) (+ 1 (vowels_count (cdr s)))]\n    [(char-ci=? (car\
    \ s) #\\o) (+ 1 (vowels_count (cdr s)))]\n    [(char-ci=? (car s) #\\u) (+ 1 (vowels_count\
    \ (cdr s)))]\n    [(char-ci=? (car s) #\\y) (+ 1 (vowels_count (cdr s)))]\n  \
    \  [else (vowels_count (cdr s))]))\n", "  (define (to-list s)\n    (list (string->list\
    \ s)))\n  (define (vowels? l)\n    (cond\n      ((null? l) (list))\n      ((member\
    \ (car l) '(#\\a #\\e #\\i #\\o #\\u)) (append (list (car l)) (vowels? (cdr l))))\n\
    \      (else (vowels? (cdr l)))))\n  (define (remove-y l)\n    (cond\n      ((null?\
    \ l) (list))\n      ((member (car l) '(#\\y)) (list))\n      (else (append (list\
    \ (car l)) (remove-y (cdr l))))))\n  (define (remove-y-from-end l)\n    (cond\n\
    \      ((null? l) (list))\n      ((null? (cdr l)) (list))\n      ((member (car\
    \ l) '(#\\y)) (remove-y-from-end (cdr l)))\n      (else (append (list (car l))\
    \ (remove-y-from-end (cdr l))))))\n  (define (vowels-with-y-removed l)\n    (remove-y\
    \ (remove-y-from-end l)))\n  (length (vowels-with-y-removed (to-list s))))\n",
  "  (length (filter (lambda (c) (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))) (string-&gt;list\
    \ s))))\n", "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (vowels_count_help\
    \ s vowels 0)))\n", "  (define (count_one-char c)\n    (cond\n      ((or (equal?\
    \ c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)) 1)\n\
    \      ((and (equal? c #\\y) (equal? c (string-ref s (- (string-length s) 1))))\
    \ 1)\n      (else 0)))\n  (accumulate + 0 (map count_one-char (string->list s))))\n",
  "  (define (vowels_in ss)\n    (if (empty? ss)\n        '()\n        (cond\n   \
    \      ((equal? (first ss) 'a) (cons 'a (vowels_in (rest ss))))\n         ((equal?\
    \ (first ss) 'e) (cons 'e (vowels_in (rest ss))))\n         ((equal? (first ss)\
    \ 'i) (cons 'i (vowels_in (rest ss))))\n         ((equal? (first ss) 'o) (cons\
    \ 'o (vowels_in (rest ss))))\n         ((equal? (first ss) 'u) (cons 'u (vowels_in\
    \ (rest ss))))\n         ((equal? (first ss) 'y) (cons 'y (vowels_in (rest ss))))\n\
    \         (else (vowels_in (rest ss))))))\n  (if (string=? (substring s (- (string-length\
    \ s) 1)) \"y\")\n      (if (empty? (vowels_in (string->list s)))\n          1\n\
    \          (+ 1 (length (vowels_in (string->list s)))))\n      (length (vowels_in\
    \ (string->list s)))))\n", "  (let loop ([s s] [c 0])\n    (cond [(empty? s) c]\n\
    \          [(or (char=? (first s) #\\a)\n               (char=? (first s) #\\\
    e)\n               (char=? (first s) #\\i)\n               (char=? (first s) #\\\
    o)\n               (char=? (first s) #\\u))\n           (loop (rest s) (+ c 1))]\n\
    \          [(and (char=? (first s) #\\y)\n                (empty? (rest s)))\n\
    \           (loop (rest s) (+ c 1))]\n          [else (loop (rest s) c)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char=? (first s) #\\y) (empty? (rest s)))\
    \ 1]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))", "  (define (iter i acc)\n\
    \    (cond\n      [(>= i (string-length s)) acc]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u))\n       (iter (+ i 1) (+ acc 1))]\n      [(and (= i (- (string-length\
    \ s) 1))\n            (char=? (string-ref s i) #\\y))\n       (iter (+ i 1) (+\
    \ acc 1))]\n      [else (iter (+ i 1) acc)]))\n  (iter 0 0))\n", "  (list-length\
    \ (list-intersect (string->list s)\n                               (list->set\
    \ (string->list \"aeiouy\")))))\n", "  (define vowels '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))\n  (define (helper l count)\n    (if (null? l)\n        count\n    \
    \    (if (member (string-downcase (car l)) vowels)\n            (helper (cdr l)\
    \ (+ count 1))\n            (helper (cdr l) count))))\n  (helper (string->list\
    \ s) 0))\n", "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (is_vowel?\
    \ c)\n    (member c vowels))\n  (cond [(empty? s) 0]\n        [(is_vowel? (first\
    \ s))\n         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (string-length (string-filter (lambda (c) (member c '(#\\a #\\\
    e #\\i #\\o #\\u))) s)))\n", "  (cond\n    [(= (string-length s) 0) 0]\n    [(or\
    \ (= (string-ref s 0) #\\a)\n         (= (string-ref s 0) #\\e)\n         (= (string-ref\
    \ s 0) #\\i)\n         (= (string-ref s 0) #\\o)\n         (= (string-ref s 0)\
    \ #\\u))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (cond\n    [(null? s) 0]\n    [(member (car s) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) (+ 1 (vowels_count (cdr s)))]\n    [else (vowels_count\
    \ (cdr s))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_vowel_at_end? c)\n    (and (char=? c #\\y)\n        \
    \ (not (null? (rest s)))))\n  (define (count-vowels result c)\n    (if (or (is_vowel?\
    \ c)\n            (is_vowel_at_end? c))\n        (+ result 1)\n        result))\n\
    \  (foldl count-vowels 0 s))\n", "  (cond\n    [(zero? (string-length s)) 0]\n\
    \    [(or (char=? (string-ref s 0) #\\a)\n         (char=? (string-ref s 0) #\\\
    e)\n         (char=? (string-ref s 0) #\\i)\n         (char=? (string-ref s 0)\
    \ #\\o)\n         (char=? (string-ref s 0) #\\u))\n     (+ 1 (vowels_count (substring\
    \ s 1)))]\n    [(and (char=? (string-ref s 0) #\\y)\n          (= (string-length\
    \ s) 1))\n     1]\n    [else (vowels_count (substring s 1))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-ci=? (first s) #\\a)\n          (not\
    \ (member (first s) (list #\\a #\\e #\\i #\\o #\\u)))) 0]\n    [else (+ 1 (vowels_count\
    \ (rest s)))]))\n", "  (length (regexp-match* #rx\"[aeiou]|y$\" s)))\n", "  (let*\
    \ ([vowels '(#\\a #\\e #\\i #\\o #\\u)]\n         [n (string-length s)]\n    \
    \     [last-char (substring s (- n 1) n)])\n    (if (member last-char vowels)\n\
    \        (+ (string-count (curry string-contains? #\\a) s)\n           (string-count\
    \ (curry string-contains? #\\e) s)\n           (string-count (curry string-contains?\
    \ #\\i) s)\n           (string-count (curry string-contains? #\\o) s)\n      \
    \     (string-count (curry string-contains? #\\u) s)\n           (string-count\
    \ (curry string-contains? #\\y) s))\n        (+ (string-count (curry string-contains?\
    \ #\\a) s)\n           (string-count (curry string-contains? #\\e) s)\n      \
    \     (string-count (curry string-contains? #\\i) s)\n           (string-count\
    \ (curry string-contains? #\\o) s)\n           (string-count (curry string-contains?\
    \ #\\u) s)))))\n", "  (length (filter (\u03BB (c) (or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))) (string->list s))))\n\
    \n", "  (letrec ([check-char (lambda (count curr)\n                         (cond\
    \ [(char=? (string-ref s curr) #\\a)\n                                (check-char\
    \ (+ count 1) (+ curr 1))]\n                               [(char=? (string-ref\
    \ s curr) #\\e)\n                                (check-char (+ count 1) (+ curr\
    \ 1))]\n                               [(char=? (string-ref s curr) #\\i)\n  \
    \                              (check-char (+ count 1) (+ curr 1))]\n        \
    \                       [(char=? (string-ref s curr) #\\o)\n                 \
    \               (check-char (+ count 1) (+ curr 1))]\n                       \
    \        [(char=? (string-ref s curr) #\\u)\n                                (check-char\
    \ (+ count 1) (+ curr 1))]\n                               [(char=? (string-ref\
    \ s curr) #\\y)\n                                (check-char (+ count 1) (+ curr\
    \ 1))]\n                               [(char=? (string-ref s curr) #\\_)\n  \
    \                              count]\n                               [else (check-char\
    \ count (+ curr 1))]))])\n    (check-char 0 0)))\n", "  (define (vowels lst)\n\
    \    (if (null? lst)\n        0\n        (if (elem 'a lst)\n            (+ 1 (vowels\
    \ (remq 'a lst)))\n            (if (elem 'e lst)\n                (+ 1 (vowels\
    \ (remq 'e lst)))\n                (if (elem 'i lst)\n                    (+ 1\
    \ (vowels (remq 'i lst)))\n                    (if (elem 'o lst)\n           \
    \             (+ 1 (vowels (remq 'o lst)))\n                        (if (elem\
    \ 'u lst)\n                            (+ 1 (vowels (remq 'u lst)))\n        \
    \                    (if (and (null? (cdr lst)) (elem 'y lst))\n             \
    \                   1\n                                (vowels (cdr lst))))))))))\n\
    \  (vowels (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (string-ref s 0) #\\a)\n         (char=? (string-ref s 0) #\\e)\n         (char=?\
    \ (string-ref s 0) #\\i)\n         (char=? (string-ref s 0) #\\o)\n         (char=?\
    \ (string-ref s 0) #\\u))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(char=?\
    \ (string-ref s 0) #\\y)\n     (if (empty? (substring s 1))\n         1\n    \
    \     (vowels_count (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n\
    </code>\nThe test I used:\n<code>#lang racket\n", "  (local\n    [(define (vowels-count-helper\
    \ s counter)\n       (if (= (string-length s) 0)\n           counter\n       \
    \    (if (string-member (string-ref s 0) \"aeiouy\")\n               (vowels-count-helper\
    \ (substring s 1) (+ counter 1))\n               (vowels-count-helper (substring\
    \ s 1) counter))))]\n    (vowels-count-helper s 0)))\n", "  (let loop ([n 0] [i\
    \ 0])\n    (cond\n      [(= i (string-length s)) n]\n      [(or (= (string-ref\
    \ s i) #\\a)\n           (= (string-ref s i) #\\e)\n           (= (string-ref\
    \ s i) #\\i)\n           (= (string-ref s i) #\\o)\n           (= (string-ref\
    \ s i) #\\u)\n           (and (not (= i (sub1 (string-length s))))\n         \
    \       (= (string-ref s i) #\\y)))\n       (loop (+ n 1) (+ i 1))]\n      [else\
    \ (loop n (+ i 1))])))\n", "  (define (is-vowel? c)\n    (or (equal? c \"a\")\n\
    \        (equal? c \"e\")\n        (equal? c \"i\")\n        (equal? c \"o\")\n\
    \        (equal? c \"u\")\n        (equal? c \"y\")))\n  (cond ((empty? s) 0)\n\
    \        ((and (is-vowel? (first s))\n              (and (empty? (rest s)) (equal?\
    \ (first s) \"y\")))\n         1)\n        ((is-vowel? (first s)) (+ 1 (vowels_count\
    \ (rest s))))\n        (else (vowels_count (rest s)))))\n", "  (if (empty? s)\n\
    \      0\n      (if (or (char=? (string-upcase (substring s 0 1)) #\\A)\n    \
    \          (char=? (string-upcase (substring s 0 1)) #\\E)\n              (char=?\
    \ (string-upcase (substring s 0 1)) #\\I)\n              (char=? (string-upcase\
    \ (substring s 0 1)) #\\O)\n              (char=? (string-upcase (substring s\
    \ 0 1)) #\\U)\n              (char=? (string-upcase (substring s 0 1)) #\\Y))\n\
    \          (+ 1 (vowels_count (substring s 1)))\n          (vowels_count (substring\
    \ s 1)))))\n", "  (regexp-match #rx\"[^aeiou]*[aeiou]*$\" s)\n  (regexp-match-count\
    \ s))\n", "  (cond [(empty? s) 0]\n        [(and (char=? (string-ref s 0) #\\\
    y)\n              (empty? (substring s 1))) 1]\n        [(or (char=? (string-ref\
    \ s 0) #\\a)\n             (char=? (string-ref s 0) #\\e)\n             (char=?\
    \ (string-ref s 0) #\\i)\n             (char=? (string-ref s 0) #\\o)\n      \
    \       (char=? (string-ref s 0) #\\u)\n             (char=? (string-ref s 0)\
    \ #\\y))\n         (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count\
    \ (substring s 1))]))\n", "  (cond\n    ((null? s) 0)\n    ((or (= (string-upcase\
    \ (string-ref s 0)) #\\A)\n         (= (string-upcase (string-ref s 0)) #\\E)\n\
    \         (= (string-upcase (string-ref s 0)) #\\I)\n         (= (string-upcase\
    \ (string-ref s 0)) #\\O)\n         (= (string-upcase (string-ref s 0)) #\\U)\n\
    \         (= (string-upcase (string-ref s 0)) #\\Y))\n     (+ 1 (vowels_count\
    \ (substring s 1))))\n    (else (vowels_count (substring s 1)))))\n", "  (define\
    \ (counter a b n)\n    (cond ((equal? a 0) n)\n          ((or (equal? (string-ref\
    \ b a) #\\a)\n               (equal? (string-ref b a) #\\e)\n               (equal?\
    \ (string-ref b a) #\\i)\n               (equal? (string-ref b a) #\\o)\n    \
    \           (equal? (string-ref b a) #\\u)\n               (and (equal? (string-ref\
    \ b a) #\\y)\n                    (equal? a (- (string-length b) 1))))\n     \
    \      (counter (- a 1) b (+ n 1)))\n          (else (counter (- a 1) b n))))\n\
    \  (counter (- (string-length s) 1) s 0))", "  (define (vowels_count_helper s\
    \ n i)\n    (cond\n      [(= i (string-length s)) n]\n      [(char=? (string-ref\
    \ s i) #\\a) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [(char=? (string-ref\
    \ s i) #\\e) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [(char=? (string-ref\
    \ s i) #\\i) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [(char=? (string-ref\
    \ s i) #\\o) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [(char=? (string-ref\
    \ s i) #\\u) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [(char=? (string-ref\
    \ s i) #\\y) (vowels_count_helper s (+ n 1) (+ i 1))]\n      [else (vowels_count_helper\
    \ s n (+ i 1))]))\n  (vowels_count_helper s 0 0))\n", "  (define vowels '(#\\\
    a #\\e #\\i #\\o #\\u))\n  (cond [(empty? s) 0]\n        [(member (first s) vowels)\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n    \
    \    (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)\n     \
    \   (equal? c #\\y)))\n  (if (empty? s)\n      0\n      (if (is_vowel (first s))\n\
    \          (+ 1 (vowels_count (rest s)))\n          (vowels_count (rest s)))))\n",
  "  (vowels_count_helper s 0))\n", "  (cond\n    ((null? s) 0)\n    ((or (= (char-downcase\
    \ (car s)) #\\a)\n         (= (char-downcase (car s)) #\\e)\n         (= (char-downcase\
    \ (car s)) #\\i)\n         (= (char-downcase (car s)) #\\o)\n         (= (char-downcase\
    \ (car s)) #\\u))\n     (+ 1 (vowels_count (cdr s))))\n    ((or (= (char-downcase\
    \ (car s)) #\\y)\n         (= (char-downcase (cadr s)) #\\y))\n     (+ 1 (vowels_count\
    \ (cdr s))))\n    (else (vowels_count (cdr s)))))\n", "  (cond\n    [(equal? s\
    \ \"\") 0]\n    [(or (equal? (string-upcase (substring s 0 1)) \"A\")\n      \
    \   (equal? (string-upcase (substring s 0 1)) \"E\")\n         (equal? (string-upcase\
    \ (substring s 0 1)) \"I\")\n         (equal? (string-upcase (substring s 0 1))\
    \ \"O\")\n         (equal? (string-upcase (substring s 0 1)) \"U\")\n        \
    \ (equal? (string-upcase (substring s 0 1)) \"Y\"))\n     (+ 1 (vowels_count (substring\
    \ s 1 (string-length s))))]\n    [else (vowels_count (substring s 1 (string-length\
    \ s)))]))", "  (define (count c)\n    (cond\n      [(equal? c \"a\") +1]\n   \
    \   [(equal? c \"e\") +1]\n      [(equal? c \"i\") +1]\n      [(equal? c \"o\"\
    ) +1]\n      [(equal? c \"u\") +1]\n      [(equal? c \"y\") +1]\n      [else 0]))\n\
    \  (foldl + 0 (map count (string->list s))))\n", "  (define (is_vowel c)\n   \
    \ (or (eq? c #\\a)\n        (eq? c #\\e)\n        (eq? c #\\i)\n        (eq? c\
    \ #\\o)\n        (eq? c #\\u)))\n  (define (is_last c)\n    (string-ref s (- (string-length\
    \ s) 1)))\n  (define (count s)\n    (cond ((eq? s 0) 0)\n          ((and (is_vowel\
    \ (string-ref s 0))\n                (or (is_last (string-ref s 0))\n        \
    \            (not (is_vowel (string-ref s 1)))))\n           (+ 1 (count (- s\
    \ 1))))\n          (else (count (- s 1)))))\n  (count (string-length s)))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (vowels_count-helper i acc)\n    (if (>= i (string-length s))\n        acc\n\
    \        (let ((c (string-ref s i)))\n          (if (is_vowel? c)\n          \
    \    (vowels_count-helper (+ i 1) (+ acc 1))\n              (vowels_count-helper\
    \ (+ i 1) acc)))))\n  (let ((s (string-downcase s)))\n    (let ((last-c (string-ref\
    \ s (- (string-length s) 1))))\n      (if (char=? last-c #\\y)\n          (vowels_count-helper\
    \ 0 1)\n          (vowels_count-helper 0 0)))))\n", "  (define (vowels s)\n  \
    \  (filter (lambda (x) (or (char=? x #\\a) (char=? x #\\e) (char=? x #\\i) (char=?\
    \ x #\\o) (char=? x #\\u))) s))\n  (define (vowels-end s)\n    (filter (lambda\
    \ (x) (or (char=? x #\\a) (char=? x #\\e) (char=? x #\\i) (char=? x #\\o) (char=?\
    \ x #\\u) (char=? x #\\y))) s))\n  (if (= 1 (string-length s))\n      (if (vowels-end\
    \ s) 1 0)\n      (if (vowels s)\n          (+ (if (vowels-end s) 1 0) (vowels_count\
    \ (substring s 1)))\n          (vowels_count (substring s 1)))))", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=?\
    \ (first s) #\\y)\n     (cond\n       [(or (empty? (rest s)) (char=? (rest s)\
    \ #\\A))\n        (+ 1 (vowels_count (rest s)))]\n       [else (vowels_count (rest\
    \ s))])]\n    [else (vowels_count (rest s))]))\n", "  (cond [(empty? s) 0]\n \
    \       [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  (define (is-vowel?\
    \ c)\n    (let ((c (string-upcase c)))\n      (or (= c #\\A) (= c #\\E) (= c #\\\
    I) (= c #\\O) (= c #\\U))))\n  (cond ((string=? s \"\") 0)\n        ((is-vowel?\
    \ (string-ref s 0))\n         (+ 1 (vowels_count (substring s 1))))\n        (else\
    \ (vowels_count (substring s 1)))))\n", "  ;; YOUR CODE HERE\n  )\n", "  (define\
    \ (helper s i vc)\n    (cond\n      [(string=? (string-ref s i) \"a\")\n     \
    \  (helper s (+ i 1) (+ vc 1))]\n      [(string=? (string-ref s i) \"e\")\n  \
    \     (helper s (+ i 1) (+ vc 1))]\n      [(string=? (string-ref s i) \"i\")\n\
    \       (helper s (+ i 1) (+ vc 1))]\n      [(string=? (string-ref s i) \"o\"\
    )\n       (helper s (+ i 1) (+ vc 1))]\n      [(string=? (string-ref s i) \"u\"\
    )\n       (helper s (+ i 1) (+ vc 1))]\n      [(= i (- (string-length s) 1))\n\
    \       (if (string=? (string-ref s i) \"y\")\n           (+ vc 1)\n         \
    \  vc)]\n      [else\n       (helper s (+ i 1) vc)]))\n  (helper s 0 0))\n", " \
    \ (define (count c)\n    (cond [(char=? c #\\a) 1]\n          [(char=? c #\\e)\
    \ 1]\n          [(char=? c #\\i) 1]\n          [(char=? c #\\o) 1]\n         \
    \ [(char=? c #\\u) 1]\n          [(char=? c #\\y) 1]\n          [else 0]))\n \
    \ (apply + (map count (string->list s))))", "  (if (string=? s \"\")\n      0\n\
    \      (if (or (char=? (string-ref s 0) #\\a)\n              (char=? (string-ref\
    \ s 0) #\\e)\n              (char=? (string-ref s 0) #\\i)\n              (char=?\
    \ (string-ref s 0) #\\o)\n              (char=? (string-ref s 0) #\\u)\n     \
    \         (char=? (string-ref s 0) #\\y))\n          (+ 1 (vowels_count (substring\
    \ s 1)))\n          (vowels_count (substring s 1)))))\n", "  (let* ((v (string-filter\
    \ (lambda (c) (member c '(#\\a #\\e #\\i #\\o #\\u))) s))\n         (y (string-filter\
    \ (lambda (c) (char=? c #\\y)) s)))\n    (cond ((not (char=? (string-ref s (-\
    \ (string-length s) 1)) #\\y))\n           (string-length v))\n          ((string-length\
    \ y)\n           (+ (string-length v) 1))\n          (else (string-length v)))))\n\
    ```\n\n```racket\n#lang racket\n", "  (cond [(empty? s) 0]\n        [(or (char=?\
    \ (first s) #\\a)\n             (char=? (first s) #\\e)\n             (char=?\
    \ (first s) #\\i)\n             (char=? (first s) #\\o)\n             (char=?\
    \ (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (or\
    \ (char=? (first s) #\\A)\n                  (char=? (first s) #\\E)\n       \
    \           (char=? (first s) #\\I)\n                  (char=? (first s) #\\O)\n\
    \                  (char=? (first s) #\\U))\n              (or (empty? (rest s))\n\
    \                  (not (char=? (first (rest s)) #\\y))))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n```\n\nA sample run looks\
    \ like this:\n\n```racket\n-> (vowels_count \"abcde\")\n2\n-> (vowels_count \"\
    ACEDY\")\n3\n```\n\nI feel like the Racket solution is reasonably straightforward,\
    \ but a little overly verbose.\n\nIn the [Ruby](ruby) solution, I'm more succinct,\
    \ but more explicitly make the distinction between vowels and consonants.\n\n\
    ## Analysis\n\n### Racket\n\nThe Racket solution has a simple conditional/recursive\
    \ structure.\n\nComplexity: `O(n)`\n\n### Ruby\n\nThe Ruby solution is structured\
    \ similarly to the Racket solution, but I think it's a little more concise, and\
    \ more clearly separates vowels from consonants.\n\nComplexity: `O(n)`", "  (length\
    \ (filter char-ci=? (string->list s) \"aeiou\")))\n", "  (cond\n    [(string=?\
    \ \"\" s) 0]\n    [(string-contains \"aeiouy\" (string-ref s -1)) (+ 1 (vowels_count\
    \ (substring s 0 -1)))]\n    [else (vowels_count (substring s 0 -1))]))\n", " \
    \ (define (vowels-in-str nstr)\n    (cond\n      [(empty? nstr) '()]\n      [(member\
    \ (first nstr) '(#\\a #\\e #\\i #\\o #\\u))\n       (cons (first nstr) (vowels-in-str\
    \ (rest nstr)))]\n      [else (vowels-in-str (rest nstr))]))\n  (length (vowels-in-str\
    \ (string->list s))))", "  (cond\n    [(string=? \"\" s) 0]\n    [(or (string=?\
    \ (substring s 0 1) \"a\")\n         (string=? (substring s 0 1) \"e\")\n    \
    \     (string=? (substring s 0 1) \"i\")\n         (string=? (substring s 0 1)\
    \ \"o\")\n         (string=? (substring s 0 1) \"u\")\n         (string=? (substring\
    \ s 0 1) \"y\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (cond ((empty? s) 0)\n        ((vowel? (first s))\n\
    \         (+ 1 (vowels_count (rest s))))\n        (else (vowels_count (rest s)))))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) (list #\\a #\\e #\\i #\\o #\\\
    u))\n         (+ 1 (vowels_count (rest s)))]\n        [(member (first s) (list\
    \ #\\A #\\E #\\I #\\O #\\U))\n         (+ 1 (vowels_count (rest s)))]\n      \
    \  [(and (last-pair? s) (char=? (first s) #\\y))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(last-char-vowel? s) (+ 1 (vowels_count (substring s 0 (- (string-length\
    \ s) 1))))]\n    [else (vowels_count (substring s 1))]))\n", "  (cond [(empty?\
    \ s) 0]\n        [(char-alphabetic? (first s))\n         (cond [(or (equal? (first\
    \ s) #\\a)\n                    (equal? (first s) #\\e)\n                    (equal?\
    \ (first s) #\\i)\n                    (equal? (first s) #\\o)\n             \
    \       (equal? (first s) #\\u))\n                (+ 1 (vowels_count (rest s)))]\n\
    \               [(and (equal? (first s) #\\y)\n                     (empty? (rest\
    \ s)))\n                (+ 1 (vowels_count (rest s)))]\n               [else (vowels_count\
    \ (rest s))])]\n        [else (vowels_count (rest s))]))\n", "  (define (vowels_p\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (let loop ([i 0] [count\
    \ 0])\n    (if (= i (string-length s))\n        count\n        (let ([c (string-ref\
    \ s i)])\n          (if (vowels_p c)\n              (loop (+ i 1) (+ count 1))\n\
    \              (loop (+ i 1) count))))))\n", "  (for/sum ([c (in-string s)])\n\
    \    (cond [(char-ci=? c #\\a) 1]\n          [(char-ci=? c #\\e) 1]\n        \
    \  [(char-ci=? c #\\i) 1]\n          [(char-ci=? c #\\o) 1]\n          [(char-ci=?\
    \ c #\\u) 1]\n          [(and (char-ci=? c #\\y)\n                (string-empty?\
    \ (substring s (+ 1 (string-index s c))))) 1]\n          [else 0])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(member (string-upcase (first s)) '(\"A\" \"E\" \"I\"\
    \ \"O\" \"U\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u #\\y)])\n    (let\
    \ loop ([i 0] [count 0])\n      (cond\n        [(eq? i (string-length s)) count]\n\
    \        [(member (string-ref s i) vowels)\n         (loop (+ i 1) (+ count 1))]\n\
    \        [else (loop (+ i 1) count)]))))\n```\n\n### Exercise 2\n\nWrite a function\
    \ `remove_vowels` which takes a string as input and returns\nthe same string with\
    \ all vowels removed. Vowels in this case are 'a', 'e',\n'i', 'o', 'u'. Here,\
    \ 'y' is also a vowel, but only when it is at the end of\nthe given word.\n\n\
    Example:\n\n```racket\n>>> remove_vowels(\"abcde\")\n\"bcd\"\n>>> remove_vowels(\"\
    ACEDY\")\n\"C\"\n```\n\n```racket\n#lang racket\n", "  (define (helper count i)\n\
    \    (cond\n      ((= i 0) count)\n      ((string-ci=? (string-ref s i) \"a\"\
    ) (helper (+ count 1) (- i 1)))\n      ((string-ci=? (string-ref s i) \"e\") (helper\
    \ (+ count 1) (- i 1)))\n      ((string-ci=? (string-ref s i) \"i\") (helper (+\
    \ count 1) (- i 1)))\n      ((string-ci=? (string-ref s i) \"o\") (helper (+ count\
    \ 1) (- i 1)))\n      ((string-ci=? (string-ref s i) \"u\") (helper (+ count 1)\
    \ (- i 1)))\n      ((string-ci=? (string-ref s i) \"y\") (helper (+ count 1) (-\
    \ i 1)))\n      (else (helper count (- i 1)))))\n  (helper 0 (- (string-length\
    \ s) 1)))\n", "  (cond\n    [(and (not(string=? s \"\"))\n          (string-contains-ci?\
    \ \"aeiouy\" (string-ref s (sub1 (string-length s)))))\n     (+ 1 (vowels_count\
    \ (substring s 0 (sub1 (string-length s)))))]\n    [(string-contains-ci? \"aeiou\"\
    \ (string-ref s (sub1 (string-length s))))\n     (vowels_count (substring s 0\
    \ (sub1 (string-length s))))]\n    [else\n     0]))\n", "  (local ((define (vowels\
    \ lst)\n            (cond [(empty? lst) empty]\n                  [(or (char=?\
    \ (first lst) #\\a)\n                       (char=? (first lst) #\\e)\n      \
    \                 (char=? (first lst) #\\i)\n                       (char=? (first\
    \ lst) #\\o)\n                       (char=? (first lst) #\\u))\n            \
    \       (cons (first lst) (vowels (rest lst)))]\n                  [else (vowels\
    \ (rest lst))])))\n    (length (vowels (string->list s)))))\n", "  (vowels_helper\
    \ (string->list s) 0))\n", "  (cond ((or (= 0 (string-length s))\n           \
    \  (string=? (substring s -1) \"y\"))\n         0)\n        ((or (string=? (substring\
    \ s 0 1) \"a\")\n             (string=? (substring s 0 1) \"e\")\n           \
    \  (string=? (substring s 0 1) \"i\")\n             (string=? (substring s 0 1)\
    \ \"o\")\n             (string=? (substring s 0 1) \"u\"))\n         (+ 1 (vowels_count\
    \ (substring s 1))))\n        (else (vowels_count (substring s 1)))))\n", "  (if\
    \ (empty? s)\n      0\n      (if (or (equal? (first s) 'a)\n              (equal?\
    \ (first s) 'e)\n              (equal? (first s) 'i)\n              (equal? (first\
    \ s) 'o)\n              (equal? (first s) 'u)\n              (and (equal? (first\
    \ s) 'y)\n                   (empty? (rest s))))\n          (+ 1 (vowels_count\
    \ (rest s)))\n          (vowels_count (rest s)))))\n", "  (define (helper s vowels\
    \ ans)\n    (cond\n      [(and (empty? s)\n            (or (string=? (first s)\
    \ \"y\")\n                (string=? (first s) \"Y\")))\n       (add1 ans)]\n \
    \     [(and (empty? s)\n            (member (first s) vowels))\n       (add1 ans)]\n\
    \      [(and (empty? s)\n            (not (member (first s) vowels)))\n      \
    \ ans]\n      [(and (member (first s) vowels)\n            (or (string=? (first\
    \ s) \"y\")\n                (string=? (first s) \"Y\")))\n       (helper (rest\
    \ s) vowels (add1 ans))]\n      [(and (member (first s) vowels)\n            (not\
    \ (or (string=? (first s) \"y\")\n                     (string=? (first s) \"\
    Y\"))))\n       (helper (rest s) vowels (add1 ans))]\n      [else\n       (helper\
    \ (rest s) vowels ans)]))\n  (helper s '(\"a\" \"e\" \"i\" \"o\" \"u\") 0))\n",
  "  (cond [(string=? s \"\") 0]\n        [(member (string-ref s 0) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count (substring s 1)))]\n      \
    \  [else (vowels_count (substring s 1))]))\n", "  (cond [(empty? s) 0]\n     \
    \   [(in? (first s) \"aeiouy\") (+ 1 (vowels_count (rest s)))]\n        [else\
    \ (vowels_count (rest s))]))\n", "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n\
    \  (define (count-acc s index acc)\n    (cond\n      [(>= index (string-length\
    \ s)) acc]\n      [(member (string-ref s index) vowels)\n       (count-acc s (+\
    \ index 1) (+ acc 1))]\n      [else (count-acc s (+ index 1) acc)]))\n  (count-acc\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (= (first s) #\\a) (= (first\
    \ s) #\\e) (= (first s) #\\i) (= (first s) #\\o) (= (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(or (= (first s) #\\A) (= (first s) #\\E)\
    \ (= (first s) #\\I) (= (first s) #\\O) (= (first s) #\\U))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(or (= (first s) #\\y) (= (first s) #\\Y))\n     (if (empty?\
    \ (rest s)) 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n\
    ```\n\n```racket\n#lang racket\n", "  (cond\n    [(string=? s \"\") 0]\n    [(or\
    \ (string=? (substring s 0 1) \"a\")\n         (string=? (substring s 0 1) \"\
    e\")\n         (string=? (substring s 0 1) \"i\")\n         (string=? (substring\
    \ s 0 1) \"o\")\n         (string=? (substring s 0 1) \"u\")\n         (string=?\
    \ (substring s 0 1) \"y\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else\
    \ (vowels_count (substring s 1))]))\n", "  (cond\n    [(string=? s \"\") 0]\n\
    \    [(string-contains \"aeiouy\" (string-ref s (- (string-length s) 1)))\n  \
    \   (+ 1 (vowels_count (substring s 0 (- (string-length s) 1))))]\n    [else (vowels_count\
    \ (substring s 0 (- (string-length s) 1)))]))\n", "  (define (is-vowel? c)\n \
    \   (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n  \
    \      (equal? c #\\o)\n        (equal? c #\\u)))\n  (cond ((null? s) 0)\n   \
    \     ((and (is-vowel? (car s))\n              (or (null? (cdr s))\n         \
    \         (not (is-vowel? (cadr s)))))\n         (+ 1 (vowels_count (cdr s))))\n\
    \        (else (vowels_count (cdr s)))))\n", "  (count-vowels (string->list s)))\n",
  "  (define (vowels? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n     \
    \   (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (loop i cnt)\n    (if (= i (string-length s))\n        cnt\n        (if (vowels?\
    \ (string-ref s i))\n            (loop (+ i 1) (+ cnt 1))\n            (loop (+\
    \ i 1) cnt))))\n  (let* ((last (string-ref s (- (string-length s) 1)))\n     \
    \    (cnt (loop 0 0)))\n    (if (and (char=? last #\\y) (vowels? last))\n    \
    \    (+ cnt 1)\n        cnt)))\n", "  (cond\n    ((empty? s) 0)\n    ((char-set=?\
    \ (string->list \"aeiouy\") (string->list (substring s -1))) (+ 1 (vowels_count\
    \ (substring s 0 -1))))\n    (else (vowels_count (substring s 0 -1)))))\n", " \
    \ (define (vowels-count-iter s n)\n    (cond\n      [(empty? s) n]\n      [(member\
    \ (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n       (vowels-count-iter (rest\
    \ s) (+ n 1))]\n      [else (vowels-count-iter (rest s) n)]))\n  (vowels-count-iter\
    \ s 0))\n", "  (if (string=? s \"\")\n      0\n      (if (string-member (string-downcase\
    \ (substring s 0 1)) \"aeiou\")\n          (+ 1 (vowels_count (substring s 1)))\n\
    \          (vowels_count (substring s 1)))))\n", "  (if (null? s)\n      0\n \
    \     (if (or (equal? (car s) #\\a)\n              (equal? (car s) #\\e)\n   \
    \           (equal? (car s) #\\i)\n              (equal? (car s) #\\o)\n     \
    \         (equal? (car s) #\\u)\n              (and (equal? (car s) #\\y)\n  \
    \                 (null? (cdr s))))\n          (+ 1 (vowels_count (cdr s)))\n\
    \          (vowels_count (cdr s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\y)\n\
    \     (if (empty? (rest s))\n         (+ 1 (vowels_count (rest s)))\n        \
    \ (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (length\
    \ (filter vowel? (string->list s))))\n", "  (if (empty? s)\n      0\n      (let\
    \ ((last-char (last-char s)))\n\t(if (eq? last-char #\\y)\n\t    (+ (vowels_count\
    \ (substring s 0 (- (string-length s) 1))) 1)\n\t    (vowels_count (substring\
    \ s 0 (- (string-length s) 1)))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-in-range?\
    \ (string-ref s 0) #\\a #\\z)\n     (cond\n       [(or (char=? (string-ref s 0)\
    \ #\\a)\n            (char=? (string-ref s 0) #\\e)\n            (char=? (string-ref\
    \ s 0) #\\i)\n            (char=? (string-ref s 0) #\\o)\n            (char=?\
    \ (string-ref s 0) #\\u))\n        (+ 1 (vowels_count (substring s 1)))]\n   \
    \    [(and (char=? (string-ref s 0) #\\y)\n             (empty? (substring s 1)))\n\
    \        (+ 1 (vowels_count (substring s 1)))]\n       [else (vowels_count (substring\
    \ s 1))])]\n    [else (vowels_count (substring s 1))]))\n", "  (cond [(empty?\
    \ s) 0]\n        [(member (first s) '(a e i o u)) (add1 (vowels_count (rest s)))]\n\
    \        [(member (first s) '(A E I O U)) (add1 (vowels_count (rest s)))]\n  \
    \      [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (vowels-in-word\
    \ s)\n    (define (is-vowel? c)\n      (cond\n        [(equal? c #\\y) (equal?\
    \ (substring s -1) #\\y)]\n        [else (member c vowels)]))\n    (define (vowels-in-word-helper\
    \ n)\n      (cond\n        [(= n 0) 0]\n        [(is-vowel? (string-ref s (- n\
    \ 1))) (+ 1 (vowels-in-word-helper (- n 1)))]\n        [else (vowels-in-word-helper\
    \ (- n 1))]))\n    (vowels-in-word-helper (string-length s)))\n  (vowels-in-word\
    \ s))\n", "  (cond\n    [(string=? s \"\") 0]\n    [(or (string=? (substring s\
    \ 0 1) \"a\")\n         (string=? (substring s 0 1) \"e\")\n         (string=?\
    \ (substring s 0 1) \"i\")\n         (string=? (substring s 0 1) \"o\")\n    \
    \     (string=? (substring s 0 1) \"u\")\n         (string=? (substring s 0 1)\
    \ \"y\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (match s\n    [(\"\") 0]\n    [(cons (? (in-set '(#\\\
    a #\\e #\\i #\\o #\\u))) (in-set '#\\y))\n     (+ 1 (vowels_count (cdr s)))]\n\
    \    [(cons (? (in-set '(#\\a #\\e #\\i #\\o #\\u))) s)\n     (+ 1 (vowels_count\
    \ (cdr s)))]\n    [(cons _ s) (vowels_count (cdr s))]))\n", "  (length (filter\
    \ (lambda (c) (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))) s)))\n", "  (if (empty?\
    \ s)\n      0\n      (if (member (string-ref s 0) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n          (+ 1 (vowels_count (substring s 1)))\n          (vowels_count\
    \ (substring s 1)))))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n \
    \       (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n  \
    \      (char=? c #\\u)))\n  (if (empty? s)\n      0\n      (if (is_vowel (string-ref\
    \ s 0))\n          (+ 1 (vowels_count (substring s 1)))\n          (vowels_count\
    \ (substring s 1)))))\n", "  (letrec\n      ((inner\n        (lambda (s i x)\n\
    \          (cond\n            [(= i (string-length s)) x]\n            [(char-set=?\
    \ #\"aeiou\" (string-ref s i)) (inner s (+ i 1) (+ x 1))]\n            [(char-set=?\
    \ #\"AEIOU\" (string-ref s i)) (inner s (+ i 1) (+ x 1))]\n            [(and (=\
    \ i (- (string-length s) 1)) (char-set=? #\"yY\" (string-ref s i))) (inner s (+\
    \ i 1) (+ x 1))]\n            [else (inner s (+ i 1) x)]))))\n    (inner s 0 0)))\n",
  "  (length (filter (lambda (x) (or (equal? x #\\a) (equal? x #\\e) (equal? x #\\\
    i) (equal? x #\\o) (equal? x #\\u))) s)))\n", "  (define (vowels? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (helper i l n)\n    (cond ((=\
    \ i l) n)\n          ((and (vowels? (string-ref s i))\n                (/= i (-\
    \ l 1))) (+ n 1))\n          ((and (vowels? (string-ref s i))\n              \
    \  (= i (- l 1))) (+ n 1))\n          (else n)))\n  (helper 0 (string-length s)\
    \ 0))\n", "  (if (string=? \"\" s)\n      0\n      (vowels_count_accum s 0)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-set=? (list-&gt;char-set (string-&gt;list\
    \ \"aeiouy\"))\n                 (list-&gt;char-set (list (string-ref s 0))))\n\
    \     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count (substring\
    \ s 1))]))\n</code>\nGives the following error:\n<code>; default-load-handler:\
    \ expected a `module' declaration for `/home/sara/Downloads/Arq3/q1.rkt', but\
    \ found something else", "  ;; s is a string\n  (define (vowels_count-helper s)\n\
    \    (cond [(empty? s) 0]\n          [(equal? (first s) #\\a) (+ 1 (vowels_count-helper\
    \ (rest s)))]\n          [(equal? (first s) #\\e) (+ 1 (vowels_count-helper (rest\
    \ s)))]\n          [(equal? (first s) #\\i) (+ 1 (vowels_count-helper (rest s)))]\n\
    \          [(equal? (first s) #\\o) (+ 1 (vowels_count-helper (rest s)))]\n  \
    \        [(equal? (first s) #\\u) (+ 1 (vowels_count-helper (rest s)))]\n    \
    \      [(equal? (first s) #\\y) (+ 1 (vowels_count-helper (rest s)))]\n      \
    \    [else (vowels_count-helper (rest s))]))\n  (vowels_count-helper s))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(or (char=? (first s) #\\A)\n         (char=? (first s) #\\E)\n        \
    \ (char=? (first s) #\\I)\n         (char=? (first s) #\\O)\n         (char=?\
    \ (first s) #\\U))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (not (empty?\
    \ (rest s)))\n          (char=? (last s) #\\y))\n     (+ 1 (vowels_count (substring\
    \ s 0 (- (string-length s) 1))))]\n    [else (vowels_count (rest s))]))\n", " \
    \ (if (string=? \"\" s)\n      0\n      (if (or (char=? (string-ref s 0) #\\a)\n\
    \              (char=? (string-ref s 0) #\\e)\n              (char=? (string-ref\
    \ s 0) #\\i)\n              (char=? (string-ref s 0) #\\o)\n              (char=?\
    \ (string-ref s 0) #\\u)\n              (and (char=? (string-ref s 0) #\\y)\n\
    \                   (string=? \"\" (substring s 1))))\n          (+ 1 (vowels_count\
    \ (substring s 1)))\n          (vowels_count (substring s 1)))))\n```\n\n```\n\
    #lang racket\n", "  (let loop ([s s] [c (string-length s)] [n 0])\n    (cond\n\
    \      [(or (= c 0) (= c (- (string-length s) 1)))\n       (if (char-vowel? (string-ref\
    \ s (- c 1)))\n           (+ n 1)\n           n)]\n      [else\n       (if (char-vowel?\
    \ (string-ref s c))\n           (loop (substring s 0 c) (- c 1) (+ n 1))\n   \
    \        (loop (substring s 0 c) (- c 1) n))])))\n", "  (define (inner s i acc)\n\
    \    (cond ((&gt;= i (string-length s)) acc)\n          ((or (char=? (string-ref\
    \ s i) #\\a)\n               (char=? (string-ref s i) #\\e)\n               (char=?\
    \ (string-ref s i) #\\i)\n               (char=? (string-ref s i) #\\o)\n    \
    \           (char=? (string-ref s i) #\\u)\n               (and (char=? (string-ref\
    \ s i) #\\y)\n                    (= i (- (string-length s) 1))))\n          \
    \ (inner s (+ i 1) (+ acc 1)))\n          (else (inner s (+ i 1) acc))))\n  (inner\
    \ s 0 0))\n</code>\nIs there a better way to do this?\n\n\nA:\n\n<code>#lang racket\n",
  "  (define (vowels-sub s)\n    (cond\n      [(empty? s) empty]\n      [(not (char-ci=?\
    \ (first s) #\\a #\\e #\\i #\\o #\\u)) (vowels-sub (rest s))]\n      [else (cons\
    \ (first s) (vowels-sub (rest s)))]))\n  (if (not (empty? (rest s)))\n      (if\
    \ (char-ci=? (first s) #\\a #\\e #\\i #\\o #\\u)\n          (+ 1 (vowels_count\
    \ (rest s)))\n          (vowels_count (rest s)))\n      (if (char-ci=? (first\
    \ s) #\\a #\\e #\\i #\\o #\\u #\\y)\n          1\n          0)))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ae\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ai\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ao\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"au\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ay\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ee\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ey\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ei\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ie\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"io\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"iy\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"oe\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"oi\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"oy\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"oi\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ou\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ue\")\n         (string=? (string-append (substring s 0 1) (substring\
    \ s 1 2)) \"ui\")\n         (string=? (string-append (", "  (define (vowels_count-iter\
    \ s length cur-len counter)\n    (cond\n      [(eq? length cur-len) counter]\n\
    \      [(char-vowel? (string-ref s cur-len))\n       (vowels_count-iter s length\
    \ (+ cur-len 1) (+ counter 1))]\n      [else (vowels_count-iter s length (+ cur-len\
    \ 1) counter)]))\n  (vowels_count-iter s (string-length s) 0 0))\n", "  ;; This\
    \ is to show that in Racket, we can use a plain list to check\n  ;; if an element\
    \ is in the list. Another way to do this is to use\n  ;; the `set` function to\
    \ convert the list to a set, and use `member`\n  ;; to check if the element is\
    \ in the set. But actually we should\n  ;; use a set to begin with in this problem.\n\
    \  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (cond\n    [(empty? s) 0]\n\
    \    [(member (string-ref s (- (string-length s) 1)) vowels)\n     (+ 1 (vowels_count\
    \ (substring s 0 (- (string-length s) 1))))]\n    [else (vowels_count (substring\
    \ s 0 (- (string-length s) 1)))]))\n```\n\n## Calculator\n\n```#lang racket\n",
  "  (if (string=? s \"\")\n      0\n      (if (member (string-ref s 0) '(\"a\" \"\
    e\" \"i\" \"o\" \"u\"))\n          (+ 1 (vowels_count (substring s 1)))\n    \
    \      (vowels_count (substring s 1)))))\n", "  ;; Your implementation goes here.\n\
    \  0)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
