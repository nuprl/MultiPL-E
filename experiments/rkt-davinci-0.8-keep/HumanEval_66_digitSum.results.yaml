language: rkt
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n    (apply + (filter (\u03BB (c) (and\
    \ (>= c 65) (<= c 90))) (map char->integer s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9h2im7u.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (string-ref\
    \ s 0)\n         (digitSum (substring s 1)))))\n</code>\nI am new in this language\
    \ and I am not sure if I am doing it correctly. \nThanks in advance. \n\n\nA:\n\
    \nTo extract the ASCII code of a character in Racket you can use the <code>char-&gt;integer</code>\
    \ procedure, like this:\n<code>(char-&gt;integer (string-ref \"a\" 0))\n</code>\n\
    This returns the ASCII code for the character <code>a</code>, which is <code>97</code>.\
    \ But instead of using <code>char-&gt;integer</code> in your code, it's better\
    \ to just use <code>string-ref</code>, which directly returns the ASCII code of\
    \ the requested character.\nIn order to sum the ASCII codes of the characters\
    \ that are uppercase, you can use the <code>upper-case?</code> predicate to filter\
    \ them. In your case, to count only the upper case characters we can modify your\
    \ code like this:\n<code>(define (digitSum s)\n  (if (empty? s)\n      0\n   \
    \   (+ (if (upper-case? (string-ref s 0))\n             (string-ref s 0)\n   \
    \          0)\n         (digitSum (substring s 1)))))\n</code>\nIf the current\
    \ character is an upper case character, add its ASCII code to the sum, otherwise\
    \ add <code>0</code>.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz6fg1bz6.rkt:26:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 27\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([lst (string->list s)])\n   \
    \ (apply + (for/list ([i lst])\n               (if (and (>= i 65) (<= i 90))\n\
    \                   i\n                   0)))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dlv60lc.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (help s sum)\n    (cond [(empty?\
    \ s) sum]\n          [(char-&gt;integer (car s)) &gt;= 65] [(char-&gt;integer\
    \ (car s)) &lt;= 90] [else \n            (help (cdr s) (+ sum (char-&gt;integer\
    \ (car s))))]\n          [else (help (cdr s) sum)]))\n  (help s 0))\n</code>\n\
    I am not sure why this does not work as it appears correct to me.\nAny help would\
    \ be appreciated.\n\n\nA:\n\nThe problem with your code is here:\n<code>[(char-&gt;integer\
    \ (car s)) &gt;= 65] [(char-&gt;integer (car s)) &lt;= 90] [else \n        (help\
    \ (cdr s) (+ sum (char-&gt;integer (car s))))]\n</code>\nThe first 2 lines are\
    \ not the conditions, they are just the values returned by applying <code>char-&gt;integer</code>\
    \ to <code>(car s)</code>. The test is in the third line: <code>[else...</code>.\n\
    In Racket, <code>[condition1 exp1 condition2 exp2 ...]</code> evaluates to <code>exp1</code>\
    \ if <code>condition1</code> evaluates to a true value.\nIf you wrote your test\
    \ like:\n<code>[(&gt;= (char-&gt;integer (car s)) 65)\n (&lt;= (char-&gt;integer\
    \ (car s)) 90)\n ...]\n</code>\nyou would get the effect you want. But a more\
    \ idiomatic way to write this is:\n<code>[(&lt;= 65 (char-&gt;integer (car s))\
    \ 90) ...]\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6sxopqcw.rkt:36:4: read-syntax: missing `)` to close `(` on line\
    \ 35, found instead `]`\n  possible cause: indentation suggests a missing `)`\
    \ before line 36\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(upper?\
    \ (first s)) (+ 65 (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl8ao_w2o.rkt:16:6: upper?: unbound identifier\n  in: upper?\n \
    \ location...:\n   /tmp/tmpl8ao_w2o.rkt:16:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    ((null? s) 0)\n    ((char-alphabetic?\
    \ (car s))\n     (+ (char->integer (car s)) (digitSum (cdr s))))\n    (else (digitSum\
    \ (cdr s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7mti52t.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (string-fold + 0 (string-map (lambda\
    \ (x) (if (char-upper-case? x) (char->integer x) 0)) s)))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5_znsfz_.rkt:14:3: string-fold: unbound identifier\n  in: string-fold\n\
    \  location...:\n   /tmp/tmp5_znsfz_.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (< 65 (string-ref s 0) 90)\n          (digitSum (substring s 1))\n  \
    \        (+ (string-ref s 0) (digitSum (substring s 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:28:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:29:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:30:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:31:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu4jetp58.rkt:32:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(null? s) 0]\n        [(&gt;\
    \ (char-&gt;integer (car s)) 64) (+ (char-&gt;integer (car s)) (digitSum (cdr\
    \ s)))]\n        [(&gt; (char-&gt;integer (car s)) 96) (+ (char-&gt;integer (car\
    \ s)) (digitSum (cdr s)))]\n        [else (digitSum (cdr s))]))\n</code>\nBut\
    \ it's giving me this error: <code>index out of bounds; starting index 0 too small.</code>\n\
    \n\nA:\n\nThe problem is that your function is not prepared to handle an empty\
    \ string.\nRacket implicitly checks for null? and empty? in many places (for example,\
    \ <code>cdr</code> returns the empty list instead of throwing an error if its\
    \ argument is null), but in this case it isn't, because you are using <code>car</code>\
    \ and <code>cdr</code> explicitly.\nLuckily, recursion with base cases is so common\
    \ that Racket has a convenience function <code>for/fold</code> (documentation\
    \ here) which folds over lists. For example, you can use the following code to\
    \ sum up all the values in a list:\n<code>(for/fold ([sum 0]) ([i lst])\n  (+\
    \ sum i))\n</code>\nYou can add predicates for <code>for/fold</code> to only include\
    \ certain elements (such as only the upper-case elements of a string). The <code>for/fold</code>\
    \ form also makes it trivial to add a base case for when the list is empty, because\
    \ it already has a way to specify a base case.\nI'd recommend reading the documentation\
    \ for <code>for/fold</code> and trying to rewrite your code using it, then checking\
    \ the solution if you get stuck.\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp46uqgjmm.rkt:17:34: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let ([next-char (string-ref s 0)])\n        (+ (if (char-uppercase? next-char)\
    \ (char->integer next-char) 0)\n           (digitSum (substring s 1))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0t1h8xid.rkt:17:16: char-uppercase?: unbound identifier\n  in:\
    \ char-uppercase?\n  location...:\n   /tmp/tmp0t1h8xid.rkt:17:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (lambda (x) (and (char?\
    \ x) (>= x #\\A) (<= x #\\Z))) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9sfsk0j.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (reduce + (map char->integer\n    \
    \               (filter char-upper-case? (string->list s)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb1z4lwlq.rkt:14:3: reduce: unbound identifier\n  in: reduce\n \
    \ location...:\n   /tmp/tmpb1z4lwlq.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplyzvjwdj.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplyzvjwdj.rkt:16:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map (\u03BB (c) (cond\n     \
    \                   [(char=? c #\\A) 65]\n                        [(char=? c #\\\
    B) 66]\n                        [(char=? c #\\C) 67]\n                       \
    \ [(char=? c #\\D) 68]\n                        [(char=? c #\\E) 69]\n       \
    \                 [(char=? c #\\F) 70]\n                        [(char=? c #\\\
    G) 71]\n                        [(char=? c #\\H) 72]\n                       \
    \ [(char=? c #\\I) 73]\n                        [(char=? c #\\J) 74]\n       \
    \                 [(char=? c #\\K) 75]\n                        [(char=? c #\\\
    L) 76]\n                        [(char=? c #\\M) 77]\n                       \
    \ [(char=? c #\\N) 78]\n                        [(char=? c #\\O) 79]\n       \
    \                 [(char=? c #\\P) 80]\n                        [(char=? c #\\\
    Q) 81]\n                        [(char=? c #\\R) 82]\n                       \
    \ [(char=? c #\\S) 83]\n                        [(char=? c #\\T) 84]\n       \
    \                 [(char=? c #\\U) 85]\n                        [(char=? c #\\\
    V) 86]\n                        [(char=? c #\\W) 87]\n                       \
    \ [(char=? c #\\X) 88]\n                        [(char=? c #\\Y) 89]\n       \
    \                 [(char=? c #\\Z) 90]\n                        [else 0]))\n \
    \           (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpylzncbl1.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpylzncbl1.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let* ([upperCase #rx\"[A-Z]\"]\n \
    \        [upperS (regexp-match upperCase s)])\n    (apply + (map string->number\
    \ upperS))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:23:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:24:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:25:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:26:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:27:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_z9ph5vx.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply +\n         (map char->integer\n\
    \              (remove (curry =? #\\a)\n                      (for/list ([ch (in-string\
    \ s)])\n                        (if (char-upper-case? ch)\n                  \
    \          ch))))))\n```\n\n```scheme\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjbzbynym.rkt:16:29: =?: unbound identifier\n  in: =?\n  location...:\n\
    \   /tmp/tmpjbzbynym.rkt:16:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (and (<= #\\A (string-ref s 0)) (<= (string-ref s 0) #\\Z))\n       \
    \   (+ (string-ref s 0) (digitSum (substring s 1)))\n          (digitSum (substring\
    \ s 1)))))\n```\n\n```scheme\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:28:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:29:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:30:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:31:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:32:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:33:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmbr8csf.rkt:34:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n"
  stdout: '''`````scheme

    '
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map char->integer\
    \ (filter char-upper-case? (string->list s)))))\n```\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplna9p8hz.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmplna9p8hz.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-numeric?\
    \ (first s)) (digitSum (rest s))]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3a7d289.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl3a7d289.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3a7d289.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl3a7d289.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3a7d289.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl3a7d289.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3a7d289.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl3a7d289.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (map f l)\n    (if (null? l)\n\
    \        null\n        (cons (f (car l)) (map f (cdr l)))))\n  (define (filter\
    \ p l)\n    (if (null? l)\n        null\n        (if (p (car l))\n           \
    \ (cons (car l) (filter p (cdr l)))\n            (filter p (cdr l)))))\n  (define\
    \ (sum l)\n    (if (null? l)\n        0\n        (+ (car l) (sum (cdr l)))))\n\
    \  (define (is-upper? s)\n    (string-upper-case? s))\n  (sum (map string->number\
    \ (filter is-upper? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8whe7osu.rkt:29:5: string-upper-case?: unbound identifier\n  in:\
    \ string-upper-case?\n  location...:\n   /tmp/tmp8whe7osu.rkt:29:5\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ (lambda (ch) (and (>= ch #\\A) (<= ch #\\Z))) s))))\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:20:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1h9p4f2.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf1h9p4f2.rkt:27:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)]\n     \
    \       #:when (char-upper-case? c))\n    (char->integer c)))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (string-&gt;number (string-append (regexp-match\
    \ #rx\"[A-Z]\" s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpes7pgp9p.rkt:14:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (string-ref s 0))\n         (if (char-upper-case? (string-ref s 0))\n      \
    \       (digitSum (string-drop s 1))\n             (digitSum (string-drop s 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl331kjvs.rkt:18:24: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpl331kjvs.rkt:18:24\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl + 0 (map (\u03BB (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph0zirik.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n    (let ([s (map char-upcase s)])\n\
    \      (foldl + 0 (filter (\u03BB (x) (and (<= x 90) (>= x 65))) s))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw1g16cy.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map char->integer\
    \ (regexp-match* #rx\"[A-Z]\" s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprpblb06q.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmprpblb06q.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\
    \ (if (char-upcase? c) (char->integer c) 0))))\n</code>\nTest output:\n<code>digitSum\
    \ \"\" =&gt; 0\ndigitSum \"abAB\" =&gt; 131\ndigitSum \"abcCd\" =&gt; 67\ndigitSum\
    \ \"helloE\" =&gt; 69\ndigitSum \"woArBld\" =&gt; 131\ndigitSum \"aAaaaXa\" =&gt;\
    \ 153\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmproyxjkyv.rkt:14:46: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmproyxjkyv.rkt:14:46\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (&gt;= (char-&gt;integer (string-ref s 0)) 65)\n          (+ (char-&gt;integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))\n          (digitSum (substring\
    \ s 1)))))\n</code>\nAnd here is the test:\n<code>#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsfaikmpx.rkt:16:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (eqAny? l s)\n    (cond\n \
    \     [(empty? l) #f]\n      [(eq? (first l) s) #t]\n      [else (eqAny? (rest\
    \ l) s)]))\n  (cond\n    [(empty? s) 0]\n    [(eqAny? '(\"A\" \"B\" \"C\" \"D\"\
    \ \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\"\
    \ \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\") (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppgj2mfc8.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppgj2mfc8.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppgj2mfc8.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppgj2mfc8.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppgj2mfc8.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppgj2mfc8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppgj2mfc8.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppgj2mfc8.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (acc sum x)\n    (if (and (>=\
    \ x 65) (<= x 90))\n        (+ sum x)\n        sum))\n  (foldl acc 0 (string->list\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp32fhyttt.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-to-ascii c)\n    (integer->char\
    \ (char->integer c)))\n  (define (is-upper? c)\n    (cond\n      [(eq? (char-to-ascii\
    \ c) (char-to-ascii #\\A)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\\
    B)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\C)) #t]\n      [(eq?\
    \ (char-to-ascii c) (char-to-ascii #\\D)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii\
    \ #\\E)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\F)) #t]\n      [(eq?\
    \ (char-to-ascii c) (char-to-ascii #\\G)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii\
    \ #\\H)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\I)) #t]\n      [(eq?\
    \ (char-to-ascii c) (char-to-ascii #\\J)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii\
    \ #\\K)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\L)) #t]\n      [(eq?\
    \ (char-to-ascii c) (char-to-ascii #\\M)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii\
    \ #\\N)) #t]\n      [(eq? (char-to-ascii c) (char-to-ascii #\\O)) #t]\n      [(eq?\
    \ (char-to-ascii c) (char-to-as\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph54diz7c.rkt:33:30: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (lambda (c) (and (char&lt;=\
    \ #\\A c) (char&lt;= c #\\Z))) (string-&gt;list s))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpblebq1mf.rkt:14:36: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let loop ([s s] [a 0])\n    (cond\
    \ [(null? s) a]\n          [(not (digit? (car s))) (loop (cdr s) a)]\n       \
    \   [else (loop (cdr s) (+ a (car s)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptncpxx20.rkt:16:17: digit?: unbound identifier\n  in: digit?\n\
    \  location...:\n   /tmp/tmptncpxx20.rkt:16:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (\u03BB (c) (and (<=\
    \ #\\A c) (<= c #\\Z))) s)))\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:20:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbd6g3ok.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprbd6g3ok.rkt:27:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (letrec ([d-s (lambda (s i sum) (if\
    \ (char=? (string-ref s i) #\\0)\n                                       sum\n\
    \                                       (d-s s (add1 i) (if (char-upper-case?\
    \ (string-ref s i))\n                                                        \
    \   (add1 sum (char->integer (string-ref s i)))\n                            \
    \                               sum))))])\n    (d-s s 0 0)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptqngr06v.rkt:26:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:27:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:28:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:29:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:30:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:31:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:32:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptqngr06v.rkt:33:4\n\nadd1: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  expected: 1\n  given:\
    \ 2\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (c) (if (char-upcase?\
    \ c) (- c 32) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6z5jyg9f.rkt:14:28: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp6z5jyg9f.rkt:14:28\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (- c 32) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_0v6jr.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (string-ref s 0))\n         (digitSum (substring s 1 (- (string-length s) 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj4yi8tan.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:26:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"c\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:27:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:28:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 0\n\
    \  starting index: 1\n  valid range: [0, 1]\n  string: \"r\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:29:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 0\n\
    \  starting index: 1\n  valid range: [0, 1]\n  string: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:30:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 0\n\
    \  starting index: 1\n  valid range: [0, 1]\n  string: \"r\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj4yi8tan.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (and (>= c 65) (<= c 90)) c 0))\n                (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplyzjy9ms.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)]\n     \
    \       #:when (char-upcase? c))\n    (char->integer c)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6q1yzq9_.rkt:15:20: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp6q1yzq9_.rkt:15:20\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:21:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv26p9ig.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(string=? s \"\")\n        \
    \ 0]\n        [else\n         (let ([s (string-replace s \"a\" \"\")])\n     \
    \      (let ([s (string-replace s \"b\" \"\")])\n             (let ([s (string-replace\
    \ s \"c\" \"\")])\n               (let ([s (string-replace s \"d\" \"\")])\n \
    \                (let ([s (string-replace s \"e\" \"\")])\n                  \
    \ (let ([s (string-replace s \"f\" \"\")])\n                     (let ([s (string-replace\
    \ s \"g\" \"\")])\n                       (let ([s (string-replace s \"h\" \"\"\
    )])\n                         (let ([s (string-replace s \"i\" \"\")])\n     \
    \                      (let ([s (string-replace s \"j\" \"\")])\n            \
    \                 (let ([s (string-replace s \"k\" \"\")])\n                 \
    \              (let ([s (string-replace s \"l\" \"\")])\n                    \
    \             (let ([s (string-replace s \"m\" \"\")])\n                     \
    \              (let ([s (string-replace s \"n\" \"\")])\n                    \
    \                 (let ([s (string-replace s \"o\" \"\")])\n                 \
    \                      (let ([s (string-replace s \"p\" \"\")])\n            \
    \                             (let ([s (string-replace s \"q\" \"\")])\n     \
    \                                      (let ([s (string-replace s \"r\" \"\")])\n\
    \                                             (let ([s (string-replace s \"s\"\
    \ \"\")])\n                                               (let ([s (string-replace\
    \ s \"t\" \"\")])\n                                                 (let ([s (string-replace\
    \ s \"u\" \"\")])\n                                                   (let ([s\
    \ (string-replace s \"v\" \"\")])\n                                          \
    \           (let ([s (string-replace s \"w\" \"\")])\n                       \
    \                                (let ([s (string-replace s \"x\" \"\")])\n  \
    \                                                       (let ([s (string-replace\
    \ s \"y\" \"\")])\n                                                          \
    \ (let ([s (string-replace s \"z\" \"\")])\n                                 \
    \                            (let ([new_string (string->list s)])\n          \
    \                                                     (\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi_cl34cp.rkt:44:63: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 45\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (string-ref s 0))\n         (digitSum (substring s 1)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchdylq6v.rkt:23:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpchdylq6v.rkt:24:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpchdylq6v.rkt:25:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchdylq6v.rkt:26:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpchdylq6v.rkt:27:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpchdylq6v.rkt:28:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchdylq6v.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpchdylq6v.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_b4gnhej.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp_b4gnhej.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (i) (integer->char\
    \ i))\n                (filter (lambda (i) (>= i 65) (<= i 90))\n            \
    \            (map char->integer (string->list s))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:24:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:25:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:26:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:27:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vn6bdms.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(equal? s \"\") 0]\n  \
    \  [else\n     (let\n       ([sums (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1)))])\n       (if (< sums 65)\n         (digitSum (substring s\
    \ 1))\n         sums))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:28:4

    actual:     326

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:29:4

    actual:     461

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:30:4

    actual:     601

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:31:4

    actual:     683

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:32:4

    actual:     638

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:33:4

    actual:     1027

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexgdm564.rkt:34:4

    actual:     1634

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (isUpper? c)\n    (char=? (char-upcase\
    \ c) c))\n  (define (char-to-int c)\n    (- (char->integer c) (char->integer #\\\
    0)))\n  (foldl + 0 (map char-to-int (filter isUpper? s))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:28:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:29:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppuhapwvp.rkt:30:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppuhapwvp.rkt:31:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (hasUpperChar s)\n    (not\
    \ (string=? (string-downcase s) s)))\n  (define (isUpperChar s)\n    (string=?\
    \ (string-downcase s) (string-trim-right s 1)))\n  (define (sum acc x)\n    (cond\n\
    \      [(char=? #\\space x) acc]\n      [(hasUpperChar x) (+ acc (char->integer\
    \ x))]\n      [else acc]))\n  (apply + (for/list ([x (in-string s)])\n       \
    \       (if (isUpperChar x) (char->integer x) 0))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzkp56eyb.rkt:17:35: string-trim-right: unbound identifier\n  in:\
    \ string-trim-right\n  location...:\n   /tmp/tmpzkp56eyb.rkt:17:35\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ((sum 0))\n    (string-map\n \
    \    (lambda (ch)\n       (when (upper-char? ch)\n         (set! sum (+ sum (char->integer\
    \ ch)))))\n     s)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp927tmmss.rkt:15:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp927tmmss.rkt:15:5\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (and\n           (char-numeric? (string-ref s 0))\n           (char-numeric?\
    \ (string-ref s (sub1 (string-length s)))))\n          (+ (char->integer (string-ref\
    \ s 0))\n             (char->integer (string-ref s (sub1 (string-length s)))))\n\
    \          (digitSum (substring s 1 (sub1 (string-length s)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:29:4\n\
    actual:     0\nexpected:   131\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:30:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"c\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:31:4\nactual:\
    \     0\nexpected:   69\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:32:4\n\nsubstring: ending\
    \ index is smaller than starting index\n  ending index: 0\n  starting index: 1\n\
    \  valid range: [0, 1]\n  string: \"r\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:33:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"a\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:34:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"r\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps4vda15h.rkt:35:4\nactual:\
    \     0\nexpected:   327\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([sum 0])\n    (for ([c (in-string\
    \ s)])\n      (when (and (>= c #\\A) (<= c #\\Z))\n        (set! sum (+ sum c))))\n\
    \    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bb7vcmp.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (lambda (x) (&gt;\
    \ x 96)) (map char-&gt;integer (filter char-upper-case? (string-&gt;list s))))))\n\
    </code>\nI wonder if this is readable, or if there are better ways to write it?\n\
    \n\nA:\n\nRacket has some nice functions for this sort of thing.\n<code>(define\
    \ (digit-sum s)\n  (apply +\n         (map char-&gt;integer (string-&gt;list (string-upcase\
    \ s)))))\n</code>\n<code>string-upcase</code> is like <code>string-&gt;upper-case</code>\
    \ but converts the entire string.\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqrx5l2mk.rkt:24:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond ((string=? s \"\") 0)\n     \
    \   ((empty? s) 0)\n        ((or (char-numeric? (string-ref s 0))\n          \
    \   (char-alphabetic? (string-ref s 0))\n             (char-whitespace? (string-ref\
    \ s 0)))\n         (+ (digitSum (substring s 1))\n            (char->integer (string-ref\
    \ s 0))))\n        (else (digitSum (substring s 1)))))\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:28:4

    actual:     326

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:29:4

    actual:     461

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:30:4

    actual:     601

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:31:4

    actual:     683

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:32:4

    actual:     638

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:33:4

    actual:     1027

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj9kz2o1j.rkt:34:4

    actual:     1634

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer\n     \
    \             (filter char-upper-case?\n                          (string->list\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ (lambda (s) (char-upper-case? s)) s))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:20:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp550lkflk.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp550lkflk.rkt:27:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (string-ref s 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:21:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7eiu53kk.rkt:22:4\nactual:     #\\a\nexpected:   131\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:23:4\n\
    actual:     #\\a\nexpected:   67\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:24:4\nactual:\
    \     #\\h\nexpected:   69\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:25:4\nactual:     #\\\
    w\nexpected:   131\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:26:4\nactual:     #\\a\n\
    expected:   153\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:27:4\nactual:     #\\space\n\
    expected:   151\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7eiu53kk.rkt:28:4\nactual:     #\\Y\n\
    expected:   327\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-&gt;integer ch)\n   \
    \ (string-&gt;number (string ch)))\n  (define (accumulate-upper-chars s answer)\n\
    \    (cond ((string=? \"\" s) answer)\n          ((= (char-&gt;integer (string-ref\
    \ s 0)) (char-&gt;integer #\\A))\n           (accumulate-upper-chars (substring\
    \ s 1 (string-length s))\n                                   (+ answer (char-&gt;integer\
    \ (string-ref s 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\B))\n           (accumulate-upper-chars (substring s 1 (string-length s))\n\
    \                                   (+ answer (char-&gt;integer (string-ref s\
    \ 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\C))\n           (accumulate-upper-chars (substring s 1 (string-length s))\n\
    \                                   (+ answer (char-&gt;integer (string-ref s\
    \ 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\D))\n           (accumulate-upper-chars (substring s 1 (string-length s))\n\
    \                                   (+ answer (char-&gt;integer (string-ref s\
    \ 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\E))\n           (accumulate-upper-chars (substring s 1 (string-length s))\n\
    \                                   (+ answer (char-&gt;integer (string-ref s\
    \ 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\F))\n           (accumulate-upper-chars (substring s 1 (string-length s))\n\
    \                                   (+ answer (char-&gt;integer (string-ref s\
    \ 0)))))\n          ((= (char-&gt;integer (string-ref s 0)) (char-&gt;integer\
    \ #\\G))\n          \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf2tke3np.rkt:36:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 38\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map (lambda (x)\n\
    \                         (if (char-upcase? x) (sub1 (char->integer x)) 0))\n\
    \                       (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvk4we5ar.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmpvk4we5ar.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map string-&gt;number\n \
    \                 (regexp-match* #rx\"[A-Z]\" (string-&gt;list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpca3zjclv.rkt:15:44: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map char->integer\n         \
    \     (filter (\u03BB (s) (>= s #\\A) (<= s #\\Z))\n                      (string->list\
    \ s)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfpqoi8_8.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpfpqoi8_8.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldr (lambda (c x)\n           (cond\
    \ ((char-upcase? c)\n                  (+ x (char->integer c)))\n            \
    \     (else x)))\n         0\n         s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfta9b6cw.rkt:15:19: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpfta9b6cw.rkt:15:19\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (equal? s \"\")\n      0\n    \
    \  (let loop ([s s] [sum 0])\n        (if (empty? s)\n            sum\n      \
    \      (if (and (>= (car s) #\\A) (<= (car s) #\\Z))\n                (loop (cdr\
    \ s) (+ sum (car s)))\n                (loop (cdr s) sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzfesp8d.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (if (<= (char->integer (car s)) 90) (char->integer (car s)) 0)\n        \
    \         (digitSum (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqx99sm0d.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl (lambda (x acc)\n          \
    \ (if (and (>= x 65) (<= x 90))\n               (+ x acc)\n               acc))\n\
    \         0\n         (map char->integer (string->list s))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (getSum c)\n    (cond\n   \
    \   [(string=? c \"\") 0]\n      [(string-ci=? c \"a\") 97]\n      [(string-ci=?\
    \ c \"b\") 98]\n      [(string-ci=? c \"c\") 99]\n      [(string-ci=? c \"d\"\
    ) 100]\n      [(string-ci=? c \"e\") 101]\n      [(string-ci=? c \"f\") 102]\n\
    \      [(string-ci=? c \"g\") 103]\n      [(string-ci=? c \"h\") 104]\n      [(string-ci=?\
    \ c \"i\") 105]\n      [(string-ci=? c \"j\") 106]\n      [(string-ci=? c \"k\"\
    ) 107]\n      [(string-ci=? c \"l\") 108]\n      [(string-ci=? c \"m\") 109]\n\
    \      [(string-ci=? c \"n\") 110]\n      [(string-ci=? c \"o\") 111]\n      [(string-ci=?\
    \ c \"p\") 112]\n      [(string-ci=? c \"q\") 113]\n      [(string-ci=? c \"r\"\
    ) 114]\n      [(string-ci=? c \"s\") 115]\n      [(string-ci=? c \"t\") 116]\n\
    \      [(string-ci=? c \"u\") 117]\n      [(string-ci=? c \"v\") 118]\n      [(string-ci=?\
    \ c \"w\") 119]\n      [(string-ci=? c \"x\") 120]\n      [(string-ci=? c \"y\"\
    ) 121]\n      [(string-ci=? c \"z\") 122]\n      [else 0]))\n  (if (string=? s\
    \ \"\")\n      0\n      (+ (getSum (string-upper-case (substring s 0 1)))\n  \
    \       (digitSum (substring s 1)))))\n```\n\n## Challenge 3\n```racket\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpos9stm0r.rkt:50:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(equal?\
    \ (char-upcase (first s)) (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc113eds.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc113eds.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc113eds.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc113eds.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc113eds.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc113eds.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc113eds.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc113eds.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([sum (+ (char->integer (string-ref\
    \ s 0)) (char->integer (string-ref s 1)))])\n    (cond [(string=? s \"\") 0]\n\
    \          [(and (>= sum 65) (<= sum 90)) (digitSum (substring s 1))]\n      \
    \    [else (+ sum (digitSum (substring s 1)))])))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwevlw1a.rkt:23:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwevlw1a.rkt:24:4\n\nstring-ref: index is out of range\n \
    \ index: 1\n  valid range: [0, 0]\n  string: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplwevlw1a.rkt:25:4\n\nstring-ref:\
    \ index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"d\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwevlw1a.rkt:26:4\n\nstring-ref: index is out of range\n \
    \ index: 1\n  valid range: [0, 0]\n  string: \"E\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplwevlw1a.rkt:27:4\n\nstring-ref:\
    \ index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"d\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwevlw1a.rkt:28:4\n\nstring-ref: index is out of range\n \
    \ index: 1\n  valid range: [0, 0]\n  string: \"a\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplwevlw1a.rkt:29:4\n\nstring-ref:\
    \ index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwevlw1a.rkt:30:4\n\nstring-ref: index is out of range\n \
    \ index: 1\n  valid range: [0, 0]\n  string: \"t\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (filter-map (\u03BB (c)\n    \
    \                 (if (regexp-match #rx\"[A-Z]\" (string c))\n               \
    \          c\n                         #f))\n                   (string->list\
    \ s))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbg8c0yh_.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpbg8c0yh_.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char=?\
    \ (string-ref s 0) (string-ref s 0) #:upper-case?) (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp87s7yesf.rkt:16:47: application: missing argument expression after\
    \ keyword\n  at: #:upper-case?\n  in: (#%app char=? (string-ref s 0) (string-ref\
    \ s 0) #:upper-case?)\n  location...:\n   /tmp/tmp87s7yesf.rkt:16:47\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1208:19:\
    \ loop\n   [repeats 1 more time]\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1178:2:\
    \ parse-app\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcepv6r_2.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (regexp-match #rx\"\
    [\" (string->list s))))\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprwg8qabb.rkt:14:32: read-syntax: missing closing square bracket\
    \ in pattern\n  pattern: \"[\"\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map (\u03BB (c) (char->integer\
    \ c)) (filter (\u03BB (c) (and (>= c #\\A) (<= c #\\Z))) s))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkq6etz5j.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpkq6etz5j.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl + 0\n          (map char->integer\n\
    \               (remove even?\n                       (map integer->char\n   \
    \                         (filter (lambda (x)\n                              \
    \        (char=? x #\\a #\\A #\\b #\\B #\\c #\\C #\\d #\\D))\n               \
    \                     (map char->integer s)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:32:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:33:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaa33hznp.rkt:34:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9g7aictl.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp9g7aictl.rkt:16:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (null? s)\n      0\n      (+ (char->integer\
    \ (char-upcase (car s)))\n         (digitSum (cdr s)))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3awgeqz.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond ((string=? s \"\") 0)\n     \
    \   ((char-upcase? (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1))))\n        (else (digitSum (substring s 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpka5xz0d9.rkt:15:10: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpka5xz0d9.rkt:15:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let ([char (string-ref s 0)])\n        (+ (* (if (char-upcase? char)\n \
    \                1\n                 0)\n              (char->integer char))\n\
    \           (digitSum (substring s 1))))))\n```\n\n## Last digit of a number\n\
    \n```#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaa2bn0xz.rkt:24:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n    (let loop ([i 0] [result 0])\n  \
    \      (cond [(equal? i (string-length s)) result]\n              [(not (char-numeric?\
    \ (string-ref s i))) result]\n              [else (loop (+ i 1) (+ result (char->integer\
    \ (string-ref s i))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:25:4

    actual:     0

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:26:4

    actual:     0

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:27:4

    actual:     0

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:28:4

    actual:     0

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:29:4

    actual:     0

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:30:4

    actual:     0

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0q5zp8zs.rkt:31:4

    actual:     0

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-is-letter? ch)\n    (or\
    \ (char=? ch #\\a) (char=? ch #\\b) (char=? ch #\\c) (char=? ch #\\d) (char=?\
    \ ch #\\e) (char=? ch #\\f) (char=? ch #\\g) (char=? ch #\\h) (char=? ch #\\i)\
    \ (char=? ch #\\j) (char=? ch #\\k) (char=? ch #\\l) (char=? ch #\\m) (char=?\
    \ ch #\\n) (char=? ch #\\o) (char=? ch #\\p) (char=? ch #\\q) (char=? ch #\\r)\
    \ (char=? ch #\\s) (char=? ch #\\t) (char=? ch #\\u) (char=? ch #\\v) (char=?\
    \ ch #\\w) (char=? ch #\\x) (char=? ch #\\y) (char=? ch #\\z)))\n  (define (char-is-upper?\
    \ ch)\n    (or (char=? ch #\\A) (char=? ch #\\B) (char=? ch #\\C) (char=? ch #\\\
    D) (char=? ch #\\E) (char=? ch #\\F) (char=? ch #\\G) (char=? ch #\\H) (char=?\
    \ ch #\\I) (char=? ch #\\J) (char=? ch #\\K) (char=? ch #\\L) (char=? ch #\\M)\
    \ (char=? ch #\\N) (char=? ch #\\O) (char=? ch #\\P) (char=? ch #\\Q) (char=?\
    \ ch #\\R) (char=? ch #\\S) (char=? ch #\\T) (char=? ch #\\U) (char=? ch #\\V)\
    \ (char=? ch #\\W) (char=? ch #\\X) (char=? ch #\\Y) (char=? ch #\\Z)))\n  (define\
    \ (char-value ch)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4qvug30j.rkt:18:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let f ((s s) (summ 0))\n    (if (string-empty?\
    \ s)\n        summ\n        (f (substring s 1) (+ summ (string-&gt;number (string\
    \ (string-&gt;char (substring s 0 1)) 10)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2g05zebe.rkt:17:35: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter number? (map char->integer\
    \ (filter char-upcase? (string->list s))))))\n```\n\n_Output_\n```scheme\n> (digitSum\
    \ \"abAB\")\n131\n```\n\n## Implementation - Flatten List\n\n```scheme\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaynhh8wp.rkt:23:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (x) (if (and\
    \ (<= 65 x) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:22:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:23:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:24:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:25:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:26:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:27:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7tl5tbn.rkt:28:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (f x)\n    (if (equal? x #\\\
    A) 65\n        (if (equal? x #\\B) 66\n            (if (equal? x #\\C) 67\n  \
    \              (if (equal? x #\\D) 68\n                    (if (equal? x #\\E)\
    \ 69\n                        (if (equal? x #\\F) 70\n                       \
    \     (if (equal? x #\\G) 71\n                                (if (equal? x #\\\
    H) 72\n                                    (if (equal? x #\\I) 73\n          \
    \                              (if (equal? x #\\J) 74\n                      \
    \                      (if (equal? x #\\K) 75\n                              \
    \                  (if (equal? x #\\L) 76\n                                  \
    \                  (if (equal? x #\\M) 77\n                                  \
    \                      (if (equal? x #\\N) 78\n                              \
    \                              (if (equal? x #\\O) 79\n                      \
    \                                          (if (equal? x #\\P) 80\n          \
    \                                                          (if (equal? x #\\Q)\
    \ 81\n                                                                       \
    \ (if (equal? x #\\R) 82\n                                                   \
    \                         (if (equal? x #\\S) 83\n                           \
    \                                                     (if (equal? x #\\T) 84\n\
    \                                                                            \
    \        (if (equal? x #\\U) 85\n                                            \
    \                                            (if (equal? x #\\V) 86\n        \
    \                                                                            \
    \        (if (equal? x #\\W) 87\n                                            \
    \                                                    (if (equal? x #\\X) 88\n\
    \                                                                            \
    \                        (if (equal? x #\\Y) 89\n                            \
    \                                                                            (if\
    \ (equal? x #\\Z) 90 0)))))))))))))))))))))))))))))))\n  (foldl + 0 (map f (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpldb1hsqt.rkt:40:155: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (digitsum-rec s)\n    (if (null?\
    \ s)\n        0\n        (+ (if (char-upper-case? (car s))\n              (car\
    \ s)\n              0)\n           (digitsum-rec (cdr s)))))\n  (digitsum-rec\
    \ (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\B\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:31:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:32:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\B\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:33:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\X\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:34:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\O\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvc4g3acy.rkt:35:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\S\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (reduce + (map ascii-code (filter char-upper-case?\
    \ (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplyhejfuz.rkt:14:3: reduce: unbound identifier\n  in: reduce\n \
    \ location...:\n   /tmp/tmplyhejfuz.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (isAlpha s)\n    (and\n   \
    \  (not (char=? (string-ref s 0) #\\A))\n     (not (char=? (string-ref s 0) #\\\
    B))\n     (not (char=? (string-ref s 0) #\\C))\n     (not (char=? (string-ref\
    \ s 0) #\\D))\n     (not (char=? (string-ref s 0) #\\E))\n     (not (char=? (string-ref\
    \ s 0) #\\F))\n     (not (char=? (string-ref s 0) #\\G))\n     (not (char=? (string-ref\
    \ s 0) #\\H))\n     (not (char=? (string-ref s 0) #\\I))\n     (not (char=? (string-ref\
    \ s 0) #\\J))\n     (not (char=? (string-ref s 0) #\\K))\n     (not (char=? (string-ref\
    \ s 0) #\\L))\n     (not (char=? (string-ref s 0) #\\M))\n     (not (char=? (string-ref\
    \ s 0) #\\N))\n     (not (char=? (string-ref s 0) #\\O))\n     (not (char=? (string-ref\
    \ s 0) #\\P))\n     (not (char=? (string-ref s 0) #\\Q))\n     (not (char=? (string-ref\
    \ s 0) #\\R))\n     (not (char=? (string-ref s 0) #\\S))\n     (not (char=? (string-ref\
    \ s 0) #\\T))\n     (not (char=? (string-ref s 0) #\\U))\n     (not (char=? (string-ref\
    \ s 0) #\\V))\n     (not (char=? (string-ref s 0) #\\W))\n     (not (char=? (string-ref\
    \ s 0) #\\X))\n     (not (char=? (string-ref s 0) #\\Y))\n     (not (char=? (string-ref\
    \ s 0) #\\Z))))\n  (define (\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj8y4r2uo.rkt:42:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([ch (in-string s)]\n    \
    \        #:when (and (char&lt;= #\\A ch) (char&lt;= ch #\\Z)))\n    (char-&gt;integer\
    \ ch)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0j8m2ilw.rkt:16:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 17\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-to-int char)\n    (subtract\
    \ char #\\0))\n  (define (is-upper? char)\n    (integer? char)\n    (integer?\
    \ #\\A)\n    (char-to-int char)\n    (char-to-int #\\A)\n    (subtract char #\\\
    A)\n    (subtract #\\Z #\\A)\n    (subtract char #\\A)\n    (subtract #\\Z #\\\
    A)\n    (>= (subtract char #\\A)\n        (subtract #\\Z #\\A))\n    (>= (subtract\
    \ char #\\A)\n        (subtract #\\Z #\\A)))\n  (define (char-sum char)\n    (if\
    \ (is-upper? char)\n        (char-to-int char)\n        0))\n  (apply + (map char-sum\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3zwxkc1o.rkt:15:5: subtract: unbound identifier\n  in: subtract\n\
    \  location...:\n   /tmp/tmp3zwxkc1o.rkt:15:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (str->int str)\n    (cond\n\
    \      [(string=? str \"\") 0]\n      [(string=? str \"1\") 1]\n      [(string=?\
    \ str \"2\") 2]\n      [(string=? str \"3\") 3]\n      [(string=? str \"4\") 4]\n\
    \      [(string=? str \"5\") 5]\n      [(string=? str \"6\") 6]\n      [(string=?\
    \ str \"7\") 7]\n      [(string=? str \"8\") 8]\n      [(string=? str \"9\") 9]\n\
    \      [(string=? str \"0\") 0]))\n  (letrec\n    ((sum (lambda (s)\n        \
    \    (cond\n              [(empty? s) 0]\n              [(char-upper-case? (first\
    \ s))\n               (+ (str->int (symbol->string (digit->char (+ (char->integer\
    \ (first s)) -55))))\n                  (sum (rest s)))]\n              [else\
    \ (sum (rest s))]))))\n    (sum s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2tg447ed.rkt:32:45: digit->char: unbound identifier\n  in: digit->char\n\
    \  location...:\n   /tmp/tmp2tg447ed.rkt:32:45\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (i) (if (char-upper-case?\
    \ i) (char->integer i) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpolbsk5jv.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (to-int c)\n    (integer->char\
    \ c))\n  (define (char-in-range c r)\n    (cond [(in-range? c r)\n           c]\n\
    \          [else\n           #f]))\n  (define (in-range? c r)\n    (and (>= c\
    \ (first r))\n         (<= c (second r))))\n  (define (char-to-ascii c)\n    (cond\
    \ [(char-in-range c #\\A #\\Z)\n           (to-int c)]\n          [else\n    \
    \       #f]))\n  (foldl + 0 (map char-to-ascii (string->list s))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:37:4\n\
    \nchar-in-range: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:38:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:39:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:40:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:41:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:42:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpszm6r5o8.rkt:43:4\n\nchar-in-range:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 3\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (if\
    \ (char-upper-case? (string-ref s 0)) (char->integer (string-ref s 0)) 0)\n  \
    \       (digitSum (substring s 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1angn_wi.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1angn_wi.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1angn_wi.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1angn_wi.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1angn_wi.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1angn_wi.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1angn_wi.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1angn_wi.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (equal? s \"\")\n      0\n    \
    \  (cond ((char-upper-case? (string-ref s 0))\n             (+ (char->integer\
    \ (string-ref s 0))\n                (digitSum (substring s 1))))\n          \
    \  (else (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (reduce + (map (lambda (ch)\n     \
    \              (if (char-ci&gt;=? ch #\\A)\n                       (char-&gt;integer\
    \ ch)\n                       0))\n                 (string-&gt;list s))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppggi712m.rkt:18:17: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([x (in-string s)] #:when\
    \ (char-upper-case? x))\n    (char->integer x)))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl (lambda (x acc)\n          \
    \ (cond\n             ((char-numeric? x) (+ acc x))\n             ((char-alphabetic?\
    \ x) (if (char-upper-case? x) (+ acc x) acc))\n             (else acc)))\n   \
    \      0\n         (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:31:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:32:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:33:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_yyy64hx.rkt:34:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (helper s sum)\n    (cond\n\
    \      [(string=? s \"\") sum]\n      [(char-upper-case? (string-ref s 0)) (helper\
    \ (substring s 1) (+ sum (string-ref s 0)))]\n      [else (helper (substring s\
    \ 1) sum)]))\n  (helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:27:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:31:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:32:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2c0lo26.rkt:33:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map string-&gt;number (filter\
    \ char-upper-case? (string-&gt;list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxp93zg8v.rkt:14:7: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n    (if\n        (string=? \"\" s)\n\
    \        0\n        (let* ([first-char (string-ref s 0)]\n               [rest-s\
    \ (substring s 1)])\n            (if\n                (char&lt;=? #\\a first-char\
    \ #\\z)\n                (digitSum rest-s)\n                (+ (char-&gt;integer\
    \ first-char) (digitSum rest-s))))))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpemra11xi.rkt:22:19: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (string-ref s 0))\n         (if (>= (char->integer (string-ref s 0)) 65)\n \
    \            (digitSum (substring s 1))\n             0))))\n```\n\n```\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe1_cs3ik.rkt:23:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (null? s)\n      0\n      (+ (if\
    \ (and (>= (char->integer (car s)) 65) (<= (char->integer (car s)) 90))\n    \
    \       (char->integer (car s))\n           0)\n         (digitSum (cdr s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecwe_s82.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter even? (map char->integer\
    \ (for/list ([c (in-string s)]) (if (char-upcase? c) c))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptlvw9d6_.rkt:14:74: if: missing an \"else\" expression\n  in: (if\
    \ (char-upcase? c) c)\n  location...:\n   /tmp/tmptlvw9d6_.rkt:14:74\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(= 0 (string-length s))\
    \ 0]\n    [else (+ (string-ref s 0) (digitSum (substring s 1)))]))\n</code>\n\
    The point is, if I run this code, I should get an error saying that the number\
    \ of arguments to string-ref is incorrect. The problem is that I don't get any\
    \ errors and the code runs as expected.\nI've tried searching for this problem\
    \ and I've seen people with the same problem but they all were experiencing it\
    \ in the REPL and the problem disappeared by restarting the REPL. This is not\
    \ the case here. I'm using DrRacket on Windows.\nAny help will be appreciated.\n\
    \n\nA:\n\nIt seems that this is actually expected behavior in some cases. For\
    \ example:\n<code>(if (string? (list 1 2 3))\n    (string-ref \"foo\" 1)\n   \
    \ \"bar\")\n</code>\nproduces no error and returns <code>#\\o</code>; the <code>string-ref</code>\
    \ should have been called with only 1 argument. On the other hand,\n<code>(if\
    \ (string? (list 1 2 3))\n    (string-ref)\n    \"bar\")\n</code>\ngives an error.\
    \ I can't figure out what's different between these two cases (I'm not sure whether\
    \ the error is supposed to be produced in either one, tbh).\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2ji98f2a.rkt:35:154: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(and\
    \ (<= #\\A (string-ref s 0)) (<= (string-ref s 0) #\\Z))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpixub0goe.rkt:25:4\n\n<=: contract violation\n  expected: real?\n\
    \  given: #\\A\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:26:4\n\n<=: contract violation\n\
    \  expected: real?\n  given: #\\A\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:27:4\n\n<=:\
    \ contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:28:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:29:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:30:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixub0goe.rkt:31:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (match s\n    [(string)\n     (apply\
    \ +\n            (map (lambda (x)\n                    (if (and (>= x #\\A) (<=\
    \ x #\\Z))\n                        (- x #\\A #\\a)\n                        0))\n\
    \                 s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw6x4zuyw.rkt:15:5: match: syntax error in pattern\n  in: (string)\n\
    \  location...:\n   /tmp/tmpw6x4zuyw.rkt:15:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl + 0 (filter (lambda (x) (>=\
    \ x 65) (<= x 90)) (map (lambda (x) (char->integer x)) (string->list s)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9vrecq5_.rkt:27:4

    actual:     310

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9vrecq5_.rkt:28:4

    actual:     423

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer\n     \
    \             (filter char-upcase?\n                          (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqc_4hkii.rkt:15:26: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpqc_4hkii.rkt:15:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0tfwq1s5.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp0tfwq1s5.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8pkge_in.rkt:21:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (char->integer\
    \ c)) (filter (lambda (c) (char-upper-case? c)) s))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn8uxsdn6.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn8uxsdn6.rkt:28:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl + 0 (filter (\u03BB (c) (and\
    \ (char-upper-case? c) (char-numeric? c))) s)))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:20:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8jyo2wh.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu8jyo2wh.rkt:27:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(string=? s \"\") 0]\n     \
    \   [else (+ (char->integer (string-ref s 0))\n                 (digitSum (substring\
    \ s 1)))]))\n```\n\n## Reversed Words\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn8pt4thp.rkt:19:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (helper s sum)\n    (cond\n\
    \      [(string=? s \"\") sum]\n      [(and (not (char-numeric? (string-ref s\
    \ 0))) (>= (char->integer (string-ref s 0)) 65) (<= (char->integer (string-ref\
    \ s 0)) 90)) (helper (substring s 1) (+ sum (char->integer (string-ref s 0))))]\n\
    \      [else (helper (substring s 1) sum)]))\n  (helper s 0))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let ([f (first s)]\n            [r (rest s)])\n        (cond\n         [(symbol=?\
    \ f #\\A) (+ 65 (digitSum r))]\n         [(symbol=? f #\\B) (+ 66 (digitSum r))]\n\
    \         [(symbol=? f #\\C) (+ 67 (digitSum r))]\n         [(symbol=? f #\\D)\
    \ (+ 68 (digitSum r))]\n         [(symbol=? f #\\E) (+ 69 (digitSum r))]\n   \
    \      [(symbol=? f #\\F) (+ 70 (digitSum r))]\n         [(symbol=? f #\\G) (+\
    \ 71 (digitSum r))]\n         [(symbol=? f #\\H) (+ 72 (digitSum r))]\n      \
    \   [(symbol=? f #\\I) (+ 73 (digitSum r))]\n         [(symbol=? f #\\J) (+ 74\
    \ (digitSum r))]\n         [(symbol=? f #\\K) (+ 75 (digitSum r))]\n         [(symbol=?\
    \ f #\\L) (+ 76 (digitSum r))]\n         [(symbol=? f #\\M) (+ 77 (digitSum r))]\n\
    \         [(symbol=? f #\\N) (+ 78 (digitSum r))]\n         [(symbol=? f #\\O)\
    \ (+ 79 (digitSum r))]\n         [(symbol=? f #\\P) (+ 80 (digitSum r))]\n   \
    \      [(symbol=? f #\\Q) (+ 81 (digitSum r))]\n         [(symbol=? f #\\R) (+\
    \ 82 (digitSum r))]\n         [(symbol=? f #\\S) (+ 83 (digitSum r))]\n      \
    \   [(symbol=? f #\\T) (+ 84 (digitSum r))]\n         [(symbol=? f #\\U) (+ 85\
    \ (digitSum r))]\n         [(symbol=? f #\\V) (+ 86 (digitSum r))]\n         [(symbol=?\
    \ f #\\W) (+ 87 (digitSum r))]\n         [(symbol=? f #\\X) (+ 88 (\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7rx2bxkm.rkt:42:33: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(not\
    \ (char-numeric? (string-ref s 0))) (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fj1bn0i.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7fj1bn0i.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fj1bn0i.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fj1bn0i.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7fj1bn0i.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fj1bn0i.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fj1bn0i.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7fj1bn0i.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map (lambda (x) (sub1 (char->integer\
    \ x))) (filter char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa3i75802.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpa3i75802.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynjqma4w.rkt:25:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynjqma4w.rkt:26:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpynjqma4w.rkt:27:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynjqma4w.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynjqma4w.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpynjqma4w.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynjqma4w.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynjqma4w.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(string=? s \"\") 0]\n\
    \    [else\n     (cond\n       [(char&gt;=? (string-ref s 0) #\\A)\n        (+\
    \ (char-&gt;integer (string-ref s 0)) (digitSum (substring s 1)))]\n       [else\
    \ (digitSum (substring s 1))])]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv3vd1j6b.rkt:20:41: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map (lambda (x) (-\
    \ x 32)) (filter (lambda (y) (> y 64)) (map char->integer (string->list s))))))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwidn2as_.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmpwidn2as_.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)] #:when\
    \ (>= c 65) #:when (<= c 90))\n    c))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qeavsjt.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (list->vector (map (\u03BB\
    \ (char) (if (char&lt;= #\\A char #\\Z) (char-&gt;integer char) 0)) (string-&gt;list\
    \ s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpohso2bvk.rkt:14:44: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (helper str counter)\n    (if\
    \ (= counter (string-length str))\n        0\n        (if (>= 65 (string-ref str\
    \ counter))\n            (+ counter (helper str (+ counter 1)))\n            (helper\
    \ str (+ counter 1)))))\n  (helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:33:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ew6bq2d.rkt:34:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (lambda (x) (and (>=\
    \ x 65) (<= x 90))) (map char->integer (string->list s)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n```\n\n```\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0_xk3y43.rkt:18:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldr (lambda (x acc)\n          \
    \ (if (char-numeric? x)\n               (+ acc (char->integer x))\n          \
    \     acc))\n         0 s))\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2p5hgqj.rkt:24:4\n\
    \nfoldr: contract violation\n  expected: list?\n  given: \"\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo2p5hgqj.rkt:25:4\n\nfoldr: contract violation\n  expected:\
    \ list?\n  given: \"abAB\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2p5hgqj.rkt:26:4\n\nfoldr:\
    \ contract violation\n  expected: list?\n  given: \"abcCd\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo2p5hgqj.rkt:27:4\n\nfoldr: contract violation\n  expected:\
    \ list?\n  given: \"helloE\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2p5hgqj.rkt:28:4\n\nfoldr:\
    \ contract violation\n  expected: list?\n  given: \"woArBld\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo2p5hgqj.rkt:29:4\n\nfoldr: contract violation\n  expected:\
    \ list?\n  given: \"aAaaaXa\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2p5hgqj.rkt:30:4\n\nfoldr:\
    \ contract violation\n  expected: list?\n  given: \" How are yOu?\"\n  argument\
    \ position: 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpo2p5hgqj.rkt:14:9>\n\
    \   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo2p5hgqj.rkt:31:4\n\nfoldr: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very "
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map char->integer\
    \ (regexp-match #rx\"[A-Z]\" s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxm8y6au7.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmpxm8y6au7.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map (lambda (x) (- x 32)) (filter\
    \ char-upper-case? (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2p__m4v3.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp2p__m4v3.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (and (<= (string-&gt;number (string-ref s 0)) 64)\n               (&gt;=\
    \ (string-&gt;number (string-ref s 0)) 91))\n          (digitSum (substring s\
    \ 1 (string-length s)))\n          (+ (string-&gt;number (string-ref s 0))\n \
    \            (digitSum (substring s 1 (string-length s)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppvngs9ij.rkt:16:15: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let loop ((s s) (acc 0))\n    (cond\n\
    \      [(empty? s) acc]\n      [(in-range? (string-&gt;number (string-ref s 0))\
    \ 65 90)\n       (loop (substring s 1) (+ acc (string-&gt;number (string-ref s\
    \ 0))))]\n      [else (loop (substring s 1) acc)])))\n</code>\nIs there any clearer\
    \ (better) way of doing this?\n\n\nA:\n\nYes, there is a shorter and clearer way:\n\
    <code>(define (digit-sum s)\n  (apply +\n         (map (\u03BB (c) (if (in-range?\
    \ c 65 90) c 0))\n              (string-&gt;list s))))\n</code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo1qaenhr.rkt:30:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 31\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([sl (string->list s)])\n    (apply\
    \ + (map (lambda (c) (if (char-upcase? c) (char->integer c) 0)) sl))))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6qls7own.rkt:15:35: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp6qls7own.rkt:15:35\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char-&gt;integer\
    \ (string-ref s 0)) (digitSum (string-tail s)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppfcnfb_j.rkt:16:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 18\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (char->integer\
    \ x)) (filter (lambda (x) (and (>= x #\\A) (<= x #\\Z))) s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp09c27fot.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp09c27fot.rkt:28:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(string=? s \"\") 0]\n\
    \    [else\n     (let ([sList (string->list s)])\n       (cond\n         [(= (car\
    \ sList) (string-ref s 0))\n          (+ (car sList) (digitSum (string (cdr sList))))]\n\
    \         [else\n          (digitSum (string (cdr sList)))]))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:30:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:31:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:32:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:33:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:34:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:35:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporoxsquj.rkt:36:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (and (char&lt;=? #\\A (string-ref s 0)) (char&lt;=? (string-ref s 0)\
    \ #\\Z))\n          (+ (char-&gt;integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))\n          (digitSum (substring s 1)))))\n</code>\nIn the book, the solution\
    \ is:\n<code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdjjhg7fn.rkt:16:10: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (equal? s \"\") 0\n      (+ (if\
    \ (char-upcase? (string-ref s 0)) (string-ref s 0) 0)\n         (digitSum (substring\
    \ s 1)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphang29ev.rkt:15:14: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphang29ev.rkt:15:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map string-&gt;number (filter\
    \ (lambda (x) (char-upper-case? x)) (string-&gt;list s)))))\n</code>\nHow do I\
    \ make the code more concise? How do I make it more readable? Do I break any functional\
    \ programming rules?\n\n\nA:\n\nHere's another approach, which uses <code>foldl</code>\
    \ and <code>string-map</code>:\n<code>(define (digit-sum s)\n  (foldl + 0\n  \
    \       (string-map\n          (lambda (c) (if (char-upper-case? c) (char-&gt;integer\
    \ c) 0))\n          s)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0quzcp3o.rkt:24:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (filter (curry char-upcase=? #t)\
    \ (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqow7na1r.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpqow7na1r.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)] #:when\
    \ (char-upcase? c))\n    (- (char->integer c) #x41)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc2rx2boc.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpc2rx2boc.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (displayln s)\n  (cond [(string=? s\
    \ \"\") 0]\n        [else (+ (digitSum (substring s 1 (string-length s)))\n  \
    \               (cond [(char-upcase? (string-ref s 0)) (char->integer (string-ref\
    \ s 0))]\n                       [else 0]))]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpejs9fa70.rkt:17:25: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpejs9fa70.rkt:17:25\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond ((= (string-length s) 0) 0)\n\
    \        ((and (char&lt;=? #\\A (string-ref s 0)) (char&lt;=? (string-ref s 0)\
    \ #\\Z))\n         (+ (char-&gt;integer (string-ref s 0)) (digitSum (substring\
    \ s 1))))\n        (else (digitSum (substring s 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpej8mi8le.rkt:15:14: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (s) (char->integer\
    \ s)) (filter char-upper-case? (string->list s)))))\n```\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvs6bnte.rkt:18:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (isUpper? c)\n    (and (&gt;=\
    \ c 65) (&lt;= c 90)))\n  (define (sum l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (sum (cdr l)))))\n  (sum (filter isUpper? (string-&gt;list s))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyta1hdha.rkt:20:24: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (\u03BB (x) (>= x\
    \ #x41) (<= x #x5A)) (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoafrh2r9.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply +\n         (map (\u03BB (x)\
    \ (if (char-upper-case? x) (char->integer x) 0))\n              (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq317ris0.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq317ris0.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter even? (map char->integer\
    \ (filter char-alphabetic? (string->list s))))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:21:4

    actual:     164

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:22:4

    actual:     198

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:23:4

    actual:     320

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:24:4

    actual:     388

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:25:4

    actual:     88

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:26:4

    actual:     186

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72mr5leh.rkt:27:4

    actual:     544

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (summ s)\n    (cond\n     \
    \ [(string=? s \"\")\n       0]\n      [(and (>= (string-ref s 0) 65)\n      \
    \      (<= (string-ref s 0) 90))\n       (+ (string-ref s 0) (summ (substring\
    \ s 1)))]\n      [else\n       (summ (substring s 1))]))\n  (summ s))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:33:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:34:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:35:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:36:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfbva4inp.rkt:37:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([e (in-string s)])\n\
    \            (cond\n              [(char-upper-case? e) (char->integer e)]\n \
    \             [else 0]))))\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let ((char (string-ref s 0)))\n        (+ (if (and (&lt;= #\\A char) (&lt;=\
    \ char #\\Z))\n               (- char #\\A)\n               0)\n           (digitSum\
    \ (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphmzx9rwf.rkt:14:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl + 0 (map char->integer (filter\
    \ (\u03BB (x) (and (>= x #\\A) (<= x #\\Z))) s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxum96m6.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjxum96m6.rkt:28:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let loop ((s s) (c 0))\n    (cond\n\
    \      [(null? s) c]\n      [(char-alphabetic? (car s))\n       (if (char-upper-case?\
    \ (car s))\n           (loop (cdr s) (+ c (car s)))\n           (loop (cdr s)\
    \ c))]\n      [else (loop (cdr s) c)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oml3j9.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (zero? (string-length s))\n   \
    \   0\n      (+ (if (>= (char->integer (string-ref s 0)) 65)\n             (char->integer\
    \ (string-ref s 0))\n             0)\n         (digitSum (substring s 1 (- (string-length\
    \ s) 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:27:4\n\
    actual:     195\nexpected:   131\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:28:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"c\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:29:4\nactual:\
    \     313\nexpected:   69\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:30:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"r\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:31:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"a\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:32:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 0\n  starting index:\
    \ 1\n  valid range: [0, 1]\n  string: \"r\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0v67063.rkt:33:4\nactual:\
    \     683\nexpected:   327\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond ((string=? s \"\") 0)\n     \
    \   ((char-numeric? (string-ref s 0)) (digitSum (substring s 1)))\n        ((char-lower-case?\
    \ (string-ref s 0)) (digitSum (substring s 1)))\n        (else (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjxzx4dl.rkt:30:4

    actual:     310

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjxzx4dl.rkt:31:4

    actual:     423

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (filter uppercase? (map char->integer\
    \ (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkd47rm6h.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpkd47rm6h.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\n\
    \            (if (char-upcase? c) (char->integer c) 0))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeisoaape.rkt:15:17: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpeisoaape.rkt:15:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (check-and-sum c s)\n    (cond\
    \ [(string=? c #\\A) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\\
    B) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\C) (+ (ascii-&gt;integer\
    \ c) s)]\n          [(string=? c #\\D) (+ (ascii-&gt;integer c) s)]\n        \
    \  [(string=? c #\\E) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\\
    F) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\G) (+ (ascii-&gt;integer\
    \ c) s)]\n          [(string=? c #\\H) (+ (ascii-&gt;integer c) s)]\n        \
    \  [(string=? c #\\I) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\\
    J) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\K) (+ (ascii-&gt;integer\
    \ c) s)]\n          [(string=? c #\\L) (+ (ascii-&gt;integer c) s)]\n        \
    \  [(string=? c #\\M) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\\
    N) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\O) (+ (ascii-&gt;integer\
    \ c) s)]\n          [(string=? c #\\P) (+ (ascii-&gt;integer c) s)]\n        \
    \  [(string=? c #\\Q) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\\
    R) (+ (ascii-&gt;integer c) s)]\n          [(string=? c #\\S) (+ (ascii-&gt;integer\
    \ c) s)]\n          [(string=? c #\\T) (+ (ascii-&gt;integer c\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpazasfg7t.rkt:34:31: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(string=? s \"\") 0]\n\
    \    [else\n     (let* ([s (string-upcase s)]\n            [curr-char (string-ref\
    \ s 0)]\n            [sum-before-curr (digitSum (substring s 1 (string-length\
    \ s))))])\n       (+ sum-before-curr curr-char))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc0_dfotl.rkt:19:73: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([a 0])\n    (for/fold ([acc 0])\
    \ ([i (in-string s)])\n      (if (and (>= i 65) (<= i 90))\n          (+ acc i)\n\
    \          acc))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdttdpvb.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (or\
    \ (- (char-upcase (first s)) 32) (first s))\n         (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzl8999wm.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzl8999wm.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzl8999wm.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzl8999wm.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzl8999wm.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzl8999wm.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzl8999wm.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzl8999wm.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (or (>= (char->integer (string-ref s 0)) 65) (>= (char->integer (string-ref\
    \ s 0)) 97))\n          (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))\n          (digitSum (substring s 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:26:4

    actual:     326

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:27:4

    actual:     461

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:28:4

    actual:     601

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:29:4

    actual:     683

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:30:4

    actual:     638

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:31:4

    actual:     931

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzmlqcx97.rkt:32:4

    actual:     1538

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+\n\
    \       (if (char-upper-case? (first s))\n           (char->integer (first s))\n\
    \           0)\n       (digitSum (rest s)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2860f00n.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2860f00n.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2860f00n.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2860f00n.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2860f00n.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2860f00n.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2860f00n.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2860f00n.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (it sum lst)\n    (cond\n \
    \     [(empty? lst) sum]\n      [(or (= #\\A (car lst)) (= #\\B (car lst)) (=\
    \ #\\C (car lst)) (= #\\D (car lst)) (= #\\E (car lst)) (= #\\F (car lst)) (=\
    \ #\\G (car lst)) (= #\\H (car lst)) (= #\\I (car lst)) (= #\\J (car lst)) (=\
    \ #\\K (car lst)) (= #\\L (car lst)) (= #\\M (car lst)) (= #\\N (car lst)) (=\
    \ #\\O (car lst)) (= #\\P (car lst)) (= #\\Q (car lst)) (= #\\R (car lst)) (=\
    \ #\\S (car lst)) (= #\\T (car lst)) (= #\\U (car lst)) (= #\\V (car lst)) (=\
    \ #\\W (car lst)) (= #\\X (car lst)) (= #\\Y (car lst)) (= #\\Z (car lst)))\n\
    \       (it (+ sum (car lst)) (cdr lst))]\n      [else (it sum (cdr lst))]))\n\
    \  (it 0 (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:28:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:29:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:30:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:31:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:32:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:33:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95g5whgt.rkt:34:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldr (lambda (x y)\n           (if\
    \ (and (>= x 65) (<= x 90))\n               (+ x y)\n               y))\n    \
    \     0\n         (string->list s)))\n```\n\n```\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpznrbp9_a.rkt:23:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (c)\n       \
    \           (if (or (char=? c #\\A) (char=? c #\\B) (char=? c #\\C) (char=? c\
    \ #\\D) (char=? c #\\E) (char=? c #\\F) (char=? c #\\G) (char=? c #\\H) (char=?\
    \ c #\\I) (char=? c #\\J) (char=? c #\\K) (char=? c #\\L) (char=? c #\\M) (char=?\
    \ c #\\N) (char=? c #\\O) (char=? c #\\P) (char=? c #\\Q) (char=? c #\\R) (char=?\
    \ c #\\S) (char=? c #\\T) (char=? c #\\U) (char=? c #\\V) (char=? c #\\W) (char=?\
    \ c #\\X) (char=? c #\\Y) (char=? c #\\Z))\n                      (- c 96)\n \
    \                     0))\n                (string->list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:26:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:27:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:28:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:29:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:30:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:31:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpasxxf68h.rkt:32:4\n\
    \n-: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum-upper-chars-to-decimal (string->list\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7pfygsmf.rkt:14:3: sum-upper-chars-to-decimal: unbound identifier\n\
    \  in: sum-upper-chars-to-decimal\n  location...:\n   /tmp/tmp7pfygsmf.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\n\
    \            (cond\n              [(string-upcase? c) (string-&gt;number (string\
    \ c))]\n              [else 0]))))\n</code>\nWhich produces the following:\n<code>&gt;\
    \ (digitSum \"\")\n0\n&gt; (digitSum \"abAB\")\n131\n&gt; (digitSum \"abcCd\"\
    )\n67\n&gt; (digitSum \"helloE\")\n69\n&gt; (digitSum \"woArBld\")\n131\n&gt;\
    \ (digitSum \"aAaaaXa\")\n153\n</code>\nI'm pretty new to Racket, is there a more\
    \ idiomatic way to do this that I'm missing?\n\n\nA:\n\nThere's really not a good\
    \ way to make that <code>cond</code> any more readable.  I would write it like\
    \ this:\n<code>(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\n\
    \            (if (string-upcase? c)\n                (string-&gt;number (string\
    \ c))\n                0))))\n</code>\nWhat I'd personally do differently is just\
    \ to use <code>filter</code> to get the values we want, and then <code>map</code>\
    \ them to numbers:\n<code>(define (digitSum s)\n  (apply + (map string-&gt;number\
    \ (filter string-upcase? (string-&gt;list s)))))\n</code>\nOf course, it's also\
    \ worth noting that the <code>char-&gt;integer</code> function gives you the ASCII\
    \ code for a character, so you can condense that into a single expression that\
    \ uses <code>filter</code> and <code>map</code> to get the result:\n<code>(define\
    \ (digitSum s)\n  (apply + (map char-&gt;integer (filter string-upcase? (string-&gt;list\
    \ s)))))\n</code>\nOr you can use <code>foldr</code> to make it more explicit:\n\
    <code>(define (digitSum s)\n  (foldr (lambda (c acc) (+ acc (char-&gt;integer\
    \ c)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi0k8adb8.rkt:17:23: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)]\n     \
    \       #:when (char-upcase? c))\n            (char->integer c)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7swg8r_l.rkt:15:20: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp7swg8r_l.rkt:15:20\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter\n            (lambda\
    \ (c) (char-upper-case? c))\n            (string->list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:24:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:25:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\C\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:26:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\E\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:27:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxlxtyuj.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([sum 0])\n    (for ([i (in-list\
    \ s)])\n      (when (and (>= i #\\A) (<= i #\\Z))\n        (set! sum (+ sum i))))\n\
    \    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:25:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:26:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:27:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:28:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:29:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:30:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw9n2g7f.rkt:31:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuw9n2g7f.rkt:32:4\n\nin-list: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (up? ch)\n    (and (>= ch 65)\
    \ (<= ch 90)))\n  (define (dn? ch)\n    (and (>= ch 97) (<= ch 122)))\n  (define\
    \ (sum s)\n    (foldr + 0 (map char->integer s)))\n  (sum (filter up? s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:28:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:29:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:30:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:31:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:32:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfmuslw8y.rkt:33:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfmuslw8y.rkt:34:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (for/sum ([c (in-string s)]\n     \
    \       #:when (char-upcase? c))\n    (char->integer c)))\n```\n\n## Basic Mathematical\
    \ Operations\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp80xxo_nb.rkt:19:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ (lambda (x) (char-upper-case? x)) s))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:21:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:22:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrnqssjr.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprrnqssjr.rkt:28:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(and\
    \ (<= #\\A (string-ref s 0)) (>= #\\Z (string-ref s 0)))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:25:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp03hk2kv9.rkt:26:4\n\n<=: contract violation\n  expected: real?\n\
    \  given: #\\A\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:27:4\n\n<=: contract violation\n\
    \  expected: real?\n  given: #\\A\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:28:4\n\n<=:\
    \ contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:29:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:30:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:31:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp03hk2kv9.rkt:32:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\A\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (foldl (lambda (c sum) (+ sum (if (or\
    \ (= c #\\A) (= c #\\B) (= c #\\C) (= c #\\D) (= c #\\E) (= c #\\F)) (- c 55)\
    \ 0))) 0 s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexu_nqpo.rkt:21:4\n\
    \nfoldl: contract violation\n  expected: list?\n  given: \"\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpexu_nqpo.rkt:22:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"abAB\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexu_nqpo.rkt:23:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \"abcCd\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpexu_nqpo.rkt:24:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"helloE\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexu_nqpo.rkt:25:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \"woArBld\"\n  argument position:\
    \ 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n  \
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpexu_nqpo.rkt:26:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"aAaaaXa\"\n  argument position: 3rd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexu_nqpo.rkt:27:4\n\nfoldl:\
    \ contract violation\n  expected: list?\n  given: \" How are yOu?\"\n  argument\
    \ position: 3rd\n  other arguments...:\n   #<procedure:...tmp/tmpexu_nqpo.rkt:14:9>\n\
    \   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpexu_nqpo.rkt:28:4\n\nfoldl: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very "
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n    (cond ((or (null? s) (empty? s))\
    \ 0)\n          ((&gt;= (string-&gt;char s) 65) (+ (string-&gt;char s) (digitSum\
    \ (substring s 1))))\n          (else (digitSum (substring s 1)))))\n</code>\n\
    However my solution is not correct as according to my tests it returns 50 when\
    \ it should return 131 for \"abAB\".\nI know there are other questions that do\
    \ the same, but I would like to understand why my code is not working. Thanks\
    \ in advance!\n\n\nA:\n\nI see two mistakes:\n\n<code>(string-&gt;char s)</code>\
    \ is the first character of the string <code>s</code>, not all the characters.\
    \ To get all the characters, you need to use <code>(string-&gt;list s)</code>.\
    \ This is the reason why your code did not return anything for <code>\"abAB\"\
    </code> as <code>(string-&gt;char \"abAB\")</code> returns 97, which is not greater\
    \ than 65.\nIn the last line, you don't consider the case where the first character\
    \ is an uppercase letter.\n\nHere is a corrected code:\n<code>(define (digitSum\
    \ s)\n  (cond ((or (null? s) (empty? s)) 0)\n        ((&gt;= (string-&gt;char\
    \ s) 65) (+ (string-&gt;char s) (digitSum (substring s 1))))\n        ((&lt; (string-&gt;char\
    \ s) 65) (digitSum (substring s 1)))\n        (else (digitSum (substring s 1)))))\n\
    </code>\nor\n<code>(define (digitSum s)\n  (cond ((or (null? s) (empty? s)) 0)\n\
    \        ((&gt;= (string-&gt;char s) 65) (+ (string-&gt;char s) (digitSum (substring\
    \ s 1))))\n        (else (digitSum (substring s 1)))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyn6mm88b.rkt:18:110: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(empty? s) 0]\n        [else\
    \ (+ (char-&gt;integer (char-upcase (string-ref s 0)))\n                 (digitSum\
    \ (substring s 1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpehf50kwe.rkt:16:44: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (sum-upper-ascii-codes s)\n\
    \    (apply + (filter (\u03BB (x) (and (<= 65 x) (<= x 90))) (map char->integer\
    \ s))))\n  (cond\n    [(empty? s) 0]\n    [else (sum-upper-ascii-codes s)]))\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5zdk_8.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (displayln s)\n  (define (loop s acc)\n\
    \    (if (empty? s)\n        acc\n        (if (char-upper-case? (first s))\n \
    \           (loop (rest s) (+ acc (char->integer (first s))))\n            (loop\
    \ (rest s) acc))))\n  (loop s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjs9eogw8.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjs9eogw8.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjs9eogw8.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjs9eogw8.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjs9eogw8.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjs9eogw8.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjs9eogw8.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjs9eogw8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: "\nabAB\nabcCd\nhelloE\nwoArBld\naAaaaXa\n How are yOu?\nYou arE Very Smart\n"
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (x) (cond [(number?\
    \ x) x]\n                              [(char-upper-case? x) (char->integer x)]\n\
    \                              [else 0]))\n                (string->list s))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (null? s)\n      0\n      (+ (char->integer\
    \ (car s)) (digitSum (cdr s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jl4h83_.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter even? (map char->integer\
    \ (string-upcase s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ABAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"ABCCD\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"HELLOE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"WOARBLD\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"AAAAAXA\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" HOW ARE YOU?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnd6wazm.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"YOU ARE VERY SMART\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\n\
    \            (cond [(char-upcase? c) (char->integer c)]\n                  [else\
    \ #f]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6uaz6ejb.rkt:15:20: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp6uaz6ejb.rkt:15:20\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (char-&gt;integer\
    \ (string-&gt;upper-case (string-ref s 0)))\n         (digitSum (substring s 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppumsiixb.rkt:13:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (char->integer\
    \ c)) (filter char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let* ([ch (string-ref s 0)]\n             [ch-val (if (char-ci=? #\\a ch)\
    \ 1\n                       (+ (char->integer ch) (char->integer (char-upcase\
    \ ch))))])\n        (+ ch-val (digitSum (substring s 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:27:4

    actual:     298

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:28:4

    actual:     633

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:29:4

    actual:     1042

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:30:4

    actual:     1077

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:31:4

    actual:     182

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:32:4

    actual:     1795

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphpvkm_ha.rkt:33:4

    actual:     2594

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (char->integer\
    \ x)) (filter char-upper-case? (string->list s)))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter (lambda (x) (<= x\
    \ 90)) (string->list s))))\n```\n###Binary Addition\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpchfj6unq.rkt:16:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (for/list ([c (in-string s)])\n\
    \             (cond\n               [(char-upper-case? c) (char->integer c)]\n\
    \               [else 0]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(null? s) 0]\n        [else\
    \ (if (and (<= #\\A (car s)) (<= (car s) #\\Z))\n                  (+ (car s)\
    \ (digitSum (cdr s)))\n                  (digitSum (cdr s)))]))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqho6xihj.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond [(zero? (string-length s))\n\
    \         0]\n        [else\n         (+ (char->integer (string-ref s 0))\n  \
    \          (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:26:4

    actual:     326

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:27:4

    actual:     461

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:28:4

    actual:     601

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:29:4

    actual:     683

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:30:4

    actual:     638

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:31:4

    actual:     1090

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fdloym1.rkt:32:4

    actual:     1634

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (empty? s)\n      0\n      (+ (string-&gt;number\
    \ (substring s 0 1)) (digitSum (substring s 1)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5dgnyqpl.rkt:16:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 18\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (filter even?\n          \
    \         (map ascii-numeric-value\n                        (filter char-numeric?\
    \ (string->list s))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0tjw03k_.rkt:15:24: ascii-numeric-value: unbound identifier\n \
    \ in: ascii-numeric-value\n  location...:\n   /tmp/tmp0tjw03k_.rkt:15:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (summable? c)\n    (char-upper-case?\
    \ c))\n  (define (ascii-of c)\n    (char->integer c))\n  (accumulate +\n     \
    \          0\n               (map ascii-of\n                    (filter summable?\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppy647jbt.rkt:18:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmppy647jbt.rkt:18:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (accumulate + 0 (map char->integer\
    \ (filter char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5bbrxve5.rkt:14:3: accumulate: unbound identifier\n  in: accumulate\n\
    \  location...:\n   /tmp/tmp5bbrxve5.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (digitSum-inner s ssum)\n \
    \   (cond\n      [(empty? s) ssum]\n      [(and (char-uppercase? (first s)) (char-numeric?\
    \ (first s)))\n       (digitSum-inner (rest s) (+ ssum (char->integer (first s))))]\n\
    \      [(and (char-uppercase? (first s)) (not (char-numeric? (first s))))\n  \
    \     (digitSum-inner (rest s) (+ ssum (char->integer (first s))))]\n      [else\
    \ (digitSum-inner (rest s) ssum)]))\n  (digitSum-inner s 0))\n```\n\n```python\n\
    # Task\n# Write a function that takes a string as input and returns the sum of\
    \ the upper characters only'\n# ASCII codes.\n# Examples:\n# digitSum(\"\") =>\
    \ 0\n# digitSum(\"abAB\") => 131\n# digitSum(\"abcCd\") => 67\n# digitSum(\"helloE\"\
    ) => 69\n# digitSum(\"woArBld\") => 131\n# digitSum(\"aAaaaXa\") => 153\n\ndef\
    \ digitSum(s):\n    ssum = 0\n    for c in s:\n        if c.isupper() and c.isnumeric():\n\
    \            ssum += ord(c)\n        elif c.isupper() and not c.isnumeric():\n\
    \            ssum += ord(c)\n    return ssum\n```\n\n```scheme\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9bs9lugf.rkt:26:0: read-syntax: bad syntax `# `\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
