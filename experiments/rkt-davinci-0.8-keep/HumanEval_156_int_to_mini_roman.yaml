name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> int_to_mini_roman(19) == 'xix'\n;; >>> int_to_mini_roman(152)\
  \ == 'clii'\n;; >>> int_to_mini_roman(426) == 'cdxxvi'\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define (int_to_mini_roman2 number)\n    (cond\n      ((= number\
    \ 0) '())\n      ((= number 1) '(i))\n      ((= number 2) '(i i))\n      ((= number\
    \ 3) '(i i i))\n      ((= number 4) '(i v))\n      ((= number 5) '(v))\n     \
    \ ((= number 6) '(v i))\n      ((= number 7) '(v i i))\n      ((= number 8) '(v\
    \ i i i))\n      ((= number 9) '(i x))\n      ((= number 10) '(x))\n      ((=\
    \ number 20) '(x x))\n      ((= number 30) '(x x x))\n      ((= number 40) '(x\
    \ l))\n      ((= number 50) '(l))\n      ((= number 60) '(l x))\n      ((= number\
    \ 70) '(l x x))\n      ((= number 80) '(l x x x))\n      ((= number 90) '(x c))\n\
    \      ((= number 100) '(c))\n      ((= number 200) '(c c))\n      ((= number\
    \ 300) '(c c c))\n      ((= number 400) '(c d))\n      ((= number 500) '(d))\n\
    \      ((= number 600) '(d c))\n      ((= number 700) '(d c c))\n      ((= number\
    \ 800) '(d c c c))\n      ((= number 900) '(c m))\n      ((= number 1000) '(m))\n\
    \      (else '())))\n  (string-join (int_to_mini_roman2 number) \"\"))\n", " \
    \ \"Build a roman numeral string from `number`.\"\n  (cond\n    [(> number 1000)\
    \ (error 'too-large)]\n    [(< number 1) (error 'too-small)]\n    [else\n    \
    \ (for/string ([char (in-list (mini-roman-chars number))])\n       char)]))\n",
  "  ;; result is a list\n  (define (mini-roman-helper num result)\n    (cond\n  \
    \    ((= num 1000)\n       (cons 'm result))\n      ((= num 900)\n       (mini-roman-helper\
    \ (- num 900) (cons 'cm result)))\n      ((= num 500)\n       (mini-roman-helper\
    \ (- num 500) (cons 'd result)))\n      ((= num 400)\n       (mini-roman-helper\
    \ (- num 400) (cons 'cd result)))\n      ((= num 100)\n       (mini-roman-helper\
    \ (- num 100) (cons 'c result)))\n      ((= num 90)\n       (mini-roman-helper\
    \ (- num 90) (cons 'xc result)))\n      ((= num 50)\n       (mini-roman-helper\
    \ (- num 50) (cons 'l result)))\n      ((= num 40)\n       (mini-roman-helper\
    \ (- num 40) (cons 'xl result)))\n      ((= num 10)\n       (mini-roman-helper\
    \ (- num 10) (cons 'x result)))\n      ((= num 9)\n       (mini-roman-helper (-\
    \ num 9) (cons 'ix result)))\n      ((= num 5)\n       (mini-roman-helper (- num\
    \ 5) (cons 'v result)))\n      ((= num 4)\n       (mini-roman-helper (- num 4)\
    \ (cons 'iv result)))\n      ((= num 1)\n       (mini-roman-helper (- num 1) (cons\
    \ 'i result)))\n      (else\n       (reverse result))))\n  (let ((temp (mini-roman-helper\
    \ number '())))\n    (string-append temp)))\n", "  (string-append\n   (if (and\
    \ (>= number 100) (not (zero? (modulo number 100))))\n       (string-append\n\
    \        (if (> (modulo number 100) (modulo number 900))\n            \"c\"\n\
    \            \"cc\")\n        (if (> (modulo number 100) (modulo number 500))\n\
    \            \"d\"\n            \"cd\"))\n       \"\")\n   (if (and (>= number\
    \ 10) (not (zero? (modulo number 10))))\n       (string-append\n        (if (>\
    \ (modulo number 10) (modulo number 90))\n            \"x\"\n            \"xx\"\
    )\n        (if (> (modulo number 10) (modulo number 50))\n            \"l\"\n\
    \            \"xl\"))\n       \"\")\n   (if (not (zero? (modulo number 9)))\n\
    \       (string-append\n        (if (> (modulo number 1) (modulo number 4))\n\
    \            \"i\"\n            \"ii\")\n        (if (> (modulo number 1) (modulo\
    \ number 5))\n            \"v\"\n            \"iv\"))\n       \"\")))\n", "  (string-downcase\
    \ (int_to_roman number)))\n", "  (define roman_units '(() (i) (ii) (iii) (iv)\
    \ (v) (vi) (vii) (viii) (ix)))\n  (define roman_tens '(() (x) (xx) (xxx) (xl)\
    \ (l) (lx) (lxx) (lxxx) (xc)))\n  (define roman_hundreds '(() (c) (cc) (ccc) (cd)\
    \ (d) (dc) (dcc) (dccc) (cm)))\n  (define roman_thousands '(() (m) (mm) (mmm)))\n\
    \  (define (compose f g)\n    (lambda (x) (f (g x))))\n  (define (unit n) (string-append\
    \ (list-ref roman_units n)))\n  (define (ten n) (string-append (list-ref roman_tens\
    \ n)))\n  (define (hundred n) (string-append (list-ref roman_hundreds n)))\n \
    \ (define (thousand n) (string-append (list-ref roman_thousands n)))\n  (define\
    \ (roman-units number) (unit (modulo number 10)))\n  (define (roman-tens number)\
    \ (ten (modulo (quotient number 10) 10)))\n  (define (roman-hundreds number) (hundred\
    \ (modulo (quotient number 100) 10)))\n  (define (roman-thousands number) (thousand\
    \ (quotient number 1000)))\n  (define (roman-digits number)\n    (string-append\
    \ (roman-thousands number)\n                   (roman-hundreds number)\n     \
    \              (roman-tens number)\n                   (roman-units number)))\n\
    \  (define (remove-empty-strings s)\n    (cond ((null? s) '())\n          ((string=?\
    \ (car s) \"\") (remove-empty-strings (cdr s)))\n          (else (cons (car s)\
    \ (remove-empty-strings (cdr s))))))\n  (string-join (remove-empty-strings (string->list\
    \ (roman-digits number)))\n               \"\"))\n", "  (if (= number 0)\n   \
    \   \"\"\n      (let ((remainder (modulo number 10))\n            (units (string-append\
    \ (make-string (quotient number 10) \"x\"))))\n        (string-append units (cond\n\
    \                              ((= remainder 1) \"i\")\n                     \
    \         ((= remainder 2) \"ii\")\n                              ((= remainder\
    \ 3) \"iii\")\n                              ((= remainder 4) \"iv\")\n      \
    \                        ((= remainder 5) \"v\")\n                           \
    \   ((= remainder 6) \"vi\")\n                              ((= remainder 7) \"\
    vii\")\n                              ((= remainder 8) \"viii\")\n           \
    \                   ((= remainder 9) \"ix\"))))))\n```\n\n```racket\n#lang racket\n",
  "  (define (to_base_char base-char)\n    (if (<= number 0)\n        \"\"\n     \
    \   (if (<= number 3)\n            (string-append (string-repeat base-char number)\n\
    \                           (to_base_char (char-downcase base-char)))\n      \
    \      (if (<= number 8)\n                (string-append (string-repeat base-char\
    \ (/ number 5))\n                               (string-repeat (char-downcase\
    \ base-char) (- number (* (/ number 5) 5)))\n                               (to_base_char\
    \ (char-downcase base-char)))\n                (string-append (string-repeat base-char\
    \ (/ number 10))\n                               (to_base_char (char-downcase\
    \ base-char)))))))\n  (string-append (to_base_char 'M')\n                (to_base_char\
    \ 'C')\n                (to_base_char 'X')\n                (to_base_char 'I')))\n",
  "  (define (up-to-1000 number)\n    (define (up-to-500 number)\n      (define (up-to-100\
    \ number)\n        (define (up-to-50 number)\n          (define (up-to-10 number)\n\
    \            (define (up-to-5 number)\n              (define (up-to-1 number)\n\
    \                (cond ((= number 1) \"i\")\n                      ((= number\
    \ 2) \"ii\")\n                      ((= number 3) \"iii\")\n                 \
    \     ((= number 4) \"iv\")\n                      ((= number 5) \"v\")\n    \
    \                  ((= number 6) \"vi\")\n                      ((= number 7)\
    \ \"vii\")\n                      ((= number 8) \"viii\")\n                  \
    \    ((= number 9) \"ix\")\n                      ((= number 10) \"x\")\n    \
    \                  (else \"\")))\n              (up-to-1 (modulo number 10)))\n\
    \            (cond ((= number 4) \"iv\")\n                  ((= number 5) \"v\"\
    )\n                  ((= number 6) \"vi\")\n                  ((= number 7) \"\
    vii\")\n                  ((= number 8) \"viii\")\n                  ((= number\
    \ 9) \"ix\")\n                  ((= number 10) \"x\")\n                  (else\
    \ \"\")))\n          (up-to-5 (modulo number 10)))\n        (cond ((= number 40)\
    \ \"xl\")\n              ((= number 50) \"l\")\n              ((= number 60) \"\
    lx\")\n              ((= number 70) \"lxx\")\n              ((= number 80) \"\
    lxxx\")\n              ((= number 90) \"xc\")\n              ((= number 100) \"\
    c\")\n              (else \"\")))\n      (up-to-100 (modulo number 100)))\n  \
    \  (cond ((= number 400) \"cd\")\n          ((= number 500) \"d\")\n         \
    \ ((= number 600) \"dc\")\n          ((= number 700) \"dcc\")\n          ((= number\
    \ 800) \"dccc\")\n          ((= number 900) \"cm\")\n          ((= number 1000)\
    \ \"m\")\n          (else \"\")))\n  (up-to-1000 (modulo number 1000)))", "  (define\
    \ symbols '((\"M\" . 1000)\n                    (\"CM\" . 900)\n             \
    \       (\"D\" . 500)\n                    (\"CD\" . 400)\n                  \
    \  (\"C\" . 100)\n                    (\"XC\" . 90)\n                    (\"L\"\
    \ . 50)\n                    (\"XL\" . 40)\n                    (\"X\" . 10)\n\
    \                    (\"IX\" . 9)\n                    (\"V\" . 5)\n         \
    \           (\"IV\" . 4)\n                    (\"I\" . 1)))\n  (define (aux number\
    \ symbols)\n    (if (zero? number)\n        \"\"\n        (let ((symbol (filter\
    \ (lambda (pair) (>= (cdr pair) number)) symbols)))\n          (if (empty? symbol)\n\
    \              \"\"\n              (string-append (car (car symbol))\n       \
    \                      (aux (- number (cdr (car symbol))) symbols))))))\n  (string-downcase\
    \ (aux number symbols)))\n", "  (cond [(= number 1) \"i\"]\n        [(= number\
    \ 2) \"ii\"]\n        [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n\
    \        [(= number 5) \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number\
    \ 7) \"vii\"]\n        [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n\
    \        [(= number 10) \"x\"]\n        [(= number 11) \"xi\"]\n        [(= number\
    \ 12) \"xii\"]\n        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"\
    ]\n        [(= number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(=\
    \ number 17) \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number\
    \ 19) \"xix\"]\n        [(= number 20) \"xx\"]\n        [(= number 21) \"xxi\"\
    ]\n        [(= number 22) \"xxii\"]\n        [(= number 23) \"xxiii\"]\n     \
    \   [(= number 24) \"xxiv\"]\n        [(= number 25) \"xxv\"]\n        [(= number\
    \ 26) \"xxvi\"]\n        [(= number 27) \"xxvii\"]\n        [(= number 28) \"\
    xxviii\"]\n        [(= number 29) \"xxix\"]\n        [(= number 30) \"xxx\"]\n\
    \        [(= number 31) \"xxxi\"]\n        [(= number 32) \"xxxii\"]\n       \
    \ [(= number 33) \"xxxiii\"]\n        [(= number 34) \"xxxiv\"]\n        [(= number\
    \ 35) \"xxxv\"]\n        [(= number 36) \"xxxvi\"]\n        [(= number 37) \"\
    xxxvii\"]\n        [(= number 38) \"xxxviii\"]\n        [(= number 39) \"xxxix\"\
    ]\n        [(= number 40) \"xl\"]\n        [(= number 41) \"xli\"]\n        [(=\
    \ number 42) \"xlii\"]\n        [(= number 43) \"xliii\"]\n        [(= number\
    \ 44) \"xliv\"]\n        [(= number 45) \"xlv\"]\n        [(= number 46) \"xlvi\"\
    ]\n        [(= number 47", "  (define (to_roman numeral current)\n    (if (= numeral\
    \ 0)\n        \"\"\n        (if (= (modulo numeral 10) current)\n            (string-append\
    \ \"i\" (to_roman (- numeral current) current))\n            (if (= (modulo numeral\
    \ 10) (sub1 current))\n                (string-append \"i\"\n                \
    \               (string-append \"v\"\n                                       \
    \       (to_roman (- numeral (sub1 current)) current)))\n                (to_roman\
    \ numeral (sub1 current))))))\n  (cond ((= number 0) \"\")\n        ((<= number\
    \ 1000) (string-append (to_roman (quotient number 100) 5)\n                  \
    \                       (to_roman (remainder number 100) 5)))\n        (else \"\
    overflow\")))\n", "  ; your code here\n  )\n", "  ; TODO: write me!\n  (if (<=\
    \ number 1)\n      \"i\"\n      (if (<= number 4)\n          (make-string number\
    \ #\\i)\n          (if (<= number 5)\n              \"v\"\n              (if (<=\
    \ number 9)\n                  (string-append \"v\" (make-string (- number 5)\
    \ #\\i))\n                  (if (<= number 10)\n                      \"x\"\n\
    \                      (if (<= number 40)\n                          (string-append\
    \ (make-string (/ number 10) #\\x) (make-string (modulo number 10) #\\i))\n  \
    \                        (if (<= number 50)\n                              \"\
    l\"\n                              (if (<= number 90)\n                      \
    \            (string-append \"l\" (make-string (- number 50) #\\i))\n        \
    \                          (if (<= number 100)\n                             \
    \         \"c\"\n                                      (if (<= number 400)\n \
    \                                         (string-append (make-string (/ number\
    \ 100) #\\c) (make-string (modulo number 100) #\\i))\n                       \
    \                   (if (<= number 500)\n                                    \
    \          \"d\"\n                                              (if (<= number\
    \ 900)\n                                                  (string-append \"d\"\
    \ (make-string (- number 500) #\\i))\n                                       \
    \           (if (<= number 1000)\n                                           \
    \           \"m\"\n                                                      (if (<=\
    \ number 3999)\n                                                          (string-append\
    \ (make-string (/ number 1000) #\\m) (make-string (modulo number 1000) #\\i))\n\
    \                                                          \"overflow\"))))))))))))))))\n",
  "  (define (int_to_mini_roman-1 number roman)\n    (cond ((= number 0) roman)\n\
    \          ((= number 1000) (string-append roman \"m\"))\n          ((= number\
    \ 900) (string-append roman \"cm\"))\n          ((= number 500) (string-append\
    \ roman \"d\"))\n          ((= number 400) (string-append roman \"cd\"))\n   \
    \       ((= number 100) (string-append roman \"c\"))\n          ((= number 90)\
    \ (string-append roman \"xc\"))\n          ((= number 50) (string-append roman\
    \ \"l\"))\n          ((= number 40) (string-append roman \"xl\"))\n          ((=\
    \ number 10) (string-append roman \"x\"))\n          ((= number 9) (string-append\
    \ roman \"ix\"))\n          ((= number 5) (string-append roman \"v\"))\n     \
    \     ((= number 4) (string-append roman \"iv\"))\n          ((= number 1) (string-append\
    \ roman \"i\"))\n          (else (int_to_mini_roman-1 (- number (/ number 10)\
    \ 10) (string-append roman \"x\")))))\n  (cond ((> number 1000) \"\")\n      \
    \  ((> number 0) (int_to_mini_roman-1 number \"\"))\n        (else \"\")))\n",
  "  (define (divide number-to-divide divisor)\n    (inexact->exact (floor (/ number-to-divide\
    \ divisor))))\n  (define (build-roman number numeral)\n    (cond ((zero? number)\
    \ numeral)\n          ((and (<= number 10) (> number 0))\n           (number->string\
    \ (integer->char (+ (char->integer #\\a) (- number 1)))\n                    \
    \       (string-append numeral \"i\")))\n          ((and (<= number 10) (< number\
    \ 0))\n           (string-append (build-roman (add1 number) \"\") \"i\"))\n  \
    \        ((= number 10) (string-append numeral \"x\"))\n          ((= number 100)\
    \ (string-append numeral \"c\"))\n          ((= number 1000) (string-append numeral\
    \ \"m\"))\n          ((> number 10) (build-roman (- number (modulo number 10))\n\
    \                                      (build-roman (modulo number 10) numeral)))\n\
    \          ((> number 100) (build-roman (- number (modulo number 100))\n     \
    \                                  (build-roman (modulo number 100) numeral)))\n\
    \          ((> number 1000) (build-roman (- number (modulo number 1000))\n   \
    \                                     (build-roman (modulo number 1000) numeral)))))\n\
    \  (string-downcase (build-roman number \"\")))", "  ;;; Use exactly the same\
    \ helper functions and recursive structure as in the\n  ;;; first problem, but\
    \ use the mini-roman numerals instead.\n  (define (convert-1000s-to-rom number)\n\
    \    (if (< number 1000)\n      (number->string number)\n      (string-append\
    \ \"m\" (convert-1000s-to-rom (- number 1000)))))\n  (define (convert-100s-to-rom\
    \ number)\n    (cond [(>= number 900) (string-append \"cm\" (convert-1000s-to-rom\
    \ (- number 900)))]\n          [(>= number 500) (string-append \"d\" (convert-1000s-to-rom\
    \ (- number 500)))]\n          [(>= number 400) (string-append \"cd\" (convert-1000s-to-rom\
    \ (- number 400)))]\n          [else (string-append (make-string (/ number 100)\
    \ #\\c) (convert-1000s-to-rom (remainder number 100)))]))\n  (define (convert-10s-to-rom\
    \ number)\n    (cond [(>= number 90) (string-append \"xc\" (convert-100s-to-rom\
    \ (- number 90)))]\n          [(>= number 50) (string-append \"l\" (convert-100s-to-rom\
    \ (- number 50)))]\n          [(>= number 40) (string-append \"xl\" (convert-100s-to-rom\
    \ (- number 40)))]\n          [else (string-append (make-string (/ number 10)\
    \ #\\x) (convert-100s-to-rom (remainder number 10)))]))\n  (define (convert-1s-to-rom\
    \ number)\n    (cond [(>= number 9) (string-append \"ix\" (convert-10s-to-rom\
    \ (- number 9)))]\n          [(>= number 5) (string-append \"v\" (convert-10s-to-rom\
    \ (- number 5)))]\n          [(>= number 4) (string-append \"iv\" (convert-10s-to-rom\
    \ (- number 4)))]\n          [else (string-append (make-string number #\\i) (convert",
  "  (define roman-digits '((\"M\" \"C\" \"X\" \"I\")\n                         (\"\
    \" \"D\" \"L\" \"V\")\n                         (\"\" \"M\" \"C\" \"X\")))\n \
    \ (define (helper number)\n    (cond\n      ((= number 0) \"\")\n      ((= number\
    \ 1) \"I\")\n      ((= number 2) \"II\")\n      ((= number 3) \"III\")\n     \
    \ ((= number 4) \"IV\")\n      ((= number 5) \"V\")\n      ((= number 6) \"VI\"\
    )\n      ((= number 7) \"VII\")\n      ((= number 8) \"VIII\")\n      ((= number\
    \ 9) \"IX\")\n      (else (concat (helper (quotient number 10))\n            \
    \        (list-ref (list-ref roman-digits (quotient (remainder number 10) 5))\
    \ (remainder number 10))))))\n  (helper number))", "  (string-downcase (int_to_roman\
    \ number)))\n", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 500) \"\
    d\"]\n    [(= number 100) \"c\"]\n    [(= number 50) \"l\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 5) \"v\"]\n    [(= number 1) \"i\"]\n    [else\n    \
    \ (cond\n       [(<= number 499)\n        (concat (string-append (int_to_mini_roman\
    \ (/ number 100)) \"c\")\n                (int_to_mini_roman (modulo number 100)))]\n\
    \       [(<= number 99)\n        (concat (string-append (int_to_mini_roman (/\
    \ number 10)) \"x\")\n                (int_to_mini_roman (modulo number 10)))]\n\
    \       [(<= number 49)\n        (concat (string-append (int_to_mini_roman (/\
    \ number 5)) \"v\")\n                (int_to_mini_roman (modulo number 5)))]\n\
    \       [else\n        (concat (string-append (int_to_mini_roman (/ number 1))\
    \ \"i\")\n                (int_to_mini_roman (modulo number 1)))]\n       )\n\
    \     ]\n    )\n  )\n", "  (define (int_to_mini_roman_helper number)\n    (let*\
    \ ([d100 (quotient number 100)]\n           [d100m (remainder number 100)]\n \
    \          [d10 (quotient d100m 10)]\n           [d10m (remainder d100m 10)])\n\
    \      (cond\n        [(zero? d100) \"\"]\n        [(zero? d10) \"c\"]\n     \
    \   [(< d10 3) (string-append \"c\" (int_to_mini_roman_helper d10m))]\n      \
    \  [(= d10 3) \"ccc\"]\n        [(< d10 5) (string-append \"d\" (int_to_mini_roman_helper\
    \ d10m))]\n        [(= d10 5) \"d\"]\n        [(< d10 8) (string-append \"d\"\
    \ (int_to_mini_roman_helper (- d10 5)))]\n        [(= d10 8) \"dccc\"]\n     \
    \   [(= d10 9) \"cm\"])))\n  (string-downcase (string-append (int_to_mini_roman_helper\
    \ number)\n                                  (string-join (build-list d100 \"\
    c\")))))\n```\n\n## Challenge\n\nWrite a program that prints all possible combinations\
    \ of roman numerals of length 3 that add up to\n`8` (or any other number, to be\
    \ supplied by the user). It will use a nested `for` loop to cycle\nthrough the\
    \ first three parts of a roman numeral, and a fourth loop to cycle through the\
    \ fourth part\nof the roman numeral (the subtractive symbol `v`, `l`, or `d`).\
    \ Each cycle, check to see if the\nvalue of the four parts adds up to the user's\
    \ number, and if so, print out the roman numeral and the\nvalue of its parts.\n\
    \n```racket\n#lang racket\n", "  (define (int_to_mini_roman-help n)\n    (cond\n\
    \      [(= n 0) '()]\n      [(= n 1) '(one)]\n      [(= n 2) '(two)]\n      [(=\
    \ n 3) '(three)]\n      [(= n 4) '(four)]\n      [(= n 5) '(five)]\n      [(=\
    \ n 6) '(six)]\n      [(= n 7) '(seven)]\n      [(= n 8) '(eight)]\n      [(=\
    \ n 9) '(nine)]\n      [(= n 10) '(ten)]\n      [(= n 11) '(eleven)]\n      [(=\
    \ n 12) '(twelve)]\n      [(= n 13) '(thirteen)]\n      [(= n 14) '(fourteen)]\n\
    \      [(= n 15) '(fifteen)]\n      [(= n 16) '(sixteen)]\n      [(= n 17) '(seventeen)]\n\
    \      [(= n 18) '(eighteen)]\n      [(= n 19) '(nineteen)]\n      [(= n 20) '(twenty)]\n\
    \      [(= n 30) '(thirty)]\n      [(= n 40) '(forty)]\n      [(= n 50) '(fifty)]\n\
    \      [(= n 60) '(sixty)]\n      [(= n 70) '(seventy)]\n      [(= n 80) '(eighty)]\n\
    \      [(= n 90) '(ninety)]\n      [(= n 100) '(hundred)]\n      [(= n 1000) '(thousand)]\n\
    \      [(= n 10000) '(ten-thousand)]\n      [(= n 100000) '(hundred-thousand)]\n\
    \      [(= n 1000000) '(million)]\n      [(= n 10000000) '(ten-million)]\n   \
    \   [(= n 100000000) '(hundred-million)]\n      [(= n 1000000000) '(billion)]\n\
    \      [(= n 10000000000) '(ten-billion)]\n      [(= n 100000000000) '(hundred-billion)]\n\
    \      [(= n 1000000000000) '(trillion)]\n      [(= n 10000000000000) '(ten-trillion)]\n\
    \      [(= n 100000000000000) '(hundred-trillion)]\n      [(= n 1000000000000000)\
    \ '(quadrillion)]\n      [(= n 10000000000000000", "  (let* ([romans [\n     \
    \             'i 'v 'x 'l 'c 'd 'm '\n                  'ii 'iii 'iv 'vii 'viii\
    \ 'ix 'xii 'xiii 'xiv 'xvii 'xviii 'xix 'xxii 'xxiii 'xxiv 'xxvii 'xxviii 'xxix\
    \ 'xxxii 'xxxiii 'xxxiv 'xxxvii 'xxxviii 'xxxix 'xlii 'xliii 'xliv 'xlvii 'xlviii\
    \ 'xlix 'lii 'liii 'liv 'lvii 'lviii 'lix 'lxii 'lxiii 'lxiv 'lxvii 'lxviii 'lxix\
    \ 'lxxii 'lxxiii 'lxxiv 'lxxvii 'lxxviii 'lxxix 'lxxxii 'lxxxiii 'lxxxiv 'lxxxvii\
    \ 'lxxxviii 'lxxxix 'xciv 'xcv 'xcvi 'xcvii 'xcviii 'xcix 'cxvii 'cxviii 'cxix\
    \ 'cxxii 'cxxiii 'cxxiv 'cxxvii 'cxxviii 'cxxix 'cxxxii 'cxxxiii 'cxxxiv 'cxxxvii\
    \ 'cxxxviii 'cxxxix 'cxlii 'cxliii 'cxliv 'cxlvii 'cxlviii 'cxlix 'clii 'cliii\
    \ 'cliv 'clvii 'clviii 'clix 'clxii 'clxiii 'clxiv 'clxvii 'clxviii 'clxix 'clxxii\
    \ 'clxxiii 'clxxiv 'clxxvii 'clxxviii 'clxxix 'clxxxii 'clxxxiii 'clxxxiv 'clxxxvii\
    \ 'clxxxviii 'clxxxix 'cxciv 'cxcv 'cxcvi 'cxcvii 'cxcviii 'cxcix 'cxcii 'cxciii\
    \ 'cxciv 'cxcvii 'cxcviii 'cxcix 'ccxii 'ccxiii 'ccxiv 'ccxvii 'ccxviii 'ccx",
  "    (cond\n        [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n      \
    \  [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5)\
    \ \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n    \
    \    [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 10) \"x\"]\n        [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n\
    \        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(=\
    \ number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number 17)\
    \ \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"\
    ]\n        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(=\
    \ number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number 60) \"\
    lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n   \
    \     [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(=\
    \ number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number\
    \ 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [(and (> number 1000)\
    \ (<= number 1100)) \"mi\"]\n        [(and (> number 1100) (<= number 1200)) \"\
    mii\"]\n        [(and (> number 1200) (<= number 1300)) \"miii\"]\n        [(and\
    \ (> number 1300) (<= number 1400)) \"miv\"]\n        [(and (> number 1400) (<=\
    \ number 1500)) \"mv\"]\n        [(and (> number 1500) (<= number 1600)) \"mvi\"\
    ]\n        [(and (> number 1600) (<= number 1700)) \"mvii", "  (roman-numeral\
    \ number '()))\n", "    (cond [(<= number 1000) (string-append (int_to_mini_roman\
    \ (quotient number 10)) (unit_to_mini_roman (remainder number 10)))]\n       \
    \   [(<= number 100) (string-append (int_to_mini_roman (quotient number 10)) (tens_to_mini_roman\
    \ (remainder number 10)))]\n          [(<= number 10) (string-append (int_to_mini_roman\
    \ (quotient number 10)) (hundreds_to_mini_roman (remainder number 10)))]\n   \
    \       [(= number 0) \"\"]))", "  (define (num_to_rom num)\n    (cond\n     \
    \ ((and (<= 1 num) (<= num 10)) (number->string num))\n      ((and (<= 11 num)\
    \ (<= num 20))\n        (append (list 'x) (num_to_rom (- num 10))))\n      ((and\
    \ (<= 21 num) (<= num 30))\n        (append (list 'x 'x) (num_to_rom (- num 20))))\n\
    \      ((and (<= 31 num) (<= num 40))\n        (append (list 'x 'x 'x) (num_to_rom\
    \ (- num 30))))\n      ((and (<= 41 num) (<= num 50))\n        (append (list 'x\
    \ 'l) (num_to_rom (- num 40))))\n      ((and (<= 51 num) (<= num 60))\n      \
    \  (append (list 'l) (num_to_rom (- num 50))))\n      ((and (<= 61 num) (<= num\
    \ 70))\n        (append (list 'l 'x) (num_to_rom (- num 60))))\n      ((and (<=\
    \ 71 num) (<= num 80))\n        (append (list 'l 'x 'x) (num_to_rom (- num 70))))\n\
    \      ((and (<= 81 num) (<= num 90))\n        (append (list 'l 'x 'x 'x) (num_to_rom\
    \ (- num 80))))\n      ((and (<= 91 num) (<= num 100))\n        (append (list\
    \ 'x 'c) (num_to_rom (- num 90))))\n      ((and (<= 101 num) (<= num 200))\n \
    \       (append (list 'c) (num_to_rom (- num 100))))\n      ((and (<= 201 num)\
    \ (<= num 300))\n        (append (list 'c 'c) (num_to_rom (- num 200))))\n   \
    \   ((and (<= 301 num) (<= num 400))\n        (append (list 'c 'c 'c) (num_to_rom\
    \ (- num 300))))\n      ((and (<= 401 num) (<= num 500))\n        (append (list\
    \ 'c 'd) (num_to_rom (- num 400))))\n      ((and (<= 501 num) (<= num 600))\n\
    \        (", "  (define (helper rest acc)\n    (cond\n      [(= rest 0) acc]\n\
    \      [(= rest 1000) (string-append acc \"m\")]\n      [(= rest 900) (string-append\
    \ acc \"cm\")]\n      [(= rest 500) (string-append acc \"d\")]\n      [(= rest\
    \ 400) (string-append acc \"cd\")]\n      [(= rest 100) (string-append acc \"\
    c\")]\n      [(= rest 90) (string-append acc \"xc\")]\n      [(= rest 50) (string-append\
    \ acc \"l\")]\n      [(= rest 40) (string-append acc \"xl\")]\n      [(= rest\
    \ 10) (string-append acc \"x\")]\n      [(= rest 9) (string-append acc \"ix\"\
    )]\n      [(= rest 5) (string-append acc \"v\")]\n      [(= rest 4) (string-append\
    \ acc \"iv\")]\n      [(= rest 1) (string-append acc \"i\")]\n      [else (helper\
    \ (- rest (quotient rest 10) 10)\n                    (string-append acc (string-append\
    \ (string (integer->char (+ (quotient rest 10) 48)))\n                       \
    \                               (string (integer->char (+ (remainder rest 10)\
    \ 48))))))]))\n  (if (= number 0)\n      \"\"\n      (string-downcase (helper\
    \ number \"\"))))\n```\n\n## Task 2.2\n\n``` #lang racket\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (define (roman_digit n base)\n      (cond ((< n 1) \"\")\n    \
    \        ((= n 1) base)\n            ((= n 2) (string-append base base))\n   \
    \         ((= n 3) (string-append base base base))\n            ((= n 4) (string-append\
    \ base \"v\"))\n            ((= n 5) \"v\")\n            ((= n 6) (string-append\
    \ \"v\" base))\n            ((= n 7) (string-append \"v\" base base))\n      \
    \      ((= n 8) (string-append \"v\" base base base))\n            ((= n 9) (string-append\
    \ base \"x\"))))\n    (define (roman_letter n base)\n      (cond ((< n 1) \"\"\
    )\n            ((= n 1) base)\n            ((= n 2) (string-append base base))\n\
    \            ((= n 3) (string-append base base base))))\n    (define (convert\
    \ n base)\n      (if (< n 10)\n          (roman_digit n base)\n          (roman_letter\
    \ n base)))\n    (if (<= number 1000)\n        (string-append (convert (/ number\
    \ 1000) \"m\")\n                       (convert (/ (% number 1000) 100) \"c\"\
    )\n                       (convert (/ (% number 100) 10) \"x\")\n            \
    \           (convert (% number 10) \"i\"))\n        (error \"Number must be smaller\
    \ than 1000!\")))\n  (string->symbol (string-downcase (int_to_mini_roman_helper\
    \ number))))", "  (define (reduce lst accu)\n    (cond\n      [(empty? lst) accu]\n\
    \      [(< (first lst) number) (reduce (rest lst) (string-append accu (second\
    \ lst)))]\n      [else (reduce (rest lst) accu)]))\n  (reduce (list 1000 900 500\
    \ 400 100 90 50 40 10 9 5 4 1) \"\"))\n", "  (define numeral-pairs '((1000 \"\
    m\") (900 \"cm\") (500 \"d\") (400 \"cd\") (100 \"c\") (90 \"xc\") (50 \"l\")\
    \ (40 \"xl\") (10 \"x\") (9 \"ix\") (5 \"v\") (4 \"iv\") (1 \"i\")))\n  (define\
    \ (miniroman-helper number numeral-pairs)\n    (cond ((= number 0) '())\n    \
    \      ((= (car (car numeral-pairs)) number) (cons (cadr (car numeral-pairs))\
    \ '()))\n          ((> (car (car numeral-pairs)) number) (miniroman-helper number\
    \ (cdr numeral-pairs)))\n          (else (cons (cadr (car numeral-pairs)) (miniroman-helper\
    \ (- number (car (car numeral-pairs))) numeral-pairs)))))\n  (string-join (miniroman-helper\
    \ number numeral-pairs) '()))\n```\n\n\u0420\u0435\u0448\u0435\u043D\u0438\u0435\
    \ \u0434\u043B\u044F JavaScript:\n\n```JavaScript\n// Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
    // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\
    \ == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\nfunction int_to_mini_roman(number) {\n  const numeralPairs = [\n\
    \    [1000, 'm'],\n    [900, 'cm'],\n    [500, 'd'],\n    [400, 'cd'],\n    [100,\
    \ 'c'],\n    [90, 'xc'],\n    [50, 'l'],\n    [40, 'xl'],\n    [10, 'x'],\n  \
    \  [9, 'ix'],\n    [5, 'v'],\n    [4, 'iv'],\n    [1, 'i'],\n  ];\n\n  const miniromanHelper\
    \ = (number", "  (let ((roman-symbols '((\"M\" . 1000)\n                     \
    \    (\"CM\" . 900)\n                         (\"D\" . 500)\n                \
    \         (\"CD\" . 400)\n                         (\"C\" . 100)\n           \
    \              (\"XC\" . 90)\n                         (\"L\" . 50)\n        \
    \                 (\"XL\" . 40)\n                         (\"X\" . 10)\n     \
    \                    (\"IX\" . 9)\n                         (\"V\" . 5)\n    \
    \                     (\"IV\" . 4)\n                         (\"I\" . 1)))\n \
    \       (result '()))\n    (cond ((>= number 1000) (set! result (cons \"M\" result))\n\
    \                            (set! number (- number 1000)))\n          ((>= number\
    \ 900) (set! result (cons \"CM\" result))\n                           (set! number\
    \ (- number 900)))\n          ((>= number 500) (set! result (cons \"D\" result))\n\
    \                           (set! number (- number 500)))\n          ((>= number\
    \ 400) (set! result (cons \"CD\" result))\n                           (set! number\
    \ (- number 400)))\n          ((>= number 100) (set! result (cons \"C\" result))\n\
    \                           (set! number (- number 100)))\n          ((>= number\
    \ 90) (set! result (cons \"XC\" result))\n                          (set! number\
    \ (- number 90)))\n          ((>= number 50) (set! result (cons \"L\" result))\n\
    \                          (set! number (- number 50)))\n          ((>= number\
    \ 40) (set! result (cons \"XL\" result))\n                          (set! number\
    \ (- number 40)))\n          ((>= number 10) (set! result (cons \"X\" result))\n\
    \                          (set! number (- number 10)))\n          ((>= number\
    \ 9) (set! result (cons \"IX\" result))\n                         (set! number\
    \ (- number 9)))\n          ((>= number 5) (set! result (cons \"V\" result))\n\
    \                         (set! number (- number 5)))\n          ((>= number 4)\
    \ (set! result (cons \"IV\" result))\n                         (set! number (-\
    \ number 4)))\n          ((>= number 1) (set! result (cons \"I\" result))\n  \
    \                       (set! number (- number 1))))\n   ", "  (string-lowercase\n\
    \   (int_to_roman number)))\n", "  (if (= number 1000)\n      \"m\"\n      (string-append\n\
    \       (int_to_mini_roman_helper (quotient number 100) \"c\" \"d\" \"m\")\n \
    \      (int_to_mini_roman_helper (quotient (remainder number 100) 10) \"x\" \"\
    l\" \"c\")\n       (int_to_mini_roman_helper (remainder number 10) \"i\" \"v\"\
    \ \"x\"))))\n", "  (cond [(< number 1) (error \"Number must be greater than 0\"\
    )]\n        [(> number 1000) (error \"Number must be less than 1000\")]\n    \
    \    [else\n         (let ((result '()))\n           (define (add-roman-numeral\
    \ numeral amount)\n             (let loop ([amount amount])\n               (cond\
    \ [(= amount 0) (void)]\n                     [else (cons numeral result) (loop\
    \ (- amount 1))])))\n           (define (handle-number numeral amount)\n     \
    \        (cond [(> number amount) (add-roman-numeral numeral (/ number amount))\n\
    \                                      (handle-number numeral (% number amount))]\n\
    \                   [else\n                    (cond [(> number (/ amount 10))\
    \ (add-roman-numeral (string-append numeral \"x\") (/ number (/ amount 10)))\n\
    \                                                   (handle-number numeral (%\
    \ number (/ amount 10)))]\n                          [(> number (/ amount 5))\
    \ (add-roman-numeral (string-append numeral \"v\") (/ number (/ amount 5)))\n\
    \                                                   (handle-number numeral (%\
    \ number (/ amount 5)))]\n                          [else (add-roman-numeral numeral\
    \ (/ number amount))\n                               (handle-number numeral (%\
    \ number amount))])]))\n           (handle-number \"m\" 1000)\n           (string-join\
    \ (reverse result)))])\n  )\n", "  (let ((dict `((1000 . \"m\")\n            \
    \    (900 . \"cm\")\n                (500 . \"d\")\n                (400 . \"\
    cd\")\n                (100 . \"c\")\n                (90 . \"xc\")\n        \
    \        (50 . \"l\")\n                (40 . \"xl\")\n                (10 . \"\
    x\")\n                (9 . \"ix\")\n                (5 . \"v\")\n            \
    \    (4 . \"iv\")\n                (1 . \"i\"))))\n    (define (accumulator number\
    \ acc)\n      (cond ((= number 0) acc)\n            ((< number 0) (error \"number\
    \ < 0\"))\n            (else\n             (let* ((possible-matches\n        \
    \             (filter (lambda (pair) (>= (car pair) number)) dict))\n        \
    \            (match (car possible-matches)))\n               (accumulator (- number\
    \ (car match))\n                            (string-append acc (cdr match)))))))\n\
    \    (string-downcase (accumulator number \"\"))))\n", "  (define (int_to_mini_roman-helper\
    \ num n index)\n    (if (>= num n)\n        (string-append (list-ref symbols index)\n\
    \                       (int_to_mini_roman-helper (- num n) n (+ index 1)))\n\
    \        (if (= num 0)\n            (string-append)\n            (int_to_mini_roman-helper\
    \ num (list-ref numbers (- index 1)) (- index 1)))))\n  (define numbers '(1000\
    \ 500 100 50 10 5 1))\n  (define symbols '(m d c l x v i))\n  (int_to_mini_roman-helper\
    \ number 1000 0))\n```\n\nAnswered by `lakiw` :\n\n\n```racket", "  (define (int_to_mini_roman-iter\
    \ number roman)\n    (cond\n      ((= number 0) roman)\n      ((= number 1000)\
    \ (string-append roman \"m\"))\n      ((= number 900) (string-append roman \"\
    cm\"))\n      ((= number 500) (string-append roman \"d\"))\n      ((= number 400)\
    \ (string-append roman \"cd\"))\n      ((= number 100) (string-append roman \"\
    c\"))\n      ((= number 90) (string-append roman \"xc\"))\n      ((= number 50)\
    \ (string-append roman \"l\"))\n      ((= number 40) (string-append roman \"xl\"\
    ))\n      ((= number 10) (string-append roman \"x\"))\n      ((= number 9) (string-append\
    \ roman \"ix\"))\n      ((= number 5) (string-append roman \"v\"))\n      ((=\
    \ number 4) (string-append roman \"iv\"))\n      ((= number 1) (string-append\
    \ roman \"i\"))\n      (else (int_to_mini_roman-iter (- number (/ number 10) 10)\
    \ (string-append roman \"x\")))))\n  (string-downcase (int_to_mini_roman-iter\
    \ number \"\")))", "  (define (numeral-gen n)\n    (cond\n      [(= n 1) \"i\"\
    ]\n      [(= n 5) \"v\"]\n      [(= n 10) \"x\"]\n      [(= n 50) \"l\"]\n   \
    \   [(= n 100) \"c\"]\n      [(= n 500) \"d\"]\n      [(= n 1000) \"m\"]))\n \
    \ (define (exponentiate_char c n)\n    (define (exponentiate-iter i)\n      (cond\n\
    \        [(= i n) (list c)]\n        [else (cons c (exponentiate-iter (+ i 1)))]))\n\
    \    (exponentiate-iter 0))\n  (define (calculate-r-numeral n)\n    (let* ([num-base\
    \ (quotient n 10)]\n           [power (expt 10 num-base)]\n           [digit (modulo\
    \ n power)])\n      (cond\n        [(= digit 4)  (append (exponentiate_char (numeral-gen\
    \ power) 1)\n                              (exponentiate_char (numeral-gen (*\
    \ power 5)) 1))]\n        [(= digit 9)  (append (exponentiate_char (numeral-gen\
    \ power) 1)\n                              (exponentiate_char (numeral-gen (*\
    \ power 10)) 1))]\n        [(< digit 4)  (exponentiate_char (numeral-gen power)\
    \ digit)]\n        [(and (> digit 4) (< digit 9))\n         (append (exponentiate_char\
    \ (numeral-gen (* power 5)) 1)\n                 (exponentiate_char (numeral-gen\
    \ power) (- digit 5)))]\n        [(and (> digit 9) (< digit 40))\n         (append\
    \ (exponentiate_char (numeral-gen (* power 10)) 1)\n                 (calculate-r-numeral\
    \ (- n (* power 10))))]\n        [(and (> digit 49) (< digit 90))\n         (append\
    \ (exponentiate_char (numeral-gen (* power 50)) 1)\n                 (calculate-r-numeral\
    \ (- n (* power 50))))]\n        [(and (> digit 99) (< digit 400))\n         (append\
    \ (exponentiate_char (numeral-gen (* power", "  (cond\n    [(= number 1) \"i\"\
    ]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"\
    iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7)\
    \ \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number\
    \ 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(=\
    \ number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"\
    ]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18)\
    \ \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(=\
    \ number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n\
    \    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"\
    lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number\
    \ 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n  \
    \  [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"\
    dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [else\n     (format \"~a~a\"\n             (int_to_mini_roman\
    \ (quotient number 10))\n             (int_to_mini_roman (remainder number 10)))\n\
    \     ]))\n", "  (cond [(<= number 0) (error \"cannot be negative\")]\n      \
    \  [(> number 1000) (error \"greater than 1000\")]\n        [else (number->string\
    \ number)]))\n\n", "  (cond ((= number 1000) \"m\")\n        ((= number 900) \"\
    cm\")\n        ((= number 500) \"d\")\n        ((= number 400) \"cd\")\n     \
    \   ((= number 100) \"c\")\n        ((= number 90) \"xc\")\n        ((= number\
    \ 50) \"l\")\n        ((= number 40) \"xl\")\n        ((= number 10) \"x\")\n\
    \        ((= number 9) \"ix\")\n        ((= number 5) \"v\")\n        ((= number\
    \ 4) \"iv\")\n        ((= number 1) \"i\")\n        (else (string-append (int_to_mini_roman\
    \ (quotient number 10))\n                             (int_to_mini_roman (remainder\
    \ number 10))))))", "  (cond [(= 1 number) \"i\"]\n        [(= 5 number) \"v\"\
    ]\n        [(= 10 number) \"x\"]\n        [(= 50 number) \"l\"]\n        [(= 100\
    \ number) \"c\"]\n        [(= 500 number) \"d\"]\n        [(= 1000 number) \"\
    m\"]\n        [(< number 10)\n         (string-append (make-string (/ number 1)\
    \ \"i\") (int_to_mini_roman (- number (* (quotient number 1) 1))))]\n        [(<\
    \ number 100)\n         (string-append (make-string (/ number 10) \"x\") (int_to_mini_roman\
    \ (- number (* (quotient number 10) 10))))]\n        [(< number 1000)\n      \
    \   (string-append (make-string (/ number 100) \"c\") (int_to_mini_roman (- number\
    \ (* (quotient number 100) 100))))]\n        [(< number 1000000)\n         (string-append\
    \ (make-string (/ number 1000) \"m\") (int_to_mini_roman (- number (* (quotient\
    \ number 1000) 1000))))]))", "  (let ((n-base number)\n        (r-map '((1000\
    \ . \"m\")\n                 (900 . \"cm\")\n                 (500 . \"d\")\n\
    \                 (400 . \"cd\")\n                 (100 . \"c\")\n           \
    \      (90 . \"xc\")\n                 (50 . \"l\")\n                 (40 . \"\
    xl\")\n                 (10 . \"x\")\n                 (9 . \"ix\")\n        \
    \         (5 . \"v\")\n                 (4 . \"iv\")\n                 (1 . \"\
    i\"))))\n    (define (iter n map)\n      (cond ((= n 0) \"\")\n            ((<\
    \ n 0) (error \"Invalid input: non-positive integer.\"))\n            ((= n 1000)\
    \ (append \"m\" (iter (- n 1000) map)))\n            ((= n 900) (append \"cm\"\
    \ (iter (- n 900) map)))\n            ((= n 500) (append \"d\" (iter (- n 500)\
    \ map)))\n            ((= n 400) (append \"cd\" (iter (- n 400) map)))\n     \
    \       ((= n 100) (append \"c\" (iter (- n 100) map)))\n            ((= n 90)\
    \ (append \"xc\" (iter (- n 90) map)))\n            ((= n 50) (append \"l\" (iter\
    \ (- n 50) map)))\n            ((= n 40) (append \"xl\" (iter (- n 40) map)))\n\
    \            ((= n 10) (append \"x\" (iter (- n 10) map)))\n            ((= n\
    \ 9) (append \"ix\" (iter (- n 9) map)))\n            ((= n 5) (append \"v\" (iter\
    \ (- n 5) map)))\n            ((= n 4) (append \"iv\" (iter (- n 4) map)))\n \
    \           ((= n 1) (append \"i\" (iter (- n 1) map)))\n            (else (iter\
    \ (iter-helper n map) map))))\n    (iter n-base r-map)))\n", "  (error \"Not implemented\
    \ yet.\"))\n", "  (define (convert n numeral-characters)\n    (let ([remainder\
    \ (modulo n 5)])\n      (cond [(< n 5) (if (zero? remainder)\n               \
    \          (string numeral-characters #\\i #\\i #\\i)\n                      \
    \   (string numeral-characters #\\i #\\i))]\n            [(= n 5) (string numeral-characters\
    \ #\\v)]\n            [(> n 5) (if (zero? remainder)\n                       \
    \  (string numeral-characters #\\v #\\i #\\i #\\i)\n                         (string\
    \ numeral-characters #\\v #\\i))])))\n  (cond [(< number 10) (convert number #\\\
    i)]\n        [(< number 100) (convert (/ number 10) #\\x)]\n        [(< number\
    \ 1000) (convert (/ number 100) #\\c)]\n        [(= number 1000) (string #\\m)]))\n",
  "  (define numerals '((\"M\" . 1000)\n                     (\"CM\" . 900)\n    \
    \                 (\"D\" . 500)\n                     (\"CD\" . 400)\n       \
    \              (\"C\" . 100)\n                     (\"XC\" . 90)\n           \
    \          (\"L\" . 50)\n                     (\"XL\" . 40)\n                \
    \     (\"X\" . 10)\n                     (\"IX\" . 9)\n                     (\"\
    V\" . 5)\n                     (\"IV\" . 4)\n                     (\"I\" . 1)))\n\
    \  (define (helper number numeral-list)\n    (cond\n      [(null? numeral-list)\
    \ \"\"]\n      [(>= number (cdr (car numeral-list)))\n       (string-append (car\
    \ (car numeral-list))\n                      (helper (- number (cdr (car numeral-list)))\
    \ numeral-list))]\n      [else (helper number (cdr numeral-list))]))\n  (string-downcase\
    \ (helper number numerals)))", "    (local [(define (int_to_mini_roman-iter number\
    \ string)\n                (cond [(= number 0) string]\n                     \
    \ [(= number 1) (string-append string \"i\")]\n                      [(= number\
    \ 2) (string-append string \"ii\")]\n                      [(= number 3) (string-append\
    \ string \"iii\")]\n                      [(= number 4) (string-append string\
    \ \"iv\")]\n                      [(= number 5) (string-append string \"v\")]\n\
    \                      [(= number 6) (string-append string \"vi\")]\n        \
    \              [(= number 7) (string-append string \"vii\")]\n               \
    \       [(= number 8) (string-append string \"viii\")]\n                     \
    \ [(= number 9) (string-append string \"ix\")]\n                      [(= number\
    \ 10) (string-append string \"x\")]\n                      [(= number 40) (string-append\
    \ string \"xl\")]\n                      [(= number 50) (string-append string\
    \ \"l\")]\n                      [(= number 90) (string-append string \"xc\")]\n\
    \                      [(= number 100) (string-append string \"c\")]\n       \
    \               [(= number 400) (string-append string \"cd\")]\n             \
    \         [(= number 500) (string-append string \"d\")]\n                    \
    \  [(= number 900) (string-append string \"cm\")]\n                      [(= number\
    \ 1000) (string-append string \"m\")]\n                      [(= number (/ number\
    \ 10) (* 10 (/ number 10)))\n                       (int_to_mini_roman-iter (-\
    \ number (/ number 10) (* 10 (/ number 10))) (string-append string (int_to_mini_roman\
    \ (/ number 10) (* 10 (/ number 10)))))]\n                      [(> number 1000)\
    \ 'invalid]\n                      [else\n                       (int_to_mini_roman-iter\
    \ (/ number 10) (string-append string (int_to_mini_roman (/ number 10) (* 10 (/\
    \ number 10)))))]))]\n        (string-downcase (int_to_mini_roman-iter number\
    \ \"\"))))\n", "\t(if (not (integer? number))\n\t\t\t(error \"int_to_mini_roman:\
    \ non-integer\")\n\t\t(let ([rom (int_to_mini_roman_repr number)])\n\t\t\t(apply\
    \ string-append rom))))\n", "  (if (= number 0)\n      \"\"\n      (let* ((num-pair\
    \ (find-num-pair number))\n             (possible-number (car num-pair))\n   \
    \          (num-string (cdr num-pair)))\n        (if (= number possible-number)\n\
    \            num-string\n            (string-append num-string (int_to_mini_roman\
    \ (- number possible-number)))))))\n", "  (define (int_to_mini_roman_iter current\
    \ number result)\n    (cond ((= current 0) (string-join result))\n          ((=\
    \ number 0) (string-join result))\n          ((> number 100) (int_to_mini_roman_iter\
    \ (- current 100) (- number 100) (append result '(\"c\"))))\n          ((> number\
    \ 90) (int_to_mini_roman_iter (- current 90) (- number 90) (append result '(\"\
    xc\"))))\n          ((> number 50) (int_to_mini_roman_iter (- current 50) (- number\
    \ 50) (append result '(\"l\"))))\n          ((> number 40) (int_to_mini_roman_iter\
    \ (- current 40) (- number 40) (append result '(\"xl\"))))\n          ((> number\
    \ 10) (int_to_mini_roman_iter (- current 10) (- number 10) (append result '(\"\
    x\"))))\n          ((> number 9) (int_to_mini_roman_iter (- current 9) (- number\
    \ 9) (append result '(\"ix\"))))\n          ((> number 5) (int_to_mini_roman_iter\
    \ (- current 5) (- number 5) (append result '(\"v\"))))\n          ((> number\
    \ 4) (int_to_mini_roman_iter (- current 4) (- number 4) (append result '(\"iv\"\
    ))))\n          ((> number 1) (int_to_mini_roman_iter (- current 1) (- number\
    \ 1) (append result '(\"i\"))))))\n  (int_to_mini_roman_iter number number '()))\n",
  "  (cond\n    [(<= number 0) (error \"Please enter a positive integer\")]\n    [(>\
    \ number 1000) (error \"Please enter an integer less than or equal to 1000\")]\n\
    \    [else\n     (apply string-append (do-int-to-mini-roman number))]))\n", " \
    \ ;; Roman numeral symbols for 1, 5, 10, 50, 100, 500, and 1000\n  (define symbols\
    \ '(I V X L C D M))\n  ;; Roman numerals for 1, 2, 3, 4, 5, 6, 7, 8, 9\n  (define\
    \ numerals (map list '(I II III IV V VI VII VIII IX) '(X XX XXX XL L LX LXX LXXX\
    \ XC) '(C CC CCC CD D DC DCC DCCC CM)))\n  ;; Roman numeral conversion\n  (define\
    \ (convert position)\n    (cond\n      ;; 1, 2, 3 -> I, II, III\n      ((<= 0\
    \ position 2) (list-ref numerals position))\n      ;; 4 -> IV\n      ((= 3 position)\
    \ (list-ref numerals position))\n      ;; 5 -> V\n      ((= 4 position) (list-ref\
    \ symbols position))\n      ;; 6, 7, 8 -> VI, VII, VIII\n      ((<= 5 position\
    \ 7) (string-append (list-ref symbols position) (list-ref numerals (- position\
    \ 5))))\n      ;; 9 -> IX\n      ((= 8 position) (list-ref numerals position))))\n\
    \  ;; Call convert with number's last digit\n  (convert (modulo number 10)))\n",
  "  (local [(define-values (number n1 n5 n10 n50 n100 n500 n1000)\n             \
    \ (values number (string-ref \"ivx\" 1) (string-ref \"ivx\" 2)\n             \
    \         (string-ref \"ivx\" 3) (string-ref \"cdl\" 2)\n                    \
    \  (string-ref \"cdl\" 3) (string-ref \"mcd\" 2)\n                      (string-ref\
    \ \"mcd\" 3)))\n          (define (integer->roman-helper n)\n            (cond\
    \ [(zero? n) \"\"]\n                  [(= 1 n) (string n1)]\n                \
    \  [(= 2 n) (string n1 n1)]\n                  [(= 3 n) (string n1 n1 n1)]\n \
    \                 [(= 4 n) (string n1 n5)]\n                  [(= 5 n) (string\
    \ n5)]\n                  [(= 6 n) (string n5 n1)]\n                  [(= 7 n)\
    \ (string n5 n1 n1)]\n                  [(= 8 n) (string n5 n1 n1 n1)]\n     \
    \             [(= 9 n) (string n1 n10)]))\n          (define (string-&gt;list\
    \ s)\n            (if (empty? s)\n                '()\n                (cons (first\
    \ s) (string-&gt;list (rest s)))))\n          (define (list-&gt;string l)\n  \
    \          (cond [(empty? l) \"\"]\n                  [else (string (first l)\
    \ (list-&gt;string (rest l)))]))]\n    (local [(define-values (thousands hundreds\
    \ tens ones)\n                (values (modulo number 1000)\n                 \
    \       (modulo (quotient number 1000) 100)\n                        (modulo (quotient\
    \ number 100) 10)\n                        (modulo number 10)))\n            (define\
    \ (string-to-lower s)\n              (local [(define (string-to-lower-helper s)\n\
    \                        (if (empty? s)\n                            '()\n   \
    \                         (cons (char-downcase (first s))\n                  \
    \                (string-to-lower-helper (rest s)))))\n                      \
    \ (define (list-to-string l)\n                         (cond [(empty? l) \"",
  "  (define (get-symbol num base)\n    (if (= num 1) (list (list (car base) 1))\n\
    \        (if (= num 2) (list (list (car base) 2))\n            (if (= num 3) (list\
    \ (list (car base) 3))\n                (if (= num 4) (list (list (car base) 1)\
    \ (list (cadr base) 1))\n                    (if (= num 5) (list (list (cadr base)\
    \ 1))\n                        (if (<= num 8) (list (list (cadr base) 1) (list\
    \ (car base) (- num 5)))\n                            (if (= num 9) (list (list\
    \ (car base) 1) (list (caddr base) 1))\n                                (list)))))))))\n\
    \  (define (roman-sub n)\n    (if (= n 1) (list 'i 1)\n        (if (= n 2) (list\
    \ 'ii 2)\n            (if (= n 3) (list 'iii 3)\n                (if (= n 4) (list\
    \ 'iv 4)\n                    (if (= n 5) (list 'v 5)\n                      \
    \  (if (= n 6) (list 'vi 6)\n                            (if (= n 7) (list 'vii\
    \ 7)\n                                (if (= n 8) (list 'viii 8)\n           \
    \                         (if (= n 9) (list 'ix 9)\n                         \
    \               (list)))))))))))\n  (define (roman-subsub n)\n    (if (= n 10)\
    \ (list 'x 10)\n        (if (= n 20) (list 'xx 20)\n            (if (= n 30) (list\
    \ 'xxx 30)\n                (if (= n 40) (list 'xl 40)\n                    (if\
    \ (= n 50) (list 'l 50)\n                        (if (= n 60) (list 'lx 60)\n\
    \                            (if (= n 70) (list 'lxx 70)\n                   \
    \             (if (= n 80) (list 'lxxx 80)\n                                 \
    \   (if (= n 90) (list 'xc 90)\n                                        (list)))))))))))\n\
    \  (define (roman-subsubsub n)\n    (if (= n 100) (list 'c 100)\n        (if (=\
    \ n 200", "  (local [(define (int_to_mini_roman_iter number result-list)\n   \
    \         (cond\n              [(= number 0) (list->string (reverse result-list))]\n\
    \              [(<= number 3) (int_to_mini_roman_iter (- number 1) (cons #\\i\
    \ result-list))]\n              [(<= number 5) (cons #\\v (int_to_mini_roman_iter\
    \ (- number 5) result-list))]\n              [(<= number 8) (int_to_mini_roman_iter\
    \ (- number 1) (cons #\\i result-list))]\n              [(<= number 10) (cons\
    \ #\\x (int_to_mini_roman_iter (- number 10) result-list))]\n              [(<=\
    \ number 39) (cons #\\x (int_to_mini_roman_iter (- number 10) result-list))]\n\
    \              [(<= number 50) (cons #\\l (int_to_mini_roman_iter (- number 50)\
    \ result-list))]\n              [(<= number 89) (cons #\\l (int_to_mini_roman_iter\
    \ (- number 50) result-list))]\n              [(<= number 100) (cons #\\c (int_to_mini_roman_iter\
    \ (- number 100) result-list))]\n              [(<= number 399) (cons #\\c (int_to_mini_roman_iter\
    \ (- number 100) result-list))]\n              [(<= number 500) (cons #\\d (int_to_mini_roman_iter\
    \ (- number 500) result-list))]\n              [(<= number 899) (cons #\\d (int_to_mini_roman_iter\
    \ (- number 500) result-list))]\n              [(<= number 1000) (cons #\\m (int_to_mini_roman_iter\
    \ (- number 1000) result-list))]))]\n    (int_to_mini_roman_iter number (list))))\n",
  "  (let ([ones (digit_to_symbol (modulo number 10) (list \"i\" \"v\" \"x\"))]\n\
    \        [tens (digit_to_symbol (modulo (quotient number 10) 10) (list \"x\" \"\
    l\" \"c\"))]\n        [hundreds (digit_to_symbol (modulo (quotient number 100)\
    \ 10) (list \"c\" \"d\" \"m\"))]\n        [thousands (digit_to_symbol (modulo\
    \ (quotient number 1000) 10) (list \"m\" \"z\" \"z\"))])\n    (string-join (list\
    \ thousands hundreds tens ones) \"\")))\n", "  (define (divide-by-1000 n)\n  \
    \  (if (> n 1000)\n        (divide-by-1000 (sub1 n))\n        n))\n  (define (calculate-thousands\
    \ n)\n    (let loop ([ans \"\"] [n (divide-by-1000 n)])\n      (if (= n 1000)\n\
    \          (string-append ans \"m\")\n          (loop ans (sub1 n)))))\n  (define\
    \ (divide-by-100 n)\n    (if (> n 100)\n        (divide-by-100 (sub1 n))\n   \
    \     n))\n  (define (calculate-hundreds n)\n    (let loop ([ans \"\"] [n (divide-by-100\
    \ n)])\n      (if (= n 100)\n          (string-append ans \"c\")\n          (loop\
    \ ans (sub1 n)))))\n  (define (divide-by-10 n)\n    (if (> n 10)\n        (divide-by-10\
    \ (sub1 n))\n        n))\n  (define (calculate-tens n)\n    (let loop ([ans \"\
    \"] [n (divide-by-10 n)])\n      (if (= n 10)\n          (string-append ans \"\
    x\")\n          (loop ans (sub1 n)))))\n  (define (calculate-ones n)\n    (let\
    \ loop ([ans \"\"] [n n])\n      (if (= n 1)\n          (string-append ans \"\
    i\")\n          (loop ans (sub1 n)))))\n  (string-append (calculate-thousands\
    \ number)\n                (calculate-hundreds (sub1 (divide-by-1000 number)))\n\
    \                (calculate-tens (sub1 (divide-by-100 (sub1 (divide-by-1000 number)))))\n\
    \                (calculate-ones (sub1 (divide-by-10 (sub1 (divide-by-100 (sub1\
    \ (divide-by-1000 number))))))))\n</code>\nYes it works, but it is too long and\
    \ complex.\nIs there a simpler way to implement it?\nMay be using a library?\n\
    \n\nA:\n\nThe following function", "  (let ((conversions '((1000 . \"m\")\n  \
    \                     (900 . \"cm\")\n                       (500 . \"d\")\n \
    \                      (400 . \"cd\")\n                       (100 . \"c\")\n\
    \                       (90 . \"xc\")\n                       (50 . \"l\")\n \
    \                      (40 . \"xl\")\n                       (10 . \"x\")\n  \
    \                     (9 . \"ix\")\n                       (5 . \"v\")\n     \
    \                  (4 . \"iv\")\n                       (1 . \"i\"))))\n    (define\
    \ (iter conversions n result)\n      (if (empty? conversions)\n          result\n\
    \          (if (>= n (first (first conversions)))\n              (iter (rest conversions)\
    \ (- n (first (first conversions))) (string-append result (second (first conversions))))\n\
    \              (iter (rest conversions) n result))))\n    (if (> number 1000)\n\
    \        (error \"Restriction: num <= 1000\"\n               number)\n       \
    \ (iter conversions number \"\"))))", "  (define (int_to_mini_roman/helper number-left\
    \ roman)\n    (if (= number-left 0)\n        roman\n        (let ((digit (modulo\
    \ number-left 10)))\n          (if (<= digit 0)\n              roman\n       \
    \       (int_to_mini_roman/helper\n               (quotient number-left 10)\n\
    \               (string-append\n                (cond ((= digit 9) \"ix\")\n \
    \                     ((= digit 8) \"viii\")\n                      ((= digit\
    \ 7) \"vii\")\n                      ((= digit 6) \"vi\")\n                  \
    \    ((= digit 5) \"v\")\n                      ((= digit 4) \"iv\")\n       \
    \               ((= digit 3) \"iii\")\n                      ((= digit 2) \"ii\"\
    )\n                      ((= digit 1) \"i\"))\n                roman))))))\n \
    \ (string-downcase (int_to_mini_roman/helper number \"\")))", "  (cond ((<= number\
    \ 1000)\n         (let ([remainder (modulo number 10)])\n           (string-append\n\
    \            (cond\n              [(>= number 100) (concat \"c\" (make-string\
    \ (/ (/ number 100) 5) \"d\"))]\n              [(>= number 10) (concat \"x\" (make-string\
    \ (/ (/ number 10) 5) \"l\"))]\n              [else (make-string (/ number 5)\
    \ \"v\")])\n            (cond\n              [(>= remainder 9) \"ix\"]\n     \
    \         [(>= remainder 5) (string-append \"v\" (make-string (- remainder 5)\
    \ \"i\"))]\n              [(= remainder 4) \"iv\"]\n              [else (make-string\
    \ remainder \"i\")]))))))\n", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number\
    \ 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 90) \"xc\"]\n    [(= number 50) \"l\"]\n\
    \    [(= number 40) \"xl\"]\n    [(= number 10) \"x\"]\n    [(= number 9) \"ix\"\
    ]\n    [(= number 5) \"v\"]\n    [(= number 4) \"iv\"]\n    [(= number 1) \"i\"\
    ]\n    [(= number 0) \"\"]\n    [else\n     (cons (int_to_mini_roman (- number\
    \ (modulo number 10)))\n           (int_to_mini_roman (modulo number 10)))]))\n\
    ```\n\n#### Test-Driven Development\n##### Test-Driven Development: Three Rules\n\
    ##### Test-Driven Development: Test Functions\n\n```racket\n#lang racket\n", " \
    \ (define numerals\n    (list (list 'M 1000)\n          (list 'D 500)\n      \
    \    (list 'C 100)\n          (list 'L 50)\n          (list 'X 10)\n         \
    \ (list 'V 5)\n          (list 'I 1)))\n  (define (convert remaining-number)\n\
    \    (define (get-largest-numeral-pair)\n      (define (get-lower-bound index)\n\
    \        (cond ((< index (length numerals))\n               (cadr (list-ref numerals\
    \ index)))\n              (else -1)))\n      (define (loop numeral-pairs index)\n\
    \        (cond ((<= (get-lower-bound index) remaining-number)\n              \
    \ (list-ref numeral-pairs index))\n              (else (loop numeral-pairs (+\
    \ index 1)))))\n      (loop numerals 0))\n    (define (recurse remaining-number)\n\
    \      (cond ((= remaining-number 0)\n             '())\n            (else (cons\
    \ (get-largest-numeral-pair)\n                        (recurse (- remaining-number\
    \ (cadr (get-largest-numeral-pair))))))))\n    (build-string (recurse remaining-number)))\n\
    \  (string-downcase (convert number)))\n", "  (define mini-roman-numeral-digits\n\
    \    '(0 \"\" iv ix l xc ccd cm))\n  (define (iter-to-mini-roman number numeral-list)\n\
    \    (if (< number 1)\n        (substring (list->string numeral-list) 0 -1)\n\
    \        (if (<= number 3)\n            (append numeral-list (list (list-ref mini-roman-numeral-digits\
    \ 1)))\n            (let ((remainder (% number 10)))\n              (iter-to-mini-roman\
    \ (quotient number 10)\n                                  (append numeral-list\n\
    \                                          (list (list-ref mini-roman-numeral-digits\
    \ (- remainder 1)))))))))\n  (iter-to-mini-roman number (list)))\n```\n\n```\n\
    #lang racket\n", "  (define (int_to_roman number)\n    (define (int_to_roman_helper\
    \ number working-string)\n      (cond\n        [(zero? number) (string-append\
    \ working-string)]\n        [(< number 4) (int_to_roman_helper (- number 1) (string-append\
    \ working-string \"I\"))]\n        [(= number 4) (string-append working-string\
    \ \"IV\")]\n        [(< number 9) (int_to_roman_helper (- number 5) (string-append\
    \ working-string \"V\"))]\n        [(= number 9) (string-append working-string\
    \ \"IX\")]\n        [(< number 40) (int_to_roman_helper (- number 10) (string-append\
    \ working-string \"X\"))]\n        [(< number 50) (int_to_roman_helper (- number\
    \ 40) (string-append working-string \"XL\"))]\n        [(< number 90) (int_to_roman_helper\
    \ (- number 50) (string-append working-string \"L\"))]\n        [(< number 100)\
    \ (int_to_roman_helper (- number 90) (string-append working-string \"XC\"))]\n\
    \        [(< number 400) (int_to_roman_helper (- number 100) (string-append working-string\
    \ \"C\"))]\n        [(< number 500) (int_to_roman_helper (- number 400) (string-append\
    \ working-string \"CD\"))]\n        [(< number 900) (int_to_roman_helper (- number\
    \ 500) (string-append working-string \"D\"))]\n        [(< number 1000) (int_to_roman_helper\
    \ (- number 900) (string-append working-string \"CM\"))]\n        [(= number 1000)\
    \ (string-append working-string \"M\")]))\n    (int_to_roman_helper number \"\"\
    ))\n  (string-lowercase (int_to_roman number)))\n", "  (define (int_to_mini_roman'\
    \ number result)\n    (cond\n      [(= number 0) result]\n      [(= number 1000)\
    \ (string-append result \"m\")]\n      [(= number 900) (string-append result \"\
    cm\")]\n      [(= number 500) (string-append result \"d\")]\n      [(= number\
    \ 400) (string-append result \"cd\")]\n      [(= number 100) (string-append result\
    \ \"c\")]\n      [(= number 90) (string-append result \"xc\")]\n      [(= number\
    \ 50) (string-append result \"l\")]\n      [(= number 40) (string-append result\
    \ \"xl\")]\n      [(= number 10) (string-append result \"x\")]\n      [(= number\
    \ 9) (string-append result \"ix\")]\n      [(= number 5) (string-append result\
    \ \"v\")]\n      [(= number 4) (string-append result \"iv\")]\n      [(= number\
    \ 1) (string-append result \"i\")]\n      [else (if (< number 500)\n         \
    \      (int_to_mini_roman' (- number 100) (string-append result \"c\"))\n    \
    \           (int_to_mini_roman' (- number 500) (string-append result \"d\")))]))\n\
    \  (int_to_mini_roman' number \"\"))\n", "  (define (int_to_roman n)\n    (cond\n\
    \      [(= n 1000) 'M]\n      [(= n 900) 'CM]\n      [(= n 500) 'D]\n      [(=\
    \ n 400) 'CD]\n      [(= n 100) 'C]\n      [(= n 90) 'XC]\n      [(= n 50) 'L]\n\
    \      [(= n 40) 'XL]\n      [(= n 10) 'X]\n      [(= n 9) 'IX]\n      [(= n 5)\
    \ 'V]\n      [(= n 4) 'IV]\n      [(= n 1) 'I]\n      [(< n 0) ']\n      [else\
    \ (append (int_to_roman (- n (/ n 10) * 10)) (int_to_roman (modulo n 10)))]))\n\
    \  (string-downcase (string-join (int_to_roman number) \"\")))", "  (cond\n  \
    \  [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number\
    \ 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n  \
    \  [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"\
    xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(=\
    \ number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n\
    \    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100)\
    \ \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number\
    \ 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(=\
    \ number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"\
    cm\"]\n    [(= number 1000) \"m\"]\n    [else\n     (if (and (<= number 1000)\
    \ (> number 100))\n         (string-append (int_to_mini_roman (/ number 100))\
    \ \"c\")\n         (if (and (<= number 100) (> number 10))\n             (string-append\
    \ (int_to_mini_roman (/ number 10)) \"x\")\n             (if (<= number 10)\n\
    \                 (int_to_mini_roman (/ number 1))\n                 (string-append\
    \ (int_to_mini_roman (/ number 100)) \"", "  (let ([converter (string-join\n \
    \                   (for/list ([num (in-range (ceiling (log number)) -1 -1)])\n\
    \                      (cond\n                        [(>= number (expt 10 num))\n\
    \                         (cond\n                           [(>= number (* 5 (expt\
    \ 10 num)))\n                            (string-append (if (>= number (* 9 (expt\
    \ 10 num))) \"i\" \"v\")\n                                           (substring\
    \ \"x\" num (- num))))\n                           [else\n                   \
    \         (string-append (make-string (/ number (expt 10 num)) #\\i)\n       \
    \                                    (substring \"x\" num (- num)))])]\n     \
    \                   [else (substring \"x\" num (- num))])))))\n    (string-downcase\
    \ converter)))\n", "  (define (helper number roman)\n    (cond\n      ((= number\
    \ 0) roman)\n      ((= number 1000) (string-append roman \"m\"))\n      ((= number\
    \ 900) (string-append roman \"cm\"))\n      ((= number 500) (string-append roman\
    \ \"d\"))\n      ((= number 400) (string-append roman \"cd\"))\n      ((= number\
    \ 100) (string-append roman \"c\"))\n      ((= number 90) (string-append roman\
    \ \"xc\"))\n      ((= number 50) (string-append roman \"l\"))\n      ((= number\
    \ 40) (string-append roman \"xl\"))\n      ((= number 10) (string-append roman\
    \ \"x\"))\n      ((= number 9) (string-append roman \"ix\"))\n      ((= number\
    \ 5) (string-append roman \"v\"))\n      ((= number 4) (string-append roman \"\
    iv\"))\n      ((= number 1) (string-append roman \"i\"))\n      ((> number 1000)\
    \ (helper (- number 1000) (string-append roman \"m\")))\n      ((> number 900)\
    \ (helper (- number 900) (string-append roman \"cm\")))\n      ((> number 500)\
    \ (helper (- number 500) (string-append roman \"d\")))\n      ((> number 400)\
    \ (helper (- number 400) (string-append roman \"cd\")))\n      ((> number 100)\
    \ (helper (- number 100) (string-append roman \"c\")))\n      ((> number 90) (helper\
    \ (- number 90) (string-append roman \"xc\")))\n      ((> number 50) (helper (-\
    \ number 50) (string-append roman \"l\")))\n      ((> number 40) (helper (- number\
    \ 40) (string-append roman \"xl\")))\n      ((> number 10) (helper (- number 10)\
    \ (string-append roman \"x\")))\n      ((> number 9) (helper (- number 9) (string-append\
    \ roman \"ix\")))\n      ((> number 5) (helper (- number 5) (string-append roman\
    \ \"v\")))\n      ((> number 4) (helper (- number 4", "  (define (is-divisible?\
    \ x d) (= (modulo x d) 0))\n  (define (compute-digit digit base)\n    (cond\n\
    \      [(= digit 0) \"\" ]\n      [(= digit 1) (string-append \"i\" (compute-digit\
    \ (- digit 1) base))]\n      [(= digit 2) (string-append \"ii\" (compute-digit\
    \ (- digit 2) base))]\n      [(= digit 3) (string-append \"iii\" (compute-digit\
    \ (- digit 3) base))]\n      [(= digit 4) (string-append \"iv\" (compute-digit\
    \ (- digit 4) base))]\n      [(= digit 5) (string-append \"v\" (compute-digit\
    \ (- digit 5) base))]\n      [(= digit 6) (string-append \"vi\" (compute-digit\
    \ (- digit 6) base))]\n      [(= digit 7) (string-append \"vii\" (compute-digit\
    \ (- digit 7) base))]\n      [(= digit 8) (string-append \"viii\" (compute-digit\
    \ (- digit 8) base))]\n      [(= digit 9) (string-append \"ix\" (compute-digit\
    \ (- digit 9) base))]\n      [(= digit 10) (string-append \"x\" (compute-digit\
    \ (- digit 10) base))]\n      [(= digit 11) (string-append \"xi\" (compute-digit\
    \ (- digit 11) base))]\n      [(= digit 12) (string-append \"xii\" (compute-digit\
    \ (- digit 12) base))]\n      [(= digit 13) (string-append \"xiii\" (compute-digit\
    \ (- digit 13) base))]\n      [(= digit 14) (string-append \"xiv\" (compute-digit\
    \ (- digit 14) base))]\n      [(= digit 15) (string-append \"xv\" (compute-digit\
    \ (- digit 15) base))]\n      [(= digit 16) (string-append \"xvi\" (compute-digit\
    \ (- digit 16) base))]\n      [(= digit 17) (string-append \"xvii\" (compute-digit\
    \ (- digit 17) base))]\n      [(= digit 18) (string-append \"xv", "  (string-downcase\
    \ (int_to_roman number)))\n", "  (define (convert num base)\n    (cond\n     \
    \ ((= num 0) (list))\n      ((>= num base) (cons (integer->char (integer-floor\
    \ (/ num base))) (convert (- num (* base base)) base)))\n      (else (convert\
    \ num (quotient base 10)))))\n  (regexp-replace* #rx\"[IVXLCDM]{2,}\" (string-join\
    \ (convert number 100) \"\") #:replace \"XV\"))\n", "  (define (make-string number\
    \ s)\n    (if (> number 0)\n        (string-append s (make-string (- number 1)\
    \ s))\n        \"\"))\n  (if (= number 1000) (string-append \"m\" (int_to_mini_roman\
    \ (- number 1000)))\n      (if (= number 900) (string-append \"cm\" (int_to_mini_roman\
    \ (- number 900)))\n          (if (= number 500) (string-append \"d\" (int_to_mini_roman\
    \ (- number 500)))\n              (if (= number 400) (string-append \"cd\" (int_to_mini_roman\
    \ (- number 400)))\n                  (if (= number 100) (string-append \"c\"\
    \ (int_to_mini_roman (- number 100)))\n                      (if (= number 90)\
    \ (string-append \"xc\" (int_to_mini_roman (- number 90)))\n                 \
    \         (if (= number 50) (string-append \"l\" (int_to_mini_roman (- number\
    \ 50)))\n                              (if (= number 40) (string-append \"xl\"\
    \ (int_to_mini_roman (- number 40)))\n                                  (if (=\
    \ number 10) (string-append \"x\" (int_to_mini_roman (- number 10)))\n       \
    \                               (if (= number 9) (string-append \"ix\" (int_to_mini_roman\
    \ (- number 9)))\n                                          (if (= number 5) (string-append\
    \ \"v\" (int_to_mini_roman (- number 5)))\n                                  \
    \            (if (= number 4) (string-append \"iv\" (int_to_mini_roman (- number\
    \ 4)))\n                                                  (if (= number 1) (string-append\
    \ \"i\" (int_to_mini_roman (- number 1)))\n                                  \
    \                    (string-append \"\" (int_to_mini_roman (- number 1))))))))))))))))))))\n",
  "  (define (int_to_mini_roman-rec number)\n    (let* ([number (modulo number 1000)]\n\
    \           [ones-digit (modulo number 10)]\n           [tens-digit (modulo (quotient\
    \ number 10) 10)]\n           [hundreds-digit (modulo (quotient number 100) 10)])\n\
    \      (define (one_to_symbol n)\n        (cond\n          [(= n 1) \"i\"]\n \
    \         [(= n 2) \"ii\"]\n          [(= n 3) \"iii\"]\n          [(= n 4) \"\
    iv\"]\n          [(= n 5) \"v\"]\n          [(= n 6) \"vi\"]\n          [(= n\
    \ 7) \"vii\"]\n          [(= n 8) \"viii\"]\n          [(= n 9) \"ix\"]))\n  \
    \    (define (ten_to_symbol n)\n        (cond\n          [(= n 1) \"x\"]\n   \
    \       [(= n 2) \"xx\"]\n          [(= n 3) \"xxx\"]\n          [(= n 4) \"xl\"\
    ]\n          [(= n 5) \"l\"]\n          [(= n 6) \"lx\"]\n          [(= n 7) \"\
    lxx\"]\n          [(= n 8) \"lxxx\"]\n          [(= n 9) \"xc\"]))\n      (define\
    \ (hundred_to_symbol n)\n        (cond\n          [(= n 1) \"c\"]\n          [(=\
    \ n 2) \"cc\"]\n          [(= n 3) \"ccc\"]\n          [(= n 4) \"cd\"]\n    \
    \      [(= n 5) \"d\"]\n          [(= n 6) \"dc\"]\n          [(= n 7) \"dcc\"\
    ]\n          [(= n 8) \"dccc\"]\n          [(= n 9) \"cm\"]))\n      (cond\n \
    \       [(= number 0) \"\"]\n        [(= number 0) \"\"]\n        [(and (= number\
    \ 0) (= ones-digit 0) (= tens-digit 0)) \"\"]\n        [(= ones-digit 0) (ten_to_symbol\
    \ tens-digit)]\n        [(= tens-digit 0) (one_to_symbol ones-digit)]\n      \
    \  [(= hundreds-digit 0) (string-append", "  (define (int_to_mini_roman-helper\
    \ number out-list)\n    (cond [(= number 0) out-list]\n          [(and (<= 1 number)\
    \ (<= number 3))\n           (int_to_mini_roman-helper (- number 1) (cons \"i\"\
    \ out-list))]\n          [(= number 4) (cons \"iv\" out-list)]\n          [(and\
    \ (<= 5 number) (<= number 8))\n           (int_to_mini_roman-helper (- number\
    \ 5) (cons \"v\" out-list))]\n          [(= number 9) (cons \"ix\" out-list)]\n\
    \          [(and (<= 10 number) (<= number 39))\n           (int_to_mini_roman-helper\
    \ (- number 10) (cons \"x\" out-list))]\n          [(and (<= 40 number) (<= number\
    \ 49))\n           (int_to_mini_roman-helper (- number 40) (cons \"xl\" out-list))]\n\
    \          [(and (<= 50 number) (<= number 89))\n           (int_to_mini_roman-helper\
    \ (- number 50) (cons \"l\" out-list))]\n          [(and (<= 90 number) (<= number\
    \ 99))\n           (int_to_mini_roman-helper (- number 90) (cons \"xc\" out-list))]\n\
    \          [(and (<= 100 number) (<= number 399))\n           (int_to_mini_roman-helper\
    \ (- number 100) (cons \"c\" out-list))]\n          [(and (<= 400 number) (<=\
    \ number 499))\n           (int_to_mini_roman-helper (- number 400) (cons \"cd\"\
    \ out-list))]\n          [(and (<= 500 number) (<= number 899))\n           (int_to_mini_roman-helper\
    \ (- number 500) (cons \"d\" out-list))]\n          [(and (<= 900 number) (<=\
    \ number 999))\n           (int_to_mini_roman-helper (- number 900) (cons \"cm\"\
    \ out-list))]\n          [(and (<= 1000 number) (<= number 3999))\n          \
    \ (int_to_mini_roman-helper (- number 1000) (cons \"", "  (define (convert number)\n\
    \    (cond ((= number 0) \"\")\n          ((= number 1000) \"m\")\n          ((=\
    \ number 900) \"cm\")\n          ((= number 500) \"d\")\n          ((= number\
    \ 400) \"cd\")\n          ((= number 100) \"c\")\n          ((= number 90) \"\
    xc\")\n          ((= number 50) \"l\")\n          ((= number 40) \"xl\")\n   \
    \       ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n          ((=\
    \ number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((= number 1) \"\
    i\")))\n  (if (= number 0) \"\"\n      (convert (modulo number 10))\n      (int_to_mini_roman\
    \ (quotient number 10))))\n", "  (define (go n acc)\n    (cond\n      ((= n 0)\
    \ acc)\n      ((= n 1000) (go (- n 1000) (string-append acc \"m\")))\n      ((=\
    \ n 900) (go (- n 900) (string-append acc \"cm\")))\n      ((= n 500) (go (- n\
    \ 500) (string-append acc \"d\")))\n      ((= n 400) (go (- n 400) (string-append\
    \ acc \"cd\")))\n      ((= n 100) (go (- n 100) (string-append acc \"c\")))\n\
    \      ((= n 90) (go (- n 90) (string-append acc \"xc\")))\n      ((= n 50) (go\
    \ (- n 50) (string-append acc \"l\")))\n      ((= n 40) (go (- n 40) (string-append\
    \ acc \"xl\")))\n      ((= n 10) (go (- n 10) (string-append acc \"x\")))\n  \
    \    ((= n 9) (go (- n 9) (string-append acc \"ix\")))\n      ((= n 5) (go (-\
    \ n 5) (string-append acc \"v\")))\n      ((= n 4) (go (- n 4) (string-append\
    \ acc \"iv\")))\n      ((= n 1) (go (- n 1) (string-append acc \"i\")))\n    \
    \  (else \"error\")))\n  (go number \"\"))\n", "  (define (convert-digit index)\n\
    \    (let* ([ones   (modulo number 10)]\n           [tens   (modulo (quotient\
    \ number 10) 10)]\n           [hundreds (modulo (quotient number 100) 10)]\n \
    \          [thousands (modulo (quotient number 1000) 10)])\n      (cond [(eq?\
    \ index 1) ones]\n            [(eq? index 2) tens]\n            [(eq? index 3)\
    \ hundreds]\n            [(eq? index 4) thousands])))\n  (define (get-place-value-str\
    \ digit index)\n    (let* ([next-digit (convert-digit (add1 index))]\n       \
    \    [roman-mapping '(0 \"\" i \"iv\" v \"ix\" x \"xl\" l \"xc\" c \"cd\" d \"\
    cm\" m \"\")]\n           [roman-digits (list-ref roman-mapping (add1 (quotient\
    \ digit 10)))]\n           [prefix (first roman-digits)]\n           [suffix (second\
    \ roman-digits)])\n      (cond [(or (and (not (eq? 0 next-digit)) (eq? next-digit\
    \ 5))\n                 (and (eq? 5 next-digit) (eq? 0 prefix)))\n           \
    \  (string-append suffix\n                            (get-place-value-str next-digit\
    \ (add1 index)))]\n            [(and (not (eq? 0 next-digit)) (eq? next-digit\
    \ 1))\n             (string-append prefix (get-place-value-str next-digit (add1\
    \ index)))]\n            [(>= next-digit 1)\n             (string-append prefix\
    \ (get-place-value-str next-digit (add1 index)))]\n            [else (string-append\
    \ prefix suffix)])))\n  (get-place-value-str (convert-digit 1) 1))\n", "  (define\
    \ (recur number roman)\n    (match number\n      [(and 1 ... 1000)\n       (cond\
    \ [(>= number 900)\n              (recur (- number 900) (string-append roman \"\
    cm\"))]\n             [(>= number 500)\n              (recur (- number 500) (string-append\
    \ roman \"d\"))]\n             [(>= number 400)\n              (recur (- number\
    \ 400) (string-append roman \"cd\"))]\n             [(>= number 100)\n       \
    \       (recur (- number 100) (string-append roman \"c\"))]\n             [(>=\
    \ number 90)\n              (recur (- number 90) (string-append roman \"xc\"))]\n\
    \             [(>= number 50)\n              (recur (- number 50) (string-append\
    \ roman \"l\"))]\n             [(>= number 40)\n              (recur (- number\
    \ 40) (string-append roman \"xl\"))]\n             [(>= number 10)\n         \
    \     (recur (- number 10) (string-append roman \"x\"))]\n             [(>= number\
    \ 9)\n              (recur (- number 9) (string-append roman \"ix\"))]\n     \
    \        [(>= number 5)\n              (recur (- number 5) (string-append roman\
    \ \"v\"))]\n             [(>= number 4)\n              (recur (- number 4) (string-append\
    \ roman \"iv\"))]\n             [(>= number 1)\n              (recur (- number\
    \ 1) (string-append roman \"i\"))])]\n      [0\n       (string-downcase roman)]))\n\
    \  (recur number \"\"))\n```\n\n## Unit Testing with Racket\n\nWe'll use the `rackunit`\
    \ package to perform unit testing of our code.\n\n* https://docs.racket-lang.org/rackunit/\n\
    \nInstall the package with:\n\n```bash\nraco pkg install rackunit\n```\n\nLet's\
    \ take a look at some examples:\n\n* https://github.com/fourier/introcs-racket/blob/master/tests/tests-001.rkt\n\
    * https://github.com/fourier/introcs-racket/blob/master", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) \"\"]\n      [(= number 1) \"i\"]\n\
    \      [(= number 2) \"ii\"]\n      [(= number 3) \"iii\"]\n      [(= number 4)\
    \ \"iv\"]\n      [(= number 5) \"v\"]\n      [(= number 6) \"vi\"]\n      [(=\
    \ number 7) \"vii\"]\n      [(= number 8) \"viii\"]\n      [(= number 9) \"ix\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 50) \"l\"]\n      [(= number 90) \"xc\"]\n      [(= number 100) \"c\"]\n   \
    \   [(= number 400) \"cd\"]\n      [(= number 500) \"d\"]\n      [(= number 900)\
    \ \"cm\"]\n      [(= number 1000) \"m\"]\n      [(= number 2000) \"mm\"]\n   \
    \   [(= number 3000) \"mmm\"]\n      [else\n       (string-append\n        (int_to_mini_roman_helper\
    \ (/ number 10))\n        (int_to_mini_roman_helper (- number (* 10 (/ number\
    \ 10)))))]))\n  (string-downcase (int_to_mini_roman_helper number)))", "  (let\
    \ loop ((number number)\n             (result \"\"))\n    (cond\n      [(= number\
    \ 0) result]\n      [(>= number 1000) (loop (- number 1000) (string-append result\
    \ \"m\"))]\n      [(>= number 900) (loop (- number 900) (string-append result\
    \ \"cm\"))]\n      [(>= number 500) (loop (- number 500) (string-append result\
    \ \"d\"))]\n      [(>= number 400) (loop (- number 400) (string-append result\
    \ \"cd\"))]\n      [(>= number 100) (loop (- number 100) (string-append result\
    \ \"c\"))]\n      [(>= number 90) (loop (- number 90) (string-append result \"\
    xc\"))]\n      [(>= number 50) (loop (- number 50) (string-append result \"l\"\
    ))]\n      [(>= number 40) (loop (- number 40) (string-append result \"xl\"))]\n\
    \      [(>= number 10) (loop (- number 10) (string-append result \"x\"))]\n  \
    \    [(>= number 9) (loop (- number 9) (string-append result \"ix\"))]\n     \
    \ [(>= number 5) (loop (- number 5) (string-append result \"v\"))]\n      [(>=\
    \ number 4) (loop (- number 4) (string-append result \"iv\"))]\n      [(>= number\
    \ 1) (loop (- number 1) (string-append result \"i\"))])))\n", "  (define (f n)\n\
    \    (cond ((= n 0) '())\n          ((= n 1) '(i))\n          ((= n 2) '(i i))\n\
    \          ((= n 3) '(i i i))\n          ((= n 4) '(i v))\n          ((= n 5)\
    \ '(v))\n          ((= n 6) '(v i))\n          ((= n 7) '(v i i))\n          ((=\
    \ n 8) '(v i i i))\n          ((= n 9) '(i x))\n          ((= n 10) '(x))\n  \
    \        ((= n 20) '(x x))\n          ((= n 30) '(x x x))\n          ((= n 40)\
    \ '(x l))\n          ((= n 50) '(l))\n          ((= n 60) '(l x))\n          ((=\
    \ n 70) '(l x x))\n          ((= n 80) '(l x x x))\n          ((= n 90) '(x c))\n\
    \          ((= n 100) '(c))\n          ((= n 200) '(c c))\n          ((= n 300)\
    \ '(c c c))\n          ((= n 400) '(c d))\n          ((= n 500) '(d))\n      \
    \    ((= n 600) '(d c))\n          ((= n 700) '(d c c))\n          ((= n 800)\
    \ '(d c c c))\n          ((= n 900) '(c m))\n          ((= n 1000) '(m))\n   \
    \       ((< n 10) (append (f (/ n 1)) (f (modulo n 1))))\n          ((< n 100)\
    \ (append (f (/ n 10)) (f (modulo n 10))))\n          ((< n 1000) (append (f (/\
    \ n 100)) (f (modulo n 100))))\n          ((= n 1001) (append (f (/ n 1000)) (f\
    \ (modulo n 1000))))))\n  (string-join (map symbol->string (f number)) \"\"))\n",
  "  (cond ((<= number 1000) (digit_to_roman_string number 1000 'm))\n        ((<=\
    \ number 900) (digit_to_roman_string number 900 'c 'm))\n        ((<= number 500)\
    \ (digit_to_roman_string number 500 'd))\n        ((<= number 400) (digit_to_roman_string\
    \ number 400 'c 'd))\n        ((<= number 100) (digit_to_roman_string number 100\
    \ 'c))\n        ((<= number 90) (digit_to_roman_string number 90 'x 'c))\n   \
    \     ((<= number 50) (digit_to_roman_string number 50 'l))\n        ((<= number\
    \ 40) (digit_to_roman_string number 40 'x 'l))\n        ((<= number 10) (digit_to_roman_string\
    \ number 10 'x))\n        ((<= number 9) (digit_to_roman_string number 9 'i 'x))\n\
    \        ((<= number 5) (digit_to_roman_string number 5 'v))\n        ((<= number\
    \ 4) (digit_to_roman_string number 4 'i 'v))\n        ((<= number 1) (digit_to_roman_string\
    \ number 1 'i))))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"\
    ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5)\
    \ \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"\
    ]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16)\
    \ \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(=\
    \ number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 21) \"xxi\"\
    ]\n    [(= number 22) \"xxii\"]\n    [(= number 23) \"xxiii\"]\n    [(= number\
    \ 24) \"xxiv\"]\n    [(= number 25) \"xxv\"]\n    [(= number 26) \"xxvi\"]\n \
    \   [(= number 27) \"xxvii\"]\n    [(= number 28) \"xxviii\"]\n    [(= number\
    \ 29) \"xxix\"]\n    [(= number 30) \"xxx\"]\n    [(= number 31) \"xxxi\"]\n \
    \   [(= number 32) \"xxxii\"]\n    [(= number 33) \"xxxiii\"]\n    [(= number\
    \ 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"]\n    [(= number 36) \"xxxvi\"]\n\
    \    [(= number 37) \"xxxvii\"]\n    [(= number 38) \"xxxviii\"]\n    [(= number\
    \ 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n    [(= number 41) \"xli\"]\n  \
    \  [(= number 42) \"xlii\"]\n    [(= number 43) \"xliii\"]\n    [(= number 44)\
    \ \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(= number 46) \"xlvi\"]\n    [(=",
  "  (define (int_to_mini_roman_helper n m r o)\n    (cond ((and (zero? n) (null?\
    \ m)) \"\")\n          ((= 1 (car m)) (string-append (number->string (car n))\
    \ r))\n          ((> (car n) 5) (string-append r (number->string (car n) (- (car\
    \ n)) r)))\n          ((= 5 (car n)) (string-append r o))\n          ((> 5 (car\
    \ n)) (string-append r (number->string (car n) (- (car n)) r)))\n          ((<\
    \ 5 (car n)) (string-append o (number->string (car n) (- (car n)) r)))))\n  (int_to_mini_roman_helper\
    \ (list (modulo number 1000) (modulo number 100) (modulo number 10) (modulo number\
    \ 1))\n                             (list 1000 100 10 1)\n                   \
    \          (list \"m\" \"c\" \"x\" \"i\")\n                             (list\
    \ \"d\" \"l\" \"v\" \"x\")))\n", "  ;; if number is 1 or less, return empty string\n\
    \  (if (<= number 1)\n      \"\"\n      ;; recursively determine ones place, tens\
    \ place, and hundreds place\n      ;; of number\n      (define ones-place (modulo\
    \ number 10))\n      (define tens-place (modulo (quotient number 10) 10))\n  \
    \    (define hundreds-place (modulo (quotient number 100) 10))\n      ;; based\
    \ on these values, calculate numeral for ones place, tens place,\n      ;; and\
    \ hundreds place\n      (define (ones-numeral)\n        (cond\n          [(= ones-place\
    \ 1) \"i\"]\n          [(= ones-place 2) \"ii\"]\n          [(= ones-place 3)\
    \ \"iii\"]\n          [(= ones-place 4) \"iv\"]\n          [(= ones-place 5) \"\
    v\"]\n          [(= ones-place 6) \"vi\"]\n          [(= ones-place 7) \"vii\"\
    ]\n          [(= ones-place 8) \"viii\"]\n          [(= ones-place 9) \"ix\"]\n\
    \          [else \"\"]))\n      (define (tens-numeral)\n        (cond\n      \
    \    [(= tens-place 1) \"x\"]\n          [(= tens-place 2) \"xx\"]\n         \
    \ [(= tens-place 3) \"xxx\"]\n          [(= tens-place 4) \"xl\"]\n          [(=\
    \ tens-place 5) \"l\"]\n          [(= tens-place 6) \"lx\"]\n          [(= tens-place\
    \ 7) \"lxx\"]\n          [(= tens-place 8) \"lxxx\"]\n          [(= tens-place\
    \ 9) \"xc\"]\n          [else \"\"]))\n      (define (hundreds-numeral)\n    \
    \    (cond\n          [(= hundreds-place 1) \"c\"]\n          [(= hundreds-place\
    \ 2) \"cc\"]\n          [(= hundreds-place 3) \"ccc\"]\n          [(= hundreds-place\
    \ 4) \"cd\"]\n          [(= hundreds-place 5) \"d\"]\n          [(= hundreds-place\
    \ 6) \"dc\"]\n          [(= hundreds-place 7) \"dcc\"]\n          [(= hundreds-place\
    \ 8) \"dccc\"]\n          [(= hundreds-place 9) \"cm", "  (define (symbol-value\
    \ symbol)\n    (cond\n      [(string=? symbol \"i\") 1]\n      [(string=? symbol\
    \ \"v\") 5]\n      [(string=? symbol \"x\") 10]\n      [(string=? symbol \"l\"\
    ) 50]\n      [(string=? symbol \"c\") 100]\n      [(string=? symbol \"d\") 500]\n\
    \      [(string=? symbol \"m\") 1000]))\n  (define (int-to-symbol value)\n   \
    \ (cond\n      [(= value 1) \"i\"]\n      [(= value 5) \"v\"]\n      [(= value\
    \ 10) \"x\"]\n      [(= value 50) \"l\"]\n      [(= value 100) \"c\"]\n      [(=\
    \ value 500) \"d\"]\n      [(= value 1000) \"m\"]))\n  (define (int-to-symbols\
    \ value result)\n    (cond\n      [(= value 0) result]\n      [(= value 1) (append\
    \ result '(\"i\"))]\n      [(= value 5) (append result '(\"v\"))]\n      [(= value\
    \ 10) (append result '(\"x\"))]\n      [(= value 50) (append result '(\"l\"))]\n\
    \      [(= value 100) (append result '(\"c\"))]\n      [(= value 500) (append\
    \ result '(\"d\"))]\n      [(= value 1000) (append result '(\"m\"))]\n      [(>\
    \ value 100) (int-to-symbols (- value 100) (append result '(\"c\")))]\n      [(>\
    \ value 50) (int-to-symbols (- value 50) (append result '(\"l\")))]\n      [(>\
    \ value 10) (int-to-symbols (- value 10) (append result '(\"x\")))]\n      [(>\
    \ value 5) (int-to-symbols (- value 5) (append result '(\"v\")))]\n      [(> value\
    \ 1) (int-to-symbols (- value 1) (append result '(\"i\")))]))\n  (define (simplify-symbols\
    \ symbols)\n    (define (repeat-symbol symbol)\n      (cond\n        [(= (symbol-value\
    \ symbol) 1) (append (repeat-symbol symbol) '(\"i\"))", "  (define (helper number)\n\
    \    (cond [(= number 1000) 'm]\n          [(< number 1000) (cons 'c (helper (-\
    \ number 100)))]\n          [(= number 500) 'd]\n          [(< number 500) (cons\
    \ 'x (helper (- number 10)))]\n          [(= number 100) 'c]\n          [(< number\
    \ 100) (cons 'x (helper (- number 10)))]\n          [(= number 50) 'l]\n     \
    \     [(< number 50) (cons 'x (helper (- number 10)))]\n          [(= number 10)\
    \ 'x]\n          [(< number 10) (cons 'i (helper (- number 1)))]\n          [(=\
    \ number 5) 'v]\n          [(< number 5) (cons 'i (helper (- number 1)))]\n  \
    \        [(= number 1) 'i]\n          [(< number 1) '()]))\n  (string-downcase\
    \ (list->string (helper number))))\n", "  (define (int_to_roman number)\n    (let\
    \ ([roman_map\n           [\n            '(1000 m)\n            '(900 cm)\n  \
    \          '(500 d)\n            '(400 cd)\n            '(100 c)\n           \
    \ '(90 xc)\n            '(50 l)\n            '(40 xl)\n            '(10 x)\n \
    \           '(9 ix)\n            '(5  v)\n            '(4 iv)\n            '(1\
    \  i)\n            ]])\n      (let loop ([number number] [roman '()])\n      \
    \  (let ([result (find-decreasing-pair number roman_map)])\n          (if (not\
    \ result)\n              (list->string (reverse roman))\n              (loop (-\
    \ number (car result))\n                    (cons (cadr result) roman)))))))\n\
    \  (string-downcase (int_to_roman number)))\n", "  (define (int_to_mini_roman_helper\
    \ number roman-number-string)\n    (cond ((= number 0) roman-number-string)\n\
    \          ((< number 10) (int_to_mini_roman_helper (- number 1) (string-append\
    \ roman-number-string \"i\")))\n          ((< number 100) (int_to_mini_roman_helper\
    \ (- number 10) (string-append roman-number-string \"x\")))\n          ((< number\
    \ 1000) (int_to_mini_roman_helper (- number 100) (string-append roman-number-string\
    \ \"c\")))\n          ((= number 1000) (string-append roman-number-string \"m\"\
    ))))\n  (string-downcase (int_to_mini_roman_helper number \"\")))\n", "  (roman-number->string\
    \ (number->roman-number number)))\n", "  (cond [(= number 1)\n         \"i\"]\n\
    \        [(= number 2)\n         \"ii\"]\n        [(= number 3)\n         \"iii\"\
    ]\n        [(= number 4)\n         \"iv\"]\n        [(= number 5)\n         \"\
    v\"]\n        [(= number 6)\n         \"vi\"]\n        [(= number 7)\n       \
    \  \"vii\"]\n        [(= number 8)\n         \"viii\"]\n        [(= number 9)\n\
    \         \"ix\"]\n        [(= number 10)\n         \"x\"]\n        [(= number\
    \ 20)\n         \"xx\"]\n        [(= number 30)\n         \"xxx\"]\n        [(=\
    \ number 40)\n         \"xl\"]\n        [(= number 50)\n         \"l\"]\n    \
    \    [(= number 60)\n         \"lx\"]\n        [(= number 70)\n         \"lxx\"\
    ]\n        [(= number 80)\n         \"lxxx\"]\n        [(= number 90)\n      \
    \   \"xc\"]\n        [(= number 100)\n         \"c\"]\n        [(= number 200)\n\
    \         \"cc\"]\n        [(= number 300)\n         \"ccc\"]\n        [(= number\
    \ 400)\n         \"cd\"]\n        [(= number 500)\n         \"d\"]\n        [(=\
    \ number 600)\n         \"dc\"]\n        [(= number 700)\n         \"dcc\"]\n\
    \        [(= number 800)\n         \"dccc\"]\n        [(= number 900)\n      \
    \   \"cm\"]\n        [(= number 1000)\n         \"m\"]\n        [else\n      \
    \   (cond [(< number 10)\n                (string-append (int_to_mini_roman (/\
    \ number 10))\n                               (int_to_mini_roman (modulo number\
    \ 10))))\n               [(< number 100)\n                (string-append (int_to_mini_roman\
    \ (/ number 100))\n                               (int_to_mini_roman (modulo number\
    \ 100)))]\n               [(< number 1000)\n                (string-append (int_to_mini_roman\
    \ (/ number 1000))\n                               (int_to_mini_roman (modulo\
    \ number 1000)))]\n               [else\n                \"bad number\"])]))\n",
  "  (define (int_to_mini_roman_helper n acc)\n    (if (zero? n)\n        acc\n  \
    \      (if (>= n 1000)\n            (int_to_mini_roman_helper (- n 1000) (string-append\
    \ acc \"m\"))\n            (if (>= n 900)\n                (int_to_mini_roman_helper\
    \ (- n 900) (string-append acc \"cm\"))\n                (if (>= n 500)\n    \
    \                (int_to_mini_roman_helper (- n 500) (string-append acc \"d\"\
    ))\n                    (if (>= n 400)\n                        (int_to_mini_roman_helper\
    \ (- n 400) (string-append acc \"cd\"))\n                        (if (>= n 100)\n\
    \                            (int_to_mini_roman_helper (- n 100) (string-append\
    \ acc \"c\"))\n                            (if (>= n 90)\n                   \
    \             (int_to_mini_roman_helper (- n 90) (string-append acc \"xc\"))\n\
    \                                (if (>= n 50)\n                             \
    \       (int_to_mini_roman_helper (- n 50) (string-append acc \"l\"))\n      \
    \                              (if (>= n 40)\n                               \
    \         (int_to_mini_roman_helper (- n 40) (string-append acc \"xl\"))\n   \
    \                                     (if (>= n 10)\n                        \
    \                    (int_to_mini_roman_helper (- n 10) (string-append acc \"\
    x\"))\n                                            (if (>= n 9)\n            \
    \                                    (int_to_mini_roman_helper (- n 9) (string-append\
    \ acc \"ix\"))\n                                                (if (>= n 5)\n\
    \                                                    (int_to_mini_roman_helper\
    \ (- n 5) (string-append acc \"v\"))\n                                       \
    \             (if (>= n 4)\n                                                 \
    \       (int_to_mini_roman_helper (- n 4) (string-append acc \"iv\"))\n      \
    \                                                  (int_to_mini_roman_helper (-\
    \ n 1) (string-append acc \"i\")))))))))))))))))\n  (string-downcase (int_to_mini_roman_helper\
    \ number", "  (define (int_to_mini_roman_iter current-number output)\n    (cond\
    \ ((= current-number 0) (string-join output \"\"))\n          ((= current-number\
    \ 1) (int_to_mini_roman_iter 0 (cons \"i\" output)))\n          ((= current-number\
    \ 2) (int_to_mini_roman_iter 0 (cons \"ii\" output)))\n          ((= current-number\
    \ 3) (int_to_mini_roman_iter 0 (cons \"iii\" output)))\n          ((= current-number\
    \ 4) (int_to_mini_roman_iter 0 (cons \"iv\" output)))\n          ((= current-number\
    \ 5) (int_to_mini_roman_iter 0 (cons \"v\" output)))\n          ((= current-number\
    \ 6) (int_to_mini_roman_iter 0 (cons \"vi\" output)))\n          ((= current-number\
    \ 7) (int_to_mini_roman_iter 0 (cons \"vii\" output)))\n          ((= current-number\
    \ 8) (int_to_mini_roman_iter 0 (cons \"viii\" output)))\n          ((= current-number\
    \ 9) (int_to_mini_roman_iter 0 (cons \"ix\" output)))\n          ((= current-number\
    \ 10) (int_to_mini_roman_iter 0 (cons \"x\" output)))\n          ((= current-number\
    \ 11) (int_to_mini_roman_iter 0 (cons \"xi\" output)))\n          ((= current-number\
    \ 12) (int_to_mini_roman_iter 0 (cons \"xii\" output)))\n          ((= current-number\
    \ 13) (int_to_mini_roman_iter 0 (cons \"xiii\" output)))\n          ((= current-number\
    \ 14) (int_to_mini_roman_iter 0 (cons \"xiv\" output)))\n          ((= current-number\
    \ 15) (int_to_mini_roman_iter 0 (cons \"xv\" output)))\n          ((= current-number\
    \ 16) (int_to_mini_roman_iter 0 (cons \"xvi\" output)))\n          ((= current-number\
    \ 17) (int_to_mini_roman_iter 0 (cons \"xvii\" output)))\n          ((= current-number",
  "  (cond\n    [(< number 1) \"\"]\n    [(<= number 3) (str-join \"i\" (build-list\
    \ number (lambda (x) \"i\")))]\n    [(<= number 4) \"iv\"]\n    [(<= number 8)\
    \ (str-join \"v\" (build-list (- number 5) (lambda (x) \"i\")))]\n    [(<= number\
    \ 9) \"ix\"]\n    [(<= number 39) (str-join \"x\" (build-list (- number 10) (lambda\
    \ (x) \"i\")))]\n    [(<= number 40) \"xl\"]\n    [(<= number 49) (str-join \"\
    l\" (build-list (- number 50) (lambda (x) \"i\")))]\n    [(<= number 90) (str-join\
    \ \"l\" (build-list (- number 50) (lambda (x) \"i\")))]\n    [(<= number 100)\
    \ \"xc\"]\n    [(<= number 399) (str-join \"c\" (build-list (- number 100) (lambda\
    \ (x) \"i\")))]\n    [(<= number 400) \"cd\"]\n    [(<= number 499) (str-join\
    \ \"d\" (build-list (- number 500) (lambda (x) \"i\")))]\n    [(<= number 900)\
    \ (str-join \"d\" (build-list (- number 500) (lambda (x) \"i\")))]\n    [(<= number\
    \ 1000) \"cm\"]\n    [(> number 1000) \"\"]))\n", "  (cond\n    [(= number 1000)\
    \ \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(= number\
    \ 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 50) \"l\"]\n    [(= number 40) \"xl\"]\n    [(= number 10) \"x\"]\n \
    \   [(= number 9) \"ix\"]\n    [(= number 5) \"v\"]\n    [(= number 4) \"iv\"\
    ]\n    [(= number 1) \"i\"]\n    [else (string-append\n           (int_to_mini_roman\
    \ (quotient number (car (filter (lambda (x) (>= x number)) '(1000 900 500 400\
    \ 100 90 50 40 10 9 5 4 1))))))\n           (int_to_mini_roman (remainder number\
    \ (car (filter (lambda (x) (>= x number)) '(1000 900 500 400 100 90 50 40 10 9\
    \ 5 4 1))))))]))\n", "  (define (int_to_mini_roman-helper number result)\n   \
    \ (cond\n      [(= number 0) result]\n      [(<= number 3) (int_to_mini_roman-helper\
    \ (- number 1) (string-append result \"i\"))]\n      [(<= number 8) (int_to_mini_roman-helper\
    \ (- number 5) (string-append result \"v\"))]\n      [(<= number 39) (int_to_mini_roman-helper\
    \ (- number 10) (string-append result \"x\"))]\n      [(<= number 89) (int_to_mini_roman-helper\
    \ (- number 50) (string-append result \"l\"))]\n      [(<= number 399) (int_to_mini_roman-helper\
    \ (- number 100) (string-append result \"c\"))]\n      [(<= number 899) (int_to_mini_roman-helper\
    \ (- number 500) (string-append result \"d\"))]\n      [else (int_to_mini_roman-helper\
    \ (- number 1000) (string-append result \"m\"))]))\n  (int_to_mini_roman-helper\
    \ number \"\"))\n", "  (define (acc num acc)\n    (cond\n      [(= num 0) acc]\n\
    \      [(>= num 1000) (acc (- num 1000) (string-append acc \"m\"))]\n      [(>=\
    \ num 900) (acc (- num 900) (string-append acc \"cm\"))]\n      [(>= num 500)\
    \ (acc (- num 500) (string-append acc \"d\"))]\n      [(>= num 400) (acc (- num\
    \ 400) (string-append acc \"cd\"))]\n      [(>= num 100) (acc (- num 100) (string-append\
    \ acc \"c\"))]\n      [(>= num 90) (acc (- num 90) (string-append acc \"xc\"))]\n\
    \      [(>= num 50) (acc (- num 50) (string-append acc \"l\"))]\n      [(>= num\
    \ 40) (acc (- num 40) (string-append acc \"xl\"))]\n      [(>= num 10) (acc (-\
    \ num 10) (string-append acc \"x\"))]\n      [(>= num 9) (acc (- num 9) (string-append\
    \ acc \"ix\"))]\n      [(>= num 5) (acc (- num 5) (string-append acc \"v\"))]\n\
    \      [(>= num 4) (acc (- num 4) (string-append acc \"iv\"))]\n      [(>= num\
    \ 1) (acc (- num 1) (string-append acc \"i\"))]))\n  (acc number \"\"))\n", " \
    \ (define (mini_roman_for number)\n    (cond ((= number 1) 'i)\n          ((=\
    \ number 5) 'v)\n          ((= number 10) 'x)\n          ((= number 50) 'l)\n\
    \          ((= number 100) 'c)\n          ((= number 500) 'd)\n          ((= number\
    \ 1000) 'm)))\n  (define (rom num)\n    (cond ((<= num 1000)\n           (rom-gen\
    \ num (list)))\n          (else (error \"Out of range.\"))))\n  (define (rom-gen\
    \ num roman)\n    (cond ((= num 0) (list->string (reverse roman)))\n         \
    \ ((= num 1000) (rom-gen (- num 1000) (cons (mini_roman_for 1000) roman)))\n \
    \         ((= num 500) (rom-gen (- num 500) (cons (mini_roman_for 500) roman)))\n\
    \          ((= num 100) (rom-gen (- num 100) (cons (mini_roman_for 100) roman)))\n\
    \          ((= num 50) (rom-gen (- num 50) (cons (mini_roman_for 50) roman)))\n\
    \          ((= num 10) (rom-gen (- num 10) (cons (mini_roman_for 10) roman)))\n\
    \          ((= num 5) (rom-gen (- num 5) (cons (mini_roman_for 5) roman)))\n \
    \         ((= num 1) (rom-gen (- num 1) (cons (mini_roman_for 1) roman)))\n  \
    \        ((= num 4) (rom-gen (- num 4) (cons (mini_roman_for 1) (cons (mini_roman_for\
    \ 5) roman))))\n          ((= num 9) (rom-gen (- num 9) (cons (mini_roman_for\
    \ 1) (cons (mini_roman_for 10) roman))))\n          ((= num 40) (rom-gen (- num\
    \ 40) (cons (mini_roman_for 10) (cons (mini_roman_for 50) roman))))\n        \
    \  ((= num 90) (rom-gen (- num 90) (cons (mini_roman_for 10) (cons (mini_roman_for\
    \ 100) roman))))\n          ((= num 400) (rom-", "  (cond\n    [(= number 1) \"\
    i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4)\
    \ \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n\
    \    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15)\
    \ \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(=\
    \ number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"\
    ]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"xxii\"]\n    [(= number 23)\
    \ \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(= number 25) \"xxv\"]\n    [(=\
    \ number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"]\n    [(= number 28) \"xxviii\"\
    ]\n    [(= number 29) \"xxix\"]\n    [(= number 30) \"xxx\"]\n    [(= number 31)\
    \ \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n    [(= number 33) \"xxxiii\"]\n \
    \   [(= number 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"]\n    [(= number 36)\
    \ \"xxxvi\"]\n    [(= number 37) \"xxxvii\"]\n    [(= number 38) \"xxxviii\"]\n\
    \    [(= number 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n    [(= number 41)\
    \ \"xli\"]\n    [(= number 42) \"xlii\"]\n    [(= number 43) \"xliii\"]\n    [(=\
    \ number 44) \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(= number 46) \"xlvi\"\
    ]\n    [(=", "  ;; Part 1\n  ;; Fill in the function body below\n  (error 'TODO:\
    \ \"int_to_mini_roman not implemented\"))\n", "  (define to_roman\n    (match-lambda\n\
    \      [1 \"i\"]\n      [5 \"v\"]\n      [10 \"x\"]\n      [50 \"l\"]\n      [100\
    \ \"c\"]\n      [500 \"d\"]\n      [1000 \"m\"]))\n  (define (build-num number)\n\
    \    (define (build-str str n)\n      (cond\n        [(> n 0) (build-str (string-append\
    \ str \"i\") (- n 1))]\n        [else str]))\n    (let* ([first-digit (modulo\
    \ number 10)]\n           [second-digit (modulo (/ number 10) 10)]\n         \
    \  [third-digit (modulo (/ number 100) 10)]\n           [thousand (build-str \"\
    \" (/ number 1000))]\n           [hundred (build-str \"\" third-digit)]\n    \
    \       [ten (build-str \"\" second-digit)]\n           [one (build-str \"\" first-digit)])\n\
    \      (string-append thousand (build-str \"m\" (- (/ number 1000) 1)) hundred\n\
    \        (build-str \"c\" (- (/ number 100) 5))\n        (if (> second-digit 5)\
    \ (build-str \"x\" (- second-digit 5)) \"\")\n        (build-str \"l\" (- (/ number\
    \ 10) 5))\n        (if (> first-digit 5) (build-str \"x\" (- first-digit 5)) \"\
    \")\n        (build-str \"v\" (- (/ number 1) 5)))))\n  (define (translate-num\
    \ str)\n    (define (translate-str number new-str)\n      (cond\n        [(equal?\
    \ (string-length new-str) 4)\n         (string-append (to-roman (* 10 (string->number\
    \ (substring str 0 1))))\n           (translate-str (substring str 1) \"\"))]\n\
    \        [(equal? (string-length new-str) 9)\n         (string-append (to-roman\
    \ (* 10 (string->number (substring str 0 1))))\n           (translate-str (substring\
    \ str 1) \"\"))]\n        [(equal? (string-length new-str) 3)\n         (string-append\
    \ (to-roman (* 100 (string->number (substring", "  (define (int_to_mini_roman-helper\
    \ number accum)\n    (cond ((= number 0) accum)\n          ((> number 10) (int_to_mini_roman-helper\
    \ (- number 10) (string-append accum \"x\")))\n          ((> number 9) (int_to_mini_roman-helper\
    \ (- number 9) (string-append accum \"ix\")))\n          ((> number 5) (int_to_mini_roman-helper\
    \ (- number 5) (string-append accum \"v\")))\n          ((> number 4) (int_to_mini_roman-helper\
    \ (- number 4) (string-append accum \"iv\")))\n          ((> number 1) (int_to_mini_roman-helper\
    \ (- number 1) (string-append accum \"i\")))\n          ((= number 1) (string-append\
    \ accum \"i\"))))\n  (string-downcase (int_to_mini_roman-helper number \"\")))",
  "  (define (num2string n digits)\n    (cond\n      [(= 0 n) '()]\n      [(= 1 n)\
    \ (cons (car digits) '())]\n      [(= 2 n) (cons (car digits) (cons (car digits)\
    \ '()))]\n      [(= 3 n) (cons (car digits) (cons (car digits) (cons (car digits)\
    \ '())))]\n      [(= 4 n) (cons (car digits) (cons (cadr digits) '()))]\n    \
    \  [(= 5 n) (cons (cadr digits) '())]\n      [(= 6 n) (cons (cadr digits) (cons\
    \ (car digits) '()))]\n      [(= 7 n) (cons (cadr digits) (cons (car digits) (cons\
    \ (car digits) '())))]\n      [(= 8 n) (cons (cadr digits) (cons (car digits)\
    \ (cons (car digits) (cons (car digits) '()))))]\n      [(= 9 n) (cons (car digits)\
    \ (cons (caddr digits) '()))]))\n  (define (convert_digit digit)\n    (if (= digit\
    \ 0)\n        '()\n        (append (num2string digit (list (car digits) (cadr\
    \ digits) (caddr digits)))\n                (convert_digit (- digit (remainder\
    \ digit 10))\n                               (rest digits)))))\n  (cond\n    [(=\
    \ number 0) \"\"\n    [(= number 1) \"i\"\n    [(= number 2) \"ii\"\n    [(= number\
    \ 3) \"iii\"\n    [(= number 4) \"iv\"\n    [(= number 5) \"v\"\n    [(= number\
    \ 6) \"vi\"\n    [(= number 7) \"vii\"\n    [(= number 8) \"viii\"\n    [(= number\
    \ 9) \"ix\"\n    [(= number 10) \"x\"\n    [(= number 11) \"xi\"\n    [(= number\
    \ 12) \"xii\"\n    [(= number 13) \"xiii\"\n    [(= number 14) \"xiv\"\n    [(=\
    \ number 15) \"xv\"\n    [(= number 16) \"xvi\"\n    [(= number 17) \"xvii\"",
  "  (cond\n    [(= number 1) 'i]\n    [(= number 2) 'ii]\n    [(= number 3) 'iii]\n\
    \    [(= number 4) 'iv]\n    [(= number 5) 'v]\n    [(= number 6) 'vi]\n    [(=\
    \ number 7) 'vii]\n    [(= number 8) 'viii]\n    [(= number 9) 'ix]\n    [(= number\
    \ 10) 'x]\n    [(= number 11) 'xi]\n    [(= number 12) 'xii]\n    [(= number 13)\
    \ 'xiii]\n    [(= number 14) 'xiv]\n    [(= number 15) 'xv]\n    [(= number 16)\
    \ 'xvi]\n    [(= number 17) 'xvii]\n    [(= number 18) 'xviii]\n    [(= number\
    \ 19) 'xix]\n    [(= number 20) 'xx]\n    [(= number 21) 'xxi]\n    [(= number\
    \ 22) 'xxii]\n    [(= number 23) 'xxiii]\n    [(= number 24) 'xxiv]\n    [(= number\
    \ 25) 'xxv]\n    [(= number 26) 'xxvi]\n    [(= number 27) 'xxvii]\n    [(= number\
    \ 28) 'xxviii]\n    [(= number 29) 'xxix]\n    [(= number 30) 'xxx]\n    [(= number\
    \ 31) 'xxxi]\n    [(= number 32) 'xxxii]\n    [(= number 33) 'xxxiii]\n    [(=\
    \ number 34) 'xxxiv]\n    [(= number 35) 'xxxv]\n    [(= number 36) 'xxxvi]\n\
    \    [(= number 37) 'xxxvii]\n    [(= number 38) 'xxxviii]\n    [(= number 39)\
    \ 'xxxix]\n    [(= number 40) 'xl]\n    [(= number 41) 'xli]\n    [(= number 42)\
    \ 'xlii]\n    [(= number 43) 'xliii]\n    [(= number 44) 'xliv]\n    [(= number\
    \ 45) 'xlv]\n    [(= number 46) 'xlvi]\n    [(=", "  (define (recur number s)\n\
    \    (cond\n      [(> number 3999) \"\" ]\n      [(= number 0) s]\n      [(>=\
    \ number 1000) (recur (- number 1000) (string-append s \"m\"))]\n      [(>= number\
    \ 900) (recur (- number 900) (string-append s \"cm\"))]\n      [(>= number 500)\
    \ (recur (- number 500) (string-append s \"d\"))]\n      [(>= number 400) (recur\
    \ (- number 400) (string-append s \"cd\"))]\n      [(>= number 100) (recur (-\
    \ number 100) (string-append s \"c\"))]\n      [(>= number 90) (recur (- number\
    \ 90) (string-append s \"xc\"))]\n      [(>= number 50) (recur (- number 50) (string-append\
    \ s \"l\"))]\n      [(>= number 40) (recur (- number 40) (string-append s \"xl\"\
    ))]\n      [(>= number 10) (recur (- number 10) (string-append s \"x\"))]\n  \
    \    [(>= number 9) (recur (- number 9) (string-append s \"ix\"))]\n      [(>=\
    \ number 5) (recur (- number 5) (string-append s \"v\"))]\n      [(>= number 4)\
    \ (recur (- number 4) (string-append s \"iv\"))]\n      [(>= number 1) (recur\
    \ (- number 1) (string-append s \"i\"))]\n      [else s]))\n  (string-downcase\
    \ (recur number \"\")))\n", "  (let ([int-to-mini-roman-table (list\n        \
    \                          (list 1000 \"m\")\n                               \
    \   (list 900 \"cm\")\n                                  (list 500 \"d\")\n  \
    \                                (list 400 \"cd\")\n                         \
    \         (list 100 \"c\")\n                                  (list 90 \"xc\"\
    )\n                                  (list 50 \"l\")\n                       \
    \           (list 40 \"xl\")\n                                  (list 10 \"x\"\
    )\n                                  (list 9 \"ix\")\n                       \
    \           (list 5 \"v\")\n                                  (list 4 \"iv\")\n\
    \                                  (list 1 \"i\"))])\n    (let loop ([roman-numeral\
    \ \"\"]\n               [number number])\n      (cond [(= number 0) (string-downcase\
    \ roman-numeral)]\n            [else\n             (let* ([substitutions\n   \
    \                  (filter (lambda (substitution)\n                          \
    \     (> (car substitution) number))\n                             int-to-mini-roman-table)]\n\
    \                    [substitution (car substitutions)])\n               (loop\
    \ (string-append roman-numeral (cadr substitution))\n                     (- number\
    \ (car substitution))))]))))\n```\n\n## Examples\n\n```racket\nint_to_mini_roman(19)\
    \ == 'xix'\nint_to_mini_roman(152) == 'clii'\nint_to_mini_roman(426) == 'cdxxvi'\n\
    ```\n\n## Tests\n\n```racket", "  (define (check_num num)\n    (cond ((= num 1)\
    \ 'i)\n          ((= num 5) 'v)\n          ((= num 10) 'x)\n          ((= num\
    \ 50) 'l)\n          ((= num 100) 'c)\n          ((= num 500) 'd)\n          ((=\
    \ num 1000) 'm)))\n  (define (convert num)\n    (cond ((= num 0) \"\")\n     \
    \     ((< num 0) (string-append (check_num (- num (modulo num 10))) (convert (-\
    \ num (modulo num 10)))))\n          ((> num 0) (string-append (check_num (modulo\
    \ num 10)) (convert (- num (modulo num 10)))))))\n  (string-downcase (convert\
    \ number)))\n", "  ;; Your solution here\n  )\n", "  (define (int_to_int_list\
    \ number)\n    (if (= number 0)\n        '()\n        (cons\n         (remainder\
    \ number 10)\n         (int_to_int_list (quotient number 10)))))\n  (define (digit_to_digit_string\
    \ digit)\n    (cond\n      ((= digit 1) \"i\")\n      ((= digit 2) \"ii\")\n \
    \     ((= digit 3) \"iii\")\n      ((= digit 4) \"iv\")\n      ((= digit 5) \"\
    v\")\n      ((= digit 6) \"vi\")\n      ((= digit 7) \"vii\")\n      ((= digit\
    \ 8) \"viii\")\n      ((= digit 9) \"ix\")))\n  (define (int_list_to_string list)\n\
    \    (cond\n      ((null? list) \"\")\n      ((= (length list) 1) (digit_to_digit_string\
    \ (car list)))\n      ((= (length list) 2)\n       (string-append (string-append\
    \ (string-append \"x\" (digit_to_digit_string (car list))) \"c\")))\n      ((=\
    \ (length list) 3)\n       (string-append (string-append (string-append \"c\"\
    \ (digit_to_digit_string (car list))) \"m\")))\n      ((= (length list) 4)\n \
    \      (string-append (string-append (string-append \"m\" (digit_to_digit_string\
    \ (car list))) \"v\")))))\n  (string-downcase (int_list_to_string (int_to_int_list\
    \ number))))\n", "  (string-downcase\n   (cond\n     [(>= number 1000) (string-append\
    \ \"m\" (int_to_mini_roman (- number 1000)))]\n     [(>= number 900) (string-append\
    \ \"cm\" (int_to_mini_roman (- number 900)))]\n     [(>= number 500) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500)))]\n     [(>= number 400) (string-append\
    \ \"cd\" (int_to_mini_roman (- number 400)))]\n     [(>= number 100) (string-append\
    \ \"c\" (int_to_mini_roman (- number 100)))]\n     [(>= number 90) (string-append\
    \ \"xc\" (int_to_mini_roman (- number 90)))]\n     [(>= number 50) (string-append\
    \ \"l\" (int_to_mini_roman (- number 50)))]\n     [(>= number 40) (string-append\
    \ \"xl\" (int_to_mini_roman (- number 40)))]\n     [(>= number 10) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10)))]\n     [(>= number 9) (string-append\
    \ \"ix\" (int_to_mini_roman (- number 9)))]\n     [(>= number 5) (string-append\
    \ \"v\" (int_to_mini_roman (- number 5)))]\n     [(>= number 4) (string-append\
    \ \"iv\" (int_to_mini_roman (- number 4)))]\n     [(>= number 1) (string-append\
    \ \"i\" (int_to_mini_roman (- number 1)))]\n     [else \"\" ])))\n", "  (define\
    \ (int_to_mini_roman-helper number acc)\n    (cond [(= number 0) acc]\n      \
    \    [(and (>= number 1000) (= (modulo number 1000) 0)) (int_to_mini_roman-helper\
    \ (/ number 1000) (string-append acc \"m\"))]\n          [(>= number 1000) (int_to_mini_roman-helper\
    \ (- number 1000) (string-append acc \"m\"))]\n          [(and (>= number 900)\
    \ (= (modulo number 900) 0)) (int_to_mini_roman-helper (/ number 900) (string-append\
    \ acc \"cm\"))]\n          [(>= number 900) (int_to_mini_roman-helper (- number\
    \ 900) (string-append acc \"cm\"))]\n          [(and (>= number 500) (= (modulo\
    \ number 500) 0)) (int_to_mini_roman-helper (/ number 500) (string-append acc\
    \ \"d\"))]\n          [(>= number 500) (int_to_mini_roman-helper (- number 500)\
    \ (string-append acc \"d\"))]\n          [(and (>= number 400) (= (modulo number\
    \ 400) 0)) (int_to_mini_roman-helper (/ number 400) (string-append acc \"cd\"\
    ))]\n          [(>= number 400) (int_to_mini_roman-helper (- number 400) (string-append\
    \ acc \"cd\"))]\n          [(and (>= number 100) (= (modulo number 100) 0)) (int_to_mini_roman-helper\
    \ (/ number 100) (string-append acc \"c\"))]\n          [(>= number 100) (int_to_mini_roman-helper\
    \ (- number 100) (string-append acc \"c\"))]\n          [(and (>= number 90) (=\
    \ (modulo number 90) 0)) (int_to_mini_roman-helper (/ number 90) (string-append\
    \ acc \"xc\"))]\n          [(>= number 90) (int_to_mini_roman-helper (- number\
    \ 90) (string-append acc \"xc\"))]\n          [(and (>= number 50) (= (modulo\
    \ number 50) 0)) (int_to_mini_roman-helper (/ number 50) (string-append acc \"",
  "  (define romans '((1 \"i\") (4 \"iv\") (5 \"v\") (9 \"ix\") (10 \"x\") (40 \"\
    xl\") (50 \"l\") (90 \"xc\") (100 \"c\") (400 \"cd\") (500 \"d\") (900 \"cm\"\
    ) (1000 \"m\")))\n  (define (reconstruct romans number)\n    (if (or (= number\
    \ 0) (empty? romans)) '()\n        (let ((interval (car romans))\n           \
    \   (next-interval (cadr romans)))\n          (if (<= number (car interval)) (cons\
    \ (cadr interval) (reconstruct romans (- number (car interval))))\n          \
    \    (cons (cadr interval) (reconstruct (cdr romans) (- number (car interval))))))))\n\
    \  (string-join (reconstruct romans number) \"\"))\n", "  (define (int_to_mini_roman-h\
    \ number)\n    (let* ([units (modulo number 10)]\n           [tens (modulo (quotient\
    \ number 10) 10)]\n           [hundreds (modulo (quotient number 100) 10)]\n \
    \          [thousands (modulo (quotient number 1000) 10)])\n      (string-append\n\
    \       (int_to_mini_roman-h-1 thousands 'm)\n       (int_to_mini_roman-h-1 hundreds\
    \ 'c 'd 'm)\n       (int_to_mini_roman-h-1 tens 'x 'l 'c)\n       (int_to_mini_roman-h-1\
    \ units 'i 'v 'x))))\n  (define (int_to_mini_roman-h-1 number left mid right)\n\
    \    (cond [(= number 0) \"\"]\n          [(= number 1) left]\n          [(= number\
    \ 2) (string-append left left)]\n          [(= number 3) (string-append left left\
    \ left)]\n          [(= number 4) (string-append left mid)]\n          [(= number\
    \ 5) mid]\n          [(= number 6) (string-append mid left)]\n          [(= number\
    \ 7) (string-append mid left left)]\n          [(= number 8) (string-append mid\
    \ left left left)]\n          [(= number 9) (string-append left right)]))\n  (int_to_mini_roman-h\
    \ number))\n```\n\n## Test\n\n```racket\n#lang racket\n", "  (cond [(= number\
    \ 1) \"i\"]\n        [(= number 5) \"v\"]\n        [(= number 10) \"x\"]\n   \
    \     [(= number 50) \"l\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 500) \"d\"]\n        [(= number 1000) \"m\"]\n        [(= number 2) \"ii\"]\n\
    \        [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number\
    \ 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number 8) \"viii\"]\n\
    \        [(= number 9) \"ix\"]\n        [(= number 11) \"xi\"]\n        [(= number\
    \ 12) \"xii\"]\n        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"\
    ]\n        [(= number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(=\
    \ number 17) \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number\
    \ 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(= number 40) \"xl\"\
    ]\n        [(= number 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n        [(=\
    \ number 80) \"lxxx\"]\n        [(= number 90) \"xc\"]\n        [(= number 100)\
    \ \"c\"]\n        [(= number 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n\
    \        [(= number 400) \"cd\"]\n        [(= number 600) \"dc\"]\n        [(=\
    \ number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number\
    \ 900) \"cm\"]\n        [else \"\"]))\n", "  (define roman-numerals '((1 . \"\
    i\") (5 . \"v\") (10 . \"x\") (50 . \"l\") (100 . \"c\") (500 . \"d\") (1000 .\
    \ \"m\")))\n  (define (convert-to-roman-numeral n)\n    (let ([remainder (modulo\
    \ n 10)]\n          [quotient (/ n 10)])\n      (if (zero? remainder)\n      \
    \    (convert-to-roman-numeral quotient)\n          (string-append (cdr (assoc\
    \ (cond\n                                      [(zero? quotient) (quotient-exact\
    \ remainder 5)]\n                                      [(equal? quotient 1) (remainder\
    \ + 1)]\n                                      [(equal? quotient 2) (remainder\
    \ + 2)]\n                                      [(equal? quotient 3) (remainder\
    \ + 3)]\n                                      [(equal? quotient 4) (remainder\
    \ + 4)]\n                                      [(equal? quotient 5) (quotient-exact\
    \ remainder 5)]\n                                      [(equal? quotient 6) (remainder\
    \ + 4)]\n                                      [(equal? quotient 7) (remainder\
    \ + 6)]\n                                      [(equal? quotient 8) (remainder\
    \ + 7)]\n                                      [(equal? quotient 9) (remainder\
    \ + 8)])\n                                     roman-numerals))\n            \
    \              (convert-to-roman-numeral quotient)))))\n  (string-downcase (convert-to-roman-numeral\
    \ number)))", "  (define (div-1000 remainder)\n    (let ((number-of-1000s (quotient\
    \ remainder 1000)))\n      (string-append (make-string number-of-1000s #\\m)\n\
    \                     (div-100 (remainder remainder 1000)))))\n  (define (div-100\
    \ remainder)\n    (let ((number-of-100s (quotient remainder 100)))\n      (string-append\
    \ (mini-roman-100 number-of-100s)\n                     (div-10 (remainder remainder\
    \ 100)))))\n  (define (div-10 remainder)\n    (let ((number-of-10s (quotient remainder\
    \ 10)))\n      (string-append (mini-roman-10 number-of-10s)\n                \
    \     (mini-roman-1 (remainder remainder 10)))))\n  (define (mini-roman-1 number)\n\
    \    (cond ((= number 1) \"i\")\n          ((= number 2) \"ii\")\n          ((=\
    \ number 3) \"iii\")\n          ((= number 4) \"iv\")\n          ((= number 5)\
    \ \"v\")\n          ((= number 6) \"vi\")\n          ((= number 7) \"vii\")\n\
    \          ((= number 8) \"viii\")\n          ((= number 9) \"ix\")))\n  (define\
    \ (mini-roman-10 number)\n    (cond ((= number 1) \"x\")\n          ((= number\
    \ 2) \"xx\")\n          ((= number 3) \"xxx\")\n          ((= number 4) \"xl\"\
    )\n          ((= number 5) \"l\")\n          ((= number 6) \"lx\")\n         \
    \ ((= number 7) \"lxx\")\n          ((= number 8) \"lxxx\")\n          ((= number\
    \ 9) \"xc\")))\n  (define (mini-roman-100 number)\n    (cond ((= number 1) \"\
    c\")\n          ((= number 2) \"cc\")\n          ((= number 3) \"ccc\")\n    \
    \      ((= number 4) \"cd\")\n          ((= number 5) \"d\")\n          ((= number\
    \ 6) \"dc\")\n          ((= number 7) \"dcc\")\n          ((= number 8) \"dccc\"\
    )\n          ((= number 9) \"cm\")))\n", "  (define (int_to_mini_roman-iter number\
    \ string)\n    (if (zero? number)\n        string\n        (if (zero? (modulo\
    \ number 10))\n            (int_to_mini_roman-iter (/ number 10) (string-append\
    \ string \"0\"))\n            (let* ([div (/ number 10)]\n                   [mod\
    \ (modulo number 10)])\n              (if (= mod 5)\n                  (int_to_mini_roman-iter\
    \ div (string-append string \"5\"))\n                  (let ([mul (if (< mod 5)\n\
    \                                 '()\n                                 (string-append\
    \ \"0\" (substring (string-append \"0\" div) -1)))])\n                    (int_to_mini_roman-iter\
    \ div (string-append string mul)))))))))\n  (string-downcase (int_to_mini_roman-iter\
    \ number \"\")))\n", "  (define (convert-num number)\n    (cond\n      [(= number\
    \ 0) empty]\n      [(= number 1) 'i]\n      [(= number 2) 'ii]\n      [(= number\
    \ 3) 'iii]\n      [(= number 4) 'iv]\n      [(= number 5) 'v]\n      [(= number\
    \ 6) 'vi]\n      [(= number 7) 'vii]\n      [(= number 8) 'viii]\n      [(= number\
    \ 9) 'ix]\n      [(= number 10) 'x]\n      [(= number 40) 'xl]\n      [(= number\
    \ 50) 'l]\n      [(= number 90) 'xc]\n      [(= number 100) 'c]\n      [(= number\
    \ 400) 'cd]\n      [(= number 500) 'd]\n      [(= number 900) 'cm]\n      [(=\
    \ number 1000) 'm]))\n  (define (convert-digit digit)\n    (cond\n      [(= digit\
    \ 1) (convert-num 1)]\n      [(= digit 2) (convert-num 2)]\n      [(= digit 3)\
    \ (convert-num 3)]\n      [(= digit 4) (convert-num 4)]\n      [(= digit 5) (convert-num\
    \ 5)]\n      [(= digit 6) (convert-num 6)]\n      [(= digit 7) (convert-num 7)]\n\
    \      [(= digit 8) (convert-num 8)]\n      [(= digit 9) (convert-num 9)]\n  \
    \    [(= digit 10) (convert-num 10)]\n      [(= digit 0) empty]))\n  (define (convert-tens\
    \ digit)\n    (cond\n      [(= digit 1) (convert-num 10)]\n      [(= digit 2)\
    \ (convert-num 20)]\n      [(= digit 3) (convert-num 30)]\n      [(= digit 4)\
    \ (convert-num 40)]\n      [(= digit 5) (convert-num 50)]\n      [(= digit 6)\
    \ (convert-num 60)]\n      [(= digit 7) (convert-num 70)]\n      [(= digit 8)\
    \ (convert-num 80)]\n      [(= digit 9) (convert-", "  (let ([num-string (number->string\
    \ number)])\n    (for/string ([char (in-string num-string)])\n      (string-downcase\n\
    \       (cond [(char=? char #\\1) 'I]\n             [(char=? char #\\2) 'II]\n\
    \             [(char=? char #\\3) 'III]\n             [(char=? char #\\4) 'IV]\n\
    \             [(char=? char #\\5) 'V]\n             [(char=? char #\\6) 'VI]\n\
    \             [(char=? char #\\7) 'VII]\n             [(char=? char #\\8) 'VIII]\n\
    \             [(char=? char #\\9) 'IX]\n             (else 'X))))))\n", "  (let\
    \ loop ((number number)\n             (acc '()))\n    (cond\n      [(zero? number)\n\
    \       (reverse acc)]\n      [(>= number 1000)\n       (loop (- number 1000)\n\
    \             (cons 'm acc))]\n      [(>= number 900)\n       (loop (- number\
    \ 900)\n             (cons 'c (cons 'm acc)))]\n      [(>= number 500)\n     \
    \  (loop (- number 500)\n             (cons 'd acc))]\n      [(>= number 400)\n\
    \       (loop (- number 400)\n             (cons 'c (cons 'd acc)))]\n      [(>=\
    \ number 100)\n       (loop (- number 100)\n             (cons 'c acc))]\n   \
    \   [(>= number 90)\n       (loop (- number 90)\n             (cons 'x (cons 'c\
    \ acc)))]\n      [(>= number 50)\n       (loop (- number 50)\n             (cons\
    \ 'l acc))]\n      [(>= number 40)\n       (loop (- number 40)\n             (cons\
    \ 'x (cons 'l acc)))]\n      [(>= number 10)\n       (loop (- number 10)\n   \
    \          (cons 'x acc))]\n      [(>= number 9)\n       (loop (- number 9)\n\
    \             (cons 'i (cons 'x acc)))]\n      [(>= number 5)\n       (loop (-\
    \ number 5)\n             (cons 'v acc))]\n      [(>= number 4)\n       (loop\
    \ (- number 4)\n             (cons 'i (cons 'v acc)))]\n      [(>= number 1)\n\
    \       (loop (- number 1)\n             (cons 'i acc))])))\n", "  (let [digits\
    \ (number->list number)\n        powers (map (\u03BB (i) (expt 10 i)) (range 0\
    \ (sub1 (length digits))))\n        sub [[\"i\" \"v\" \"x\"] [\"x\" \"l\" \"c\"\
    ] [\"c\" \"d\" \"m\"] [\"m\" \"m\" \"m\"]]]\n    (apply string-append\n      \
    \     (map (\u03BB (d p)\n                  (match d\n                    [(0)\
    \ \"\"]\n                    [(1) (nth (sub (sub1 (quotient p 10))) 0)]\n    \
    \                [(2) (nth (sub (sub1 (quotient p 10))) 1)]\n                \
    \    [(3) (string-append (nth (sub (sub1 (quotient p 10))) 0)\n              \
    \                          (nth (sub (sub1 (quotient p 10))) 1))]\n          \
    \          [(4) (nth (sub (sub1 (quotient p 10))) 1)\n                       \
    \  (nth (sub (sub1 (quotient p 10))) 0)]\n                    [(5) (nth (sub (sub1\
    \ (quotient p 10))) 1)]\n                    [(6) (string-append (nth (sub (sub1\
    \ (quotient p 10))) 1)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0))]\n                    [(7) (string-append (nth (sub (sub1\
    \ (quotient p 10))) 1)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0))]\n                    [(8) (string-append (nth (sub (sub1\
    \ (quotient p 10))) 1)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 0))]\n                    [(9) (string-append (nth (sub (sub1\
    \ (quotient p 10))) 0)\n                                        (nth (sub (sub1\
    \ (quotient p 10))) 2))]))", "  (define (tens-to-romans (tens))\n    (cond\n \
    \     [(= tens 0) \"\"]\n      [(= tens 1) \"x\"]\n      [(= tens 2) \"xx\"]\n\
    \      [(= tens 3) \"xxx\"]\n      [(= tens 4) \"xl\"]\n      [(= tens 5) \"l\"\
    ]\n      [(= tens 6) \"lx\"]\n      [(= tens 7) \"lxx\"]\n      [(= tens 8) \"\
    lxxx\"]\n      [(= tens 9) \"xc\"]))\n  (define (ones-to-romans (ones))\n    (cond\n\
    \      [(= ones 0) \"\"]\n      [(= ones 1) \"i\"]\n      [(= ones 2) \"ii\"]\n\
    \      [(= ones 3) \"iii\"]\n      [(= ones 4) \"iv\"]\n      [(= ones 5) \"v\"\
    ]\n      [(= ones 6) \"vi\"]\n      [(= ones 7) \"vii\"]\n      [(= ones 8) \"\
    viii\"]\n      [(= ones 9) \"ix\"]))\n  (define (hundreds-to-romans (hundreds))\n\
    \    (cond\n      [(= hundreds 0) \"\"]\n      [(= hundreds 1) \"c\"]\n      [(=\
    \ hundreds 2) \"cc\"]\n      [(= hundreds 3) \"ccc\"]\n      [(= hundreds 4) \"\
    cd\"]\n      [(= hundreds 5) \"d\"]\n      [(= hundreds 6) \"dc\"]\n      [(=\
    \ hundreds 7) \"dcc\"]\n      [(= hundreds 8) \"dccc\"]\n      [(= hundreds 9)\
    \ \"cm\"]))\n  (cond\n    [(<= number 0) (error \"Number is too small: \" number)]\n\
    \    [(> number 1000) (error \"Number is too large: \" number)]\n    [(< number\
    \ 10) (ones-to-romans number)]\n    [(< number 100) (string-append (tens-to-romans\
    \ (/ number 10)) (ones-to-romans (modulo number 10)))]\n    [(< number 1000) (string-append\
    \ (hundreds-to-romans (/ number 100)) (tens-to-romans (/ (modulo number 100) 10))\
    \ (ones-to-romans (modulo", "  (let ((numbers '(1000 900 500 400 100 90 50 40\
    \ 10 9 5 4 1)))\n    (let ((result (map (lambda (n)\n                        \
    \ (if (>= number n)\n                             (begin\n                   \
    \            (set! number (- number n))\n                               (number->roman\
    \ n))\n                             \"\"))\n                       numbers)))\n\
    \      (string-join result \"\"))))\n", "  (cond ((equal? number 1) \"i\")\n \
    \       ((equal? number 2) \"ii\")\n        ((equal? number 3) \"iii\")\n    \
    \    ((equal? number 4) \"iv\")\n        ((equal? number 5) \"v\")\n        ((equal?\
    \ number 6) \"vi\")\n        ((equal? number 7) \"vii\")\n        ((equal? number\
    \ 8) \"viii\")\n        ((equal? number 9) \"ix\")\n        ((equal? number 10)\
    \ \"x\")\n        ((equal? number 11) \"xi\")\n        ((equal? number 12) \"\
    xii\")\n        ((equal? number 13) \"xiii\")\n        ((equal? number 14) \"\
    xiv\")\n        ((equal? number 15) \"xv\")\n        ((equal? number 16) \"xvi\"\
    )\n        ((equal? number 17) \"xvii\")\n        ((equal? number 18) \"xviii\"\
    )\n        ((equal? number 19) \"xix\")\n        ((equal? number 20) \"xx\")\n\
    \        ((equal? number 21) \"xxi\")\n        ((equal? number 22) \"xxii\")\n\
    \        ((equal? number 23) \"xxiii\")\n        ((equal? number 24) \"xxiv\"\
    )\n        ((equal? number 25) \"xxv\")\n        ((equal? number 26) \"xxvi\"\
    )\n        ((equal? number 27) \"xxvii\")\n        ((equal? number 28) \"xxviii\"\
    )\n        ((equal? number 29) \"xxix\")\n        ((equal? number 30) \"xxx\"\
    )\n        ((equal? number 31) \"xxxi\")\n        ((equal? number 32) \"xxxii\"\
    )\n        ((equal? number 33) \"xxxiii\")\n        ((equal? number 34) \"xxxiv\"\
    )\n        ((equal? number 35) \"xxxv\")\n        ((equal? number 36) \"xxxvi\"\
    )\n        ((equal? number 37) \"xxxvii\")\n        ((equal? number 38) \"xxxviii\"\
    )\n        ((equal? number 39) \"xxxix\")\n        ((equal? number 40) \"xl\"\
    )\n        ((equal? number 41) \"xli\")\n        ((equal? number 42) \"xlii\"\
    )\n        ((equal? number 43) \"x", "  (define (mini_roman_helper c l m n remainder)\n\
    \    (cond\n      ((= remainder 0) \"\")\n      ((= remainder 1) (string-append\
    \ (list c) (mini_roman_helper c l m n 0)))\n      ((< remainder 5) (string-append\
    \ (list c) (mini_roman_helper l l m n (- remainder 1))))\n      ((= remainder\
    \ 5) (string-append (list l) (mini_roman_helper c l m n 0)))\n      ((< remainder\
    \ 9) (string-append (list l) (mini_roman_helper c l m n (- remainder 5))))\n \
    \     ((= remainder 9) (string-append (list c) (mini_roman_helper m l m n 0)))))\n\
    \  (cond\n    ((= number 0) \"\")\n    ((< number 10) (mini_roman_helper #\\x\
    \ #\\v #\\i #\\i number))\n    ((< number 100) (string-append (mini_roman_helper\
    \ #\\c #\\l #\\x #\\x (quotient number 10))\n                                \
    \   (mini_roman_helper #\\x #\\v #\\i #\\i (remainder number 10))))\n    ((< number\
    \ 1000) (string-append (mini_roman_helper #\\m #\\d #\\c #\\c (quotient number\
    \ 100))\n                                    (mini_roman_helper #\\c #\\l #\\\
    x #\\x (quotient (remainder number 100) 10))\n                               \
    \     (mini_roman_helper #\\x #\\v #\\i #\\i (remainder number 10))))\n    (else\
    \ \"\")))\n", "  (define (int_to_mini_roman-helper number digit place)\n    (cond\
    \ [(= place 1) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 2) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 3) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 4) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 5) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 6) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 7) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 8) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 9) (int_to_mini_roman-helper-base number digit place)]\n         \
    \ [(= place 10) (int_to_mini_roman-helper-base number digit place)]))\n  (define\
    \ (int_to_mini_roman-helper-base number digit place)\n    (if (= number 0) \"\"\
    \n        (cond [(= digit 4) (string-append \"i\" (string-append \"v\" (int_to_mini_roman-helper-sub\
    \ (sub1 number) place)))]\n              [(= digit 9) (string-append \"i\" (string-append\
    \ \"x\" (int_to_mini_roman-helper-sub (sub1 number) place)))]\n              [(=\
    \ digit 5) (string-append \"v\" (int_to_mini_roman-helper-sub (sub1 number) place))]\n\
    \              [(= digit 4) (string-append \"l\" (string-append \"c\" (int_to_mini_roman-helper-sub\
    \ (sub1 number) place)))]\n              [(= digit 9) (string-append \"l\" (string-append\
    \ \"c\" (int_to_mini_roman-helper-sub (sub1 number) place)))]\n              [(=\
    \ digit 5) (string-append \"c\" (", "  (define (append-numeral sub n)\n    (string-append\
    \ sub (string-repeat n (string-take numeral 1))))\n  (let* ((roman (list 'M 'D\
    \ 'C 'L 'X 'V 'I))\n         (divisors (map (lambda (n) (expt 10 n)) (range 1\
    \ 4))))\n    (define (int-to-roman n)\n      (let ([result (make-string 0)]\n\
    \            [numeral (list-ref roman (modulo n 10))])\n        (for/fold ([result\
    \ result]) ([div (in-list divisors)])\n          (let ([quotient (quotient n div)])\n\
    \            (if (> quotient 0)\n                (let ([modulus (modulo quotient\
    \ 10)])\n                  (cond\n                    [(and (= modulus 5) (= div\
    \ 10))\n                     (string-append result (list-ref roman (- n div)))]\n\
    \                    [(= modulus 9)\n                     (string-append result\
    \ (list-ref roman (- n div)) numeral)]\n                    [(> modulus 5)\n \
    \                    (append-numeral result (- modulus 5))]\n                \
    \    [else\n                     (append-numeral result modulus)]))\n        \
    \        result)))))\n    (string-downcase (int-to-roman number))))\n", "  (cond\n\
    \    [(<= number 1000) (int_to_mini_roman_helper number '())])\n  )\n", "  (define\
    \ (single-digit-to-romans num)\n    (cond\n      [(< num 4) (list-repeat num \"\
    i\")]\n      [(< num 5) (list-append (list-repeat (sub1 num) \"i\") \"v\")]\n\
    \      [(< num 9) (list-append (list-repeat (sub1 num) \"i\") \"iv\")]\n     \
    \ [(< num 10) (list-append (list-repeat (sub1 num) \"i\") \"x\")]))\n  (define\
    \ (double-digit-to-romans num)\n    (cond\n      [(< num 40) (list-append (single-digit-to-romans\
    \ (quotient num 10)) (single-digit-to-romans (remainder num 10)))]; not that good,\
    \ but it works.\n      [(< num 50) (list-append (list-repeat (sub1 (quotient num\
    \ 10)) \"x\") \"l\") (single-digit-to-romans (remainder num 10))]\n      [(< num\
    \ 90) (list-append (list-repeat (sub1 (quotient num 10)) \"x\") \"l\" (single-digit-to-romans\
    \ (remainder num 10)))]; not that good, but it works.\n      [(< num 100) (list-append\
    \ (list-repeat (sub1 (quotient num 10)) \"x\") \"xc\")]))\n  (define (triple-digit-to-romans\
    \ num)\n    (cond\n      [(< num 400) (list-append (double-digit-to-romans (quotient\
    \ num 100)) (double-digit-to-romans (remainder num 100)))]; not that good, but\
    \ it works.\n      [(< num 500) (list-append (list-repeat (sub1 (quotient num\
    \ 100)) \"c\") \"d\") (double-digit-to-romans (remainder num 100))]\n      [(<\
    \ num 900) (list-append (list-repeat (sub1 (quotient num 100)) \"c\") \"d\" (double-digit-to-romans\
    \ (remainder num 100)))]; not that good, but it works.\n      [(< num 1000) (list-append",
  "  ;; TODO: Write your solution for this problem here\n  (define (helper result\
    \ number)\n    (cond\n      [(> number 1000) result]\n      [(> number 900) (helper\
    \ (string-append result \"cm\") (- number 900))]\n      [(> number 500) (helper\
    \ (string-append result \"d\") (- number 500))]\n      [(> number 400) (helper\
    \ (string-append result \"cd\") (- number 400))]\n      [(> number 100) (helper\
    \ (string-append result \"c\") (- number 100))]\n      [(> number 90) (helper\
    \ (string-append result \"xc\") (- number 90))]\n      [(> number 50) (helper\
    \ (string-append result \"l\") (- number 50))]\n      [(> number 40) (helper (string-append\
    \ result \"xl\") (- number 40))]\n      [(> number 10) (helper (string-append\
    \ result \"x\") (- number 10))]\n      [(> number 9) (helper (string-append result\
    \ \"ix\") (- number 9))]\n      [(> number 5) (helper (string-append result \"\
    v\") (- number 5))]\n      [(> number 4) (helper (string-append result \"iv\"\
    ) (- number 4))]\n      [(> number 1) (helper (string-append result \"i\") (-\
    \ number 1))]\n      [else result]))\n  (helper \"\" number))\n", "  (define (digit\
    \ i r n)\n    (cond\n      [(= i 1)\n       (if (= r 0) 'i 'v)]\n      [(= i 2)\n\
    \       (if (= r 0) 'x 'l)]\n      [(= i 3)\n       (if (= r 0) 'c 'd)]\n    \
    \  [(= i 4)\n       (if (= r 0) 'm 'i)]))\n  (define (iter i j n)\n    (let ((n\
    \ (quotient n 10)))\n      (if (= n 0)\n          (string-append (make-string\
    \ i #\\i)\n                         (make-string j #\\v)\n                   \
    \      (make-string (- 5 i j) #\\x))\n          (let ((r (remainder n 10)))\n\
    \            (string-append (iter (+ i r)\n                                 (if\
    \ (= j 5) j\n                                     (if (> r 5) (+ j 1) j))\n  \
    \                               n)\n                           (make-string r\
    \ (digit i r n)))))))\n  (string-downcase (iter 0 0 number)))\n```\n\n### _Dictator_\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(< number 1) (error \"Number must\
    \ be positive\")]\n    [(< number 4) (string-append (string (integer->char (+\
    \ #\\i (- number 1))))\n                                 (string (integer->char\
    \ #\\i)))]\n    [(< number 9) (string-append (string (integer->char (+ #\\v (-\
    \ number 4))))\n                                 (string (integer->char #\\i)))]\n\
    \    [(< number 40) (string-append (string (integer->char (+ #\\x (- (/ number\
    \ 10) 5))))\n                                  (string (integer->char #\\x)))]\n\
    \    [(< number 90) (string-append (string (integer->char (+ #\\l (- (/ number\
    \ 50) 5))))\n                                  (string (integer->char #\\x)))]\n\
    \    [(< number 400) (string-append (string (integer->char (+ #\\c (- (/ number\
    \ 100) 5))))\n                                   (string (integer->char #\\c)))]\n\
    \    [(< number 900) (string-append (string (integer->char (+ #\\d (- (/ number\
    \ 500) 5))))\n                                   (string (integer->char #\\c)))]\n\
    \    [(< number 4000) (string-append (string (integer->char (+ #\\m (- (/ number\
    \ 1000) 5))))\n                                    (string (integer->char #\\\
    m)))]\n    [else (error \"Number must be less than or equal to 4000\")]))\n",
  "    (local [(define (int_to_mini_roman-helper n)\n            (cond\n         \
    \       [(= n 0) '()]\n                [(>= n 1000) (cons 'm (int_to_mini_roman-helper\
    \ (- n 1000)))]\n                [(>= n 900) (cons 'c (cons 'm (int_to_mini_roman-helper\
    \ (- n 900))))]\n                [(>= n 500) (cons 'd (int_to_mini_roman-helper\
    \ (- n 500)))]\n                [(>= n 400) (cons 'c (cons 'd (int_to_mini_roman-helper\
    \ (- n 400))))]\n                [(>= n 100) (cons 'c (int_to_mini_roman-helper\
    \ (- n 100)))]\n                [(>= n 90) (cons 'x (cons 'c (int_to_mini_roman-helper\
    \ (- n 90))))]\n                [(>= n 50) (cons 'l (int_to_mini_roman-helper\
    \ (- n 50)))]\n                [(>= n 40) (cons 'x (cons 'l (int_to_mini_roman-helper\
    \ (- n 40))))]\n                [(>= n 10) (cons 'x (int_to_mini_roman-helper\
    \ (- n 10)))]\n                [(>= n 9) (cons 'i (cons 'x (int_to_mini_roman-helper\
    \ (- n 9))))]\n                [(>= n 5) (cons 'v (int_to_mini_roman-helper (-\
    \ n 5)))]\n                [(>= n 4) (cons 'i (cons 'v (int_to_mini_roman-helper\
    \ (- n 4))))]\n                [(>= n 1) (cons 'i (int_to_mini_roman-helper (-\
    \ n 1)))]\n                [else '()]))]\n        (string-join (int_to_mini_roman-helper\
    \ number) \"\")))\n```\n\n### 15/04/2019\n\n```racket\n#lang racket\n", "  (let\
    \ ([hash (list 'list\n                    (list 1 \"i\")\n                   \
    \ (list 5 \"v\")\n                    (list 10 \"x\")\n                    (list\
    \ 50 \"l\")\n                    (list 100 \"c\")\n                    (list 500\
    \ \"d\")\n                    (list 1000 \"m\"))])\n    (define (int_to_mini_roman_helper\
    \ number acc)\n      (if (<= number 0)\n          acc\n          (let ([sub (sub1\
    \ number)])\n            (cond [(<= number 1)\n                   (string-append\
    \ acc (cadr (assoc 1 hash)))]\n                  [(<= number 4)\n            \
    \       (int_to_mini_roman_helper sub (string-append acc (cadr (assoc 1 hash))))]\n\
    \                  [(<= number 5)\n                   (string-append acc (cadr\
    \ (assoc 5 hash)))]\n                  [(<= number 9)\n                   (int_to_mini_roman_helper\
    \ sub (string-append acc (cadr (assoc 1 hash))))]\n                  [(<= number\
    \ 10)\n                   (string-append acc (cadr (assoc 10 hash)))]\n      \
    \            [(<= number 40)\n                   (int_to_mini_roman_helper (sub1\
    \ (mul 10 sub)) (string-append acc (cadr (assoc 10 hash))))]\n               \
    \   [(<= number 50)\n                   (string-append acc (cadr (assoc 50 hash)))]\n\
    \                  [(<= number 90)\n                   (int_to_mini_roman_helper\
    \ (sub1 (mul 10 sub)) (string-append acc (cadr (assoc 10 hash))))]\n         \
    \         [(<= number 100)\n                   (string-append acc (cadr (assoc\
    \ 100 hash)))]\n                  [(<= number 400)\n                   (int_to_mini_roman_helper\
    \ (sub1 (mul 100 sub)) (string-append acc (cadr (assoc 100 hash))))]\n       \
    \           [(<= number 500)\n                   (string-append acc (cadr (assoc\
    \ 500 hash)))]\n                  [(<= number 900)\n                   (int_to_mini_roman_helper\
    \ (sub1 (mul 100 sub)) (string-append acc (cadr (assoc 100", "  (if (= number\
    \ 0) \"\"\n      (define (recur number result)\n        (cond [(= number 0) result]\n\
    \              [(<= number 3)\n               (recur (- number 1) (string-append\
    \ result \"i\"))]\n              [(<= number 8)\n               (recur (- number\
    \ 5) (string-append result \"v\"))]\n              [(<= number 39)\n         \
    \      (recur (- number 10) (string-append result \"x\"))]\n              [(<=\
    \ number 89)\n               (recur (- number 50) (string-append result \"l\"\
    ))]\n              [(<= number 399)\n               (recur (- number 100) (string-append\
    \ result \"c\"))]\n              [(<= number 899)\n               (recur (- number\
    \ 500) (string-append result \"d\"))]\n              [(<= number 3999)\n     \
    \          (recur (- number 1000) (string-append result \"m\"))]))\n      (string-downcase\
    \ (recur number \"\"))))", "  (define symbols '(\n    (1000 . \"m\")\n    (900\
    \ . \"cm\")\n    (500 . \"d\")\n    (400 . \"cd\")\n    (100 . \"c\")\n    (90\
    \ . \"xc\")\n    (50 . \"l\")\n    (40 . \"xl\")\n    (10 . \"x\")\n    (9 . \"\
    ix\")\n    (5 . \"v\")\n    (4 . \"iv\")\n    (1 . \"i\")))\n  (cond ((= number\
    \ 0) \"\")\n        (else (let ((next (assoc number symbols)))\n             \
    \   (if next\n                    (cons (cdr next) (int_to_mini_roman (- number\
    \ (car next))))\n                    (cons (int_to_mini_roman (car (assoc (car\
    \ symbols) symbols)))\n                          (int_to_mini_roman (- number\
    \ (car symbols)))))))))\n", "  (if (negative? number)\n      \"invalid number\"\
    \n      (let* ([one (list (list 1 \"i\") (list 5 \"v\") (list 10 \"x\") (list\
    \ 50 \"l\") (list 100 \"c\") (list 500 \"d\") (list 1000 \"m\"))]\n          \
    \   [num-str (number->string number)]\n             [result (for/fold ([result\
    \ \"\"]) ([digit (in-string num-str)])\n                       (cond\n       \
    \                  [(string-equal? digit \"0\") (string-append result \"\")]\n\
    \                         [(number? (string->number digit))\n                \
    \          (if (and (string-append? result \"v\") (string-append? (string-ref\
    \ result (sub1 (string-length result))) \"i\"))\n                            \
    \  (string-append (substring result 0 (sub1 (string-length result))) (list->string\
    \ (v+ \"l\" \"d\" \"m\" (string->number digit))))\n                          \
    \    (if (and (string-append? result \"x\") (string-append? (string-ref result\
    \ (sub1 (string-length result))) \"i\"))\n                                  (string-append\
    \ (substring result 0 (sub1 (string-length result))) (list->string (v+ \"c\" \"\
    d\" \"m\" (string->number digit))))\n                                  (if (and\
    \ (string-append? result \"l\") (string-append? (string-ref result (sub1 (string-length\
    \ result))) \"x\"))\n                                      (string-append (substring\
    \ result 0 (sub1 (string-length result))) (list->string (v+ \"c\" \"d\" \"m\"\
    \ (string->number digit))))\n                                      (if (and (string-append?\
    \ result \"c\") (string-append? (string-ref result (sub1 (string-length result)))\
    \ \"x\"))\n                                          (string-append (substring\
    \ result 0 (sub1 (string-length result))) (list->string (v+ \"c\" \"d\" \"m\"\
    \ (string->number digit))))\n                                          (if (and\
    \ (string-append? result \"d\") (string-append? (string-ref result (sub1 (string-length\
    \ result))) \"c\"))\n                                              (string-append\
    \ (substring", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n\
    \        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number\
    \ 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n \
    \       ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number\
    \ 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n\
    \        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((=\
    \ number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17)\
    \ \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\"\
    )\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n        ((=\
    \ number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((= number\
    \ 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26) \"xxvi\"\
    )\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\")\n   \
    \     ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n        ((= number\
    \ 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number 33) \"\
    xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"xxxv\"\
    )\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\")\n   \
    \     ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n       \
    \ ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "  (if (equal? number 0)\n      \"\"\n      (string-append\
    \ (rem_to_roman (modulo number 10))\n                     (int_to_mini_roman (quotient\
    \ number 10)))))\n", "  (let ([ones-string (integer->string (modulo number 10))]\n\
    \        [tens-string (integer->string (modulo (quotient number 10) 10))]\n  \
    \      [hundreds-string (integer->string (modulo (quotient number 100) 10))]\n\
    \        [thousands-string (integer->string (modulo (quotient number 1000) 10))])\n\
    \    (string-append\n     (make-string (string->number thousands-string) #\\m)\n\
    \     (cond [(string=? hundreds-string \"0\") \"\"]\n           [(string=? hundreds-string\
    \ \"9\") \"cm\"]\n           [(string=? hundreds-string \"8\") \"dccc\"]\n   \
    \        [(string=? hundreds-string \"7\") \"dcc\"]\n           [(string=? hundreds-string\
    \ \"6\") \"dc\"]\n           [(string=? hundreds-string \"5\") \"d\"]\n      \
    \     [(string=? hundreds-string \"4\") \"cd\"]\n           [(string=? hundreds-string\
    \ \"3\") \"ccc\"]\n           [(string=? hundreds-string \"2\") \"cc\"]\n    \
    \       [(string=? hundreds-string \"1\") \"c\"]\n           [else \"\"])\n  \
    \   (cond [(string=? tens-string \"0\") \"\"]\n           [(string=? tens-string\
    \ \"9\") \"xc\"]\n           [(string=? tens-string \"8\") \"lxxx\"]\n       \
    \    [(string=? tens-string \"7\") \"lxx\"]\n           [(string=? tens-string\
    \ \"6\") \"lx\"]\n           [(string=? tens-string \"5\") \"l\"]\n          \
    \ [(string=? tens-string \"4\") \"xl\"]\n           [(string=? tens-string \"\
    3\") \"xxx\"]\n           [(string=? tens-string \"2\") \"xx\"]\n           [(string=?\
    \ tens-string \"1\") \"x\"]\n           [else \"\"])\n     (cond [(string=? ones-string\
    \ \"0\") \"\"]\n           [(string=? ones-string \"9\") \"ix\"]\n           [(string=?\
    \ ones-string \"8\") \"viii\"]\n           [(string=? ones-string \"7\") \"vii\"\
    ]\n           [(string=? ones-string \"", "  (define num-map\n    '((1000 \"m\"\
    ) (900 \"cm\") (500 \"d\") (400 \"cd\") (100 \"c\") (90 \"xc\")\n      (50 \"\
    l\") (40 \"xl\") (10 \"x\") (9 \"ix\") (5 \"v\") (4 \"iv\") (1 \"i\")))\n  (for/fold\
    \ ([result \"\"]\n             ([(numeral . letter)] num-map))\n    (string-append\
    \ result\n                   (string-append (make-string (/ number numeral) letter)\n\
    \                                  (int_to_mini_roman (modulo number numeral))))))\n",
  "  (define one 'i)\n  (define five 'v)\n  (define ten 'x)\n  (define fifty 'l)\n\
    \  (define hundred 'c)\n  (define five-hundred 'd)\n  (define thousand 'm)\n \
    \ (define (make-roman-string roman-characters number)\n    (if (= number 0)\n\
    \        \"\"\n        (string-append\n         (make-roman-string (rest roman-characters)\
    \ (quotient number 10))\n         (string (list-ref roman-characters (remainder\
    \ number 10))))))\n  (make-roman-string (list one four ten fifty hundred five-hundred\
    \ thousand) number))\n", "  (define (int_to_mini_roman_ numeral result)\n    (cond\n\
    \      [(= numeral 1000) (string-append result \"m\")]\n      [(< numeral 1000)\
    \ (int_to_mini_roman_ (add1 numeral) (string-append result \"i\"))]\n      [(=\
    \ numeral 900) (string-append result \"cm\")]\n      [(< numeral 900) (int_to_mini_roman_\
    \ (add1 numeral) (string-append result \"i\"))]\n      [(= numeral 500) (string-append\
    \ result \"d\")]\n      [(< numeral 500) (int_to_mini_roman_ (add1 numeral) (string-append\
    \ result \"i\"))]\n      [(= numeral 400) (string-append result \"cd\")]\n   \
    \   [(< numeral 400) (int_to_mini_roman_ (add1 numeral) (string-append result\
    \ \"i\"))]\n      [(= numeral 100) (string-append result \"c\")]\n      [(< numeral\
    \ 100) (int_to_mini_roman_ (add1 numeral) (string-append result \"i\"))]\n   \
    \   [(= numeral 90) (string-append result \"xc\")]\n      [(< numeral 90) (int_to_mini_roman_\
    \ (add1 numeral) (string-append result \"i\"))]\n      [(= numeral 50) (string-append\
    \ result \"l\")]\n      [(< numeral 50) (int_to_mini_roman_ (add1 numeral) (string-append\
    \ result \"i\"))]\n      [(= numeral 40) (string-append result \"xl\")]\n    \
    \  [(< numeral 40) (int_to_mini_roman_ (add1 numeral) (string-append result \"\
    i\"))]\n      [(= numeral 10) (string-append result \"x\")]\n      [(< numeral\
    \ 10) (int_to_mini_roman_ (add1 numeral) (string-append result \"i\"))]\n    \
    \  [(= numeral 9) (string-append result \"ix\")]\n      [(< numeral 9) (int_to_mini_roman_\
    \ (add1 numeral) (string-append result \"i\"))]", "  (let loop ((number number)\n\
    \             (result \"\"))\n    (if (= number 0)\n        result\n        (let*\
    \ ((roman-units '((\"\" . 0)\n                              (\"i\" . 1)\n    \
    \                          (\"ii\" . 2)\n                              (\"iii\"\
    \ . 3)\n                              (\"iv\" . 4)\n                         \
    \     (\"v\" . 5)\n                              (\"vi\" . 6)\n              \
    \                (\"vii\" . 7)\n                              (\"viii\" . 8)\n\
    \                              (\"ix\" . 9)))\n               (roman-tens '((\"\
    \" . 0)\n                             (\"x\" . 10)\n                         \
    \    (\"xx\" . 20)\n                             (\"xxx\" . 30)\n            \
    \                 (\"xl\" . 40)\n                             (\"l\" . 50)\n \
    \                            (\"lx\" . 60)\n                             (\"lxx\"\
    \ . 70)\n                             (\"lxxx\" . 80)\n                      \
    \       (\"xc\" . 90)))\n               (roman-hundreds '((\"\" . 0)\n       \
    \                          (\"c\" . 100)\n                                 (\"\
    cc\" . 200)\n                                 (\"ccc\" . 300)\n              \
    \                   (\"cd\" . 400)\n                                 (\"d\" .\
    \ 500)\n                                 (\"dc\" . 600)\n                    \
    \             (\"dcc\" . 700)\n                                 (\"dccc\" . 800)\n\
    \                                 (\"cm\" . 900)))\n               (roman-thousands\
    \ '((\"\" . 0)\n                                  (\"m\" . 1000)\n           \
    \                       (\"mm\" . 2000)\n                                  (\"\
    mmm\" . 3000)))\n               (hundreds (modulo number 1000))\n            \
    \   (tens (modulo hundreds 100))\n               (units (modulo tens 10))\n  \
    \             (roman-hundreds-str (assoc-ref roman-hundreds hundreds))\n     \
    \          (roman-tens-str (assoc-ref roman-tens tens))\n               (roman-units-str\
    \ (assoc-ref roman-units units))\n               (roman-thousands-str (assoc-ref\
    \ roman-thousands (/ number 1000))))\n          (loop (- number (* (/ number 1000)\
    \ 1000))\n                (string-append roman-thousands-str\n               \
    \                roman-hundreds-str", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond [(= number 0) '()]\n          [(and (>= number 1000) (<= number 3999))\n\
    \           (cons 'm (int_to_mini_roman-helper (- number 1000)))]\n          [(and\
    \ (>= number 900) (<= number 999))\n           (cons 'cm (int_to_mini_roman-helper\
    \ (- number 900)))]\n          [(and (>= number 500) (<= number 899))\n      \
    \     (cons 'd (int_to_mini_roman-helper (- number 500)))]\n          [(and (>=\
    \ number 400) (<= number 499))\n           (cons 'cd (int_to_mini_roman-helper\
    \ (- number 400)))]\n          [(and (>= number 100) (<= number 399))\n      \
    \     (cons 'c (int_to_mini_roman-helper (- number 100)))]\n          [(and (>=\
    \ number 90) (<= number 99))\n           (cons 'xc (int_to_mini_roman-helper (-\
    \ number 90)))]\n          [(and (>= number 50) (<= number 89))\n           (cons\
    \ 'l (int_to_mini_roman-helper (- number 50)))]\n          [(and (>= number 40)\
    \ (<= number 49))\n           (cons 'xl (int_to_mini_roman-helper (- number 40)))]\n\
    \          [(and (>= number 10) (<= number 39))\n           (cons 'x (int_to_mini_roman-helper\
    \ (- number 10)))]\n          [(and (>= number 9) (<= number 9))\n           (cons\
    \ 'ix (int_to_mini_roman-helper (- number 9)))]\n          [(and (>= number 5)\
    \ (<= number 8))\n           (cons 'v (int_to_mini_roman-helper (- number 5)))]\n\
    \          [(and (>= number 4) (<= number 4))\n           (cons 'iv (int_to_mini_roman-helper\
    \ (- number 4)))]\n          [(and (>= number 1) (<= number 3))\n           (cons\
    \ 'i (int_to_mini_roman-helper (- number 1)))]))\n  (string-downcase (string-append",
  "  (cond [(= number 1000) \"m\"]\n        [(= number  900) \"cm\"]\n        [(=\
    \ number  500) \"d\"]\n        [(= number  400) \"cd\"]\n        [(= number  100)\
    \ \"c\"]\n        [(= number   90) \"xc\"]\n        [(= number   50) \"l\"]\n\
    \        [(= number   40) \"xl\"]\n        [(= number   10) \"x\"]\n        [(=\
    \ number    9) \"ix\"]\n        [(= number    5) \"v\"]\n        [(= number  \
    \  4) \"iv\"]\n        [(= number    1) \"i\"]\n        [else (string-append (int_to_mini_roman\
    \ (quotient number 10))\n                             (int_to_mini_roman (remainder\
    \ number 10)))]))\n", "  (define (add-numeral numeral quotient)\n    (cond ((>\
    \ quotient 0) (string-append numeral (add-numeral numeral (- quotient 1))))\n\
    \          (else numeral)))\n  (cond ((= number 1000) (add-numeral \"m\" (/ number\
    \ 1000)))\n        ((= number 500) (add-numeral \"d\" (/ number 500)))\n     \
    \   ((= number 100) (add-numeral \"c\" (/ number 100)))\n        ((= number 50)\
    \ (add-numeral \"l\" (/ number 50)))\n        ((= number 10) (add-numeral \"x\"\
    \ (/ number 10)))\n        ((= number 5) (add-numeral \"v\" (/ number 5)))\n \
    \       ((= number 1) (add-numeral \"i\" (/ number 1)))\n        (else \"ERROR\"\
    )))\n", "  (define (find_romans [num number] [romans '(m c d x l v i)])\n    (if\
    \ (= number num)\n        (cons (car romans) (cons (car (cdr romans)) '()))\n\
    \        (if (zero? (modulo number num))\n            (cons (car romans) (find_romans\
    \ (car (cdr romans)) (quotient number num)))\n            (find_romans (car (cdr\
    \ romans)) number))))\n  (define (make_string romans)\n    (cond ((empty? romans)\
    \ \"\")\n          ((= (car romans) 'i) (string-append \"i\" (make_string (cdr\
    \ romans))))\n          ((= (car romans) 'v) (string-append \"v\" (make_string\
    \ (cdr romans))))\n          ((= (car romans) 'x) (string-append \"x\" (make_string\
    \ (cdr romans))))\n          ((= (car romans) 'l) (string-append \"l\" (make_string\
    \ (cdr romans))))\n          ((= (car romans) 'c) (string-append \"c\" (make_string\
    \ (cdr romans))))\n          ((= (car romans) 'd) (string-append \"d\" (make_string\
    \ (cdr romans))))\n          ((= (car romans) 'm) (string-append \"m\" (make_string\
    \ (cdr romans))))))\n  (string-map char-downcase (make_string (find_romans 'm\
    \ number))))\n", "  (begin (set! base-len 4)\n         (set! base-string \"IVXLCDM\"\
    )\n         (set! base-list (list 1 5 10 50 100 500 1000))\n         (set! base-list-i\
    \ 0)\n         (set! base-list-j 1)\n         (set! base-list-k 2)\n         (set!\
    \ ret \"\")\n         (for ([i (in-range base-len)])\n           (set! tmp (/\
    \ number (list-ref base-list i)))\n           (if (= 0 tmp)\n               (begin\
    \ (set! number (% number (list-ref base-list i)))\n                      (set!\
    \ base-list-i (+ base-list-i 3))\n                      (set! base-list-j (+ base-list-j\
    \ 3))\n                      (set! base-list-k (+ base-list-k 3)))\n         \
    \      (begin (set! ret (string-append ret (make-string tmp (string-ref base-string\
    \ base-list-i))))\n                      (if (and (>= tmp 4) (< tmp 9))\n    \
    \                      (begin (set! ret (string-append ret (string-ref base-string\
    \ base-list-k)))\n                                 (set! number (% number (list-ref\
    \ base-list k))))\n                          (begin (set! number (% number (list-ref\
    \ base-list i)))\n                                 (set! ret (string-append ret\
    \ (make-string (- tmp 5) (string-ref base-string base-list-j)))))))\n        \
    \              (set! base-list-i (+ base-list-i 3))\n                      (set!\
    \ base-list-j (+ base-list-j 3))\n                      (set! base-list-k (+ base-list-k\
    \ 3))))))\n         (string-downcase ret)))", "    (define roman-numerals '(('m\
    \ 'm 'm)\n                             ('m 'm 'd)\n                          \
    \   ('m 'm 'c)\n                             ('m 'd 'c)\n                    \
    \         ('m 'c 'c)\n                             ('d 'c 'c)\n              \
    \               ('c 'c 'c)\n                             ('c 'c 'l)\n        \
    \                     ('c 'l 'x)\n                             ('l 'x 'x)\n  \
    \                           ('x 'x 'x)\n                             ('x 'x 'v)\n\
    \                             ('x 'v 'i)\n                             ('v 'i\
    \ 'i)\n                             ('i 'i 'i)))\n    (define (roman-to-string-list\
    \ roman-list)\n        (define roman-to-string-dict {'m \"m\" 'd \"d\" 'c \"c\"\
    \ 'l \"l\" 'x \"x\" 'v \"v\" 'i \"i\"})\n        (map (\u03BB (x) (dict-ref roman-to-string-dict\
    \ x)) roman-list))\n    (define (string-list-to-string str-list)\n        (list->string\
    \ (list->string (list->string (list->string (list->string str-list)))))\n    (string-list-to-string\
    \ (roman-to-string-list (list-ref roman-numerals (- number 1)))))\n", "  (cond\n\
    \    ((<= number 1000) (build-roman 1000 \"m\" \"d\" \"c\" \"l\" \"x\" \"v\" \"\
    i\" number))\n    ((<= number 900) (build-roman 900 \"c\" \"d\" \"c\" \"l\" \"\
    x\" \"v\" \"i\" number))\n    ((<= number 500) (build-roman 500 \"d\" \"c\" \"\
    l\" \"x\" \"v\" \"i\" number))\n    ((<= number 400) (build-roman 400 \"c\" \"\
    d\" \"c\" \"l\" \"x\" \"v\" \"i\" number))\n    ((<= number 100) (build-roman\
    \ 100 \"c\" \"l\" \"x\" \"v\" \"i\" number))\n    ((<= number 90) (build-roman\
    \ 90 \"x\" \"l\" \"x\" \"v\" \"i\" number))\n    ((<= number 50) (build-roman\
    \ 50 \"l\" \"x\" \"v\" \"i\" number))\n    ((<= number 40) (build-roman 40 \"\
    x\" \"l\" \"x\" \"v\" \"i\" number))\n    ((<= number 10) (build-roman 10 \"x\"\
    \ \"v\" \"i\" number))\n    ((<= number 9) (build-roman 9 \"i\" \"v\" \"i\" number))\n\
    \    ((<= number 5) (build-roman 5 \"v\" \"i\" number))\n    ((<= number 4) (build-roman\
    \ 4 \"i\" \"v\" \"i\" number))\n    ((<= number 1) (build-roman 1 \"i\" number))\n\
    \    (else \"\")))\n", "  (let ([number-left number]\n        [result \"\"])\n\
    \    (define (div-mod divisor)\n      (let ([result-quotient (quotient number-left\
    \ divisor)]\n            [result-remainder (remainder number-left divisor)])\n\
    \        (set! number-left result-remainder)\n        result-quotient))\n    (set!\
    \ result\n          (format \"~a~a~a~a~a~a~a~a~a~a\"\n                  (make-string\
    \ (div-mod 1000) #\\m)\n                  (make-string (div-mod 500) #\\d)\n \
    \                 (make-string (div-mod 100) #\\c)\n                  (make-string\
    \ (div-mod 50) #\\l)\n                  (make-string (div-mod 10) #\\x)\n    \
    \              (make-string (div-mod 5) #\\v)\n                  (make-string\
    \ (div-mod 1) #\\i)))\n    (string-downcase (substring result 0 (string-length\
    \ result)))))\n```\n\n### 2. Checkout\n\nThe provided solution is a combination\
    \ of two different solutions:\n\n* checkout-solution-with-map\n* checkout-solution-with-reduce\n\
    \n#### 2.1 checkout-solution-with-map\n\nThe first solution uses maps to store\
    \ information about the prices of items,\nand the number of items in the basket.\n\
    \n```racket\n#lang racket\n", "  (define (thousands n) (string-append (make-string\
    \ (/ n 1000) #\\m)))\n  (define (hundreds n)\n    (cond\n      [(= 0 (% n 100))\
    \ \"\"]\n      [(= 100 n) \"c\"]\n      [(= 200 n) \"cc\"]\n      [(= 300 n) \"\
    ccc\"]\n      [(= 400 n) \"cd\"]\n      [(= 500 n) \"d\"]\n      [(= 600 n) \"\
    dc\"]\n      [(= 700 n) \"dcc\"]\n      [(= 800 n) \"dccc\"]\n      [(= 900 n)\
    \ \"cm\"]))\n  (define (tens n)\n    (cond\n      [(= 0 (% n 10)) \"\"]\n    \
    \  [(= 10 n) \"x\"]\n      [(= 20 n) \"xx\"]\n      [(= 30 n) \"xxx\"]\n     \
    \ [(= 40 n) \"xl\"]\n      [(= 50 n) \"l\"]\n      [(= 60 n) \"lx\"]\n      [(=\
    \ 70 n) \"lxx\"]\n      [(= 80 n) \"lxxx\"]\n      [(= 90 n) \"xc\"]))\n  (define\
    \ (ones n)\n    (cond\n      [(= 0 n) \"\"]\n      [(= 1 n) \"i\"]\n      [(=\
    \ 2 n) \"ii\"]\n      [(= 3 n) \"iii\"]\n      [(= 4 n) \"iv\"]\n      [(= 5 n)\
    \ \"v\"]\n      [(= 6 n) \"vi\"]\n      [(= 7 n) \"vii\"]\n      [(= 8 n) \"viii\"\
    ]\n      [(= 9 n) \"ix\"]))\n  (string-append (thousands number)\n           \
    \      (hundreds number)\n                 (tens number)\n                 (ones\
    \ number)))\n", "  (cond\n    [(<= number 0)\n     (error \"Number must be greater\
    \ than 0\")]\n    [(<= number 1000)\n     (string-lowercase (number->string number\
    \ 'roman))]\n    [else\n     (error \"Number must be less than or equal to 1000\"\
    )]))\n", "  (define (int_to_mini_roman_helper number result)\n    (if (= number\
    \ 0)\n        result\n        (int_to_mini_roman_helper (sub1 number) (string-append\
    \ result \"i\"))))\n  (cond\n    [(= number 1) \"i\"]\n    [(= number 5) \"v\"\
    ]\n    [(= number 10) \"x\"]\n    [(= number 50) \"l\"]\n    [(= number 100) \"\
    c\"]\n    [(= number 500) \"d\"]\n    [(= number 1000) \"m\"]\n    [(> number\
    \ 1000) \"too big number\"]\n    [(< number 1) \"too small number\"]\n    [else\
    \ (int_to_mini_roman_helper number \"\")]))\n", "  (define (int_to_mini_roman_internal\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(>= number 100)\n     \
    \  (cons 'c (int_to_mini_roman_internal (- number 100)))]\n      [(>= number 90)\n\
    \       (cons 'xc (int_to_mini_roman_internal (- number 90)))]\n      [(>= number\
    \ 50)\n       (cons 'l (int_to_mini_roman_internal (- number 50)))]\n      [(>=\
    \ number 40)\n       (cons 'xl (int_to_mini_roman_internal (- number 40)))]\n\
    \      [(>= number 10)\n       (cons 'x (int_to_mini_roman_internal (- number\
    \ 10)))]\n      [(>= number 9)\n       (cons 'ix (int_to_mini_roman_internal (-\
    \ number 9)))]\n      [(>= number 5)\n       (cons 'v (int_to_mini_roman_internal\
    \ (- number 5)))]\n      [(>= number 4)\n       (cons 'iv (int_to_mini_roman_internal\
    \ (- number 4)))]\n      [(>= number 1)\n       (cons 'i (int_to_mini_roman_internal\
    \ (- number 1)))]))\n  (string-downcase (apply string (int_to_mini_roman_internal\
    \ number))))\n```\n\n```racket\n#lang racket\n", "  (cond ((<= number 1000) (number->string\
    \ number #:radix 10))\n        (else \"not supported\")))", "  (match (number->list\
    \ number)\n    [(list) \"\"]\n    [(list a)\n     (cond\n       [(= a 1) \"i\"\
    ]\n       [(= a 2) \"ii\"]\n       [(= a 3) \"iii\"]\n       [(= a 4) \"iv\"]\n\
    \       [(= a 5) \"v\"]\n       [(= a 6) \"vi\"]\n       [(= a 7) \"vii\"]\n \
    \      [(= a 8) \"viii\"]\n       [(= a 9) \"ix\"])]\n    [(list a b)\n     (cond\n\
    \       [(= a 1)\n        (string-append (int_to_mini_roman (string->number (string\
    \ b))) \"x\")]\n       [(= a 2)\n        (string-append (int_to_mini_roman (string->number\
    \ (string b))) \"xx\")]\n       [(= a 3)\n        (string-append (int_to_mini_roman\
    \ (string->number (string b))) \"xxx\")]\n       [(= a 4)\n        (string-append\
    \ (int_to_mini_roman (string->number (string b))) \"xl\")]\n       [(= a 5)\n\
    \        (string-append (int_to_mini_roman (string->number (string b))) \"l\"\
    )]\n       [(= a 6)\n        (string-append (int_to_mini_roman (string->number\
    \ (string b))) \"lx\")]\n       [(= a 7)\n        (string-append (int_to_mini_roman\
    \ (string->number (string b))) \"lxx\")]\n       [(= a 8)\n        (string-append\
    \ (int_to_mini_roman (string->number (string b))) \"lxxx\")]\n       [(= a 9)\n\
    \        (string-append (int_to_mini_roman (string->number (string b))) \"xc\"\
    )]]\n    [(list a b c)\n     (cond\n       [(= a 1)\n        (string-append (int_to_mini_roman\
    \ (string->number (string b c))) \"c\")]\n       [(= a 2)\n        (string-append\
    \ (int_to_mini_roman (string->number (string b c))) \"cc\")]", "  (if (<= number\
    \ 0)\n      \"\"\n      (if (<= number 1000)\n          (number->string (mini-roman\
    \ number))\n          \"overflow\")))\n", "  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\
    \  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\
    \  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\
    \  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\
    \  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\
    \  )\n```\n\n## Tarea-3-TTE-ELE\n\nEn la carpeta `Tarea-3-TTE-ELE/` se encuentra\
    \ la consigna con los test que deben pasar.\nEl archivo `tarea-3-tte-ele.rkt`\
    \ debe ser completado con los casos de prueba que se solicitan.\nPueden utilizar\
    \ `racket -t tarea-3-tte-ele.rkt` para correr las pruebas.", "  (define (mini-roman-char\
    \ number-to-roman-char)\n    (if (zero? number-to-roman-char) '0'\n        (if\
    \ (<= number-to-roman-char 3) (number->string number-to-roman-char)\n        \
    \    (if (<= number-to-roman-char 8) (list-ref (list 'v v v v v i i i i)\n   \
    \                                                   (- number-to-roman-char 5))\n\
    \                (if (<= number-to-roman-char 9) (string-append \"ix\" (make-string\
    \ (- number-to-roman-char 9) #\\i))\n                    (if (<= number-to-roman-char\
    \ 39) (make-string number-to-roman-char #\\x)\n                        (if (<=\
    \ number-to-roman-char 89) (string-append \"l\" (make-string (- number-to-roman-char\
    \ 50) #\\x))\n                            (if (<= number-to-roman-char 99) (string-append\
    \ \"xc\" (make-string (- number-to-roman-char 90) #\\i))\n                   \
    \             (if (<= number-to-roman-char 399) (string-append \"c\" (make-string\
    \ (- number-to-roman-char 100) #\\x))\n                                    (if\
    \ (<= number-to-roman-char 899) (string-append \"d\" (make-string (- number-to-roman-char\
    \ 500) #\\c))\n                                        (if (<= number-to-roman-char\
    \ 999) (string-append \"cm\" (make-string (- number-to-roman-char 900) #\\x))\n\
    \                                            \"m\")))))))))))\n  (regexp-replace*\
    \ #rx\"0\" (number->string number) (regexp-replace* #rx\"^\" \"\" (string-join\
    \ (map mini-roman-char (string->list (number->string number))) \"\"))))\n", " \
    \ (define (int_to_mini_roman-1 number)\n    (cond\n      ((< number 1) \"\")\n\
    \      ((= number 1) \"i\")\n      ((= number 2) \"ii\")\n      ((= number 3)\
    \ \"iii\")\n      ((= number 4) \"iv\")\n      ((= number 5) \"v\")\n      ((=\
    \ number 6) \"vi\")\n      ((= number 7) \"vii\")\n      ((= number 8) \"viii\"\
    )\n      ((= number 9) \"ix\")\n      ((= number 10) \"x\")\n      ((= number\
    \ 11) \"xi\")\n      ((= number 12) \"xii\")\n      ((= number 13) \"xiii\")\n\
    \      ((= number 14) \"xiv\")\n      ((= number 15) \"xv\")\n      ((= number\
    \ 16) \"xvi\")\n      ((= number 17) \"xvii\")\n      ((= number 18) \"xviii\"\
    )\n      ((= number 19) \"xix\")\n      ((= number 20) \"xx\")\n      ((= number\
    \ 30) \"xxx\")\n      ((= number 40) \"xl\")\n      ((= number 50) \"l\")\n  \
    \    ((= number 60) \"lx\")\n      ((= number 70) \"lxx\")\n      ((= number 80)\
    \ \"lxxx\")\n      ((= number 90) \"xc\")\n      ((= number 100) \"c\")\n    \
    \  ((= number 200) \"cc\")\n      ((= number 300) \"ccc\")\n      ((= number 400)\
    \ \"cd\")\n      ((= number 500) \"d\")\n      ((= number 600) \"dc\")\n     \
    \ ((= number 700) \"dcc\")\n      ((= number 800) \"dccc\")\n      ((= number\
    \ 900) \"cm\")\n      ((= number 1000) \"m\")\n      ((> number 1000) (error \"\
    Input must be less than or equal to 1000\"))\n      (else (string-append\n   \
    \          (int_to_mini_roman-1 (/ number 10))\n             (int_to_mini_roman-1\
    \ (modulo number 10))))))\n  (string-downcase (int_to_mini_roman-1 number)))\n",
  "  (define (hundreds h)\n    (cond\n      [(< h 4) (number->string (make-list h\
    \ #\\c))]\n      [(= h 4) \"cd\"]\n      [(< h 9) (string-append \"d\" (number->string\
    \ (make-list (- h 5) #\\c)))]\n      [else \"cm\"]))\n  (define (tens t)\n   \
    \ (cond\n      [(< t 4) (number->string (make-list t #\\x))]\n      [(= t 4) \"\
    xl\"]\n      [(< t 9) (string-append \"l\" (number->string (make-list (- t 5)\
    \ #\\x)))]\n      [else \"xc\"]))\n  (define (ones o)\n    (cond\n      [(< o\
    \ 4) (number->string (make-list o #\\i))]\n      [(= o 4) \"iv\"]\n      [(< o\
    \ 9) (string-append \"v\" (number->string (make-list (- o 5) #\\i)))]\n      [else\
    \ \"ix\"]))\n  (string-append (hundreds (quotient number 100))\n             \
    \    (tens (remainder (quotient number 10) 10))\n                 (ones (remainder\
    \ number 10))))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"\
    ]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"\
    v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8)\
    \ \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n   \
    \ [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"\
    ]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number\
    \ 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 500) \"d\"]\n    [(= number 1000) \"m\"]\n\
    \    [else (string-append (int_to_mini_roman (/ number 10))\n                \
    \          (int_to_mini_roman (modulo number 10)))]))\n", "    (define (help num)\n\
    \        (cond\n            [(= num 1000) \"m\"]\n            [(= num 900) \"\
    cm\"]\n            [(= num 500) \"d\"]\n            [(= num 400) \"cd\"]\n   \
    \         [(= num 100) \"c\"]\n            [(= num 90) \"xc\"]\n            [(=\
    \ num 50) \"l\"]\n            [(= num 40) \"xl\"]\n            [(= num 10) \"\
    x\"]\n            [(= num 9) \"ix\"]\n            [(= num 5) \"v\"]\n        \
    \    [(= num 4) \"iv\"]\n            [(= num 1) \"i\"]\n            [else (format\
    \ \"~a~a\" (help (/ num 10)) (help (% num 10)))]))\n    (string-downcase (help\
    \ number)))\n", "    ;; TODO: do something here!\n    \"please fill this in, and\
    \ return the correct result\"\n)\n```\n\n```python\n# Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n\
    # Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19) ==\
    \ 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n# >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\ndef int_to_mini_roman(number):\n    # TODO: do something here!\n\
    \    return \"please fill this in, and return the correct result\"\n```\n\n```ruby\n\
    # Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n\
    # >>> int_to_mini_roman(19) == 'xix'\n# >>> int_to_mini_roman(152) == 'clii'\n\
    # >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number)\n    #\
    \ TODO: do something here!\n    return \"please fill this in, and return the correct\
    \ result\"\nend\n```\n\n```haskell\n{-\n    Given a positive integer, obtain its\
    \ roman numeral equivalent as a string,\n    and return it in lowercase.\n   \
    \ Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19)\
    \ == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426)\
    \ == 'cdxxvi'\n-}\nint_to_mini_roman :: Int -> String\nint_to_mini_roman number\
    \ =\n    -- TODO: do something here!\n    \"please fill this in, and return the\
    \ correct result\"\n```\n\n## Part 3: A working solution\n\n```racket\n#lang racket\n",
  "  (match number\n    [(_ (and (? (and (<= 1 x) (<= x 1000))) x))\n     ;; NOTE:\
    \ this implementation is slightly more complicated than it needs to be\n     ;;\
    \ just to demonstrate the pattern matching of different Racket forms.\n     (let*\
    \ ([ones (modulo x 10)]\n            [tens (/ x 10)]\n            [hundreds (/\
    \ x 100)]\n            [thousands (/ x 1000)])\n       (string-join\n        (append\n\
    \         (map char-upcase\n              (reverse\n               (map\n    \
    \            (match-lambda [1 'i] [2 'ii] [3 'iii] [4 'iv] [5 'v] [6 'vi] [7 'vii]\
    \ [8 'viii] [9 'ix])\n                ones)))\n         (map char-upcase\n   \
    \           (reverse\n               (map\n                (match-lambda [1 'x]\
    \ [2 'xx] [3 'xxx] [4 'xl] [5 'l] [6 'lx] [7 'lxx] [8 'lxxx] [9 'xc])\n      \
    \          tens)))\n         (map char-upcase\n              (reverse\n      \
    \         (map\n                (match-lambda [1 'c] [2 'cc] [3 'ccc] [4 'cd]\
    \ [5 'd] [6 'dc] [7 'dcc] [8 'dccc] [9 'cm])\n                hundreds)))\n  \
    \       (map char-upcase\n              (reverse\n               (map\n      \
    \          (match-lambda [1 'm] [2 'mm] [3 'mmm])\n                thousands))))\n\
    \        (string #\\space))))])\n```\n\n<table class=\"table table-bordered\"\
    >\n  <thead>\n    <tr>\n      <th scope=\"col\">Language</th>\n      <th scope=\"\
    col\">Filename</th>\n      <th scope=\"col\">Prerequisites</th>\n      <th scope=\"\
    col\">Instructions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>C</td>\n\
    \      <td><code>mini_roman.c</code></td>\n      <td>None", "  ; build the loo\
    \ table\n  (define (build-lookup)\n    (define (make-item index)\n      (list\
    \ (list (list (string (* index 5)) \"v\")\n                  (list (string (*\
    \ (+ index 1) 5)) \"l\")\n                  (list (string (* (+ index 2) 5)) \"\
    d\"))\n            (list (list (string (* index 1)) \"i\")\n                 \
    \ (list (string (* (+ index 1) 1)) \"x\")\n                  (list (string (*\
    \ (+ index 2) 1)) \"c\")\n                  (list (string (* (+ index 3) 1)) \"\
    m\"))))\n    (list (make-item 0) (make-item 1) (make-item 2) (make-item 3)))\n\
    \  (define (get-mini-roman number lookup-table)\n    (define (get-roman-for-single-digit\
    \ number index)\n      (define (get-roman number)\n        (define (search needle\
    \ haystack)\n          (define (get-val haystack)\n            (if (= (length\
    \ haystack) 1)\n                (car haystack)\n                (get-val (cdr\
    \ haystack))))\n          (if (= (car (car haystack)) needle)\n              (cadr\
    \ (car haystack))\n              (search needle (cdr haystack))))\n        (if\
    \ (equal? number 0)\n            \"\"\n            (let ((num-str (number->string\
    \ number)))\n              (string-append (search num-str (car (get-val lookup-table\
    \ index)))\n                             (get-roman (- number (string->number\
    \ num-str)))))))\n      (if (equal? index 3)\n          (get-roman number)\n \
    \         (if (<= number 3)\n              (get-roman number)\n              (string-append\
    \ (get-roman (/ number 5))\n                             (string-append (get-roman\
    \ (% number 5))\n                                            (get-roman (/ (-\
    \ number (string->number (number->string (/ number 5)))) 5)))))))\n    (get-roman-for-single-digit\
    \ number 0))\n  (define (get-mini-roman-with-lookup number lookup-table)\n   \
    \ (define (calc-roman-for-num-with-lookup number)\n     ", "  (string-downcase\n\
    \   (integer->roman number)))\n", "  (define (iter n result)\n    (cond\n    \
    \  [(> n 1000) (error \"integer out of range\")]\n      [(<= n 0) (error \"integer\
    \ out of range\")]\n      [(= n 1000) (string-append result \"m\")]\n      [(=\
    \ n 900) (string-append result \"cm\")]\n      [(= n 500) (string-append result\
    \ \"d\")]\n      [(= n 400) (string-append result \"cd\")]\n      [(= n 100) (string-append\
    \ result \"c\")]\n      [(= n 90) (string-append result \"xc\")]\n      [(= n\
    \ 50) (string-append result \"l\")]\n      [(= n 40) (string-append result \"\
    xl\")]\n      [(= n 10) (string-append result \"x\")]\n      [(= n 9) (string-append\
    \ result \"ix\")]\n      [(= n 5) (string-append result \"v\")]\n      [(= n 4)\
    \ (string-append result \"iv\")]\n      [(= n 1) (string-append result \"i\")]\n\
    \      [else\n        (cond\n          [(>= n 1000) (iter (- n 1000) (string-append\
    \ result \"m\"))]\n          [(>= n 900) (iter (- n 900) (string-append result\
    \ \"cm\"))]\n          [(>= n 500) (iter (- n 500) (string-append result \"d\"\
    ))]\n          [(>= n 400) (iter (- n 400) (string-append result \"cd\"))]\n \
    \         [(>= n 100) (iter (- n 100) (string-append result \"c\"))]\n       \
    \   [(>= n 90) (iter (- n 90) (string-append result \"xc\"))]\n          [(>=\
    \ n 50) (iter (- n 50) (string-append result \"l\"))]\n          [(>= n 40) (iter\
    \ (- n 40) (string-append result \"xl\"))]\n          [(>= n 10) (iter (- n 10)\
    \ (string-append result \"x\"))]\n          [(>= n 9) (iter (- n 9) (string-append\
    \ result \"ix\"))]\n          [(>= n 5) (iter (- n 5) (string-append", "  (cond\n\
    \    [(zero? number) \"\"]\n    [(= number 1000) \"m\"]\n    [(= number 500) \"\
    d\"]\n    [(= number 100) \"c\"]\n    [(= number 50) \"l\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 5) \"v\"]\n    [(= number 1) \"i\"]\n    [(> number 1000)\
    \ (string-append \"m\" (int_to_mini_roman (- number 1000)))]\n    [(> number 500)\
    \ (string-append \"d\" (int_to_mini_roman (- number 500)))]\n    [(> number 100)\
    \ (string-append \"c\" (int_to_mini_roman (- number 100)))]\n    [(> number 50)\
    \ (string-append \"l\" (int_to_mini_roman (- number 50)))]\n    [(> number 10)\
    \ (string-append \"x\" (int_to_mini_roman (- number 10)))]\n    [(> number 5)\
    \ (string-append \"v\" (int_to_mini_roman (- number 5)))]\n    [(> number 1) (string-append\
    \ \"i\" (int_to_mini_roman (- number 1)))]))\n", "  (cond ((= number 1) \"i\"\
    )\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((=\
    \ number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\"\
    )\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((=\
    \ number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"\
    xi\")\n        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n   \
    \     ((= number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number\
    \ 16) \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 21) \"xxi\")\n        ((= number 22) \"xxii\")\n        ((= number 23)\
    \ \"xxiii\")\n        ((= number 24) \"xxiv\")\n        ((= number 25) \"xxv\"\
    )\n        ((= number 26) \"xxvi\")\n        ((= number 27) \"xxvii\")\n     \
    \   ((= number 28) \"xxviii\")\n        ((= number 29) \"xxix\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 31) \"xxxi\")\n        ((= number 32)\
    \ \"xxxii\")\n        ((= number 33) \"xxxiii\")\n        ((= number 34) \"xxxiv\"\
    )\n        ((= number 35) \"xxxv\")\n        ((= number 36) \"xxxvi\")\n     \
    \   ((= number 37) \"xxxvii\")\n        ((= number 38) \"xxxviii\")\n        ((=\
    \ number 39) \"xxxix\")\n        ((= number 40) \"xl\")\n        ((= number 41)\
    \ \"xli\")\n        ((= number 42) \"xlii\")\n        ((= number 43) \"xliii\"\
    )\n        ((= number 44) \"xliv\")\n        ((= number 45) \"xlv\")\n       \
    \ ((= number 46) \"xlvi\")\n        ((= number 47", "  (string-downcase (int_to_roman\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond ((= number\
    \ 0) '())\n          ((= number 1) '(\"i\"))\n          ((= number 2) '(\"ii\"\
    ))\n          ((= number 3) '(\"iii\"))\n          ((= number 4) '(\"iv\"))\n\
    \          ((= number 5) '(\"v\"))\n          ((= number 6) '(\"vi\"))\n     \
    \     ((= number 7) '(\"vii\"))\n          ((= number 8) '(\"viii\"))\n      \
    \    ((= number 9) '(\"ix\"))\n          ((= number 10) '(\"x\"))\n          ((=\
    \ number 20) '(\"xx\"))\n          ((= number 30) '(\"xxx\"))\n          ((= number\
    \ 40) '(\"xl\"))\n          ((= number 50) '(\"l\"))\n          ((= number 60)\
    \ '(\"lx\"))\n          ((= number 70) '(\"lxx\"))\n          ((= number 80) '(\"\
    lxxx\"))\n          ((= number 90) '(\"xc\"))\n          ((= number 100) '(\"\
    c\"))\n          ((= number 200) '(\"cc\"))\n          ((= number 300) '(\"ccc\"\
    ))\n          ((= number 400) '(\"cd\"))\n          ((= number 500) '(\"d\"))\n\
    \          ((= number 600) '(\"dc\"))\n          ((= number 700) '(\"dcc\"))\n\
    \          ((= number 800) '(\"dccc\"))\n          ((= number 900) '(\"cm\"))\n\
    \          ((= number 1000) '(\"m\"))\n          (else '())))\n  (string-join\
    \ (int_to_mini_roman-helper number) \"\"))\n", "  (define (int_to_mini_roman_iter\
    \ number roman-numeral)\n    (let ([remaining (modulo number 10)])\n      (cond\
    \ [(= number 0) (string-append (reverse roman-numeral))]\n            [(= remaining\
    \ 9) (int_to_mini_roman_iter (- number 9) (string-append \"ix\" roman-numeral))]\n\
    \            [(>= remaining 5) (int_to_mini_roman_iter (- number 5) (string-append\
    \ \"v\" roman-numeral))]\n            [(= remaining 4) (int_to_mini_roman_iter\
    \ (- number 4) (string-append \"iv\" roman-numeral))]\n            [else (int_to_mini_roman_iter\
    \ (- number 1) (string-append \"i\" roman-numeral))])))\n  (string-downcase (int_to_mini_roman_iter\
    \ number \"\")))\n", "  (define (int_to_mini_roman-iter n s)\n    (if (= n 0)\n\
    \        (string-append \"\")\n        (if (= n 1000)\n            (string-append\
    \ \"m\" (int_to_mini_roman-iter (- n 1000) \"m\"))\n            (if (= n 900)\n\
    \                (string-append \"cm\" (int_to_mini_roman-iter (- n 900) \"cm\"\
    ))\n                (if (= n 500)\n                    (string-append \"d\" (int_to_mini_roman-iter\
    \ (- n 500) \"d\"))\n                    (if (= n 400)\n                     \
    \   (string-append \"cd\" (int_to_mini_roman-iter (- n 400) \"cd\"))\n       \
    \                 (if (= n 100)\n                            (string-append \"\
    c\" (int_to_mini_roman-iter (- n 100) \"c\"))\n                            (if\
    \ (= n 90)\n                                (string-append \"xc\" (int_to_mini_roman-iter\
    \ (- n 90) \"xc\"))\n                                (if (= n 50)\n          \
    \                          (string-append \"l\" (int_to_mini_roman-iter (- n 50)\
    \ \"l\"))\n                                    (if (= n 40)\n                \
    \                        (string-append \"xl\" (int_to_mini_roman-iter (- n 40)\
    \ \"xl\"))\n                                        (if (= n 10)\n           \
    \                                 (string-append \"x\" (int_to_mini_roman-iter\
    \ (- n 10) \"x\"))\n                                            (if (= n 9)\n\
    \                                                (string-append \"ix\" (int_to_mini_roman-iter\
    \ (- n 9) \"ix\"))\n                                                (if (= n 5)\n\
    \                                                    (string-append \"v\" (int_to_mini_roman-iter\
    \ (- n 5) \"v\"))\n                                                    (if (=\
    \ n 4)\n                                                        (string-append\
    \ \"iv\" (int_to_mini_roman-iter (- n 4) \"iv\"))\n                          \
    \                              (if (= n 1)\n                                 \
    \                           (string-append \"i\" (int_to_mini_roman-iter (- n\
    \ 1) \"i\"))\n                                                            (string-",
  "  (define (div number divisor)\n    (truncate (/ number divisor)))\n  (define (mod\
    \ number divisor)\n    (- number (* (div number divisor) divisor)))\n  (define\
    \ (miniroman number roman)\n    (cond\n      [(= number 0) roman]\n      [(= number\
    \ 1000) (string-append roman \"m\")]\n      [(= number 900) (string-append roman\
    \ \"cm\")]\n      [(= number 500) (string-append roman \"d\")]\n      [(= number\
    \ 400) (string-append roman \"cd\")]\n      [(= number 100) (string-append roman\
    \ \"c\")]\n      [(= number 90) (string-append roman \"xc\")]\n      [(= number\
    \ 50) (string-append roman \"l\")]\n      [(= number 40) (string-append roman\
    \ \"xl\")]\n      [(= number 10) (string-append roman \"x\")]\n      [(= number\
    \ 9) (string-append roman \"ix\")]\n      [(= number 5) (string-append roman \"\
    v\")]\n      [(= number 4) (string-append roman \"iv\")]\n      [(= number 1)\
    \ (string-append roman \"i\")]\n      [else\n       (cond\n         [(>= number\
    \ 1000) (miniroman (mod number 1000) (string-append roman \"m\"))]\n         [(>=\
    \ number 900) (miniroman (mod number 900) (string-append roman \"cm\"))]\n   \
    \      [(>= number 500) (miniroman (mod number 500) (string-append roman \"d\"\
    ))]\n         [(>= number 400) (miniroman (mod number 400) (string-append roman\
    \ \"cd\"))]\n         [(>= number 100) (miniroman (mod number 100) (string-append\
    \ roman \"c\"))]\n         [(>= number 90) (miniroman (mod number 90) (string-append\
    \ roman \"xc\"))]\n         [(>= number 50) (miniroman (mod number 50) (string-append\
    \ roman \"l\"))]\n         [(>= number 40) (miniroman (mod number 40)", "  (if\
    \ (<= number 0)\n      \"\"\n      (if (<= number 1000)\n          (let ((nums\
    \ '((\"m\" . 1000)\n                        (\"cm\" . 900)\n                 \
    \       (\"d\" . 500)\n                        (\"cd\" . 400)\n              \
    \          (\"c\" . 100)\n                        (\"xc\" . 90)\n            \
    \            (\"l\" . 50)\n                        (\"xl\" . 40)\n           \
    \             (\"x\" . 10)\n                        (\"ix\" . 9)\n           \
    \             (\"v\" . 5)\n                        (\"iv\" . 4)\n            \
    \            (\"i\" . 1))))\n            (cond ((>= number (cdar nums))\n    \
    \               (string-append (caar nums)\n                                 \
    \ (int_to_mini_roman (- number (cdar nums)))))\n                  (else\n    \
    \               (string-append (caar (cdr nums))\n                           \
    \       (int_to_mini_roman (- number (cdar (cdr nums))))))))\n          \"Error:\
    \ Invalid number.\")))\n", "  (define (int_to_mini_roman-helper n r n1 r1 n5 r5)\n\
    \    (if (< n number)\n      (if (= n (+ number 1))\n        (if (and (= n5 n)\
    \ (= r5 'i))\n          (string-append r1 r5)\n          (string-append r r5))\n\
    \        (if (= n (+ number 4))\n          (string-append r1 r)\n          (if\
    \ (= n (+ number 5))\n            (string-append r5 r1)\n            (if (< n\
    \ (+ number 9))\n              (string-append r5 (int_to_mini_roman-helper (+\
    \ n 1) r n1 r1 n5 r5))\n              (string-append r r1)))))\n      r))\n  (define\
    \ (int_to_mini_roman-table n r n1 r1 n5 r5)\n    (if (> n 1000)\n      (error\
    \ \"Mini roman numerals can only represent numbers between 1 and 1000 inclusive.\"\
    )\n      (if (= n number)\n        (int_to_mini_roman-helper n r n1 r1 n5 r5)\n\
    \        (int_to_mini_roman-table (+ n 1) (string-append r \"i\")\n          (+\
    \ n1 1) (string-append r1 \"i\") (+ n5 1) (string-append r5 \"i\")))))\n  (int_to_mini_roman-table\
    \ 1 \"i\" 5 \"v\" 10 \"x\" 50 \"l\" 100 \"c\" 500 \"d\" 1000 \"m\"))\n```\n\n\
    ```Racket\n#lang racket\n", "  (let* ([num numeral-from-int number]\n        \
    \ [result (if (char-downcase? (string-ref num 0))\n                     (string-downcase\
    \ num)\n                     (string-upcase num))])\n    result))\n", "  (define\
    \ rom-str\n    '(\n       (\"m\" . 1000)\n       (\"cm\" . 900)\n       (\"d\"\
    \ . 500)\n       (\"cd\" . 400)\n       (\"c\" . 100)\n       (\"xc\" . 90)\n\
    \       (\"l\" . 50)\n       (\"xl\" . 40)\n       (\"x\" . 10)\n       (\"ix\"\
    \ . 9)\n       (\"v\" . 5)\n       (\"iv\" . 4)\n       (\"i\" . 1)\n     ))\n\
    \  (define (find-match number rom-str acc)\n    (if (eq? (car (cdr (car rom-str)))\
    \ number)\n        (cons (car (car rom-str)) acc)\n        (if (> (car (cdr (car\
    \ rom-str))) number)\n            (find-match number (cdr rom-str) acc)\n    \
    \        (find-match (- number (car (cdr (car rom-str)))) rom-str (cons (car (car\
    \ rom-str)) acc)))))\n  (apply string (reverse (find-match number rom-str '()))))\n",
  "  ;; Add code here\n  (define (int_to_mini_roman_iter number)\n    (define (int_to_mini_roman_iter_1\
    \ number)\n      (cond\n        [(>= number 1000) (int_to_mini_roman_iter (+ (-\
    \ number 1000) \"m\"))]\n        [(>= number 500) (int_to_mini_roman_iter (+ (-\
    \ number 500) \"d\"))]\n        [(>= number 100) (int_to_mini_roman_iter (+ (-\
    \ number 100) \"c\"))]\n        [(>= number 50) (int_to_mini_roman_iter (+ (-\
    \ number 50) \"l\"))]\n        [(>= number 10) (int_to_mini_roman_iter (+ (- number\
    \ 10) \"x\"))]\n        [(>= number 5) (int_to_mini_roman_iter (+ (- number 5)\
    \ \"v\"))]\n        [(>= number 1) (int_to_mini_roman_iter (+ (- number 1) \"\
    i\"))]\n        [else number]))\n    (define (int_to_mini_roman_iter_2 number)\n\
    \      (cond\n        [(>= number 50) (int_to_mini_roman_iter (+ (- number 50)\
    \ \"l\"))]\n        [(>= number 5) (int_to_mini_roman_iter (+ (- number 5) \"\
    v\"))]\n        [(>= number 1) (int_to_mini_roman_iter (+ (- number 1) \"i\"))]\n\
    \        [else number]))\n    (define (int_to_mini_roman_iter_3 number)\n    \
    \  (cond\n        [(>= number 10) (int_to_mini_roman_iter (+ (- number 10) \"\
    x\"))]\n        [(>= number 1) (int_to_mini_roman_iter (+ (- number 1) \"i\"))]\n\
    \        [else number]))\n    (define (int_to_mini_roman_iter_4 number)\n    \
    \  (cond\n        [(>= number 1) (int_to_mini_roman_iter (+ (- number 1) \"i\"\
    ))]\n        [else number]))\n    (cond\n      [(>= number 10) (int_to_mini_roman_iter_",
  "  ;; logic\n  )\n", "  (define (append-symbol symbol k)\n    (if (= k 0)\n    \
    \    '()\n        (cons symbol (append-symbol symbol (- k 1)))))\n  (cond\n  \
    \  [(= number 1000)\n     (append-symbol 'm 1)]\n    [(>= number 900)\n     (cons\
    \ 'c (cons 'm (append-symbol '-' 1)))]\n    [(>= number 500)\n     (cons 'd (append-symbol\
    \ '-' (- (/ number 100) 5)))]\n    [(>= number 400)\n     (cons 'c (cons 'd (append-symbol\
    \ '-' 1)))]\n    [(>= number 100)\n     (append-symbol 'c (/ number 100))]\n \
    \   [(>= number 90)\n     (cons 'x (cons 'c (append-symbol '-' 1)))]\n    [(>=\
    \ number 50)\n     (cons 'l (append-symbol '-' (- (/ number 10) 5)))]\n    [(>=\
    \ number 40)\n     (cons 'x (cons 'l (append-symbol '-' 1)))]\n    [(>= number\
    \ 10)\n     (append-symbol 'x (/ number 10))]\n    [(>= number 9)\n     (cons\
    \ 'i (cons 'x (append-symbol '-' 1)))]\n    [(>= number 5)\n     (cons 'v (append-symbol\
    \ '-' (- number 5)))]\n    [(>= number 4)\n     (cons 'i (cons 'v (append-symbol\
    \ '-' 1)))]\n    [(>= number 1)\n     (append-symbol 'i number)]\n    [else\n\
    \     '()]))\n", "    ...)\n", "  (define sym-to-num\n    '((i . 1) (v . 5) (x\
    \ . 10) (l . 50) (c . 100) (d . 500) (m . 1000)))\n  (define (int-to-mini-roman-helper\
    \ num roman-str)\n    (cond\n      [(= num 1000) (string-append roman-str \"m\"\
    )]\n      [(= num 900) (string-append roman-str \"cm\")]\n      [(= num 500) (string-append\
    \ roman-str \"d\")]\n      [(= num 400) (string-append roman-str \"cd\")]\n  \
    \    [(= num 100) (string-append roman-str \"c\")]\n      [(= num 90) (string-append\
    \ roman-str \"xc\")]\n      [(= num 50) (string-append roman-str \"l\")]\n   \
    \   [(= num 40) (string-append roman-str \"xl\")]\n      [(= num 10) (string-append\
    \ roman-str \"x\")]\n      [(= num 9) (string-append roman-str \"ix\")]\n    \
    \  [(= num 5) (string-append roman-str \"v\")]\n      [(= num 4) (string-append\
    \ roman-str \"iv\")]\n      [(= num 1) (string-append roman-str \"i\")]\n    \
    \  [(= num 0) roman-str]\n      [else (int-to-mini-roman-helper (- num (symbol-&gt;number\
    \ (car (rassoc (floor (/ num 10) sym-to-num)))) (string-append roman-str (symbol-&gt;string\
    \ (car (rassoc (floor (/ num 10) sym-to-num)))))))]))\n  (string-downcase (int-to-mini-roman-helper\
    \ number \"\")))\n</code>\nEDIT: I figured it out, I was using <code>symbol-&gt;number</code>\
    \ and <code>symbol-&gt;string</code> instead of <code>number-&gt;string</code>\
    \ and <code>string-&gt;symbol</code>.\n\n\nA:\n\nThe problem is", "  (cond ((=\
    \ number 1) 'i)\n        ((= number 2) 'ii)\n        ((= number 3) 'iii)\n   \
    \     ((= number 4) 'iv)\n        ((= number 5) 'v)\n        ((= number 6) 'vi)\n\
    \        ((= number 7) 'vii)\n        ((= number 8) 'viii)\n        ((= number\
    \ 9) 'ix)\n        ((= number 10) 'x)\n        ((= number 11) 'xi)\n        ((=\
    \ number 12) 'xii)\n        ((= number 13) 'xiii)\n        ((= number 14) 'xiv)\n\
    \        ((= number 15) 'xv)\n        ((= number 16) 'xvi)\n        ((= number\
    \ 17) 'xvii)\n        ((= number 18) 'xviii)\n        ((= number 19) 'xix)\n \
    \       ((= number 20) 'xx)\n        ((= number 30) 'xxx)\n        ((= number\
    \ 40) 'xl)\n        ((= number 50) 'l)\n        ((= number 60) 'lx)\n        ((=\
    \ number 70) 'lxx)\n        ((= number 80) 'lxxx)\n        ((= number 90) 'xc)\n\
    \        ((= number 100) 'c)\n        ((= number 200) 'cc)\n        ((= number\
    \ 300) 'ccc)\n        ((= number 400) 'cd)\n        ((= number 500) 'd')\n   \
    \     ((= number 600) 'dc)\n        ((= number 700) 'dcc)\n        ((= number\
    \ 800) 'dccc)\n        ((= number 900) 'cm)\n        ((= number 1000) 'm')\n \
    \       ((<= number 10) (int_to_mini_roman (- number 1)))\n        ((<= number\
    \ 20) (int_to_mini_roman (- number 2)))\n        ((<= number 30) (int_to_mini_roman\
    \ (- number 3)))\n        ((<= number 40) (int_to_mini_roman (- number 4)))\n\
    \        ((<= number 50) (int_to_mini_roman (- number 5)))\n        ((<= number\
    \ 60) (int_to_mini_roman (- number 6)))", "  (local\n    [(define (roman-digit\
    \ digit)\n       (cond [(zero? digit) \"\"]\n             [(< digit 4)  (string-append\
    \ (make-string digit #\\i) \"\")]\n             [(= digit 4)  \"iv\"]\n      \
    \       [(< digit 9)  (string-append \"v\" (make-string (- digit 5) #\\i))]\n\
    \             [(= digit 9)  \"ix\"]))\n     (define (roman-numeral number)\n \
    \      (cond [(zero? number)       \"\"]\n             [(< number 10)        (roman-digit\
    \ (modulo number 10))]\n             [(< number 100)       (string-append (roman-digit\
    \ (modulo (quotient number 10) 10)) (roman-numeral (modulo number 10)))]\n   \
    \          [(< number 1000)      (string-append (roman-digit (modulo (quotient\
    \ number 100) 10)) (roman-numeral (modulo number 100)))]\n             [(< number\
    \ 10000)     (string-append (roman-digit (modulo (quotient number 1000) 10)) (roman-numeral\
    \ (modulo number 1000)))]\n             [(< number 100000)    (string-append (roman-digit\
    \ (modulo (quotient number 10000) 10)) (roman-numeral (modulo number 10000)))]\n\
    \             [(< number 1000000)   (string-append (roman-digit (modulo (quotient\
    \ number 100000) 10)) (roman-numeral (modulo number 100000)))]\n             [(<\
    \ number 10000000)  (string-append (roman-digit (modulo (quotient number 1000000)\
    \ 10)) (roman-numeral (modulo number 1000000)))]\n             [(< number 100000000)\
    \ (string-append (roman-digit (modulo (quotient number 10000000) 10)) (roman-numeral\
    \ (modulo number 10000000)))]\n             [(< number 1000000000) (string-append\
    \ (roman-digit (modulo (quotient number 100000000) 10)) (roman-numeral (modulo\
    \ number 100000000)))]))]\n    (string-downcase (roman-numeral number))))", " \
    \ (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(<= number 1000) (string-append\
    \ (int_to_mini_roman (/ number 1000)) \"m\")]\n    [(= number 2000) \"mm\"]\n\
    \    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"mmmm\"]\n    [(= number\
    \ 5000) \"mmmmm\"]\n    [(= number 6000) \"mmmmmm\"]\n    [(= number 7000) \"\
    mmmmmmm\"]\n    [(= number 8000) \"mmmmmmmm\"]\n    [(= number 9000) \"mmmmmmmmm\"\
    ]\n    [(=", "  (cond\n    [(= number 1) 'i]\n    [(= number 2) 'ii]\n    [(=\
    \ number 3) 'iii]\n    [(= number 4) 'iv]\n    [(= number 5) 'v]\n    [(= number\
    \ 6) 'vi]\n    [(= number 7) 'vii]\n    [(= number 8) 'viii]\n    [(= number 9)\
    \ 'ix]\n    [(= number 10) 'x]\n    [(= number 20) 'xx]\n    [(= number 30) 'xxx]\n\
    \    [(= number 40) 'xl]\n    [(= number 50) 'l]\n    [(= number 60) 'lx]\n  \
    \  [(= number 70) 'lxx]\n    [(= number 80) 'lxxx]\n    [(= number 90) 'xc]\n\
    \    [(= number 100) 'c]\n    [(= number 200) 'cc]\n    [(= number 300) 'ccc]\n\
    \    [(= number 400) 'cd]\n    [(= number 500) 'd]\n    [(= number 600) 'dc]\n\
    \    [(= number 700) 'dcc]\n    [(= number 800) 'dccc]\n    [(= number 900) 'cm]\n\
    \    [(= number 1000) 'm']\n    [else (string-append\n            (int_to_mini_roman\
    \ (/ number 1000))\n            (int_to_mini_roman (* 1000 (% number 1000))))]))\n",
  "  (define (convert-to-roman numerator)\n    (cond\n      [(> numerator 1000) (convert-to-roman\
    \ (- numerator 1000)) (string-append \"m\" (convert-to-roman numerator))]\n  \
    \    [(> numerator 900) (convert-to-roman (- numerator 900)) (string-append \"\
    cm\" (convert-to-roman numerator))]\n      [(> numerator 500) (convert-to-roman\
    \ (- numerator 500)) (string-append \"d\" (convert-to-roman numerator))]\n   \
    \   [(> numerator 400) (convert-to-roman (- numerator 400)) (string-append \"\
    cd\" (convert-to-roman numerator))]\n      [(> numerator 100) (convert-to-roman\
    \ (- numerator 100)) (string-append \"c\" (convert-to-roman numerator))]\n   \
    \   [(> numerator 90) (convert-to-roman (- numerator 90)) (string-append \"xc\"\
    \ (convert-to-roman numerator))]\n      [(> numerator 50) (convert-to-roman (-\
    \ numerator 50)) (string-append \"l\" (convert-to-roman numerator))]\n      [(>\
    \ numerator 40) (convert-to-roman (- numerator 40)) (string-append \"xl\" (convert-to-roman\
    \ numerator))]\n      [(> numerator 10) (convert-to-roman (- numerator 10)) (string-append\
    \ \"x\" (convert-to-roman numerator))]\n      [(> numerator 9) (convert-to-roman\
    \ (- numerator 9)) (string-append \"ix\" (convert-to-roman numerator))]\n    \
    \  [(> numerator 5) (convert-to-roman (- numerator 5)) (string-append \"v\" (convert-to-roman\
    \ numerator))]\n      [(> numerator 4) (convert-to-roman (- numerator 4)) (string-append\
    \ \"iv\" (convert-to-roman numerator))]\n      [(> numerator 1) (convert-to-roman\
    \ (- numerator 1)) (string-append \"i\" (convert-to-roman numerator))", "  (define\
    \ (int_to_mini_roman-helper number)\n    (cond\n      [(< number 4) (make-string\
    \ number #\\i)]\n      [(< number 5) \"iv\"]\n      [(< number 9) (string-append\
    \ \"v\" (make-string (- number 5) #\\i))]\n      [(< number 10) \"ix\"]\n    \
    \  [(< number 40) (string-append (make-string (/ number 10) #\\x) (int_to_mini_roman-helper\
    \ (modulo number 10)))]\n      [(< number 50) (string-append \"xl\" (int_to_mini_roman-helper\
    \ (- number 40)))]\n      [(< number 90) (string-append \"l\" (int_to_mini_roman-helper\
    \ (- number 50)))]\n      [(< number 100) (string-append \"xc\" (int_to_mini_roman-helper\
    \ (- number 90)))]\n      [(< number 400) (string-append (make-string (/ number\
    \ 100) #\\c) (int_to_mini_roman-helper (modulo number 100)))]\n      [(< number\
    \ 500) (string-append \"cd\" (int_to_mini_roman-helper (- number 400)))]\n   \
    \   [(< number 900) (string-append \"d\" (int_to_mini_roman-helper (- number 500)))]\n\
    \      [(< number 1000) (string-append \"cm\" (int_to_mini_roman-helper (- number\
    \ 900)))]\n      [(< number 1001) \"m\"]))\n  (if (and (>= number 1) (<= number\
    \ 1000))\n      (string-downcase (int_to_mini_roman-helper number))\n      \"\
    undefined\"))\n```\n\n```racket\n#lang racket\n", "  (cond\n    ((= number 1000)\
    \ 'm)\n    ((>= number 900) (string-append 'c (int_to_mini_roman (- number 900))))\n\
    \    ((>= number 500) (string-append 'd (int_to_mini_roman (- number 500))))\n\
    \    ((>= number 400) (string-append 'c (int_to_mini_roman (- number 400))))\n\
    \    ((>= number 100) (string-append 'c (int_to_mini_roman (- number 100))))\n\
    \    ((>= number 90) (string-append 'x (int_to_mini_roman (- number 90))))\n \
    \   ((>= number 50) (string-append 'l (int_to_mini_roman (- number 50))))\n  \
    \  ((>= number 40) (string-append 'x (int_to_mini_roman (- number 40))))\n   \
    \ ((>= number 10) (string-append 'x (int_to_mini_roman (- number 10))))\n    ((>=\
    \ number 9) (string-append 'i (int_to_mini_roman (- number 9))))\n    ((>= number\
    \ 5) (string-append 'v (int_to_mini_roman (- number 5))))\n    ((>= number 4)\
    \ (string-append 'i (int_to_mini_roman (- number 4))))\n    ((>= number 1) (string-append\
    \ 'i (int_to_mini_roman (- number 1))))\n    ((= number 0) 'empty)\n  )\n)\n",
  "  (define mappings\n    '((1000 . \"m\")\n      (500 . \"d\")\n      (100 . \"\
    c\")\n      (50 . \"l\")\n      (10 . \"x\")\n      (5 . \"v\")\n      (1 . \"\
    i\")))\n  (define (to-roman-numeral number)\n    (if (<= number 0)\n        \"\
    \"\n        (let ((mapping (first (filter (lambda (pair) (>= (car pair) number))\
    \ mappings))))\n          (string-append (cdr mapping) (to-roman-numeral (- number\
    \ (car mapping)))))))\n  (string-downcase (to-roman-numeral number)))\n", "  (define\
    \ (int_to_mini_roman_helper number result)\n    (cond\n      [(<= number 1000)\n\
    \       (int_to_mini_roman_helper (- number 1000) (string-append result \"m\"\
    ))]\n      [(<= number 900)\n       (int_to_mini_roman_helper (- number 900) (string-append\
    \ result \"cm\"))]\n      [(<= number 500)\n       (int_to_mini_roman_helper (-\
    \ number 500) (string-append result \"d\"))]\n      [(<= number 400)\n       (int_to_mini_roman_helper\
    \ (- number 400) (string-append result \"cd\"))]\n      [(<= number 100)\n   \
    \    (int_to_mini_roman_helper (- number 100) (string-append result \"c\"))]\n\
    \      [(<= number 90)\n       (int_to_mini_roman_helper (- number 90) (string-append\
    \ result \"xc\"))]\n      [(<= number 50)\n       (int_to_mini_roman_helper (-\
    \ number 50) (string-append result \"l\"))]\n      [(<= number 40)\n       (int_to_mini_roman_helper\
    \ (- number 40) (string-append result \"xl\"))]\n      [(<= number 10)\n     \
    \  (int_to_mini_roman_helper (- number 10) (string-append result \"x\"))]\n  \
    \    [(<= number 9)\n       (int_to_mini_roman_helper (- number 9) (string-append\
    \ result \"ix\"))]\n      [(<= number 5)\n       (int_to_mini_roman_helper (-\
    \ number 5) (string-append result \"v\"))]\n      [(<= number 4)\n       (int_to_mini_roman_helper\
    \ (- number 4) (string-append result \"iv\"))]\n      [(<= number 1)\n       (int_to_mini_roman_helper\
    \ (- number 1) (string-append result \"i\"))]\n      [else\n       result]))\n\
    \  (int_to_mini_roman_helper number \"\"))", "  (cond ((= number 1000) \"m\")\n\
    \        ((>= number 900)\n         (string-append \"cm\" (int_to_mini_roman (-\
    \ number 900))))\n        ((>= number 500)\n         (string-append \"d\" (int_to_mini_roman\
    \ (- number 500))))\n        ((>= number 400)\n         (string-append \"cd\"\
    \ (int_to_mini_roman (- number 400))))\n        ((>= number 100)\n         (string-append\
    \ \"c\" (int_to_mini_roman (- number 100))))\n        ((>= number 90)\n      \
    \   (string-append \"xc\" (int_to_mini_roman (- number 90))))\n        ((>= number\
    \ 50)\n         (string-append \"l\" (int_to_mini_roman (- number 50))))\n   \
    \     ((>= number 40)\n         (string-append \"xl\" (int_to_mini_roman (- number\
    \ 40))))\n        ((>= number 10)\n         (string-append \"x\" (int_to_mini_roman\
    \ (- number 10))))\n        ((>= number 9)\n         (string-append \"ix\" (int_to_mini_roman\
    \ (- number 9))))\n        ((>= number 5)\n         (string-append \"v\" (int_to_mini_roman\
    \ (- number 5))))\n        ((>= number 4)\n         (string-append \"iv\" (int_to_mini_roman\
    \ (- number 4))))\n        ((>= number 1)\n         (string-append \"i\" (int_to_mini_roman\
    \ (- number 1))))\n        (else \"\")))\n", "  (define (append base result number)\n\
    \    (if (= number 0)\n        result\n        (append base (string-append result\
    \ base) (- number 1))))\n  (cond ((= number 1000) (append \"m\" \"\" number))\n\
    \        ((= number 500) (append \"d\" \"\" number))\n        ((= number 100)\
    \ (append \"c\" \"\" number))\n        ((= number 50) (append \"l\" \"\" number))\n\
    \        ((= number 10) (append \"x\" \"\" number))\n        ((= number 5) (append\
    \ \"v\" \"\" number))\n        ((= number 1) (append \"i\" \"\" number))\n   \
    \     (else \"\")))\n", "  (define (str-to-list str)\n    (string->list str))\n\
    \  (define (num-to-roman-list number)\n    (cond\n      [(= number 0) empty]\n\
    \      [(<= number 0) (error \"invalid number\")]\n      [(<= number 1000) (append\n\
    \                         (cond\n                           [(<= number 3) (list-tabulate\n\
    \                                           number\n                         \
    \                  (lambda (x)\n                                             'i))]\n\
    \                           [(= number 4) (list 'i 'v)]\n                    \
    \       [(<= number 8) (list-tabulate\n                                      \
    \     (- number 5)\n                                           (lambda (x)\n \
    \                                            'i)\n                           \
    \                (list 'v))]\n                           [(= number 9) (list 'i\
    \ 'x)])\n                         (num-to-roman-list\n                       \
    \   (- number\n                             (cond\n                          \
    \     [(<= number 3) number]\n                               [(= number 4) 4]\n\
    \                               [(<= number 8) 5]\n                          \
    \     [(= number 9) 9]))))]\n      [(<= number 2000) (append\n               \
    \          (cond\n                           [(<= number 13) (list-tabulate\n\
    \                                            (/ number 10)\n                 \
    \                           (lambda (x)\n                                    \
    \          'x))]\n                           [(= number 14) (list 'x 'i 'v)]\n\
    \                           [(<= number 18) (list-tabulate\n                 \
    \                           (- (/ number 10) 1)\n                            \
    \                (lambda (x)\n                                              'x)\n\
    \                                            (list 'i 'v))]\n                \
    \           [(= number 19) (list 'x 'i 'x)]\n                           [(<= number\
    \ 23) (list-tabulate\n                                            (- (/ number\
    \ 10) 2)\n                                            (lambda (x)\n          \
    \                                    'x)\n                                   \
    \         (list 'i 'x))]\n                           [(= number 24) (list 'x 'v\
    \ 'i)]\n                           [(<= number 28) (list-tabulate\n          \
    \                                  (- (/ number 10) 3)\n                     \
    \                       (lambda (x)\n                                        \
    \      'x)\n                                            ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
