name: HumanEval_103_rounded_avg
language: r
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\nrounded_avg <- function(n, m) {"
tests: "test_humaneval <- function() {\ncandidate <- rounded_avg\n    if(!identical(candidate(1,\
  \ 5), '0b11')){quit('no', 1)}\n    if(!identical(candidate(7, 13), '0b1010')){quit('no',\
  \ 1)}\n    if(!identical(candidate(964, 977), '0b1111001010')){quit('no', 1)}\n\
  \    if(!identical(candidate(996, 997), '0b1111100100')){quit('no', 1)}\n    if(!identical(candidate(560,\
  \ 851), '0b1011000010')){quit('no', 1)}\n    if(!identical(candidate(185, 546),\
  \ '0b101101110')){quit('no', 1)}\n    if(!identical(candidate(362, 496), '0b110101101')){quit('no',\
  \ 1)}\n    if(!identical(candidate(350, 902), '0b1001110010')){quit('no', 1)}\n\
  \    if(!identical(candidate(197, 233), '0b11010111')){quit('no', 1)}\n    if(!identical(candidate(7,\
  \ 5), -1)){quit('no', 1)}\n    if(!identical(candidate(5, 1), -1)){quit('no', 1)}\n\
  \    if(!identical(candidate(5, 5), '0b101')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(n <= m) return(round(n/m))\n  return(-1)\n}\n\nrounded_avg(5,10)",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6, 10)", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(3,4)", "\n \
    \ if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n}\nrounded_avg(3,5)\n</cell>\n\
    <cell>", "\n  if(n <= m) return(round(n/m)*m)\n  return(-1)\n}\n", "\n  if(n >\
    \ m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,rounding |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,rounding\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg\
    \ <- function(n, m) {\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding |>\n<| a tags=r,rounding\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg\
    \ <- function(n, m) {\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(6, 7)", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(5,3)\n</cell>\n<cell>", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(5,10)", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26818008)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to round\
    \ the average to the nearest integer, and I provided a function that does just\
    \ that. He also asked how to convert that integer to a binary number. He also\
    \ asked how to round the average to the nearest integer, and I provided a function\
    \ that does just that. He also asked how to convert that integer to a binary number.\
    \ He also asked how to round the average to the nearest integer, and I provided\
    \ a function that does just that. He also asked how to convert that integer to\
    \ a binary number. He also asked how to round the average to the nearest integer,\
    \ and I provided a function that does just that. He also asked how to convert\
    \ that integer to a binary number. He also asked how to round the average to the\
    \ nearest integer, and I provided a function that does just that. He also asked\
    \ how to convert that integer to a binary number. He also asked how to round the\
    \ average to the nearest integer, and I provided a function that does just that.\
    \ He also asked how to convert that integer to a binary number. He also asked\
    \ how to round the average to the nearest integer, and I provided a function that\
    \ does just that. He also asked how to convert that integer to a binary number.\
    \ He also asked how to round the average to the nearest integer, and I provided\
    \ a function that does just that. He also asked how to convert that integer to\
    \ a binary number. He also asked how to round the average to the nearest integer,\
    \ and I provided a function that does just that. He also asked how to convert\
    \ that integer to a binary number. He also asked how to round the average to the\
    \ nearest integer, and I provided a function that does just that. He also asked\
    \ how to convert that integer to a binary number. He also asked how to round the\
    \ average to the nearest integer, and I provided a function that does just that.\
    \ He also asked how to convert that integer to a binary number. He also asked\
    \ how to round the average to the nearest integer, and I provided a function that\
    \ does just that. He also asked how to convert that integer to a binary number.\
    \ He also ", "\n  if(n <= m) return(round(n/2))\n  return(-1)\n}\nrounded_avg(3,5)",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6, 8)", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n\
    \  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(3,4)", "\n\
    \  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n>m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(3,4)", "\n  if(n <= m) return(round(n/m)*m)\n  return(-1)\n\
    }\n</code>\n<|/ a tags=r,rounding,binary,integer,decimal |>\n<| a dscore=0 |>\n\
    <code>", "\n  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(sum((n:m)/2)/2))\n\
    }\n\nrounded_avg(7, 8)\nrounded_avg(7, 9)\nrounded_avg(7, 10)\nrounded_avg(7,\
    \ 11)\nrounded_avg(7, 12)\nrounded_avg(7, 13)\nrounded_avg(7, 14)\nrounded_avg(7,\
    \ 15)\nrounded_avg(7, 16)\nrounded_avg(7, 17)\nrounded_avg(7, 18)\nrounded_avg(7,\
    \ 19)\nrounded_avg(7, 20)\nrounded_avg(7, 21)\nrounded_avg(7, 22)\nrounded_avg(7,\
    \ 23)\nrounded_avg(7, 24)\nrounded_avg(7, 25)\nrounded_avg(7, 26)\nrounded_avg(7,\
    \ 27)\nrounded_avg(7, 28)\nrounded_avg(7, 29)\nrounded_avg(7, 30)\nrounded_avg(7,\
    \ 31)\nrounded_avg(7, 32)\nrounded_avg(7, 33)\nrounded_avg(7, 34)\nrounded_avg(7,\
    \ 35)\nrounded_avg(7, 36)\nrounded_avg(7, 37)\nrounded_avg(7, 38)\nrounded_avg(7,\
    \ 39)\nrounded_avg(7, 40)\nrounded_avg(7, 41)\nrounded_avg(7, 42)\nrounded_avg(7,\
    \ 43)\nrounded_avg(7, 44)\nrounded_avg(7, 45)\nrounded_avg(7, 46)\nrounded_avg(7,\
    \ 47)\nrounded_avg(7, 48)\nrounded_avg(7, 49)\nrounded_avg(7, 50)\nrounded_avg(7,\
    \ 51)\nrounded_avg(7, 52)\nrounded_avg(7, 53)\nrounded_avg(7, 54)\nrounded_avg(7,\
    \ 55)\nrounded_avg(7, 56)\nrounded_avg(7, 57)\nrounded_avg(7, 58)\nrounded_avg(7,\
    \ 59)\nrounded_avg(7, 60)\nrounded_avg(7, 61)\nrounded_avg(7, 62)\nrounded_avg(7,\
    \ 63)\nrounded_avg(7, 64)\nrounded_avg(7, 65)\nrounded_avg(7, 66)\nrounded_avg(7,\
    \ 67)\nrounded_avg(7, 68)\nrounded_avg(7, 69)\nrounded_avg(7, 70)\nroun", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(3,4)\nrounded_avg(3,5)\n\
    rounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\nrounded_avg(3,9)\nrounded_avg(3,10)\n\
    rounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\nrounded_avg(3,14)\nrounded_avg(3,15)\n\
    rounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\nrounded_avg(3,19)\nrounded_avg(3,20)\n\
    rounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\nrounded_avg(3,24)\nrounded_avg(3,25)\n\
    rounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\nrounded_avg(3,29)\nrounded_avg(3,30)\n\
    rounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\nrounded_avg(3,34)\nrounded_avg(3,35)\n\
    rounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\nrounded_avg(3,39)\nrounded_avg(3,40)\n\
    rounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\nrounded_avg(3,44)\nrounded_avg(3,45)\n\
    rounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\nrounded_avg(3,49)\nrounded_avg(3,50)\n\
    rounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\nrounded_avg(3,54)\nrounded_avg(3,55)\n\
    rounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\nrounded_avg(3,59)\nrounded_avg(3,60)\n\
    rounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\nrounded_avg(3,64)\nrounded_avg(3,65)\n\
    rounded_avg(3,66)\nrounded_avg(3,67)\nrounded_avg(3,68)", "\n  n <- round(n)\n\
    \  m <- round(m)\n  if(n == m) return(n)\n  if(n == m-1) return(-1)\n  return(round((n+m)/2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "\n  n <- as.integer(n)\n  m\
    \ <- as.integer(m)\n  \n  if(n > m) return(-1)\n  \n  return(round(sum(c(1:n,\
    \ m))/2))\n}\n\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\n\
    rounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\n\
    rounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\n\
    rounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\n\
    rounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\n\
    rounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\n\
    rounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\n\
    rounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\n\
    rounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\n\
    rounded_avg(5,5)\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\n\
    rounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,", "\n  if(n <= m) return(round(n/m)*m)\n\
    \  return(-1)\n}\n\nrounded_avg(6, 7)", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(5,10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(n + (m - n)/2))\n}\n</code>\n\
    <|/ a tags=r,rounding |>\n<| a tags=r,rounding |>\nI came up with this solution:\n\
    <code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(n + (m - n)/2))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,rounding |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(n + (m - n)/2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(n + (m - n)/2))\n}\n</code>\n\
    <|/ a tags=r,rounding |>\n<| a dscore=0 |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(n + (m - n)/2))\n}\n</code>\n<|/ a tags=r,rounding |>\n<|\
    \ a tags=r,rounding |>\n<code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n  }\n  return(round(n +\
    \ (m - n)/2))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,rounding |>\n<code>\n\
    rounded_avg <- function(n, m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(n + (m - n)/2))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nrounded_avg <-\
    \ function(", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n\
    }\nrounded_avg(5,10)", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(7, 5)", "\n  if(n > m) return(-1)\n  return(round(sum(c(1:n,\
    \ m))/2))\n}\n\nrounded_avg(6, 10)", "\n  if(n >= m) return(-1)\n  return(round(sum(c(0:n,\
    \ m))/2))\n}\nrounded_avg(5,10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) return(-1)\n  return(round(n + (m - n)/2))\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for me. `rounded_avg(5,5)` returns `5`, not `-1`.\n\
    <|/ c |>\n<| c |>\nIt works for me in RStudio Version 1.0.143 on Windows 10. Maybe\
    \ you have a different version of RStudio?\n<|/ c |>\n<| c |>\nI tested it on\
    \ RStudio Version 1.0.143 on Windows 10 and it returns `-1` as expected.\n<|/\
    \ c |>\n<| c |>\nI tested it on RStudio Version 1.0.143 on Windows 10 and it returns\
    \ `-1` as expected. Maybe you have a different version of RStudio?\n<|/ c |>\n\
    <| c |>\nI tested it on RStudio Version 1.0.143 on Windows 10 and it returns `-1`\
    \ as expected. Maybe you have a different version of RStudio?\n<|/ c |>\n<| a\
    \ tags=r |>\n<code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n \
    \ m <- as.integer(m)\n  if(n > m) return(-1)\n  return(round(n + (m - n)/2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) return(-1)\n \
    \ return(round(n + (m - n)/2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) return(-1)\n  return(round(n + (m - n)/2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) return(-1)\n  return(round(n + (m - n)/2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  n <- as.integer(n)\n  m ", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(6, 10)\nrounded_avg(6, 8)\nrounded_avg(6, 7)\nrounded_avg(6,\
    \ 6)\nrounded_avg(6, 5)\nrounded_avg(6, 4)\nrounded_avg(6, 3)\nrounded_avg(6,\
    \ 2)\nrounded_avg(6, 1)\nrounded_avg(6, 0)\nrounded_avg(6, -1)\nrounded_avg(6,\
    \ -2)\nrounded_avg(6, -3)\nrounded_avg(6, -4)\nrounded_avg(6, -5)\nrounded_avg(6,\
    \ -6)\nrounded_avg(6, -7)\nrounded_avg(6, -8)\nrounded_avg(6, -9)\nrounded_avg(6,\
    \ -10)\nrounded_avg(6, -11)\nrounded_avg(6, -12)\nrounded_avg(6, -13)\nrounded_avg(6,\
    \ -14)\nrounded_avg(6, -15)\nrounded_avg(6, -16)\nrounded_avg(6, -17)\nrounded_avg(6,\
    \ -18)\nrounded_avg(6, -19)\nrounded_avg(6, -20)\nrounded_avg(6, -21)\nrounded_avg(6,\
    \ -22)\nrounded_avg(6, -23)\nrounded_avg(6, -24)\nrounded_avg(6, -25)\nrounded_avg(6,\
    \ -26)\nrounded_avg(6, -27)\nrounded_avg(6, -28)\nrounded_avg(6, -29)\nrounded_avg(6,\
    \ -30)\nrounded_avg(6, -31)\nrounded_avg(6, -32)\nrounded_avg(6, -33)\nrounded_avg(6,\
    \ -34)\nrounded_avg(6, -35)\nrounded_avg(6, -36)\nrounded_avg(6, -37)\nrounded_avg(6,\
    \ -38)\nrounded_avg(6, -39)\nrounded_avg(6, -40)\nrounded_avg(6, -41)\nrounded_avg(6,\
    \ -42)\nrounded_avg(6, -43)\nrounded_avg(6, -44)\nrounded_avg(6, -45)\nrounded_avg(6,\
    \ -46)\nrounded_avg(6, -47)\nrounded_avg(6, -48)\nrounded_avg(6, -49)\nrounded_avg(6,\
    \ -50)\nrounded_avg(6, ", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(n/m\
    \ + 0.5))\n}\n", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n>m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(3,4)", "\n  if(n > m) return(-1)\n\
    \  return(round(sum(c(0:n, m))/2))\n}\nrounded_avg(5,6)", "\n  if(n <= m) return(round(n/m))\n\
    \  return(-1)\n}\n", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\
    rounded_avg(6, 10)\n</cell>\n<cell>", "\n  if(n > m) {\n    return(-1)\n  }\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(6, 10)", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n>m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,6)\n\
    rounded_avg(5,5)\nrounded_avg(5,4)\nrounded_avg(5,3)\nrounded_avg(5,2)\nrounded_avg(5,1)\n\
    rounded_avg(5,0)\nrounded_avg(6,0)\nrounded_avg(6,1)\nrounded_avg(6,2)\nrounded_avg(6,3)\n\
    rounded_avg(6,4)\nrounded_avg(6,5)\nrounded_avg(6,6)\nrounded_avg(6,7)\nrounded_avg(6,8)\n\
    rounded_avg(6,9)\nrounded_avg(6,10)\nrounded_avg(6,11)\nrounded_avg(6,12)\nrounded_avg(6,13)\n\
    rounded_avg(6,14)\nrounded_avg(6,15)\nrounded_avg(6,16)\nrounded_avg(6,17)\nrounded_avg(6,18)\n\
    rounded_avg(6,19)\nrounded_avg(6,20)\nrounded_avg(6,21)\nrounded_avg(6,22)\nrounded_avg(6,23)\n\
    rounded_avg(6,24)\nrounded_avg(6,25)\nrounded_avg(6,26)\nrounded_avg(6,27)\nrounded_avg(6,28)\n\
    rounded_avg(6,29)\nrounded_avg(6,30)\nrounded_avg(6,31)\nrounded_avg(6,32)\nrounded_avg(6,33)\n\
    rounded_avg(6,34)\nrounded_avg(6,35)\nrounded_avg(6,36)\nrounded_avg(6,37)\nrounded_avg(6,38)\n\
    rounded_avg(6,39)\nrounded_avg(6,40)\nrounded_avg(6,41)\nrounded_avg(6,42)\nrounded_avg(6,43)\n\
    rounded_avg(6,44)\nrounded_avg(6,45)\nrounded_avg(6,46)\nrounded_avg(6,47)\nrounded_avg(6,48)\n\
    rounded_avg(6,49)\nrounded_avg(6,50)\nrounded_avg(6,51)\nrounded_avg(6,52)\nrounded_avg(6,53)\n\
    rounded_avg(6,54)\nrounded_avg(6,55)\nrounded_avg(6,56)", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\nrounded_avg(6, 8)\nrounded_avg(6, 10)\nrounded_avg(6,\
    \ 12)\nrounded_avg(6, 14)\nrounded_avg(6, 16)\nrounded_avg(6, 18)\nrounded_avg(6,\
    \ 20)\nrounded_avg(6, 22)\nrounded_avg(6, 24)\nrounded_avg(6, 26)\nrounded_avg(6,\
    \ 28)\nrounded_avg(6, 30)\nrounded_avg(6, 32)\nrounded_avg(6, 34)\nrounded_avg(6,\
    \ 36)\nrounded_avg(6, 38)\nrounded_avg(6, 40)\nrounded_avg(6, 42)\nrounded_avg(6,\
    \ 44)\nrounded_avg(6, 46)\nrounded_avg(6, 48)\nrounded_avg(6, 50)\nrounded_avg(6,\
    \ 52)\nrounded_avg(6, 54)\nrounded_avg(6, 56)\nrounded_avg(6, 58)\nrounded_avg(6,\
    \ 60)\nrounded_avg(6, 62)\nrounded_avg(6, 64)\nrounded_avg(6, 66)\nrounded_avg(6,\
    \ 68)\nrounded_avg(6, 70)\nrounded_avg(6, 72)\nrounded_avg(6, 74)\nrounded_avg(6,\
    \ 76)\nrounded_avg(6, 78)\nrounded_avg(6, 80)\nrounded_avg(6, 82)\nrounded_avg(6,\
    \ 84)\nrounded_avg(6, 86)\nrounded_avg(6, 88)\nrounded_avg(6, 90)\nrounded_avg(6,\
    \ 92)\nrounded_avg(6, 94)\nrounded_avg(6, 96)\nrounded_avg(6, 98)\nrounded_avg(6,\
    \ 100)\nrounded_avg(6, 102)\nrounded_avg(6, 104)\nrounded_avg(6, 106)\nrounded_avg(6,\
    \ 108)\nrounded_avg(6, 110)\nrounded_avg(6, 112)\nrounded_avg(6, 114)\nrounded_avg(6,\
    \ 116)\nrounded_avg(6, 118)\nrounded_avg(6, 120)\nrounded_avg(6, 122)\nrounded_avg(6,\
    \ 124)\nrounded_avg(6, 126)\nrounded_avg(6, 128)\nrounded_avg(6, 130)\nrounded_avg(6,\
    \ 132)\nrounded_avg(6, 134)\n", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(m/n) * n)\n}\n\nrounded_avg(7,\
    \ 5)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n  if(n > m) {\n    return(-1)\n\
    \  }\n  \n  n <- n - 1\n  m <- m - 1\n  \n  return(round(n/m + 0.5))\n}\n\nrounded_avg(6,\
    \ 10)", "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6,\
    \ 10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n>m) return(-1)\n\
    \  return(round(m/n) * n)\n}\nrounded_avg(5,10)", "\n  if(n <= m) return(round(n/m\
    \ + n/m))\n  return(-1)\n}\n\nrounded_avg(7, 10)", "\n  \n  if(n > m) return(-1)\n\
    \  \n  return(round(sum(c(seq(n,m),seq(m,n)))/2))\n}\n\nrounded_avg(3,5)\nrounded_avg(3,4)\n\
    rounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\nrounded_avg(3,9)\nrounded_avg(3,10)\n\
    rounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\nrounded_avg(3,14)\nrounded_avg(3,15)\n\
    rounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\nrounded_avg(3,19)\nrounded_avg(3,20)\n\
    rounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\nrounded_avg(3,24)\nrounded_avg(3,25)\n\
    rounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\nrounded_avg(3,29)\nrounded_avg(3,30)\n\
    rounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\nrounded_avg(3,34)\nrounded_avg(3,35)\n\
    rounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\nrounded_avg(3,39)\nrounded_avg(3,40)\n\
    rounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\nrounded_avg(3,44)\nrounded_avg(3,45)\n\
    rounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\nrounded_avg(3,49)\nrounded_avg(3,50)\n\
    rounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\nrounded_avg(3,54)\nrounded_avg(3,55)\n\
    rounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\nrounded_avg(3,59)\nrounded_avg(3,60)\n\
    rounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\nrounded_avg(3,64)\nrounded_avg(3,65)\n\
    rounded_avg(3,66)\n", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(7, 5)", "\n  if(n > m) return(-1)\n  return(round(sum(n:m)/2))\n\
    }\n\nrounded_avg(3,4)", "\n  \n  if(n >= m) return(-1)\n  \n  return(round(sum((n:m))/2))\n\
    }\n\nrounded_avg(6, 10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(1:n,\
    \ m))/2))\n}\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,20)\n\
    rounded_avg(10,30)\nrounded_avg(10,40)\nrounded_avg(10,50)\nrounded_avg(10,60)\n\
    rounded_avg(10,70)\nrounded_avg(10,80)\nrounded_avg(10,90)\nrounded_avg(10,100)\n\
    rounded_avg(10,200)\nrounded_avg(10,300)\nrounded_avg(10,400)\nrounded_avg(10,500)\n\
    rounded_avg(10,600)\nrounded_avg(10,700)\nrounded_avg(10,800)\nrounded_avg(10,900)\n\
    rounded_avg(10,1000)\nrounded_avg(10,2000)\nrounded_avg(10,3000)\nrounded_avg(10,4000)\n\
    rounded_avg(10,5000)\nrounded_avg(10,6000)\nrounded_avg(10,7000)\nrounded_avg(10,8000)\n\
    rounded_avg(10,9000)\nrounded_avg(10,10000)\nrounded_avg(10,20000)\nrounded_avg(10,30000)\n\
    rounded_avg(10,40000)\nrounded_avg(10,50000)\nrounded_avg(10,60000)\nrounded_avg(10,70000)\n\
    rounded_avg(10,80000)\nrounded_avg(10,90000)\nrounded_avg(10,100000)\nrounded_avg(10,200000)\n\
    rounded_avg(10,300000)\nrounded_avg(10,400000)\nrounded_avg(10,500000)\nrounded_avg(10,600000)\n\
    rounded_avg(10,700000)\nrounded_avg(10,800000)\nrounded_avg(10,900000)\nrounded_avg(10,1000000)\n\
    rounded_avg(10,2000000)\nrounded_avg(10,3000000)\nrounded_avg(10,4000000)\nrounded_avg(10,5000000)\n\
    rounded_avg(10,6000000)\nrounded_avg(10,7000000)\nrounded_avg(10,8000000)\nrounded_avg(10,9000000)\n\
    rounded_avg(10,100000000)\nrounded_avg(10,1000000000)\nrounded_avg(10,10000000000)\n\
    rounded_avg(10,100000000000)\nrounded_avg(10,100", "\n  if(n >= m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(6, 10)", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(6, 4)", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(7, 5)", "\n\
    \  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,10)", "\n\
    \  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(sum((n:m))/2))\n}\n\
    \nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n",
  "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,3)", "\n\
    \  if(n > m) return(-1)\n  return(round(sum(c(seq(n,m), seq(m,n)))/2))\n}\nrounded_avg(5,7)",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n\
    \  \n  if(n >= m){\n    return(-1)\n  }\n  \n  return(round(sum((n:m))/2))\n}\n\
    \nrounded_avg(3,5)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n  if(n\
    \ > m) {\n    return(-1)\n  }\n  \n  return(round(sum(n:m)/2))\n}\n\nrounded_avg(6,\
    \ 7)\nrounded_avg(6, 8)\nrounded_avg(6, 9)\nrounded_avg(6, 10)\nrounded_avg(6,\
    \ 11)\nrounded_avg(6, 12)\nrounded_avg(6, 13)\nrounded_avg(6, 14)\nrounded_avg(6,\
    \ 15)\nrounded_avg(6, 16)\nrounded_avg(6, 17)\nrounded_avg(6, 18)\nrounded_avg(6,\
    \ 19)\nrounded_avg(6, 20)\nrounded_avg(6, 21)\nrounded_avg(6, 22)\nrounded_avg(6,\
    \ 23)\nrounded_avg(6, 24)\nrounded_avg(6, 25)\nrounded_avg(6, 26)\nrounded_avg(6,\
    \ 27)\nrounded_avg(6, 28)\nrounded_avg(6, 29)\nrounded_avg(6, 30)\nrounded_avg(6,\
    \ 31)\nrounded_avg(6, 32)\nrounded_avg(6, 33)\nrounded_avg(6, 34)\nrounded_avg(6,\
    \ 35)\nrounded_avg(6, 36)\nrounded_avg(6, 37)\nrounded_avg(6, 38)\nrounded_avg(6,\
    \ 39)\nrounded_avg(6, 40)\nrounded_avg(6, 41)\nrounded_avg(6, 42)\nrounded_avg(6,\
    \ 43)\nrounded_avg(6, 44)\nrounded_avg(6, 45)\nrounded_avg(6, 46)\nrounded_avg(6,\
    \ 47)\nrounded_avg(6, 48)\nrounded_avg(6, 49)\nrounded_avg(6, 50)\nrounded_avg(6,\
    \ 51)\nrounded_avg(6, 52)\nrounded_avg(6, 53)\nrounded_avg(6, 54)\nrounded_avg(6,\
    \ 55)\nrounded_avg(6, 56)\nrounded_avg(6, 57)\nrounded_avg(6, 58)\nrounded_avg(6,\
    \ 59)\nrounded_avg(6, 60)\nrounded_avg(6, 61)\nrounded_avg(6, 62)\nrounded_avg(6,\
    \ 63)\nrounded_avg(6, 64)\nrounded_avg(6, 65)\nrounded_avg(6, 66)\nrounded_avg(6,\
    \ 67)\nrounded_avg(", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\
    \nrounded_avg(5,10)", "\n  if(n >= m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\n\nrounded_avg(3,4)", "\n  if(n <= m){\n    n <- n + 1\n    m <- m + 1\n  }\n\
    \  return(round(n/m)*m)\n}\n\nrounded_avg(3,4)", "\n  if(n > m) return(-1)\n \
    \ return(round(m/n) * n)\n}\n\nrounded_avg(6, 4)", "\n  if(n <= m) return(round(n/m\
    \ + 0.5))\n  return(-1)\n}\nrounded_avg(6, 8)", "\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work when n is greater than m. For example, rounded_avg(3,2) returns\
    \ 1.\n<|/ c |>\n<| c |>\nI added a conditional statement to handle this case.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n\
    <code>\nrounded_avg <- function(n, m) {\n  return(round(m/n) * n)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    rounded_avg <- function(n, m) {\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nrounded_avg <-\
    \ function(n, m) {\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nrounded_avg <-\
    \ function(n, m) {\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nrounded_avg <-\
    \ function(n, m) {\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<|",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(6, 10)", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,10)", "\n\
    \  if(n > m) return(-1)\n  return(round(sum((n:m)/2)/2))\n}\n\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(5,1)\nrounded_avg(5,0)\nrounded_avg(5,-1)\nrounded_avg(5,-5)\n\
    rounded_avg(5,-10)\nrounded_avg(5,-20)\nrounded_avg(5,-30)\nrounded_avg(5,-100)\n\
    rounded_avg(5,-1000)\nrounded_avg(5,-10000)\nrounded_avg(5,-100000)\nrounded_avg(5,-1000000)\n\
    rounded_avg(5,-100000000)\nrounded_avg(5,-1000000000)\nrounded_avg(5,-10000000000)\n\
    rounded_avg(5,-100000000000)\nrounded_avg(5,-1000000000000)\nrounded_avg(5,-1000000000001)\n\
    rounded_avg(5,-1000000000002)\nrounded_avg(5,-1000000000003)\nrounded_avg(5,-1000000000004)\n\
    rounded_avg(5,-1000000000005)\nrounded_avg(5,-1000000000006)\nrounded_avg(5,-1000000000007)\n\
    rounded_avg(5,-1000000000008)\nrounded_avg(5,-1000000000009)\nrounded_avg(5,-1000000000010)\n\
    rounded_avg(5,-1000000000011)\nrounded_avg(5,-1000000000012)\nrounded_avg(5,-1000000000013)\n\
    rounded_avg(5,-1000000000014)\nrounded_avg(5,-1000000000015)\nrounded_avg(5,-1000000000016)\n\
    rounded_avg(5,-1000000000017)\nrounded_avg(5,-1000000000018)\nrounded_avg(5,-1000000000019)\n\
    rounded_avg(5,-1000000000020)\nrounded_avg(5,-1000000000021)\nrounded_avg(5,-1000000000022)\n\
    rounded_avg(5,-1000000000023)\nrounded_avg(5,-1000000000024)\nrounded_avg(5,-1000000000025)\n\
    rounded_avg(5,-1000000000026)\nrounded_avg(5,-1000000000027)\nrounded_avg(5,-1000000000028)\n\
    rounded_avg(5,-1000000000029)\nrounded_avg(5,-1000000000030)\nrounded_avg(5,-1000000000031)\n\
    rounded_avg(5,-1000000000032)\nrounded_avg(5,-1000000000033)\nrounded_avg(5,-1000000000034)\n\
    rounded_avg(5,-1000000000035)", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(3,5)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  \n  if(n <= m) {\n    n <- n + m\n    n <- round(n)\n    n <- as.integer(n)\n\
    \    n <- ifelse(n == 0, -1, n)\n  }\n  \n  return(n)\n}\n\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, 9)\nrounded_avg(8, 10)\n\
    rounded_avg(8, 9)\nrounded_avg(8, 10)\nrounded_avg(8, ", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(7, 5)", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n\
    \ + 0.5, 0))\n}\n", "\n  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(m/n)\
    \ * n)\n}\n", "\n  n <- round(n, na.rm = T)\n  m <- round(m, na.rm = T)\n  if(n\
    \ == m) return(n)\n  if(n == 0) return(-1)\n  if(n == -1) return(-1)\n  return(round(n/m,\
    \ na.rm = T))\n}\n\nrounded_avg(7, 10)\nrounded_avg(7, 9)\nrounded_avg(7, 8)\n\
    rounded_avg(7, 7)\nrounded_avg(7, 6)\nrounded_avg(7, 5)\nrounded_avg(7, 4)\nrounded_avg(7,\
    \ 3)\nrounded_avg(7, 2)\nrounded_avg(7, 1)\nrounded_avg(7, 0)\nrounded_avg(6,\
    \ 10)\nrounded_avg(6, 9)\nrounded_avg(6, 8)\nrounded_avg(6, 7)\nrounded_avg(6,\
    \ 6)\nrounded_avg(6, 5)\nrounded_avg(6, 4)\nrounded_avg(6, 3)\nrounded_avg(6,\
    \ 2)\nrounded_avg(6, 1)\nrounded_avg(6, 0)\nrounded_avg(5, 10)\nrounded_avg(5,\
    \ 9)\nrounded_avg(5, 8)\nrounded_avg(5, 7)\nrounded_avg(5, 6)\nrounded_avg(5,\
    \ 5)\nrounded_avg(5, 4)\nrounded_avg(5, 3)\nrounded_avg(5, 2)\nrounded_avg(5,\
    \ 1)\nrounded_avg(5, 0)\nrounded_avg(4, 10)\nrounded_avg(4, 9)\nrounded_avg(4,\
    \ 8)\nrounded_avg(4, 7)\nrounded_avg(4, 6)\nrounded_avg(4, 5)\nrounded_avg(4,\
    \ 4)\nrounded_avg(4, 3)\nrounded_avg(4, 2)\nrounded_avg(4, 1)\nrounded_avg(4,\
    \ 0)\nrounded_avg(3, 10)\nrounded_avg(3, 9)\nrounded_avg(3, 8)\nrounded_avg(3,\
    \ 7)\nrounded_avg(3, 6)\nrounded_avg(3, 5)\nrounded_avg(3, 4)\nrounded_avg(3,\
    \ 3)\nrounded_avg(3, 2)\nrounded_avg(3, 1)\nrounded_avg(3, 0)\nrounded_avg(2,\
    \ 10)\nrounded_avg(2, 9)\nrounded_avg(2, 8)\nrounded_avg(2, 7)\nrounded_avg(2,\
    \ 6)\nrounded_avg(2, 5)\nrounded_avg(2, 4)\nrounded_avg(2, 3)\nrounded_avg(2,\
    \ 2)\nrounded_avg(2, 1)\nrounded_avg(2, 0)\nrounded_avg(1, 10)\nrounded_avg(1,\
    \ 9)\nrounded_avg(1, 8)\nrounded_avg(1, 7)\nrounded_avg(1, 6)\n", "\n  if(n >=\
    \ m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(6, 10)", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  \n  if(n > m) {\n    return(-1)\n  }\n  \n  n <- n -\
    \ 1\n  m <- m - 1\n  \n  return(round(n / (m + 1), 0))\n}\n\nrounded_avg(6, 10)\n\
    rounded_avg(6, 9)\nrounded_avg(6, 8)\nrounded_avg(6, 7)\nrounded_avg(6, 6)\nrounded_avg(6,\
    \ 5)\nrounded_avg(6, 4)\nrounded_avg(6, 3)\nrounded_avg(6, 2)\nrounded_avg(6,\
    \ 1)\nrounded_avg(6, 0)\nrounded_avg(6, -1)\nrounded_avg(6, -2)\nrounded_avg(6,\
    \ -3)\nrounded_avg(6, -4)\nrounded_avg(6, -5)\nrounded_avg(6, -6)\nrounded_avg(6,\
    \ -7)\nrounded_avg(6, -8)\nrounded_avg(6, -9)\nrounded_avg(6, -10)\nrounded_avg(6,\
    \ -11)\nrounded_avg(6, -12)\nrounded_avg(6, -13)\nrounded_avg(6, -14)\nrounded_avg(6,\
    \ -15)\nrounded_avg(6, -16)\nrounded_avg(6, -17)\nrounded_avg(6, -18)\nrounded_avg(6,\
    \ -19)\nrounded_avg(6, -20)\nrounded_avg(6, -21)\nrounded_avg(6, -22)\nrounded_avg(6,\
    \ -23)\nrounded_avg(6, -24)\nrounded_avg(6, -25)\nrounded_avg(6, -26)\nrounded_avg(6,\
    \ -27)\nrounded_avg(6, -28)\nrounded_avg(6, -29)\nrounded_avg(6, -30)\nrounded_avg(6,\
    \ -31)\nrounded_avg(6, -32)\nrounded_avg(6, -33)\nrounded_avg(6, -34)\nrounded_avg(6,\
    \ -35)\nrounded_avg(6, -36)\nrounded_avg(6, -37)\nrounded_avg(6, -38)\nrounded_avg(6,\
    \ -39)\nrounded_avg(6, -40)\nrounded_avg(6, -41)\nrounded_avg(6, -42)\nrounded_avg(6,\
    \ -43)\nrounded_avg(6, -44)\nrounded_avg(6, -45)\nrounded_avg(6, ", "\n  if(n\
    \ >= m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(3,5)\n</cell>\n<cell>",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(5,6)", "\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(4,5)", "\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(6,\
    \ 8)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n  if(n > m) {\n    return(-1)\n\
    \  }\n  \n  return(round(n + (m - n) / 2, 0))\n}\n\nrounded_avg(7, 5)", "\n  if(n\
    \ >= m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(3,5)", "\n  if(n\
    \ > m) return(-1)\n  return(round(sum(c(0:(n-m+1))) / m))\n}\n\nrounded_avg(6,\
    \ 10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(m/n + 0.5))\n}\n\nrounded_avg(7, 10)", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\nrounded_avg(5,5)\nrounded_avg(5,6)\nrounded_avg(5,7)\n\
    rounded_avg(5,8)\nrounded_avg(5,9)\nrounded_avg(5,10)\nrounded_avg(5,11)\nrounded_avg(5,12)\n\
    rounded_avg(5,13)\nrounded_avg(5,14)\nrounded_avg(5,15)\nrounded_avg(5,16)\nrounded_avg(5,17)\n\
    rounded_avg(5,18)\nrounded_avg(5,19)\nrounded_avg(5,20)\nrounded_avg(5,21)\nrounded_avg(5,22)\n\
    rounded_avg(5,23)\nrounded_avg(5,24)\nrounded_avg(5,25)\nrounded_avg(5,26)\nrounded_avg(5,27)\n\
    rounded_avg(5,28)\nrounded_avg(5,29)\nrounded_avg(5,30)\nrounded_avg(5,31)\nrounded_avg(5,32)\n\
    rounded_avg(5,33)\nrounded_avg(5,34)\nrounded_avg(5,35)\nrounded_avg(5,36)\nrounded_avg(5,37)\n\
    rounded_avg(5,38)\nrounded_avg(5,39)\nrounded_avg(5,40)\nrounded_avg(5,41)\nrounded_avg(5,42)\n\
    rounded_avg(5,43)\nrounded_avg(5,44)\nrounded_avg(5,45)\nrounded_avg(5,46)\nrounded_avg(5,47)\n\
    rounded_avg(5,48)\nrounded_avg(5,49)\nrounded_avg(5,50)\nrounded_avg(5,51)\nrounded_avg(5,52)\n\
    rounded_avg(5,53)\nrounded_avg(5,54)\nrounded_avg(5,55)\nrounded_avg(5,56)\nrounded_avg(5,57)\n\
    rounded_avg(5,58)\nrounded_avg(5,59)\nrounded_avg(5,60)\nrounded_avg(5,61)\nrounded_avg(5,62)\n\
    rounded_avg(5,63)\nrounded_avg(5,64)\nrounded_avg(5,65)\nrounded_avg(5,66)\nrounded_avg(5,67)\n\
    rounded_avg(5,68)\nrounded_avg(5,69", "\n  if(n <= m){\n    sum <- 0\n    for(i\
    \ in n:m){\n      sum <- sum + i\n    }\n    sum <- round(sum/(n+m))\n    return(sum)\n\
    \  }\n  return(-1)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,rounding,binary\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n <= m){\n    sum <- 0\n \
    \   for(i in n:m){\n      sum <- sum + i\n    }\n    sum <- round(sum/(n+m))\n\
    \    return(sum)\n  }\n  return(-1)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,rounding,binary\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n <= m){\n    sum <- 0\n \
    \   for(i in n:m){\n      sum <- sum + i\n    }\n    sum <- round(sum/(n+m))\n\
    \    return(sum)\n  }\n  return(-1)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Welcome to SO! While this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r,rounding,binary |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  if(n <= m){\n    sum <- 0\n    for(i in n:m){\n      sum <- sum + i\n\
    \    }\n    sum <- round(sum/(n+m))\n    return(sum)\n  }\n  return(-1)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWelcome to SO! While this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    rounded_avg <- function(n, m) {\n  if(n <= m){\n    sum <- 0\n    for(i in n:m){\n\
    \      sum <- sum + i\n    }\n    sum <- round(sum/(n+m))\n    return(sum)\n \
    \ }\n  return(-1)\n}\n</code>\n<|/ a tags=r,rounding,binary |>\n<| c |>\nWelcome\
    \ to SO! While this code may ", "\n  \n  if(n > m) return(-1)\n  \n  return(round(sum(c(0:(n-m)))\
    \ / m))\n}\n\nrounded_avg(7, 10)", "\n  if(n >= m) return(-1)\n  return(round(sum(c(seq(n,m),seq(m,n)))/2))\n\
    }\nrounded_avg(3,4)\nrounded_avg(5,6)\nrounded_avg(8,10)\nrounded_avg(10,8)\n\
    rounded_avg(10,10)\nrounded_avg(10,11)\nrounded_avg(10,12)\nrounded_avg(10,13)\n\
    rounded_avg(10,14)\nrounded_avg(10,15)\nrounded_avg(10,16)\nrounded_avg(10,17)\n\
    rounded_avg(10,18)\nrounded_avg(10,19)\nrounded_avg(10,20)\nrounded_avg(10,21)\n\
    rounded_avg(10,22)\nrounded_avg(10,23)\nrounded_avg(10,24)\nrounded_avg(10,25)\n\
    rounded_avg(10,26)\nrounded_avg(10,27)\nrounded_avg(10,28)\nrounded_avg(10,29)\n\
    rounded_avg(10,30)\nrounded_avg(10,31)\nrounded_avg(10,32)\nrounded_avg(10,33)\n\
    rounded_avg(10,34)\nrounded_avg(10,35)\nrounded_avg(10,36)\nrounded_avg(10,37)\n\
    rounded_avg(10,38)\nrounded_avg(10,39)\nrounded_avg(10,40)\nrounded_avg(10,41)\n\
    rounded_avg(10,42)\nrounded_avg(10,43)\nrounded_avg(10,44)\nrounded_avg(10,45)\n\
    rounded_avg(10,46)\nrounded_avg(10,47)\nrounded_avg(10,48)\nrounded_avg(10,49)\n\
    rounded_avg(10,50)\nrounded_avg(10,51)\nrounded_avg(10,52)\nrounded_avg(10,53)\n\
    rounded_avg(10,54)\nrounded_avg(10,55)\nrounded_avg(10,56)\nrounded_avg(10,57)\n\
    rounded_avg(10,58)\nrounded_avg(10,59)\nrounded_avg(10,60)\nrounded_avg(10,61)\n\
    rounded_avg(10,62)\nrounded_avg(10,63)\nrounded_avg(10,64)\nrounded_avg(10,65)\n\
    rounded_avg(10,66)\nrounded_avg(10,67)\nrounded_avg(10,68)\nroun", "\n  if(n >=\
    \ m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(6, 10)", "\n  if(n <=\
    \ m) return(round(n/m))\n  return(-1)\n}\nrounded_avg(6, 7)", "\n  \n  if(n >\
    \ m) {\n    return(-1)\n  }\n  \n  return(round(m/n) * n)\n}\n\nrounded_avg(7,\
    \ 5)", "\n  if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n}\nrounded_avg(3,4)\n\
    rounded_avg(3,5)\nrounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\nrounded_avg(3,9)\n\
    rounded_avg(3,10)\nrounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\nrounded_avg(3,14)\n\
    rounded_avg(3,15)\nrounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\nrounded_avg(3,19)\n\
    rounded_avg(3,20)\nrounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\nrounded_avg(3,24)\n\
    rounded_avg(3,25)\nrounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\nrounded_avg(3,29)\n\
    rounded_avg(3,30)\nrounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\nrounded_avg(3,34)\n\
    rounded_avg(3,35)\nrounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\nrounded_avg(3,39)\n\
    rounded_avg(3,40)\nrounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\nrounded_avg(3,44)\n\
    rounded_avg(3,45)\nrounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\nrounded_avg(3,49)\n\
    rounded_avg(3,50)\nrounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\nrounded_avg(3,54)\n\
    rounded_avg(3,55)\nrounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\nrounded_avg(3,59)\n\
    rounded_avg(3,60)\nrounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\nrounded_avg(3,64)\n\
    rounded_avg(3,65)\nrounded_avg(3,66)\nrounded_avg(3,67)\nrounded_avg(", "\n  if(n\
    \ <= m) return(round(n/m)*m+1)\n  return(-1)\n}\nrounded_avg(6, 10)\n</cell>\n\
    <cell>", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6,\
    \ 8)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6,\
    \ 10)", "\n  \n  if(n >= m) return(-1)\n  \n  return(round(sum((n:m))/2))\n}\n\
    \nrounded_avg(4,5)\nrounded_avg(5,4)\nrounded_avg(5,5)\nrounded_avg(5,6)\nrounded_avg(6,5)\n\
    rounded_avg(6,6)\nrounded_avg(7,6)\nrounded_avg(8,6)\nrounded_avg(9,6)\nrounded_avg(10,6)\n\
    rounded_avg(11,6)\nrounded_avg(12,6)\nrounded_avg(13,6)\nrounded_avg(14,6)\nrounded_avg(15,6)\n\
    rounded_avg(16,6)\nrounded_avg(17,6)\nrounded_avg(18,6)\nrounded_avg(19,6)\nrounded_avg(20,6)\n\
    rounded_avg(21,6)\nrounded_avg(22,6)\nrounded_avg(23,6)\nrounded_avg(24,6)\nrounded_avg(25,6)\n\
    rounded_avg(26,6)\nrounded_avg(27,6)\nrounded_avg(28,6)\nrounded_avg(29,6)\nrounded_avg(30,6)\n\
    rounded_avg(31,6)\nrounded_avg(32,6)\nrounded_avg(33,6)\nrounded_avg(34,6)\nrounded_avg(35,6)\n\
    rounded_avg(36,6)\nrounded_avg(37,6)\nrounded_avg(38,6)\nrounded_avg(39,6)\nrounded_avg(40,6)\n\
    rounded_avg(41,6)\nrounded_avg(42,6)\nrounded_avg(43,6)\nrounded_avg(44,6)\nrounded_avg(45,6)\n\
    rounded_avg(46,6)\nrounded_avg(47,6)\nrounded_avg(48,6)\nrounded_avg(49,6)\nrounded_avg(50,6)\n\
    rounded_avg(51,6)\nrounded_avg(52,6)\nrounded_avg(53,6)\nrounded_avg(54,6)\nrounded_avg(55,6)\n\
    rounded_avg(56,6)\nrounded_avg(57,6)\nrounded_avg(58,6)\nrounded_avg(59,6)\nrounded_avg(60,6)\n\
    rounded_avg(61,6)\nrounded_avg(62,6)\nrounded_avg(63,6)\nrounded_avg(64,6)\nrounded_avg(65,6)\n\
    rounded_avg(66,6)\nroun", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(n/m\
    \ + 0.5))\n}\n", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) return(-1)\n\
    \  return(round(sum((n:m))/2))\n}\n\nrounded_avg(5,10)", "\n  if(n >= m) return(-1)\n\
    \  return(round(m/n) * n)\n}\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\nrounded_avg(5,10)\n\
    rounded_avg(5,10)\nrounded_avg(5,10)\nroun", "\n  if(n > m) return(-1)\n  return(round(sum(n:m)/2))\n\
    }\nrounded_avg(3,5)", "\n  if(n > m) return(-1)\n  return(round(sum(c(0:(n-m+1)))\
    \ / m))\n}\n\nrounded_avg(6, 10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  \n  if(n > m) return(-1)\n  \n  return(round(n + (m - n) / 2, 0))\n}\n\nrounded_avg(7,\
    \ 4)", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n}\nrounded_avg(7,\
    \ 5)\nrounded_avg(7, 10)\nrounded_avg(7, 15)\nrounded_avg(7, 20)\nrounded_avg(7,\
    \ 25)\nrounded_avg(7, 30)\nrounded_avg(7, 35)\nrounded_avg(7, 40)\nrounded_avg(7,\
    \ 45)\nrounded_avg(7, 50)\nrounded_avg(7, 55)\nrounded_avg(7, 60)\nrounded_avg(7,\
    \ 65)\nrounded_avg(7, 70)\nrounded_avg(7, 75)\nrounded_avg(7, 80)\nrounded_avg(7,\
    \ 85)\nrounded_avg(7, 90)\nrounded_avg(7, 95)\nrounded_avg(7, 100)\nrounded_avg(7,\
    \ 105)\nrounded_avg(7, 110)\nrounded_avg(7, 115)\nrounded_avg(7, 120)\nrounded_avg(7,\
    \ 125)\nrounded_avg(7, 130)\nrounded_avg(7, 135)\nrounded_avg(7, 140)\nrounded_avg(7,\
    \ 145)\nrounded_avg(7, 150)\nrounded_avg(7, 155)\nrounded_avg(7, 160)\nrounded_avg(7,\
    \ 165)\nrounded_avg(7, 170)\nrounded_avg(7, 175)\nrounded_avg(7, 180)\nrounded_avg(7,\
    \ 185)\nrounded_avg(7, 190)\nrounded_avg(7, 195)\nrounded_avg(7, 200)\nrounded_avg(7,\
    \ 205)\nrounded_avg(7, 210)\nrounded_avg(7, 215)\nrounded_avg(7, 220)\nrounded_avg(7,\
    \ 225)\nrounded_avg(7, 230)\nrounded_avg(7, 235)\nrounded_avg(7, 240)\nrounded_avg(7,\
    \ 245)\nrounded_avg(7, 250)\nrounded_avg(7, 255)\nrounded_avg(7, 260)\nrounded_avg(7,\
    \ 265)\nrounded_avg(7, 270)\nrounded_avg(7, 275)\nrounded_avg(7, 280)\nrounded_avg(7,\
    \ 285)\nrounded_avg(7, 290)\nrounded_avg(7, 295)\nrounded_avg(7, 300)\nrounded_avg(7,\
    \ 305)\nrounded_avg(7, 310)\nrounded_avg(7, 315)\nrounded_", "\n  if(n > m) return(-1)\n\
    \  return(round(sum((n:m))/2))\n}\n\nrounded_avg(6, 7)", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  \n  if(n >= m) return(-1)\n  \n  return(round(n + (m\
    \ - n)/2))\n}\n\nrounded_avg(7, 10)", "\n  if(n >= m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(5,10)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) return(-1)\n  return(round(n + (m - n)/2))\n}\n\nrounded_avg(3,4)",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(8, 10)", "\n\
    \  if(n > m) return(-1)\n  return(round(sum((n:m)/2))+1)\n}\nrounded_avg(3,4)\n\
    rounded_avg(5,6)\nrounded_avg(7,8)\nrounded_avg(9,10)\nrounded_avg(11,12)\nrounded_avg(13,14)\n\
    rounded_avg(15,16)\nrounded_avg(17,18)\nrounded_avg(19,20)\nrounded_avg(21,22)\n\
    rounded_avg(23,24)\nrounded_avg(25,26)\nrounded_avg(27,28)\nrounded_avg(29,30)\n\
    rounded_avg(31,32)\nrounded_avg(33,34)\nrounded_avg(35,36)\nrounded_avg(37,38)\n\
    rounded_avg(39,40)\nrounded_avg(41,42)\nrounded_avg(43,44)\nrounded_avg(45,46)\n\
    rounded_avg(47,48)\nrounded_avg(49,50)\nrounded_avg(51,52)\nrounded_avg(53,54)\n\
    rounded_avg(55,56)\nrounded_avg(57,58)\nrounded_avg(59,60)\nrounded_avg(61,62)\n\
    rounded_avg(63,64)\nrounded_avg(65,66)\nrounded_avg(67,68)\nrounded_avg(69,70)\n\
    rounded_avg(71,72)\nrounded_avg(73,74)\nrounded_avg(75,76)\nrounded_avg(77,78)\n\
    rounded_avg(79,80)\nrounded_avg(81,82)\nrounded_avg(83,84)\nrounded_avg(85,86)\n\
    rounded_avg(87,88)\nrounded_avg(89,90)\nrounded_avg(91,92)\nrounded_avg(93,94)\n\
    rounded_avg(95,96)\nrounded_avg(97,98)\nrounded_avg(99,100)\nrounded_avg(101,102)\n\
    rounded_avg(103,104)\nrounded_avg(105,106)\nrounded_avg(107,108)\nrounded_avg(109,110)\n\
    rounded_avg(111,112)\nrounded_avg(113,114)\nrounded_avg(115,116)\nrounded_avg(117,118)\n\
    rounded_avg(119,120)\nroun", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(sum((n:m)/2)/2))\n\
    }\n\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(0:n,\
    \ m))/2))\n}\nrounded_avg(6, 10)", "\n  if(n >= m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(1:n, m))/2))\n\
    }\nrounded_avg(3,4)\nrounded_avg(3,5)\nrounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\n\
    rounded_avg(3,9)\nrounded_avg(3,10)\nrounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\n\
    rounded_avg(3,14)\nrounded_avg(3,15)\nrounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\n\
    rounded_avg(3,19)\nrounded_avg(3,20)\nrounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\n\
    rounded_avg(3,24)\nrounded_avg(3,25)\nrounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\n\
    rounded_avg(3,29)\nrounded_avg(3,30)\nrounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\n\
    rounded_avg(3,34)\nrounded_avg(3,35)\nrounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\n\
    rounded_avg(3,39)\nrounded_avg(3,40)\nrounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\n\
    rounded_avg(3,44)\nrounded_avg(3,45)\nrounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\n\
    rounded_avg(3,49)\nrounded_avg(3,50)\nrounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\n\
    rounded_avg(3,54)\nrounded_avg(3,55)\nrounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\n\
    rounded_avg(3,59)\nrounded_avg(3,60)\nrounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\n\
    rounded_avg(3,64)\nrounded_avg(3,65)\nrounded_avg(3,66)\nrounded_avg(3,67)\nrounded_",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,10)", "\n\
    \  if(n <= m) return(round(n/m))\n  return(-1)\n}\n\nrounded_avg(3,5)", "\n  n\
    \ <- round(n, na.rm = TRUE)\n  m <- round(m, na.rm = TRUE)\n  \n  if(n <= m) return(round(n\
    \ + m))\n  \n  return(-1)\n}\n\nrounded_avg(6, 7)\nrounded_avg(6, 8)\nrounded_avg(6,\
    \ 9)\nrounded_avg(6, 10)\nrounded_avg(6, 11)\nrounded_avg(6, 12)\nrounded_avg(6,\
    \ 13)\nrounded_avg(6, 14)\nrounded_avg(6, 15)\nrounded_avg(6, 16)\nrounded_avg(6,\
    \ 17)\nrounded_avg(6, 18)\nrounded_avg(6, 19)\nrounded_avg(6, 20)\nrounded_avg(6,\
    \ 21)\nrounded_avg(6, 22)\nrounded_avg(6, 23)\nrounded_avg(6, 24)\nrounded_avg(6,\
    \ 25)\nrounded_avg(6, 26)\nrounded_avg(6, 27)\nrounded_avg(6, 28)\nrounded_avg(6,\
    \ 29)\nrounded_avg(6, 30)\nrounded_avg(6, 31)\nrounded_avg(6, 32)\nrounded_avg(6,\
    \ 33)\nrounded_avg(6, 34)\nrounded_avg(6, 35)\nrounded_avg(6, 36)\nrounded_avg(6,\
    \ 37)\nrounded_avg(6, 38)\nrounded_avg(6, 39)\nrounded_avg(6, 40)\nrounded_avg(6,\
    \ 41)\nrounded_avg(6, 42)\nrounded_avg(6, 43)\nrounded_avg(6, 44)\nrounded_avg(6,\
    \ 45)\nrounded_avg(6, 46)\nrounded_avg(6, 47)\nrounded_avg(6, 48)\nrounded_avg(6,\
    \ 49)\nrounded_avg(6, 50)\nrounded_avg(6, 51)\nrounded_avg(6, 52)\nrounded_avg(6,\
    \ 53)\nrounded_avg(6, 54)\nrounded_avg(6, 55)\nrounded_avg(6, 56)\nrounded_avg(6,\
    \ 57)\nrounded_avg(6, 58)\nrounded_avg(6, 59)\nrounded_avg(6, 60)\nrounded_avg(6,\
    \ 61)\nrounded_avg(6, 62)\nrounded_avg(6, 63)\nrounded_avg(6, 64)\nrounded_avg(6,\
    \ 65)\nrounded_avg(6, 66)\nrounded_avg(6, 67)", "\n  if(n >= m) return(-1)\n \
    \ return(round(m/n) * n)\n}\nrounded_avg(7, 4)", "\n  n <- as.integer(n)\n  m\
    \ <- as.integer(m)\n  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(n\
    \ + (m - n)/2))\n}\n", "\n  \n  if(n <= m) return(round(n/m))\n  \n  return(-1)\n\
    }\n", "\n  \n  if(n <= m){\n    \n    sum <- 0\n    \n    for(i in n:m){\n   \
    \   \n      sum <- sum + i\n      \n    }\n    \n    avg <- sum / m\n    \n  \
    \  round(avg)\n    \n  }\n  \n  else{\n    \n    sum <- 0\n    \n    for(i in\
    \ n:m){\n      \n      sum <- sum + i\n      \n    }\n    \n    avg <- sum / m\n\
    \    \n    round(avg)\n    \n  }\n  \n}\n\nrounded_avg(5,10)", "\n  if(n >= m)\
    \ return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(7, 5)", "\n  if(n > m)\
    \ return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(6, 10)", "\n  \n  if(n\
    \ >= m) return(-1)\n  \n  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)\nrounded_avg(5,5)\n\
    rounded_avg(5,0)\nrounded_avg(5,-5)\nrounded_avg(5,-10)\nrounded_avg(5,-20)\n\
    rounded_avg(5,-30)\nrounded_avg(5,-50)\nrounded_avg(5,-100)\nrounded_avg(5,-200)\n\
    rounded_avg(5,-300)\nrounded_avg(5,-500)\nrounded_avg(5,-1000)\nrounded_avg(5,-2000)\n\
    rounded_avg(5,-3000)\nrounded_avg(5,-5000)\nrounded_avg(5,-10000)\nrounded_avg(5,-100000)\n\
    rounded_avg(5,-1000000)\nrounded_avg(5,-10000000)\nrounded_avg(5,-100000000)\n\
    rounded_avg(5,-1000000000)\nrounded_avg(5,-10000000000)\nrounded_avg(5,-100000000000)\n\
    rounded_avg(5,-1000000000000)\nrounded_avg(5,-10000000000000)\nrounded_avg(5,-100000000000000)\n\
    rounded_avg(5,-1000000000000000)\nrounded_avg(5,-10000000000000000)\nrounded_avg(5,-100000000000000000)\n\
    rounded_avg(5,-1000000000000000000)\nrounded_avg(5,-10000000000000000000)\nrounded_avg(5,-100000000000000000000)\n\
    rounded_avg(5,-1000000000000000000000)\nrounded_avg(5,-10000000000000000000000)\n\
    rounded_avg(5,-100000000000000000000000)\nrounded_avg(5,-1000000000000000000000000)\n\
    rounded_avg(5,-10000000000000000000000000)\nrounded_avg(5,-100000000000000000000000000)\n\
    rounded_avg(5,-1000000000000000000000000000)\nrounded_avg(5,-10000000000000000000000000000)\n\
    rounded_avg(5,-100000000000000000000000000000)\nrounded_avg(5,-1000000000000000000000000000000)\n\
    rounded_avg(5,-10000000000000000000000000000000)\nrounded_avg(5,-100000000000000000000000000000000)\n\
    rounded_avg(5,-1000000000000000000000000000000000)\nrounded_avg(5,-10000000000000000000000000000000000)\n\
    rounded_avg(5,-100000000000000000000000000000000000)\nrounded_avg(5,-1000000000000000000000000000000000000)\n\
    rounded_avg(5,-10000000000000000000000000000000000000)\nrounded_avg(5,-100000000000000000000000000000000000000)\n\
    rounded_avg(5,-1000000000000000000000000000000000000000)\nroun", "\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  \n  if(n > m) {\n    return(-1)\n  }\n  \n  return(round(n\
    \ + (m - n)/2))\n}\n\nrounded_avg(6, 7)", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\nrounded_avg(5,6)", "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n\
    \nrounded_avg(3,5)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m)\
    \ return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't seem to work for `rounded_avg(3,4)` which should return `-1` but\
    \ returns `1`.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ should work for all cases. I tested it on several cases and it seems to work\
    \ fine.\n<|/ c |>\n<| c |>\nI tested it on several cases and it seems to work\
    \ fine. `rounded_avg(3,4)` returns `-1` as expected.\n<|/ c |>\n<| c |>\nI tested\
    \ it on several cases and it seems to work fine. `rounded_avg(3,4)` returns `-1`\
    \ as expected.\n<|/ c |>\n<| c |>\nI tested it on several cases and it seems to\
    \ work fine. `rounded_avg(3,4)` returns `-1` as expected. `rounded_avg(3,5)` returns\
    \ `-1` as expected. `rounded_avg(3,6)` returns `-1` as expected. `rounded_avg(3,7)`\
    \ returns `-1` as expected. `rounded_avg(3,8)` returns `-1` as expected. `rounded_avg(3,9)`\
    \ returns `-1` as expected. `rounded_avg(3,10)` returns `-1` as expected. `rounded_avg(3,11)`\
    \ returns `-1` as expected. `rounded_avg(3,12)` returns `-1` as expected. `rounded_avg(3,13)`\
    \ returns `-1` as expected. `rounded_avg(3,14)` returns `-1` as expected. `rounded_avg(3,15)`\
    \ returns `-1` as expected. `rounded_avg(3,16)` returns `-1` as expected. `rounded_avg(3,17)`\
    \ returns `-1` as expected. `rounded_avg(3,18)` returns `-1` as expected. `rounded_avg(3,19)`\
    \ returns `-1` as expected. `rounded_avg(3,20)` returns `-1` as expected. `rounded_avg(3,21)`\
    \ returns `-1` as expected.\n<|/ c |>\n<| a tags=r |>\nI came up with a solution\
    \ using ifelse() and a vectorized solution:\n<code>\nrounded_avg ", "\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,10)", "\n  if(n\
    \ > m) return(-1)\n  return(round(sum(n:m)/2))\n}\n\nrounded_avg(3,5)", "\n  if(n\
    \ > m) return(-1)\n  return(round(sum((n:m))/2))\n}\nrounded_avg(3,5)", "\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(7, 5)", "\n  if(n\
    \ <= m) return(round(n/m))\n  return(-1)\n}\n\nrounded_avg(6, 7)", "\n  if(n >\
    \ m) return(-1)\n  return(round(sum((n:m)/2))/2) \n}\nrounded_avg(3,5)\nrounded_avg(3,4)\n\
    rounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\nrounded_avg(3,9)\nrounded_avg(3,10)\n\
    rounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\nrounded_avg(3,14)\nrounded_avg(3,15)\n\
    rounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\nrounded_avg(3,19)\nrounded_avg(3,20)\n\
    rounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\nrounded_avg(3,24)\nrounded_avg(3,25)\n\
    rounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\nrounded_avg(3,29)\nrounded_avg(3,30)\n\
    rounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\nrounded_avg(3,34)\nrounded_avg(3,35)\n\
    rounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\nrounded_avg(3,39)\nrounded_avg(3,40)\n\
    rounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\nrounded_avg(3,44)\nrounded_avg(3,45)\n\
    rounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\nrounded_avg(3,49)\nrounded_avg(3,50)\n\
    rounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\nrounded_avg(3,54)\nrounded_avg(3,55)\n\
    rounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\nrounded_avg(3,59)\nrounded_avg(3,60)\n\
    rounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\nrounded_avg(3,64)\nrounded_avg(3,65)\n\
    rounded_avg(3,66)\nrounded_avg(3,67)\nrounded_avg", "\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(6, 8)", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n\
    \  return(round(sum((n:m)/2))+1)\n}\n\nrounded_avg(3,4)", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\nrounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\n\
    rounded_avg(10,20)\nrounded_avg(20,10)\nrounded_avg(20,20)\nrounded_avg(20,30)\n\
    rounded_avg(30,20)\nrounded_avg(30,30)\nrounded_avg(30,40)\nrounded_avg(30,50)\n\
    rounded_avg(30,60)\nrounded_avg(30,70)\nrounded_avg(30,80)\nrounded_avg(30,90)\n\
    rounded_avg(30,100)\nrounded_avg(30,200)\nrounded_avg(30,300)\nrounded_avg(30,400)\n\
    rounded_avg(30,500)\nrounded_avg(30,600)\nrounded_avg(30,700)\nrounded_avg(30,800)\n\
    rounded_avg(30,900)\nrounded_avg(30,1000)\nrounded_avg(30,2000)\nrounded_avg(30,3000)\n\
    rounded_avg(30,4000)\nrounded_avg(30,5000)\nrounded_avg(30,6000)\nrounded_avg(30,7000)\n\
    rounded_avg(30,8000)\nrounded_avg(30,9000)\nrounded_avg(30,10000)\nrounded_avg(30,20000)\n\
    rounded_avg(30,30000)\nrounded_avg(30,40000)\nrounded_avg(30,50000)\nrounded_avg(30,60000)\n\
    rounded_avg(30,70000)\nrounded_avg(30,80000)\nrounded_avg(30,90000)\nrounded_avg(30,100000)\n\
    rounded_avg(30,200000)\nrounded_avg(30,300000)\nrounded_avg(30,400000)\nrounded_avg(30,500000)\n\
    rounded_avg(30,600000)\nrounded_avg(30,700000)\nrounded_avg(30,800000)\nrounded_avg(30,900000)\n\
    rounded_avg(30,1000000)\nrounded_avg(30,2000000)\nrounded_avg(30,3000000)\nrounded_avg(30,4000000)\n\
    rounded_avg(30,5000000)\nrounded_avg(30,6000000)\nrounded_avg(30,7000000)\nrounded_avg(30,8000000)\n\
    rounded_avg(30,9000000)\nrounded_avg(30,100000000)\nrounded_avg(30,1000000000)\n\
    roun", "\n  \n  if(n <= m){\n    \n    sum <- 0\n    \n    for(i in n:m){\n  \
    \    \n      sum <- sum + i\n    }\n    \n    avg <- sum / m\n    \n    round(avg)\n\
    \    \n  }else{\n    \n    -1\n    \n  }\n}\n\nrounded_avg(5,7)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nThe function\
    \ should take one integer n as an argument and return the prime numbers from 2\
    \ to n.\nThe function should return -1 if n is less than 2.\nExample:\nprime_numbers(10)\n\
    should return [2,3,5,7,11,13,17,19]\nHint: Use a for loop to iterate from 2 to\
    \ n.\n\n\n</text>\n<cell>", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n\
    }\n\nrounded_avg(3,5)", "\n  if(n <= m){\n    sum <- 0\n    for(i in n:m){\n \
    \     sum <- sum + i\n    }\n    sum <- sum / m\n    round(sum)\n  }else{\n  \
    \  -1\n  }\n}\n\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(m,\
    \ n), na.rm = TRUE)/2))\n}\nrounded_avg(6, 10)", "\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(m/n) * n)\n}\n</cell>\n<cell>", "\n  \n  if(n <= m){\n  \
    \  \n    sum <- 0\n    \n    for(i in n:m){\n      \n      sum <- sum + i\n  \
    \  }\n    \n    avg <- sum / m\n    \n    round(avg)\n  }\n  else{\n    \n   \
    \ sum <- 0\n    \n    for(i in n:m){\n      \n      sum <- sum + i\n    }\n  \
    \  \n    avg <- sum / m\n    \n    round(avg)\n  }\n}\n\nrounded_avg(5,10)\n</cell>\n\
    <cell>", "\n  \n  if(n >= m) return(-1)\n  \n  return(round(m/n) * n)\n}\n\nrounded_avg(5,4)\n\
    rounded_avg(5,5)\nrounded_avg(5,6)\nrounded_avg(5,7)\nrounded_avg(5,8)\nrounded_avg(5,9)\n\
    rounded_avg(5,10)\nrounded_avg(5,11)\nrounded_avg(5,12)\nrounded_avg(5,13)\nrounded_avg(5,14)\n\
    rounded_avg(5,15)\nrounded_avg(5,16)\nrounded_avg(5,17)\nrounded_avg(5,18)\nrounded_avg(5,19)\n\
    rounded_avg(5,20)\nrounded_avg(5,21)\nrounded_avg(5,22)\nrounded_avg(5,23)\nrounded_avg(5,24)\n\
    rounded_avg(5,25)\nrounded_avg(5,26)\nrounded_avg(5,27)\nrounded_avg(5,28)\nrounded_avg(5,29)\n\
    rounded_avg(5,30)\nrounded_avg(5,31)\nrounded_avg(5,32)\nrounded_avg(5,33)\nrounded_avg(5,34)\n\
    rounded_avg(5,35)\nrounded_avg(5,36)\nrounded_avg(5,37)\nrounded_avg(5,38)\nrounded_avg(5,39)\n\
    rounded_avg(5,40)\nrounded_avg(5,41)\nrounded_avg(5,42)\nrounded_avg(5,43)\nrounded_avg(5,44)\n\
    rounded_avg(5,45)\nrounded_avg(5,46)\nrounded_avg(5,47)\nrounded_avg(5,48)\nrounded_avg(5,49)\n\
    rounded_avg(5,50)\nrounded_avg(5,51)\nrounded_avg(5,52)\nrounded_avg(5,53)\nrounded_avg(5,54)\n\
    rounded_avg(5,55)\nrounded_avg(5,56)\nrounded_avg(5,57)\nrounded_avg(5,58)\nrounded_avg(5,59)\n\
    rounded_avg(5,60)\nrounded_avg(5,61)\nrounded_avg(5,62)\nrounded_avg(5,63)\nrounded_avg(5,64)\n\
    rounded_avg(5,65)\nrounded_avg(5,66)\nrounded_avg(5,67)\nrounded_", "\n  \n  if(n\
    \ > m) return(-1)\n  \n  return(round(sum((n:m))/2))\n}\n\nrounded_avg(3,4)\n\
    rounded_avg(4,3)\nrounded_avg(5,4)\nrounded_avg(6,4)\nrounded_avg(7,4)\nrounded_avg(8,4)\n\
    rounded_avg(9,4)\nrounded_avg(10,4)\nrounded_avg(11,4)\nrounded_avg(12,4)\nrounded_avg(13,4)\n\
    rounded_avg(14,4)\nrounded_avg(15,4)\nrounded_avg(16,4)\nrounded_avg(17,4)\nrounded_avg(18,4)\n\
    rounded_avg(19,4)\nrounded_avg(20,4)\nrounded_avg(21,4)\nrounded_avg(22,4)\nrounded_avg(23,4)\n\
    rounded_avg(24,4)\nrounded_avg(25,4)\nrounded_avg(26,4)\nrounded_avg(27,4)\nrounded_avg(28,4)\n\
    rounded_avg(29,4)\nrounded_avg(30,4)\nrounded_avg(31,4)\nrounded_avg(32,4)\nrounded_avg(33,4)\n\
    rounded_avg(34,4)\nrounded_avg(35,4)\nrounded_avg(36,4)\nrounded_avg(37,4)\nrounded_avg(38,4)\n\
    rounded_avg(39,4)\nrounded_avg(40,4)\nrounded_avg(41,4)\nrounded_avg(42,4)\nrounded_avg(43,4)\n\
    rounded_avg(44,4)\nrounded_avg(45,4)\nrounded_avg(46,4)\nrounded_avg(47,4)\nrounded_avg(48,4)\n\
    rounded_avg(49,4)\nrounded_avg(50,4)\nrounded_avg(51,4)\nrounded_avg(52,4)\nrounded_avg(53,4)\n\
    rounded_avg(54,4)\nrounded_avg(55,4)\nrounded_avg(56,4)\nrounded_avg(57,4)\nrounded_avg(58,4)\n\
    rounded_avg(59,4)\nrounded_avg(60,4)\nrounded_avg(61,4)\nrounded_avg(62,4)\nrounded_avg(63,4)\n\
    rounded_avg(64,4)\nrounded_avg(65,4)\nrounded_avg(66,4)\nrounded_avg(67,4)\nrounded_avg(68,4)\n",
  "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n  if(n >= m) return(-1)\n  \n\
    \  return(round(n + (m - n)/2))\n}\n\nrounded_avg(7, 10)", "\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n\nrounded_avg(5,10)", "\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(6, 8)\nrounded_avg(6, 10)\nrounded_avg(6,\
    \ 12)\nrounded_avg(6, 14)\nrounded_avg(6, 16)\nrounded_avg(6, 18)\nrounded_avg(6,\
    \ 20)\nrounded_avg(6, 22)\nrounded_avg(6, 24)\nrounded_avg(6, 26)\nrounded_avg(6,\
    \ 28)\nrounded_avg(6, 30)\nrounded_avg(6, 32)\nrounded_avg(6, 34)\nrounded_avg(6,\
    \ 36)\nrounded_avg(6, 38)\nrounded_avg(6, 40)\nrounded_avg(6, 42)\nrounded_avg(6,\
    \ 44)\nrounded_avg(6, 46)\nrounded_avg(6, 48)\nrounded_avg(6, 50)\nrounded_avg(6,\
    \ 52)\nrounded_avg(6, 54)\nrounded_avg(6, 56)\nrounded_avg(6, 58)\nrounded_avg(6,\
    \ 60)\nrounded_avg(6, 62)\nrounded_avg(6, 64)\nrounded_avg(6, 66)\nrounded_avg(6,\
    \ 68)\nrounded_avg(6, 70)\nrounded_avg(6, 72)\nrounded_avg(6, 74)\nrounded_avg(6,\
    \ 76)\nrounded_avg(6, 78)\nrounded_avg(6, 80)\nrounded_avg(6, 82)\nrounded_avg(6,\
    \ 84)\nrounded_avg(6, 86)\nrounded_avg(6, 88)\nrounded_avg(6, 90)\nrounded_avg(6,\
    \ 92)\nrounded_avg(6, 94)\nrounded_avg(6, 96)\nrounded_avg(6, 98)\nrounded_avg(6,\
    \ 100)\nrounded_avg(6, 102)\nrounded_avg(6, 104)\nrounded_avg(6, 106)\nrounded_avg(6,\
    \ 108)\nrounded_avg(6, 110)\nrounded_avg(6, 112)\nrounded_avg(6, 114)\nrounded_avg(6,\
    \ 116)\nrounded_avg(6, 118)\nrounded_avg(6, 120)\nrounded_avg(6, 122)\nrounded_avg(6,\
    \ 124)\nrounded_avg(6, 126)\nrounded_avg(6, 128)\nrounded_avg(6, 130)\nrounded_avg(6,\
    \ 132)\nrounded_avg(6, 13", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n\
    }\n\nrounded_avg(6, 7)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n\
    \ == m) return(n)\n  if(n == 0) return(-1)\n  if(n == -1) return(-1)\n  if(n ==\
    \ 1) return(0)\n  if(n == -1) return(0)\n  if(n == 2) return(1)\n  if(n == -2)\
    \ return(-1)\n  if(n == -3) return(-1)\n  if(n == -4) return(-1)\n  if(n == -5)\
    \ return(-1)\n  if(n == 6) return(1)\n  if(n == 7) return(1)\n  if(n == 8) return(1)\n\
    \  if(n == 9) return(1)\n  if(n == 10) return(1)\n  if(n == 11) return(1)\n  if(n\
    \ == 12) return(1)\n  if(n == 13) return(1)\n  if(n == 14) return(1)\n  if(n ==\
    \ 15) return(1)\n  if(n == 16) return(1)\n  if(n == 17) return(1)\n  if(n == 18)\
    \ return(1)\n  if(n == 19) return(1)\n  if(n == 20) return(1)\n  if(n == 21) return(1)\n\
    \  if(n == 22) return(1)\n  if(n == 23) return(1)\n  if(n == 24) return(1)\n \
    \ if(n == 25) return(1)\n  if(n == 26) return(1)\n  if(n == 27) return(1)\n  if(n\
    \ == 28) return(1)\n  if(n == 29) return(1)\n  if(n == 30) return(1)\n  if(n ==\
    \ 31) return(1)\n  if(n == 32) return(1)\n  if(n == 33) return(1)\n  if(n == 34)\
    \ return(1)\n  if(n == 35) return(1)\n  if(n == 36) return(1)\n  if(n == 37) return(1)\n\
    \  if(n == 38) return(1)\n  if(n == 39) return(1)\n  if(n == 40) return(1)\n \
    \ if(n == 41) return(1)\n  if(n == 42) return(1)\n  if(n == 43) return(1)\n  if(n\
    \ == 44) return(1)\n  if(n == 45) return(1)\n  if(n == 46) return(1)\n  if(n ==\
    \ 47) return(1)\n  if(n == 48) return(1)\n  if(n == 49) return(1)\n  if(n == 50)\
    \ return(1)\n  if(n == 51) return(1)\n  if(n == 52) return(1)\n  if", "\n  \n\
    \  if(n > m) return(-1)\n  \n  return(round(sum(c(seq(n,m),seq(n,m,-1))) / 2))\n\
    }\n\nrounded_avg(3,5)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n\
    }\n\nrounded_avg(6, 7)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n\
    }\n\nrounded_avg(5,10)", "\n  if(n >= m) return(-1)\n  return(round(sum(c(n, m))/2))\n\
    }\nrounded_avg(7, 9)\nrounded_avg(7, 8)\nrounded_avg(7, 7)\nrounded_avg(7, 6)\n\
    rounded_avg(7, 5)\nrounded_avg(7, 4)\nrounded_avg(7, 3)\nrounded_avg(7, 2)\nrounded_avg(7,\
    \ 1)\nrounded_avg(7, 0)\nrounded_avg(6, 9)\nrounded_avg(6, 8)\nrounded_avg(6,\
    \ 7)\nrounded_avg(6, 6)\nrounded_avg(6, 5)\nrounded_avg(6, 4)\nrounded_avg(6,\
    \ 3)\nrounded_avg(6, 2)\nrounded_avg(6, 1)\nrounded_avg(6, 0)\nrounded_avg(5,\
    \ 9)\nrounded_avg(5, 8)\nrounded_avg(5, 7)\nrounded_avg(5, 6)\nrounded_avg(5,\
    \ 5)\nrounded_avg(5, 4)\nrounded_avg(5, 3)\nrounded_avg(5, 2)\nrounded_avg(5,\
    \ 1)\nrounded_avg(5, 0)\nrounded_avg(4, 9)\nrounded_avg(4, 8)\nrounded_avg(4,\
    \ 7)\nrounded_avg(4, 6)\nrounded_avg(4, 5)\nrounded_avg(4, 4)\nrounded_avg(4,\
    \ 3)\nrounded_avg(4, 2)\nrounded_avg(4, 1)\nrounded_avg(4, 0)\nrounded_avg(3,\
    \ 9)\nrounded_avg(3, 8)\nrounded_avg(3, 7)\nrounded_avg(3, 6)\nrounded_avg(3,\
    \ 5)\nrounded_avg(3, 4)\nrounded_avg(3, 3)\nrounded_avg(3, 2)\nrounded_avg(3,\
    \ 1)\nrounded_avg(3, 0)\nrounded_avg(2, 9)\nrounded_avg(2, 8)\nrounded_avg(2,\
    \ 7)\nrounded_avg(2, 6)\nrounded_avg(2, 5)\nrounded_avg(2, 4)\nrounded_avg(2,\
    \ 3)\nrounded_avg(2, 2)\nrounded_avg(2, 1)\nrounded_avg(2, 0)\nrounded_avg(1,\
    \ 9)\nrounded_avg(1, 8)\nrounded_avg(1, 7)\nrounded_avg(1, 6)\nrounded_avg(1,\
    \ 5)\nrounded_avg(1, 4)\nrounded_avg(1, 3)\nrounded_avg(1, 2)\nrounded_avg(1,\
    \ 1)\nrounded_avg(1, 0)\nrounded_avg(0, 9)\nrounded_avg(0, 8)\nrounded_avg(0,\
    \ 7)\nrounded_avg(0, 6)\nrounded_avg(0, 5)\nrounded_avg(0, 4)\nrounded_avg(0,\
    \ 3)\nrounded_avg(0, 2)\nroun", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(sum((n:m)/2)/2))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if `n` is greater than `m`.\n<|/\
    \ c |>\n<| c |>\nI added a test case for that case.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I was able to solve the problem using your solution. Thanks\
    \ again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nrounded_avg <- function(n, m) {\n\
    \  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n \
    \ }\n  return(round(sum((n:m)/2)/2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n\
    \  }\n  return(round(sum((n:m)/2)/2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nrounded_avg <- function(n, m) {\n  n <- as.integer(n)\n\
    \  m <- as.integer(m)\n  if(n > m) {\n    return(-1)\n  }\n  return(round(sum((n:m)/2)/2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\nrounded_avg\
    \ <- function(n, m) {\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if(n > m)\
    \ {\n    return(-1)\n  }\n  return(round(sum((n:m)/2)/2))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n",
  "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n", "\n  if(n > m) return(-1)\n\
    \  return(round(sum((n:m)/2)/2))\n}\n\nrounded_avg(3,5)", "\n  if(n > m) {\n \
    \   return(-1)\n  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(7, 3)", "\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding,binary\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-3, 2)` returns\
    \ `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing\
    \ that out. I've updated my answer to include a check for negative numbers.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n >\
    \ m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding,binary\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-3, 2)` returns\
    \ `-1` instead of `-2`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nrounded_avg <- function(n,\
    \ m) {\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding,binary\
    \ |>\n<| a tags=r,rounding,binary |>\n<code>\nrounded_avg <- function(n, m) {\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,rounding,binary |>\n<code>\nrounded_avg <- function(n, m) {\n\
    \  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding,binary dscore=2 |>\n\
    <| a tags=r,rounding,binary |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n\
    \ > m) return(-1)\n  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a tags=r,rounding,binary |>\n<| a tags=r,rounding,binary\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n > m) return(-1)\n  return(",
  "\n  n <- round(n)\n  m <- round(m)\n  if(n == m) return(n)\n  if(n>m) return(-1)\n\
    \  return(round((n+m)/2))\n}\n\nrounded_avg(5,6)\nrounded_avg(5,4)\nrounded_avg(5,5)\n\
    rounded_avg(5,10)\nrounded_avg(5,7)\nrounded_avg(5,8)\nrounded_avg(5,9)\nrounded_avg(5,10)\n\
    rounded_avg(5,11)\nrounded_avg(5,12)\nrounded_avg(5,13)\nrounded_avg(5,14)\nrounded_avg(5,15)\n\
    rounded_avg(5,16)\nrounded_avg(5,17)\nrounded_avg(5,18)\nrounded_avg(5,19)\nrounded_avg(5,20)\n\
    rounded_avg(5,21)\nrounded_avg(5,22)\nrounded_avg(5,23)\nrounded_avg(5,24)\nrounded_avg(5,25)\n\
    rounded_avg(5,26)\nrounded_avg(5,27)\nrounded_avg(5,28)\nrounded_avg(5,29)\nrounded_avg(5,30)\n\
    rounded_avg(5,31)\nrounded_avg(5,32)\nrounded_avg(5,33)\nrounded_avg(5,34)\nrounded_avg(5,35)\n\
    rounded_avg(5,36)\nrounded_avg(5,37)\nrounded_avg(5,38)\nrounded_avg(5,39)\nrounded_avg(5,40)\n\
    rounded_avg(5,41)\nrounded_avg(5,42)\nrounded_avg(5,43)\nrounded_avg(5,44)\nrounded_avg(5,45)\n\
    rounded_avg(5,46)\nrounded_avg(5,47)\nrounded_avg(5,48)\nrounded_avg(5,49)\nrounded_avg(5,50)\n\
    rounded_avg(5,51)\nrounded_avg(5,52)\nrounded_avg(5,53)\nrounded_avg(5,54)\nrounded_avg(5,55)\n\
    rounded_avg(5,56)\nrounded_avg(5,57)\nrounded_avg(5,58)\nrounded_avg(5,59)\nrounded_avg(5,60)\n\
    rounded_avg(5,61)\nrounded_avg(5,62)\nrounded_avg(5,63)\nrounded_avg(5,64)\nroun",
  "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  if (n >= m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\nrounded_avg(7, 10)", "\n  if(n >= m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\n\nrounded_avg(3,5)\nrounded_avg(5,3)\nrounded_avg(3,3)\nrounded_avg(3,0)\n\
    rounded_avg(3,1)\nrounded_avg(3,2)\nrounded_avg(3,3)\nrounded_avg(3,4)\nrounded_avg(3,5)\n\
    rounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\nrounded_avg(3,9)\nrounded_avg(3,10)\n\
    rounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\nrounded_avg(3,14)\nrounded_avg(3,15)\n\
    rounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\nrounded_avg(3,19)\nrounded_avg(3,20)\n\
    rounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\nrounded_avg(3,24)\nrounded_avg(3,25)\n\
    rounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\nrounded_avg(3,29)\nrounded_avg(3,30)\n\
    rounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\nrounded_avg(3,34)\nrounded_avg(3,35)\n\
    rounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\nrounded_avg(3,39)\nrounded_avg(3,40)\n\
    rounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\nrounded_avg(3,44)\nrounded_avg(3,45)\n\
    rounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\nrounded_avg(3,49)\nrounded_avg(3,50)\n\
    rounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\nrounded_avg(3,54)\nrounded_avg(3,55)\n\
    rounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\nrounded_avg(3,59)\nrounded_avg(3,60)\n\
    rounded_avg(3,61)\nroun", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n\
    \  if(n > m) return(-1)\n  \n  return(round(n + (m - n)/2))\n}\n\nrounded_avg(7,\
    \ 9)", "\n  if(n <= m) return(round(n/m + 0.5))\n  return(-1)\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThank you for your answer! I appreciate it! But I still\
    \ don't understand how I can get the average of the numbers from n to m. Can you\
    \ please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added an example\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much! It really\
    \ helped me! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could\
    \ help.\n<|/ c |>\n<| a tags=r |>\n<code>", "\n  if(n > m) return(-1)\n  return(round(sum((n+1):m)/2))\n\
    }\nrounded_avg(3,4)\nrounded_avg(3,5)\nrounded_avg(3,6)\nrounded_avg(3,7)\nrounded_avg(3,8)\n\
    rounded_avg(3,9)\nrounded_avg(3,10)\nrounded_avg(3,11)\nrounded_avg(3,12)\nrounded_avg(3,13)\n\
    rounded_avg(3,14)\nrounded_avg(3,15)\nrounded_avg(3,16)\nrounded_avg(3,17)\nrounded_avg(3,18)\n\
    rounded_avg(3,19)\nrounded_avg(3,20)\nrounded_avg(3,21)\nrounded_avg(3,22)\nrounded_avg(3,23)\n\
    rounded_avg(3,24)\nrounded_avg(3,25)\nrounded_avg(3,26)\nrounded_avg(3,27)\nrounded_avg(3,28)\n\
    rounded_avg(3,29)\nrounded_avg(3,30)\nrounded_avg(3,31)\nrounded_avg(3,32)\nrounded_avg(3,33)\n\
    rounded_avg(3,34)\nrounded_avg(3,35)\nrounded_avg(3,36)\nrounded_avg(3,37)\nrounded_avg(3,38)\n\
    rounded_avg(3,39)\nrounded_avg(3,40)\nrounded_avg(3,41)\nrounded_avg(3,42)\nrounded_avg(3,43)\n\
    rounded_avg(3,44)\nrounded_avg(3,45)\nrounded_avg(3,46)\nrounded_avg(3,47)\nrounded_avg(3,48)\n\
    rounded_avg(3,49)\nrounded_avg(3,50)\nrounded_avg(3,51)\nrounded_avg(3,52)\nrounded_avg(3,53)\n\
    rounded_avg(3,54)\nrounded_avg(3,55)\nrounded_avg(3,56)\nrounded_avg(3,57)\nrounded_avg(3,58)\n\
    rounded_avg(3,59)\nrounded_avg(3,60)\nrounded_avg(3,61)\nrounded_avg(3,62)\nrounded_avg(3,63)\n\
    rounded_avg(3,64)\nrounded_avg(3,65)\nrounded_avg(3,66)\nrounded_avg(3,67)\nrounded_avg(",
  "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(7,\
    \ 8)", "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6,\
    \ 10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(1:n, m))/2))\n}\nrounded_avg(6,\
    \ 10)", "\n  \n  if(n > m) return(-1)\n  \n  return(round(sum((n:m))/2))\n}\n\n\
    rounded_avg(3,7)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\nrounded_avg(5,5)\n\
    rounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_avg(5,5)\nrounded_avg(10,0)\nrounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(5,10)\n\
    rounded_", "\n  \n  # Write your code here\n  \n}\n", "\n  \n  if(n >= m) return(-1)\n\
    \  \n  return(round(sum(n:m)/2))\n}\n\nrounded_avg(5,10)\nrounded_avg(10,5)\n\
    rounded_avg(5,5)\nrounded_avg(10,10)\nrounded_avg(10,20)\nrounded_avg(20,10)\n\
    rounded_avg(20,20)\nrounded_avg(20,30)\nrounded_avg(30,20)\nrounded_avg(30,30)\n\
    rounded_avg(30,40)\nrounded_avg(40,30)\nrounded_avg(40,40)\nrounded_avg(40,50)\n\
    rounded_avg(50,40)\nrounded_avg(50,50)\nrounded_avg(50,60)\nrounded_avg(60,50)\n\
    rounded_avg(60,60)\nrounded_avg(60,70)\nrounded_avg(70,60)\nrounded_avg(70,80)\n\
    rounded_avg(80,70)\nrounded_avg(80,90)\nrounded_avg(90,80)\nrounded_avg(90,100)\n\
    rounded_avg(100,90)\nrounded_avg(100,200)\nrounded_avg(200,100)\nrounded_avg(200,300)\n\
    rounded_avg(300,200)\nrounded_avg(300,400)\nrounded_avg(400,300)\nrounded_avg(400,500)\n\
    rounded_avg(500,400)\nrounded_avg(500,600)\nrounded_avg(600,500)\nrounded_avg(600,700)\n\
    rounded_avg(700,600)\nrounded_avg(700,800)\nrounded_avg(800,700)\nrounded_avg(800,900)\n\
    rounded_avg(900,800)\nrounded_avg(900,1000)\nrounded_avg(1000,900)\nrounded_avg(1000,2000)\n\
    rounded_avg(2000,1000)\nrounded_avg(2000,3000)\nrounded_avg(3000,2000)\nrounded_avg(3000,4000)\n\
    rounded_avg(4000,3000)\nrounded_avg(4000,5000)\nrounded_avg(5000,4000)\nrounded_avg(5000,6000)\n\
    rounded_avg(6000,5000)\nrounded_avg(6000,7000)\nrounded_avg(7000,6000)\nrounded_avg(7000,8000)\n\
    rounded_avg(8000,7000)\nrounded_avg(8000,9000)\nrounded_avg(9000,8000)\nrounded_avg(9000,10000)\n\
    roun", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(3,4)",
  "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\nrounded_avg(5,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(10,15)\nrounded_avg(10,20)\n\
    rounded_avg(10,25)\nrounded_avg(10,30)\nrounded_avg(10,35)\nrounded_avg(10,40)\n\
    rounded_avg(10,45)\nrounded_avg(10,50)\nrounded_avg(10,55)\nrounded_avg(10,60)\n\
    rounded_avg(10,65)\nrounded_avg(10,70)\nrounded_avg(10,75)\nrounded_avg(10,80)\n\
    rounded_avg(10,85)\nrounded_avg(10,90)\nrounded_avg(10,95)\nrounded_avg(10,100)\n\
    rounded_avg(10,105)\nrounded_avg(10,110)\nrounded_avg(10,115)\nrounded_avg(10,120)\n\
    rounded_avg(10,125)\nrounded_avg(10,130)\nrounded_avg(10,135)\nrounded_avg(10,140)\n\
    rounded_avg(10,145)\nrounded_avg(10,150)\nrounded_avg(10,155)\nrounded_avg(10,160)\n\
    rounded_avg(10,165)\nrounded_avg(10,170)\nrounded_avg(10,175)\nrounded_avg(10,180)\n\
    rounded_avg(10,185)\nrounded_avg(10,190)\nrounded_avg(10,195)\nrounded_avg(10,200)\n\
    rounded_avg(10,205)\nrounded_avg(10,210)\nrounded_avg(10,215)\nrounded_avg(10,220)\n\
    rounded_avg(10,225)\nrounded_avg(10,230)\nrounded_avg(10,235)\nrounded_avg(10,240)\n\
    rounded_avg(10,245)\nrounded_avg(10,250)\nrounded_avg(10,255)\nrounded_avg(10,260)\n\
    rounded_avg(10,265)\nrounded_avg(10,270)\nrounded_avg(10,275)\nrounded_avg(10,280)\n\
    rounded_avg(10,285)\nrounded_avg(10,290)\nrounded_avg(10,295)\nrounded_avg(10,300)\n\
    rounded_avg(10,305)\nrounded_avg(10,3", "\n  if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\n\nrounded_avg(5,10)", "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n\
    }\n\nrounded_avg(3,5)", "\n  if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n\
    }\nrounded_avg(3,5)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\
    \nrounded_avg(6, 10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(m, n-1))/2))\n\
    }\nrounded_avg(3,5)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\
    rounded_avg(5,4)", "\n  n <- as.integer(n)\n  m <- as.integer(m)\n  \n  if(n <=\
    \ m){\n    \n    sum <- 0\n    \n    for(i in n:m){\n      \n      sum <- sum\
    \ + i\n    }\n    \n    avg <- sum / m\n    \n    round(avg)\n    \n  } else {\n\
    \    \n    sum <- 0\n    \n    for(i in n:m){\n      \n      sum <- sum + i\n\
    \    }\n    \n    avg <- sum / m\n    \n    -1\n  }\n}\n\nrounded_avg(5,6)\n</cell>\n\
    <cell>", "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n}\n\n\
    rounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n\n\
    rounded_avg(5,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(5,5)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_avg(10,5)\nrounded_avg(10,10)\nrounded_avg(10,5)\n\
    rounded_avg(10,10)\nrounded_", "\n  if(n > m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n\nrounded_avg(5,10)", "\n  if(n > m) return(-1)\n  return(round(sum(c(1:n,\
    \ m))/2))\n}\nrounded_avg(3,4)\nrounded_avg(4,3)\nrounded_avg(5,6)\nrounded_avg(6,5)\n\
    rounded_avg(7,8)\nrounded_avg(8,7)\nrounded_avg(9,10)\nrounded_avg(10,9)\nrounded_avg(11,12)\n\
    rounded_avg(12,11)\nrounded_avg(13,14)\nrounded_avg(14,13)\nrounded_avg(15,16)\n\
    rounded_avg(16,15)\nrounded_avg(17,18)\nrounded_avg(18,17)\nrounded_avg(19,20)\n\
    rounded_avg(20,19)\nrounded_avg(21,22)\nrounded_avg(22,21)\nrounded_avg(23,24)\n\
    rounded_avg(24,23)\nrounded_avg(25,26)\nrounded_avg(26,25)\nrounded_avg(27,28)\n\
    rounded_avg(28,27)\nrounded_avg(29,30)\nrounded_avg(30,29)\nrounded_avg(31,32)\n\
    rounded_avg(32,31)\nrounded_avg(33,34)\nrounded_avg(34,33)\nrounded_avg(35,36)\n\
    rounded_avg(36,35)\nrounded_avg(37,38)\nrounded_avg(38,37)\nrounded_avg(39,40)\n\
    rounded_avg(40,39)\nrounded_avg(41,42)\nrounded_avg(42,41)\nrounded_avg(43,44)\n\
    rounded_avg(44,43)\nrounded_avg(45,46)\nrounded_avg(46,45)\nrounded_avg(47,48)\n\
    rounded_avg(48,47)\nrounded_avg(49,50)\nrounded_avg(50,49)\nrounded_avg(51,52)\n\
    rounded_avg(52,51)\nrounded_avg(53,54)\nrounded_avg(54,53)\nrounded_avg(55,56)\n\
    rounded_avg(56,55)\nrounded_avg(57,58)\nrounded_avg(58,57)\nrounded_avg(59,60)\n\
    rounded_avg(60,59)\nrounded_avg(61,62)\nrounded_avg(62,61)\nrounded_avg(63,64)\n\
    rounded_avg(64,63)", "\n  if(n > m) return(-1)\n  return(round(m/n) * n)\n}\n",
  "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n", "\n  if(n >= m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question at all. OP wants to round the average to nearest integer,\
    \ not just round the numbers to nearest integer.\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. OP wants to round the average to nearest integer,\
    \ not just round the numbers to nearest integer.\n<|/ c |>\n<| c |>\nThe question\
    \ says \"Round the answer to the nearest integer and convert that to binary\"\n\
    <|/ c |>\n<| c |>\nThe question says \"Round the answer to the nearest integer\
    \ and convert that to binary\"\n<|/ c |>\n<| c |>\nThe question says \"Round the\
    \ answer to the nearest integer and convert that to binary\"\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n >= m) return(-1)\n  return(round(m/n)\
    \ * n)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer the question\
    \ at all. OP wants to round the average to nearest integer, not just round the\
    \ numbers to nearest integer.\n<|/ c |>\n<| c |>\nThe question says \"Round the\
    \ answer to the nearest integer and convert that to binary\"\n<|/ c |>\n<| c |>\n\
    The question says \"Round the answer to the nearest integer and convert that to\
    \ binary\"\n<|/ c |>\n<| c |>\nThe question says \"Round the answer to the nearest\
    \ integer and convert that to binary\"\n<|/ c |>\n<| c |>\nThe question says \"\
    Round the answer to the nearest integer and convert that to binary\"\n<|/ c |>\n\
    <| a tags=r |>\n<code>\nrounded_avg <- function(n, m) {\n  if(n >= m) return(-1)\n\
    \  return(round(m/n) * n)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question at all. OP wants to round the average to nearest integer,\
    \ not just round the numbers to nearest integer.\n<|/ c |>\n<| c |>\nThe question\
    \ says \"Round the answer to the nearest integer and convert that to binary\"\n\
    <|/ c |>\n<| c |>\nThe question says \"Round the answer to the nearest integer ",
  "\n  \n  if(n >= m) return(-1)\n  \n  return(round(sum((n:m))/2))\n}\n\nrounded_avg(5,10)",
  "\n  if(n > m) return(-1)\n  return(round(sum((n:m))/2))\n}\nrounded_avg(5,6)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ the number 'n' is in the vector 'v'.\nThe function should take in two vectors\
    \ n and v as arguments.\nThe function should return an integer that is the number\
    \ of times 'n' is in the vector 'v'.\nExample:\ncount_n <- function(n, v) {\n\
    \  return(sum(v == n))\n}\ncount_n(5, c(1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "\n  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(7, 5)", "\n\
    \  if(n >= m) return(-1)\n  return(round(m/n) * n)\n}\n\nrounded_avg(6, 4)", "\n\
    \  if(n > m) {\n    return(-1)\n  }\n  return(round(sum((n:m)/2)/2))\n}\nrounded_avg(3,5)\n\
    rounded_avg(5,3)\nrounded_avg(3,3)\nrounded_avg(3,4)\nrounded_avg(3,6)\nrounded_avg(3,7)\n\
    rounded_avg(3,8)\nrounded_avg(3,9)\nrounded_avg(3,10)\nrounded_avg(3,11)\nrounded_avg(3,12)\n\
    rounded_avg(3,13)\nrounded_avg(3,14)\nrounded_avg(3,15)\nrounded_avg(3,16)\nrounded_avg(3,17)\n\
    rounded_avg(3,18)\nrounded_avg(3,19)\nrounded_avg(3,20)\nrounded_avg(3,21)\nrounded_avg(3,22)\n\
    rounded_avg(3,23)\nrounded_avg(3,24)\nrounded_avg(3,25)\nrounded_avg(3,26)\nrounded_avg(3,27)\n\
    rounded_avg(3,28)\nrounded_avg(3,29)\nrounded_avg(3,30)\nrounded_avg(3,31)\nrounded_avg(3,32)\n\
    rounded_avg(3,33)\nrounded_avg(3,34)\nrounded_avg(3,35)\nrounded_avg(3,36)\nrounded_avg(3,37)\n\
    rounded_avg(3,38)\nrounded_avg(3,39)\nrounded_avg(3,40)\nrounded_avg(3,41)\nrounded_avg(3,42)\n\
    rounded_avg(3,43)\nrounded_avg(3,44)\nrounded_avg(3,45)\nrounded_avg(3,46)\nrounded_avg(3,47)\n\
    rounded_avg(3,48)\nrounded_avg(3,49)\nrounded_avg(3,50)\nrounded_avg(3,51)\nrounded_avg(3,52)\n\
    rounded_avg(3,53)\nrounded_avg(3,54)\nrounded_avg(3,55)\nrounded_avg(3,56)\nrounded_avg(3,57)\n\
    rounded_avg(3,58)\nrounded_avg(3,59)\nrounded_avg(3,60)\nrounded_avg(3,61)\nrounded_avg(3,62)\n\
    rounded_avg(3,63)\nrounded_avg(3,64)\nrounded_avg(3,65)\nrounded_avg", "\n  if(n\
    \ > m) {\n    return(-1)\n  }\n  return(round(m/n) * n)\n}\n\nrounded_avg(8, 10)",
  "\n  if(n > m) {\n    return(-1)\n  }\n  return(round(sum(c(0:(n-m))) / m))\n}\n\
    \nrounded_avg(7, 10)", "\n  if(n <= m) return(round(n/m + n/m))\n  return(-1)\n\
    }\n</code>\n<|/ a tags=r,rounding |>\n<| a |>\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ndf <- data.frame(\n  n = c(2, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\
    \ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\
    \ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\
    \ 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\
    \ 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\
    \ 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256,\
    \ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, "]
stop_tokens:
- "\n#"
- "\n```"
