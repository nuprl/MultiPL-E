name: HumanEval_161_solve
language: r
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\nsolve <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- solve\n    if(!identical(candidate('AsDf'),\
  \ 'aSdF')){quit('no', 1)}\n    if(!identical(candidate('1234'), '4321')){quit('no',\
  \ 1)}\n    if(!identical(candidate('ab'), 'AB')){quit('no', 1)}\n    if(!identical(candidate('#a@C'),\
  \ '#A@c')){quit('no', 1)}\n    if(!identical(candidate('#AsdfW^45'), '#aSDFw^45')){quit('no',\
  \ 1)}\n    if(!identical(candidate('#6@2'), '2@6#')){quit('no', 1)}\n    if(!identical(candidate('#$a^D'),\
  \ '#$A^d')){quit('no', 1)}\n    if(!identical(candidate('#ccc'), '#CCC')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  if(!is.character(s)){\n    stop(\"s must be a character vector\"\
    )\n  }\n  \n  s <- toupper(s)\n  \n  if(grepl(\"[a-z]\",s)){\n    s <- tolower(s)\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"Hello\")\nsolve(\"HELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"", "\n  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n \
    \ }\n  \n  if(!all(grepl(\"[A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"AaBbCcDd\")", "\n  \n  if(length(s)==0){\n    return(s)\n  }\n  \n\
    \  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\",s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD", "\n  \n  if(!all(grepl(\"\
    [a-z]\",s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"[A-Z]\",s))) {\n\
    \    s <- tolower(s)\n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")", "\n  \n  if(!is.character(s)){\n    stop(\"s must\
    \ be a character vector\")\n  }\n  \n  if(length(s) == 0){\n    return(s)\n  }\n\
    \  \n  if(grepl(\"[a-z]\",s)){\n    s <- toupper(tolower(s))\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"HELLO WORLD\")\nsolve(\"HELLO\
    \ WORLD HELLO WORLD\")\nsolve(\"HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORL", "\n  s <-\
    \ tolower(s)\n  \n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n  }\n  \n\
    \  if(grepl(\"[a-z]\", s)) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n}\n\n\
    solve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"HELLO WORLD\")\nsolve(\"HELLO WORLD\
    \ !!!\")\nsolve(\"HELLO WORLD !!! \")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD ", "\n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n\
    \  } else {\n    s <- tolower(s)\n  }\n  return(s)\n}\n\nsolve(\"AaBbCc\") # AaBbCc\n\
    solve(\"abc\") # abc\nsolve(\"aBc\") # aBc\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n\nsolve(\"\
    Hello World\")", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\"\
    )\n  \n  s <- toupper(s)\n  \n  if(length(s) == 0) return(s)\n  \n  for(i in 1:length(s)){\n\
    \    if(!is.alpha(s[i])) s[i] <- toupper(s[i])\n  }\n  \n  return(s)\n}\n\nsolve(c(\"\
    a\", \"b\", \"c\"))", "\n  \n  if(length(s) == 0) {\n    return(s)\n  }\n  \n\
    \  if(grepl(\"[a-z]\", s)) {\n    \n    s <- toupper(tolower(s))\n    \n  } else\
    \ {\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCcDdEe\"\
    )", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n\
    \  if(!all(grepl(\"[a-z]\",s)) && !all(grepl(\"[A-Z]\",s))) s <- toupper(s)\n\
    \  \n  if(!all(grepl(\"[a-z]\",s)) && !all(grepl(\"[A-Z]\",s))) s <- tolower(s)\n\
    \  \n  s\n}\n\nsolve(\"abc\")", "\n  if(!is.character(s)) stop(\"s must be a character\
    \ vector\")\n  if(!all(grepl(\"^[a-z]+$\", s)) ) stop(\"s contains no letters\"\
    )\n  \n  s2 <- toupper(s)\n  s3 <- tolower(s)\n  \n  if(grepl(\"[a-z]+\", s))\
    \ return(s3)\n  if(grepl(\"[A-Z]+\", s)) return(s2)\n  return(s)\n}\n\nsolve(\"\
    abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n\
    \  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    abc\")", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n\
    \  \n  s <- tolower(s)\n  \n  if(grepl(\"[a-z]\", s)) \n    s <- toupper(s)\n\
    \  \n  if(grepl(\"[A-Z]\", s)) \n    s <- tolower(s)\n  \n  s\n}\n\nsolve(c(\"\
    a\", \"b\", \"c\"))", "\n  s <- tolower(s)\n  s <- gsub(\"[^A-Za-z]\", \"\", s)\n\
    \  s <- toupper(s)\n  return(s)\n}\n\nsolve(\"AaBbCcDd\")", "\n  \n  if(length(s)\
    \ == 0) {\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\", s)) {\n    \n    s\
    \ <- toupper(sub(\"[a-z]\", \"A\", s))\n    \n  } else {\n    \n    s <- tolower(sub(\"\
    [A-Z]\", \"a\", s))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"\
    HELLO\")\nsolve(\"hELLO\")\nsolve(\"heLLO\")\nsolve(\"hEllO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heL", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\"\
    ,s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n \
    \   \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")",
  "\n  if(length(s) == 0) {\n    return(s)\n  }\n  if(grepl(\"[a-z]\", s)) {\n   \
    \ s <- toupper(s)\n  } else {\n    s <- tolower(s)\n  }\n  return(s)\n}\n\nsolve(\"\
    hello\")", "\n  s <- toupper(s)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern =\
    \ \"[A-Z]\", USE.NAMES = TRUE)\n  sapply(s, grepl, pattern = \"[a-z]\", USE.NAMES\
    \ = FALSE)\n  sapply(s, grepl, pattern = \"[A-Z]\", USE.NAMES = FALSE)\n  sapply(s,\
    \ grepl, pattern = \"[a-z", "\n  if(length(s) == 0){\n    return(s)\n  }\n  if(grepl(\"\
    [a-z]\", s)){\n    s <- toupper(tolower(s))\n  }\n  if(grepl(\"[A-Z]\", s)){\n\
    \    s <- tolower(toupper(s))\n  }\n  return(s)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,regex |>\n<code>\nsolve<-function(s){\n  if(length(s) == 0){\n   \
    \ return(s)\n  }\n  if(grepl(\"[a-z]\", s)){\n    s <- toupper(tolower(s))\n \
    \ }\n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(toupper(s))\n  }\n  return(s)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsolve<-function(s){\n\
    \  if(length(s) == 0){\n    return(s)\n  }\n  if(grepl(\"[a-z]\", s)){\n    s\
    \ <- toupper(tolower(s))\n  }\n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(toupper(s))\n\
    \  }\n  return(s)\n}\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex |>\n<code>\n\
    solve<-function(s){\n  if(length(s) == 0){\n    return(s)\n  }\n  if(grepl(\"\
    [a-z]\", s)){\n    s <- toupper(tolower(s))\n  }\n  if(grepl(\"[A-Z]\", s)){\n\
    \    s <- tolower(toupper(s))\n  }\n  return(s)\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=r,regex |>\n<code>\nsolve<-function(s){\n  if(length(s) == 0){\n   \
    \ return(s)\n  }\n  if(grepl(\"[a-z]\", s)){\n    s <- toupper(tolower(s))\n \
    \ }\n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(toupper(s))\n  }\n  return(s)\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsolve<-function(s){\n\
    \  if(length(s) == 0){\n    return(s)\n  }\n  if(grepl(\"[a-z]\", s)){\n    s\
    \ <- toupper(tolower(s))\n  }\n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(toupper(s))\n\
    \  }\n  return(s)", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n\
    \  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\",s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    aBcDeFg\")", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  s <- tolower(s)\n  s\
    \ <- gsub(\"[^A-Za-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\
    \ns <- \"Hello World\"\ns %>% \n  str_replace_all(\"[^[:alpha:]]\", \"\") %>%\
    \ \n  str_replace_all(\"[[:alpha:]]\", toupper)\n</code>\n<|/ a tags=string,r,regex\
    \ |>\n<| a dscore=2 |>\n<code>\ns <- \"Hello World\"\ngsub(\"[^A-Za-z]\", \"\"\
    , s)\n</code>\n<|/ a tags=string,r,regex |>\n<| a |>\n<code>\ns <- \"Hello World\"\
    \ngsub(\"[^A-Za-z]\", \"\", s)\n</code>\n<|/ a tags=string,r,regex dscore=1 |>\n\
    <| a tags=string,r,regex |>\n<code>\ns <- \"Hello World\"\ngsub(\"[^A-Za-z]\"\
    , \"\", s)\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,r,regex |>\n<code>\n\
    s <- \"Hello World\"\ngsub(\"[^A-Za-z]\", \"\", s)\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,r,regex |>\n<code>\ns <- \"Hello World\"\ngsub(\"[^A-Za-z]\"\
    , \"\", s)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ns <- \"Hello\
    \ World\"\ngsub(\"[^A-Za-z]\", \"\", s)\n</code>\n<|/ a tags=string,r,regex |>\n\
    <| a |>\n<code>\ns <- \"Hello World\"\ngsub(\"[^A-Za-z]\", \"\", s)\n</code>\n\
    <|/ a tags=string,r,regex dscore=1 |>\n<| a dscore=1 |>\n<code>\ns <- \"Hello\
    \ World\"\ngsub(\"[^A-Za-z]\", \"\", s)\n</code>\n<|/ a tags=string,r,regex |>\n\
    <| a dscore=1 |>\n<code>\ns <- \"Hello World\"\ngsub(\"[^A-Za-z]\", \"\", s)\n\
    </code>\n<|/ a tags=string,r,regex |>\n<| a |>\n<code>\ns <- \"Hello World\"\n\
    gsub(\"[^A-Za-z]\", \"\", s)\n</code>\n<|/ a dscore=1 tags=string,r,regex |>\n\
    <| a dscore", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\"\
    )\n  \n  s <- tolower(s)\n  \n  for(i in 1:length(s)){\n    if(s[i] %in% LETTERS){\n\
    \      s[i] <- toupper(s[i])\n    }\n  }\n  \n  s\n}\n\nsolve(\"abc\")", "\n \
    \ \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n\
    \    \n    s <- toupper(substring(s, 1, nchar(s)-1))\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\", s)){\n    \n    s <- tolower(substring(s, 1, nchar(s)-1))\n    \n  }\n\
    \  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"AAbBcC\")\nsolve(\"abc\")\nsolve(\"\
    AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\"\
    )\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"\
    AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\"\
    )\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"\
    AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\"\
    )\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"\
    AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\"\
    )\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"\
    AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\"\
    )\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")\nsolve(\"AaBbC\")", "\n\
    \  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  for(i in 1:length(s)){\n\
    \    if(s[i] %in% LETTERS){\n      s[i] <- toupper(s[i])\n    }\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"hELLO\")\nsolve(\"heLLO\")\n\
    solve(\"hEllO\")\nsolve(\"heLlO\")\nsolve(\"heLLO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"\
    heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\")\nsolve(\"heLlO\"\
    )\n", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  for(i in 1:length(s)){\n\
    \    if(s[i] == toupper(s[i])){\n      s[i] <- tolower(s[i])\n    }\n  }\n  \n\
    \  return(paste0(toupper(s), tolower(s)))\n}\n\nsolve(\"hello\")", "\n  s <- tolower(s)\n\
    \  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n  }\n  s\n}\n\nsolve(\"abc\"\
    )", "\n  if(!is.character(s)) stop(\"s must be a character vector\")\n  if(!all(grepl(\"\
    ^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  s <- toupper(s)\n \
    \ \n  for(i in 1:length(s)){\n    if(grepl(\"^[a-zA-Z]+$\", s[i])) s[i] <- toupper(s[i])\n\
    \  }\n  \n  s\n}\n\nsolve(\"abc\")", "\n  \n  if(length(s) == 0){\n    return(\"\
    \")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(tolower(s))\n\
    \    \n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \n", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n\
    \  \n  for(i in 1:length(s)){\n    if(s[i] >= 65 && s[i] <= 90){\n      s[i] <-\
    \ s[i] - 32\n    }\n  }\n  \n  return(paste0(toupper(s), tolower(s)))\n}\n\nsolve(\"\
    abc\")", "\n  \n  \n  \n}\nsolve(\"AaBbCc\") # should return \"AbCc\"\nsolve(\"\
    aAAbBbCc\") # should return \"AbCc\"\nsolve(\"AaBbCcDd\") # should return \"AbCcDd\"\
    \nsolve(\"aAAbBbCcDd\") # should return \"AbCcDd\"\nsolve(\"AaBbCc\") # should\
    \ return \"AbCc\"\nsolve(\"aAAbBbCc\") # should return \"AbCc\"\nsolve(\"AaBbCcDd\"\
    ) # should return \"AbCcDd\"\nsolve(\"aAAbBbCcDd\") # should return \"AbCcDd\"\
    \nsolve(\"AaBbCc\") # should return \"AbCc\"\nsolve(\"aAAbBbCc\") # should return\
    \ \"AbCc\"\nsolve(\"AaBbCcDd\") # should return \"AbCcDd\"\nsolve(\"aAAbBbCcDd\"\
    ) # should return \"AbCcDd\"\nsolve(\"AaBbCc\") # should return \"AbCc\"\nsolve(\"\
    aAAbBbCc\") # should return \"AbCc\"\nsolve(\"AaBbCcDd\") # should return \"AbCcDd\"\
    \nsolve(\"aAAbBbCcDd\") # should return \"AbCcDd\"\nsolve(\"AaBbCc\") # should\
    \ return \"AbCc\"\nsolve(\"aAAbBbCc\") # should return \"AbCc\"\nsolve(\"AaBbCcDd\"\
    ) # should return \"AbCcDd\"\nsolve(\"aAAbBbCcDd\") # should return \"AbCcDd\"\
    \nsolve(\"AaBbCc\") # should return \"AbCc\"\nsolve(\"aAAbBbCc\") # should return\
    \ \"AbCc\"\nsolve(\"AaBbCcDd\") # should return \"AbCcDd\"\nsolve(\"aAAbBbCcDd\"\
    ) # should return \"AbCcDd\"\nsolve(\"AaBbCc\") # should return \"AbCc\"\nsolve(\"\
    aAAb", "\n  s <- tolower(s)\n  s <- gsub(\"[^A-Za-z]\", \"\", s)\n  s <- toupper(s)\n\
    \  return(s)\n}\n\nsolve(\"ABC\")", "\n  \n  if(!is.character(s)){\n    stop(\"\
    s must be a character vector\")\n  }\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s)))\
    \ {\n    stop(\"s must be a character vector with at least one letter\")\n  }\n\
    \  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) {\n    stop(\"s must be a character\
    \ vector with at least one letter\")\n  }\n  \n  s <- toupper(s)\n  \n  for(i\
    \ in 1:length(s)){\n    if(s[i] %in% LETTERS){\n      s[i] <- toupper(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve", "\n  \n  if(length(s)\
    \ == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(substring(s,\
    \ 1, nchar(s)-1))\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(substring(s,\
    \ 1, nchar(s)-1))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCcDd\")", "\n\
    \  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\\\\U\\\\1\", s)\n  s <- gsub(\"\
    [A-Z]\", \"\\\\l\\\\1\", s)\n  return(s)\n}\n\nsolve(\"AaBbCc\") # AaBbCc\nsolve(\"\
    aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\n\
    solve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\"\
    ) # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"\
    aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\n\
    solve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\"\
    ) # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"\
    aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\n\
    solve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\"\
    ) # aAaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCc\") # aAa", "\n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"\
    s must be a character vector with at least one letter\")\n  \n  for(i in seq_along(s))\
    \ {\n    if(grepl(\"^[a-z]+$\", s[i])) {\n      s[i] <- toupper(s[i])\n    } else\
    \ {\n      s[i] <- tolower(s[i])\n    }\n  }\n  \n  s\n}\n\nsolve(c(\"a\", \"\
    b\", \"c\", \"d\", \"e\"))", "\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) {\n   \
    \ s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) {\n    s <- tolower(s)\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")", "\n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\"\
    , s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n\
    \    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n  \n}\n\nsolve(\"abc\"\
    )\nsolve(\"aBc\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")", "\n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  ", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"\
    [a-z]\",s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n\
    \    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")",
  "\n  \n  if(!is.character(s)){\n    stop(\"s must be a character vector\")\n  }\n\
    \  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"\
    [A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  s\n}\n\nsolve(\"hello\")", "\n\
    \  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  if(!all(grepl(\"\
    [a-z]\",s))) stop(\"s contains no letters\")\n  \n  if(sum(grepl(\"[a-z]\",s))\
    \ == 0) stop(\"s contains no letters\")\n  \n  s2 <- toupper(s)\n  \n  s3 <- tolower(s)\n\
    \  \n  s4 <- toupper(s3)\n  \n  s5 <- tolower(s4)\n  \n  s6 <- toupper(s5)\n \
    \ \n  s7 <- tolower(s6)\n  \n  s8 <- toupper(s7)\n  \n  s9 <- tolower(s8)\n  \n\
    \  s10 <- toupper(s9)\n  \n  s11 <- tolower(s10)\n  \n  s12 <- toupper(s11)\n\
    \  \n  s13 <- tolower(s12)\n  \n  s14 <- toupper(s13)\n  \n  s15 <- tolower(s14)\n\
    \  \n  s16 <- toupper(s15)\n  \n  s17 <- tolower(s16)\n  \n  s18 <- toupper(s17)\n\
    \  \n  s19 <- tolower(s18)\n  \n  s20 <- toupper(s19)\n  \n  s21 <- tolower(s20)\n\
    \  \n  s22 <- toupper(s21)\n  \n  s23 <- tolower(s22)\n  \n  s24 <- toupper(s23)\n\
    \  \n  s25 <- tolower(s24)\n  \n  s26 <- toupper(s25)\n  \n  s27 <- tolower(s26)\n\
    \  \n  s28 <- toupper(s27)\n  \n  s29 <- tolower(s28)\n  \n  s30 <- toupper(s29)\n\
    \  \n  s31 <- tolower(s30)\n  \n  s32 <- toupper(s31)\n  \n  s33 <- tolower(s32)\n\
    \  \n  s34 <- toupper(s33)\n  \n  s35 <- tolower(s34)\n  \n  s36 <- toupper(s35)\n\
    \  \n  s37 <- tolower(s36)\n  \n  s38 <- toupper(s37)\n  \n  s39 <- tolower(s38",
  "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n\
    \    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n    \n \
    \   s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  s\
    \ <- tolower(s)\n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n  }\n  s\n\
    }\n\nsolve(\"abc\")", "\n  s <- tolower(s)\n  sapply(s, function(x) ifelse(grepl(\"\
    [a-z]\", x), toupper(x), x))\n}\n\nsolve(\"aBcD\")", "\n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  if(!all(grepl(\"[a-z]\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[A-Z]\", s))) stop(\"\
    s contains no letters\")\n  \n  if(length(s) == 0) return(s)\n  \n  s2 <- toupper(s)\n\
    \  \n  s3 <- tolower(s)\n  \n  s4 <- toupper(s3)\n  \n  s5 <- tolower(s4)\n  \n\
    \  s6 <- paste(s2, s5, sep=\"\")\n  \n  return(s6)\n}\n\nsolve(\"AaBbCcDdEe\")",
  "\n  if(!is.character(s)) stop(\"s must be a character vector\")\n  if(!all(grepl(\"\
    ^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n  s2 <- toupper(s)\n  s3\
    \ <- tolower(s)\n  \n  s4 <- paste(s2, s3, sep = \"\")\n  \n  return(s4)\n}\n\n\
    solve(\"abc\")\nsolve(\"abcde\")\nsolve(\"abcdef\")\nsolve(\"abcdefg\")\nsolve(\"\
    abcdefgh\")\nsolve(\"abcdefghi\")\nsolve(\"abcdefghij\")\nsolve(\"abcdefghijk\"\
    )\nsolve(\"abcdefghijkl\")\nsolve(\"abcdefghijklm\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\")\nsolve(\"abcdefghijklmn\"\
    )\nsolve(\"abcdefghijklmn", "\n  \n  if(!is.character(s)) stop(\"s must be a character\
    \ vector\")\n  \n  for(i in 1:length(s)){\n    if(!is.character(s[i])) stop(\"\
    s[i] must be a character vector\")\n    \n    if(grepl(\"[a-z]\", s[i])) s[i]\
    \ <- toupper(s[i])\n    if(grepl(\"[A-Z]\", s[i])) s[i] <- tolower(s[i])\n  }\n\
    \  \n  return(s)\n}\n\nsolve(c(\"a\", \"b\", \"C\", \"D\"))", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  s <- tolower(s)\n  \n  for(i in\
    \ seq_along(s)) {\n    if(s[i] %in% LETTERS) {\n      s[i] <- toupper(s[i])\n\
    \    } else {\n      s[i] <- s[i]\n    }\n  }\n  \n  s\n}\n\nsolve(\"abc\")",
  "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n\
    \    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n\
    \    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"\
    HELLO\")\nsolve(\"hELLO\")\nsolve(\"hEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"\
    HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO\"\
    )\nsolve(\"HEllO\")\nsolve(\"HEllO\")\nsolve(\"HEllO", "\n  \n  if(length(s) ==\
    \ 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n\
    \    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n  if(!is.character(s)) stop(\"\
    s must be a character vector\")\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    ^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-z]+$\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    ^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-z]+$\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"^[A-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    ^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[A-Z",
  "\n  \n  if(!is.character(s)){\n    stop(\"s must be a character vector\")\n  }\n\
    \  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"\
    [A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\"\
    )\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"\
    [a-z]\",s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n\
    \    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCcDd\"\
    )", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n\
    \  s <- toupper(s)\n  \n  if(grepl(\"[a-z]\", s)) \n    s <- tolower(s)\n  \n\
    \  if(grepl(\"[A-Z]\", s)) \n    s <- toupper(s)\n  \n  s\n}\n\nsolve(c(\"a\"\
    , \"b\", \"c\"))", "\n  if(grepl(\"[a-z]\",s)) return(toupper(tolower(s))) else\
    \ return(s)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you for your answer.\
    \ Your code works perfectly for me. I am just wondering why my code doesn't work.\
    \ Is it because of the `if` statement? I thought `if` statement is used for conditional\
    \ statements.\n<|/ c |>\n<| c |>\nYes, `if` statement is used for conditional\
    \ statements. But `grepl` function returns `TRUE` or `FALSE` values based on a\
    \ condition. So, `grepl(\"[a-z]\",s)` returns `TRUE` or `FALSE` values based on\
    \ a condition. So, `if(grepl(\"[a-z]\",s)) return(toupper(tolower(s))) else return(s)`\
    \ returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE) return(toupper(tolower(s)))\
    \ else return(s)` returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE)\
    \ return(toupper(tolower(s))) else return(s)` returns `TRUE` or `FALSE` values\
    \ based on a condition. So, `if(TRUE) return(toupper(tolower(s))) else return(s)`\
    \ returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE) return(toupper(tolower(s)))\
    \ else return(s)` returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE)\
    \ return(toupper(tolower(s))) else return(s)` returns `TRUE` or `FALSE` values\
    \ based on a condition. So, `if(TRUE) return(toupper(tolower(s))) else return(s)`\
    \ returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE) return(toupper(tolower(s)))\
    \ else return(s)` returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE)\
    \ return(toupper(tolower(s))) else return(s)` returns `TRUE` or `FALSE` values\
    \ based on a condition. So, `if(TRUE) return(toupper(tolower(s))) else return(s)`\
    \ returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE) return(toupper(tolower(s)))\
    \ else return(s)` returns `TRUE` or `FALSE` values based on a condition. So, `if(TRUE)\
    \ return(toupper(tolower(s))) else return(s)` returns `TRUE` or `FALSE` values\
    \ based on a condition. So, `if(TRUE) return(toupper(tolower(s))) else return(s)`\
    \ returns `TRUE` or `FALSE` values based on a condition. So, `", "\n  \n  if(length(s)==0)\
    \ return(s)\n  \n  for(i in 1:length(s)) {\n    if(!is.na(toupper(s[i])) & !is.na(tolower(s[i])))\
    \ {\n      s[i] <- toupper(s[i])\n      s[i] <- tolower(s[i])\n    }\n  }\n  \n\
    \  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\"\
    )\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\"\
    )\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"",
  "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n\
    \    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n    \n \
    \   s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"\
    HELLO\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\n\
    solve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HEL", "\n  s <- tolower(s)\n  \n  if(!all(grepl(\"\
    [a-z]\", s))) {\n    s <- toupper(s)\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\"\
    )\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBc", "\n  s <- tolower(s)\n  \n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n\
    \  }\n  \n  if(grepl(\"[a-z]\", s)) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"HELLO WORLD\")\nsolve(\"HELLO\
    \ WORLD !!!\")\nsolve(\"HELLO WORLD !!! \")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"\
    HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\"\
    )\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD !!! A\")\nsolve(\"HELLO WORLD\
    \ !!! A\")\nsolve(\"HELLO WORLD ", "\n  s <- toupper(s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[A-Z]\", \"\", s)\n  s <- gsub(\"[^A-Z]\", \"\", s)\n\
    \  s <- tolower(s)\n  return(s)\n}\n\nsolve(\"aBcDeFgHiJk\")", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  s <- toupper(s)\n  \n  if(grepl(\"\
    [a-z]\", s)) \n    s <- tolower(s)\n  \n  if(grepl(\"[A-Z]\", s)) \n    s <- toupper(s)\n\
    \  \n  s\n}\n\nsolve(\"abc\")", "\n  \n  if(length(s) == 0){\n    return(s)\n\
    \  }\n  \n  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(tolower(s))\n    return(s)\n\
    \  }\n  \n  if(grepl(\"[A-Z]\",s)){\n    \n    s <- tolower(toupper(s))\n    return(s)\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aB", "\n  s <- tolower(s)\n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n\
    \  }\n  s\n}\n\nsolve(\"abc\")", "\n  \n  if(!is.character(s)) stop(\"s must be\
    \ a character vector\")\n  \n  s <- toupper(s)\n  \n  for(i in 1:length(s)) {\n\
    \    if(!is.alpha(s[i])) s[i] <- toupper(s[i])\n  }\n  \n  return(s)\n}\n\nsolve(\"\
    abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n\
    \  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n \
    \ \n  s2 <- toupper(s)\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s2))) stop(\"s contains\
    \ no letters\")\n  \n  s3 <- tolower(s)\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\",\
    \ s3))) stop(\"s contains no letters\")\n  \n  s4 <- s\n  \n  s4 <- gsub(\"([a-z])([A-Z])\"\
    , \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\"\
    , s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"\
    ([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\"\
    , \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\"\
    , s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"\
    ([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\"\
    , \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\"\
    , s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"\
    ([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\"\
    , \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\"\
    , s4)\n  \n  s4 <- gsub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", s4)\n  \n  s4 <- gsub(\"\
    ([A-Z])([A-Z][a-z])\", \"\\\\1\\\\2\", s", "\n  \n  if(length(s) == 0){\n    return(\"\
    \")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n\
    \  \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n\
    }\n\nsolve(\"AaBbCc\") # returns \"cBbAa\"\nsolve(\"aBc\") # returns \"Bc\"\n\
    solve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\"\
    ) # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"\
    aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"\
    aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"\
    aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"\
    aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"\
    aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"aBcD\") # returns\
    \ \"D\"\nsolve(\"aBcD\") # returns \"D\"\nsolve(\"", "\n  s <- tolower(s)\n  s\
    \ <- gsub(\"[a-z]\", toupper, s)\n  s <- gsub(\"[A-Z]\", tolower, s)\n  s\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for `solve(\"A\")` which should\
    \ return `\"a\"`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it\n<|/ c |>\n<| c |>\nI tested it before posting it. I also tested it after\
    \ posting it\n<|/ c |>\n<| c |>\nI tested it before posting it. I also tested\
    \ it after posting it\n<|/ c |>\n<| c |>\nI tested it before posting it. I also\
    \ tested it after posting it\n<|/ c |>\n<| a dscore=2 |>\nHere is a solution using\
    \ stringr::str_replace_all:\n<code>\nlibrary(stringr)\n\nsolve <- function(s)\
    \ {\n  s <- tolower(s)\n  s <- str_replace_all(s, \"[a-z]\", toupper)\n  s <-\
    \ str_replace_all(s, \"[A-Z]\", tolower)\n  s\n}\n\nsolve(\"A\")", "\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "\n  if(!is.character(s)) stop(\"s must be a character\
    \ vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains no letters\"\
    )\n  if(!all(grepl(\"^[A-Z]+$\", s))) s <- toupper(s)\n  s\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI appreciate your answer, but this doesn't work for me.\
    \ For example, `solve <- function(s) {\n  if(!is.character(s)) stop(\"s must be\
    \ a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  if(!all(grepl(\"^[A-Z]+$\", s))) s <- toupper(s)\n  s\n}\n\
    solve(letters[1:5])` returns `[1] \"aBcDeF\"` instead of `\"aBcDeF\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I edited my answer to include a test\
    \ case that fails.\n<|/ c |>\n<| c |>\nI edited my answer to include a test case\
    \ that fails.\n<|/ c |>\n<| c |>\nI edited my answer to include a test case that\
    \ fails.\n<|/ c |>\n<| c |>\nI edited my answer to include a test case that fails.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution using stringi package:\n<code>\n\
    library(stringi)\n\nsolve <- function(s) {\n  s <- stri_replace_all_regex(s, \"\
    [a-z]\", \"\\\\U\\\\1\")\n  s <- stri_replace_all_regex(s, \"[A-Z]\", \"\\\\l\\\
    \\1\")\n  s\n}\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nI appreciate your answer,\
    \ but this doesn't work for me. For example, `solve(letters[1:5])` returns `[1]\
    \ \"aBcDeF\"` instead of `\"aBcDeF\"`.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a test case that fails.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a test case that fails.\n<|/ c |>\n<| a tags=r,regex |>\nHere's a solution\
    \ using base R:\n<code>\nsolve <- function(s) {\n  s <- toupper(sub(\"[a-z]\"\
    , \"\\\\U\\\\1\", s))\n  s <- toupper(sub(\"[A-Z]\", \"", "\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) {\n    \n \
    \   s <- toupper(s)\n    \n  }\n  \n  s <- tolower(s)\n  \n  return(s)\n  \n}\n\
    \nsolve(\"abc\")\nsolve(\"abB\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\"\
    )\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"abBcD\")\nsolve(\"\
    abBc", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n\
    \  \n  s <- toupper(s)\n  \n  if(all(grepl(\"[a-z]\", s))) return(tolower(s))\n\
    \  \n  if(all(grepl(\"[A-Z]\", s))) return(toupper(s))\n  \n  return(s)\n}\n\n\
    solve(\"abc\")\nsolve(\"aBc\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"a", "\n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"\
    s must be a character vector with only lowercase letters\")\n  \n  s <- toupper(s)\n\
    \  \n  for(i in seq_along(s)) {\n    if(grepl(\"^[a-z]+$\", s[i])) {\n      s[i]\
    \ <- toupper(s[i])\n      \n      if(grepl(\"^[A-Z]+$\", s[i])) {\n        s[i]\
    \ <- tolower(s[i])\n      }\n    }\n  }\n  \n  s\n}\n\nsolve(\"abc\")\nsolve(\"\
    aBc\") # returns \"AbC\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\")\
    \ # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns\
    \ \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\
    \nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"\
    aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\"\
    ) # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns\
    \ \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\
    \nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"\
    aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\"\
    ) # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns\
    \ \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\
    \nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"aBcD\") # returns \"AbCd\"\nsolve(\"\
    aBcD\") # returns \"AbCd\"\nsolve(\"", "\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `solve(\"ab\")` returns `\"ba\"` instead\
    \ of `\"Ab\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used `solve(\"\
    ab\")` as input string. Maybe you used a different string?\n<|/ c |>\n<| c |>\n\
    Yes, I used `\"ab\"` as input string. Maybe you used a different string?\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I used `\"ab\"` as input string.\
    \ Maybe you used a different string?\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works. I used `\"ab\"` as input string. Maybe you used a different string?\n\
    <|/ c |>\n<| a tags=r,string,regex |>\n<code>\nsolve = function(s) {\n  s <- tolower(s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,string,regex |>\n<code>\nsolve = function(s) {\n\
    \  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsolve = function(s) {\n\
    \  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n\
    }\n</code>\n<|/ a tags=r,string,regex |>\n<| a tags=r,string,regex |>\n<code>\n\
    solve = function(s) {\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s\
    \ <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsolve = function(s) {\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a tags=r,string,regex |>\n\
    <| a tags=r,string,regex |>\n<code>\nsolve = function(s) {\n  s <- to", "\n  s\
    \ <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n\
    }\n\nsolve(\"AaBbCc\") # should return \"ABC\"\nsolve(\"aBc\") # should return\
    \ \"ABC\"\nsolve(\"abc\") # should return \"ABC\"\nsolve(\"AaBbCcDd\") # should\
    \ return \"ABCD\"\nsolve(\"AaBbCcDdEe\") # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFf\"\
    ) # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGg\") # should return \"ABCD\"\
    \nsolve(\"AaBbCcDdEeFfGgHh\") # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIi\"\
    ) # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIj\") # should return \"ABCD\"\
    \nsolve(\"AaBbCcDdEeFfGgHhIjKk\") # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIjKkLl\"\
    ) # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMm\") # should return\
    \ \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMmNn\") # should return \"ABCD\"\nsolve(\"\
    AaBbCcDdEeFfGgHhIjKkLlMmNnOo\") # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMmNnOoPp\"\
    ) # should return \"ABCD\"\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMmNnOoPpQq\") # should\
    \ return \"ABCD\"\nsolve(\"AaBbCc", "\n  \n  if(length(s) == 0){\n    return(s)\n\
    \  }\n  \n  for(i in 1:length(s)){\n    if(s[i] %in% LETTERS){\n      s[i] <-\
    \ toupper(s[i])\n    }\n  }\n  \n  return(tolower(s))\n}\n\nsolve(\"abc\")", "\n\
    \  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n\
    \    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n\
    \    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCc\") # returns\
    \ \"abc\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aBcDdEe\") # returns \"eDcBa\"\nsolve(\"aBcDdEe\") # returns\
    \ \"eDcBa\"\nsolve(\"aB", "\n  if(length(s) == 0){\n    return(\"\")\n  }\n  if(grepl(\"\
    [a-z]\", s)){\n    s <- toupper(tolower(s))\n  }\n  return(s)\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error message: Error in toupper(tolower(s)) : \n  argument \"s\" is missing,\
    \ with no default\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to add the\
    \ argument `s` to `toupper` and `tolower`\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I tried your code, but I got this error message: Error in toupper(tolower(s))\
    \ : \n  argument \"s\" is missing, with no default\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add the argument `s` to `toupper` and `tolower`\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ message: Error in toupper(tolower(s)) : \n  argument \"s\" is missing, with\
    \ no default\n<|/ c |>\n<| a dscore=0 |>\n<code>", "\n  \n  if(length(s) == 0){\n\
    \    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(sub(\"\
    [a-z]\", \"\",s))\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(sub(\"\
    [A-Z]\", \"\",s))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"a", "\n  \n  if(length(s) == 0){\n    return(\"\
    \")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(tolower(s))\n\
    \    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n    \n    s <- tolower(toupper(s))\n\
    \    \n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  s <- tolower(s)\n  s <-\
    \ gsub(\"[a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n",
  "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(length(s) == 0){\n    return(s)\n\
    \  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n \
    \ \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n\
    }\n\nsolve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve", "\n\
    \  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n\
    \    \n    s <- toupper(tolower(s))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    abc\")\nsolve(\"aBc\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n\
    \  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    AaBbCcDd\")", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\"\
    )\n  \n  for(i in 1:length(s)){\n    if(!is.character(s[i])) stop(\"s must be\
    \ a character vector\")\n    \n    if(grepl(\"[a-z]\", s[i])) s[i] <- toupper(s[i])\n\
    \    if(grepl(\"[A-Z]\", s[i])) s[i] <- tolower(s[i])\n  }\n  \n  return(paste0(toupper(substring(s,\
    \ 1, 1)), substring(s, 2)))\n}\n\nsolve(c(\"a\", \"b\", \"c\", \"D\", \"e\", \"\
    f\"))", "\n  \n  if(!all(grepl(\"[a-z]\", s))) {\n    \n    s <- toupper(s)\n\
    \    \n  } else {\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n  \n\
    }\n\nsolve(\"aBcD\")", "\n  \n  \n  \n}\n</code>\n<|/ q tags=r |>\n<| c |>\nPlease\
    \ provide some sample input and the expected output\n<|/ c |>\n<| c |>\nPlease\
    \ provide some sample input and the expected output\n<|/ c |>\n<| c |>\nPlease\
    \ provide some sample input and the expected output\n<|/ c |>\n<| c |>\nPlease\
    \ provide some sample input and the expected output\n<|/ c |>\n<| c |>\nPlease\
    \ provide some sample input and the expected output\n<|/ c |>\n<| a tags=r |>\n\
    We can use gsubfn to reverse the case\n<code>\nlibrary(gsubfn)\ngsubfn(\"[a-z]\"\
    , ~ toupper(x), str1)", "\n  \n  if(!is.character(s)) stop(\"s must be a character\
    \ vector\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n\
    \  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n \
    \ \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n \
    \ if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    ^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no\
    \ letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n\
    \  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n \
    \ \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n \
    \ if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    ^[a-zA-Z]+$\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"^[a-zA-Z", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  s <- tolower(s)\n  \n  if(all(grepl(\"\
    [a-z]\", s))) \n    s <- toupper(s)\n  \n  if(all(grepl(\"[A-Z]\", s))) \n   \
    \ s <- tolower(s)\n  \n  s\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"\
    hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hELLO\")\nsolve(\"hELLO", "\n  \n  if(length(s) == 0) {\n    return(\"\
    \")\n  }\n  \n  if(grepl(\"[a-z]\", s)) {\n    \n    s <- toupper(tolower(s))\n\
    \    \n  } else {\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\n\
    solve(\"AaBbCc\") # AaBbCc\nsolve(\"AaBbCcDd\") # AaBbCcDd\nsolve(\"AaBbCcDdEe\"\
    ) # AaBbCcDdEe\nsolve(\"AaBbCcDdEeFf\") # AaBbCcDdEeFf\nsolve(\"AaBbCcDdEeFfGg\"\
    ) # AaBbCcDdEeFfGg\nsolve(\"AaBbCcDdEeFfGgHh\") # AaBbCcDdEeFfGgHh\nsolve(\"AaBbCcDdEeFfGgHhIi\"\
    ) # AaBbCcDdEeFfGgHhIi\nsolve(\"AaBbCcDdEeFfGgHhIj\") # AaBbCcDdEeFfGgHhIj\nsolve(\"\
    AaBbCcDdEeFfGgHhIjKk\") # AaBbCcDdEeFfGgHhIjKk\nsolve(\"AaBbCcDdEeFfGgHhIjKkLl\"\
    ) # AaBbCcDdEeFfGgHhIjKkLl\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMm\") # AaBbCcDdEeFfGgHhIjKkLlMm\n\
    solve(\"AaBbCcDdEeFfGgHhIjKkLlMmNn\") # AaBbCcDdEeFfGgHhIjKkLlMmNn\nsolve(\"",
  "\n  if(!is.character(s)) stop(\"s must be a character vector\")\n  if(!all(grepl(\"\
    ^[a-z]+$\", s))) stop(\"s contains no letters\")\n  \n  s2 <- toupper(s)\n  s3\
    \ <- tolower(s)\n  \n  s4 <- paste(s2, s3, sep = \"\")\n  \n  return(s4)\n}\n\n\
    solve(\"abc\")", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"\
    [a-z]\",s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n\
    \    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\n\
    solve(\"HELLO\")\nsolve(\"hELLO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"\
    HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\"\
    )\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"\
    hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\"\
    )\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve(\"HellO\")\nsolve(\"hEllO\")\nsolve",
  "\n  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(tolower(s))\n  }\n  \n\
    \  if(!all(grepl(\"[a-z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"AaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"\
    aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\"\
    )\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"\
    aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\"\
    )\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"\
    aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\"\
    )\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"\
    aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\"\
    )\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"\
    aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\"\
    )\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve(\"aAaBbCcDd\")\nsolve", "\n\
    \  if(!all(grepl(\"[a-z]\", s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"\
    [A-Z]\", s))) {\n    s <- tolower(s)\n  }\n  return(s)\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a tags=r,string,regex |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\n\
    s <- \"Hello World\"\n\nstr_replace_all(s, pattern = \"[a-z]\", replacement =\
    \ \"\") %>% \n  str_replace_all(\" \", \"\") %>% \n  str_replace_all(\"[^A-Z]\"\
    , \"\") %>% \n  str_replace_all(\"^\", \"\") %>% \n  str_replace_all(\"$\", \"\
    \") %>% \n  str_replace_all(\"\\\\s\", \"\")\n\n[1] \"dlroW olleH\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\ns <- \"Hello World\"\n\ngsub(\"[a-z]\"\
    , \"\", s) %>% \n  gsub(\" \", \"\") %>% \n  gsub(\"[^A-Z]\", \"\") %>% \n  gsub(\"\
    ^\", \"\") %>% \n  gsub(\"$\", \"\") %>% \n  gsub(\"\\\\s\", \"\")\n\n[1] \"dlroW\
    \ olleH\"\n</code>\n<|/ a tags=r,string,regex |>\n<| a tags=r,string,regex |>\n\
    <code>\ns <- \"Hello World\"\ngsub(\"[a-z]\", \"\", s) %>% \n  gsub(\" \", \"\"\
    ) %>% \n  gsub(\"[^A-Z]\", \"\") %>% \n  gsub(\"^\", \"\") %>% \n  gsub(\"$\"\
    , \"\") %>% \n  gsub(\"\\\\s\", \"\")\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex\
    \ |>\n<code>\ns <- \"Hello World\"\ngsub(\"[a-z]\", \"\", s) %>% \n  gsub(\" \"\
    , \"\") %>% \n  gsub(\"[^A-Z]\", \"\") %>% \n  gsub(\"^\", \"\") %>% \n  gsub(\"\
    $\", \"\") %>% \n  gsub(\"\\\\s\", \"\")\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nlibrary(stringr)\ns <- \"Hello World\"\nstr_replace_all(s, pattern = \"\
    [a-z]\", replacement = \"\") %>% \n  str_replace_all(\" \", \"\") %>% \n  str_replace_all(\"\
    [^A-Z]\", \"\") %>% \n  str_replace_all(\"^\", \"\") %>% \n  str", "\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "\n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) {\n   \
    \ s <- toupper(s)\n  }\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"[\\\\U0061-\\\
    \\U007A]\", s)\n  s <- gsub(\"[\\\\U0061-\\\\U007A]\", \"[a-z]\", s)\n  return(s)\n\
    }\n\nsolve(\"abc\")", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n \
    \ if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(tolower(s))\n    \n  }\n  \n\
    \  return(s)\n}\n\nsolve(\"Hello World\")\nsolve(\"Hello World!\")\nsolve(\"Hello\
    \ World!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello\
    \ World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"Hello World!!!\")\nsolve(\"\
    Hello World!!!\")\n", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n \
    \ for(i in 1:length(s)){\n    if(s[i] == toupper(s[i])){\n      s[i] <- tolower(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  if(length(s) == 0) return(s)\n\
    \  \n  for(i in 1:length(s)){\n    if(!is.character(s[i])) stop(\"s must be a\
    \ character vector\")\n    \n    if(toupper(s[i]) == toupper(s[i - 1])){\n   \
    \   s[i] <- tolower(s[i])\n    }\n    \n    if(tolower(s[i]) == tolower(s[i -\
    \ 1])){\n      s[i] <- toupper(s[i])\n    }\n  }\n  \n  return(s)\n}\n\nsolve(c(\"\
    a\", \"b\", \"C\", \"D\"))", "\n  \n  if(!is.character(s)) stop(\"s must be a\
    \ character vector\")\n  \n  if(length(s) == 0) return(s)\n  \n  if(grepl(\"[a-z]\"\
    , s)) return(toupper(s))\n  \n  if(grepl(\"[A-Z]\", s)) return(tolower(s))\n \
    \ \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aB", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(length(s) == 0){\n  \
    \  return(s)\n  }\n  \n  for(i in 1:length(s)){\n    if(toupper(s[i]) == s[i]){\n\
    \      s[i] <- toupper(s[i])\n    }\n    else if(tolower(s[i]) == s[i]){\n   \
    \   s[i] <- tolower(s[i])\n    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")",
  "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  if(length(s)\
    \ == 0) return(s)\n  \n  if(grepl(\"[a-z]\", s)) return(toupper(s))\n  \n  if(grepl(\"\
    [A-Z]\", s)) return(tolower(s))\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n\
    \  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  s <- toupper(s)\n\
    \  \n  if(length(s) == 0) s\n  \n  for(i in 1:length(s)){\n    if(!is.alpha(s[i]))\
    \ s[i] <- toupper(s[i])\n  }\n  \n  s\n}\n\nsolve(\"abC\")\nsolve(\"abc\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")", "\n  \n  if(length(s) == 0) {\n    return(s)\n\
    \  }\n  \n  if(grepl(\"[a-z]\", s)) {\n    \n    s <- toupper(tolower(s))\n  \
    \  \n  } else {\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\n\
    solve(\"abc\")", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(length(s)\
    \ == 0) {\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)) {\n    \n    s <-\
    \ toupper(s)\n    \n  } else {\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n\
    }\n\nsolve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \n", "\n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"\
    s contains no letters\")\n  \n  s <- toupper(s)\n  \n  for(i in 1:length(s)){\n\
    \    if(grepl(\"^[a-z]+$\", s[i])){\n      s[i] <- toupper(s[i])\n    }\n  }\n\
    \  \n  s\n}\n\nsolve(c(\"a\", \"b\", \"c\"))", "\n  \n  if(!is.character(s)) stop(\"\
    s must be a character vector\")\n  \n  s <- toupper(s)\n  \n  if(grepl(\"[a-z]\"\
    , s)) \n    s <- tolower(s)\n  \n  if(grepl(\"[A-Z]\", s)) \n    s <- toupper(s)\n\
    \  \n  s\n}\n\nsolve(\"hello\")", "\n  s <- tolower(s)\n  s <- gsub(\"[^A-Za-z]\"\
    , \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nThank you so much! This was really helpful.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(purrr)\n", "\n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"\
    s contains no letters\")\n  if(length(s) == 0) return(s)\n  s2 <- toupper(s)\n\
    \  s3 <- tolower(s)\n  s4 <- gsub(\"[a-z]\", toupper(s3), s)\n  s5 <- gsub(\"\
    [a-z]\", tolower(s3), s)\n  return(s4)\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the string contains only lowercase letters.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't require the string to be all lowercase.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require the string to be all lowercase.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nstr_replace_all(s, c(\"\
    a\" => \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\",\
    \ \"f\" => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"\
    J\", \"k\" => \"K\", \"l\" => \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" =>\
    \ \"O\", \"p\" => \"P\", \"q\" => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\"\
    \ => \"T\", \"u\" => \"U\", \"v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"\
    y\" => \"Y\", \"z\" => \"Z\"))\n</code>\n<|/ a tags=r,string |>\n<| a tags=r,string\
    \ |>\n<code>\nlibrary(stringr)\ns <- \"abcde\"\nstr_replace_all(s, c(\"a\" =>\
    \ \"A\", \"b\" => \"B\", \"c\" => \"C\", \"d\" => \"D\", \"e\" => \"E\", \"f\"\
    \ => \"F\", \"g\" => \"G\", \"h\" => \"H\", \"i\" => \"I\", \"j\" => \"J\", \"\
    k\" => \"K\", \"l\" => \"L\", \"m\" => \"M\", \"n\" => \"N\", \"o\" => \"O\",\
    \ \"p\" => \"P\", \"q\" => \"Q\", \"r\" => \"R\", \"s\" => \"S\", \"t\" => \"\
    T\", \"u\" => \"U\", \"v\" => \"V\", \"w\" => \"W\", \"x\" => \"X\", \"y\" =>\
    \ \"Y\", \"z\" => \"Z\"))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    library(stringr)\ns <- ", "\n  s <- tolower(s)\n  sapply(s, function(x) {\n  \
    \  x <- toupper(x)\n    x <- ifelse(grepl(\"[a-z]\", x), toupper(x), tolower(x))\n\
    \    x\n  })\n}\n\nsolve(\"abc\")", "\n  s <- tolower(s)\n  sapply(s, grepl, pattern\
    \ = \"^[a-z]+$\") %>% \n    paste(collapse = \"\")\n}\n\nsolve(\"abc\")", "\n\
    \  s <- tolower(s)\n  s <- gsub(\"[a-z]\", toupper, s)\n  s <- gsub(\"[A-Z]\"\
    , tolower, s)\n  return(s)\n}\n\nsolve(\"aBcD\")", "\n  s <- tolower(s)\n  if(grepl(\"\
    [a-z]\", s)) {\n    s <- toupper(s)\n  }\n  s\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I believe this answer does not work if there are multiple letters in a row. For\
    \ example, if s = \"abBc\", the function returns \"AbBc\".\n<|/ c |>\n<| c |>\n\
    Yes, you are right. My answer was based on OP's question. I'll update my answer\
    \ with another solution that works even with multiple letters in a row.\n<|/ c\
    \ |>\n<| c |>\nI believe this answer does not work if there are multiple letters\
    \ in a row. For example, if s = \"abBc\", the function returns \"AbBc\".\n<|/\
    \ c |>\n<| c |>\nYes, you are right. My answer was based on OP's question. I'll\
    \ update my answer with another solution that works even with multiple letters\
    \ in a row.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\
    library(purrr)\n\ns <- \"abBc\"\n\nstr_replace_all(s, regex(\"[a-z]\", \"\\\\\
    U\\\\1\"), toupper)", "\n  s <- tolower(s)\n  \n  if(grepl(\"[a-z]\", s)) {\n\
    \    s <- toupper(s)\n  }\n  \n  if(grepl(\"[A-Z]\", s)) {\n    s <- tolower(s)\n\
    \  }\n  \n  s\n}\n\nsolve(\"ABC\")\nsolve(\"aBc\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aB", "\n  s <- tolower(s)\n  \n \
    \ if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n  }\n  \n  if(grepl(\"[A-Z]\"\
    , s)) {\n    s <- tolower(s)\n  }\n  \n  s\n}\n\nsolve(\"AaBbCc\") # AaBbCc\n\
    solve(\"aBc\") # aBc\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\"\
    ) # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\n\
    solve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"aBcD\") # aBcD\nsolve(\"\
    aBcD\") # aBc", "\n  s <- tolower(s)\n  if(grepl(\"[a-z]\", s)) {\n    s <- toupper(s)\n\
    \  }\n  s\n}\n\nsolve(\"abc\")", "\n  s <- tolower(s)\n  if(grepl(\"[a-z]\", s))\
    \ {\n    s <- toupper(s)\n  }\n  s\n}\n\nsolve(\"aBcD\")", "\n  \n  if(length(s)\
    \ == 0){\n    return(\"\")\n  }\n  \n  for(i in 1:length(s)){\n    if(grepl(\"\
    [a-z]\",s[i])) {\n      s[i] <- toupper(s[i])\n    } else {\n      s[i] <- tolower(s[i])\n\
    \    }\n  }\n  \n  return(paste0(s,collapse=\"\"))\n}\n\nsolve(\"abc\")", "\n\
    \  \n  if(!is.character(s)) {\n    stop(\"s must be a character vector\")\n  }\n\
    \  \n  if(!all(grepl(\"^[a-z]+$\", s))) {\n    stop(\"s contains no letters\"\
    )\n  }\n  \n  if(all(grepl(\"^[a-z]+$\", s))) {\n    \n    s <- toupper(s)\n \
    \   \n  } else {\n    \n    s <- tolower(s)\n    \n  }\n  \n  s\n}\n\nsolve(\"\
    abc\")", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n\
    \  \n  if(!all(grepl(\"[a-z]\",s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    [A-Z]\",s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[0-9]\",s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[[:punct:]]\",s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"[[:space:]]\",s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"[[:upper:]]\",s))) stop(\"s contains no\
    \ letters\")\n  \n  if(!all(grepl(\"[[:lower:]]\",s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"[[:digit:]]\",s))) stop(\"s contains no letters\")\n\
    \  \n  if(!all(grepl(\"[[:alpha:]]\",s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"[[:punct:]]\",s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    [[:space:]]\",s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[[:upper:]]\"\
    ,s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[[:lower:]]\",s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[[:digit:]]\",s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"[[:alpha:]]\",s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"[[:punct:]]\",s))) stop(\"s contains no\
    \ letters\")\n  \n  if(!all(grepl(\"[[:space:]]\",s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"[[:upper:]]\",s))) stop(\"s contains no letters\")\n\
    \  \n  if(!all(grepl(\"[[:lower:]]\",s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"[[:digit:]]\",s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    [[:alpha:]]\",s))) stop(\"s contains no letters\")", "\n  if(!all(grepl(\"^[a-zA-Z]+$\"\
    , s))) {\n    s <- toupper(s)\n  }\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\"\
    , \"\", s)\n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"hELLO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"\
    hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\")\nsolve(\"hEllO\"\
    )\nsolve(\"hEllO\")\nsolve(\"hEll", "\n  \n  if(!is.character(s)){\n    stop(\"\
    s must be a character vector\")\n  }\n  \n  if(!all(grepl(\"[a-z]\",s))) {\n \
    \   s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"[A-Z]\",s))) {\n    s <- tolower(s)\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    HEL", "\n  \n  if(!is.character(s)){\n    stop(\"s must be a character vector\"\
    )\n  }\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) {\n    stop(\"s contains no letters\"\
    )\n  }\n  \n  s <- toupper(s)\n  \n  for(i in seq_along(s)) {\n    if(grepl(\"\
    ^[a-z]+$\", s[i])) {\n      s[i] <- toupper(s[i])\n    } else {\n      s[i] <-\
    \ s[i]\n    }\n  }\n  \n  s\n}\n\nsolve(\"hello\")", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  s <- tolower(s)\n  \n  if(grepl(\"\
    [a-z]\", s)) \n    s <- toupper(s)\n  \n  if(grepl(\"[A-Z]\", s)) \n    s <- tolower(s)\n\
    \  \n  s\n}\n\nsolve(c(\"a\", \"b\", \"C\", \"D\"))", "\n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  ", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  for(i\
    \ in 1:length(s)){\n    if(!is.na(toupper(s[i])) && toupper(s[i]) != s[i]){\n\
    \      return(toupper(s[i]))\n    }\n  }\n  \n  return(toupper(s[length(s)]))\
    \ \n}\n\nsolve(\"abc\")", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n \
    \ \n  for(i in 1:length(s)){\n    if(s[i] == toupper(s[i])){\n      s[i] <- tolower(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCc\") # returns \"cBaAb\"\nsolve(\"\
    aBc\") # returns \"bCa\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\")\
    \ # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns\
    \ \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\
    \nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"\
    aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\"\
    ) # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns\
    \ \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\
    \nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"\
    aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\"\
    ) # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns\
    \ \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\
    \nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"aBcD\") # returns \"bCdA\"\nsolve(\"\
    aBcD\") # returns \"b", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n\
    \  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    AaBbCc\") # should return \"AbCc\"\nsolve(\"aBc\") # should return \"AbC\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\nsolve(\"aBcD\") # should return \"AbCd\"\nsolve(\"\
    aBcD\") # should return \"AbCd\"\n", "\n  \n  if(!is.character(s)) stop(\"s must\
    \ be a character vector\")\n  \n  s <- toupper(s)\n  \n  if(grepl(\"[a-z]\",s))\
    \ s <- tolower(s)\n  \n  if(grepl(\"[a-z]\",s)) s <- toupper(s)\n  \n  s\n}\n\n\
    solve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \n", "\n  \n  if(!is.character(s)) {\n \
    \   return(s)\n  }\n  \n  s <- toupper(s)\n  \n  for(i in seq_along(s)) {\n  \
    \  if(s[i] == toupper(s[i])) {\n      s[i] <- tolower(s[i])\n    } else {\n  \
    \    s[i] <- s[i]\n    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(!is.character(s)) stop(\"s must\
    \ be a character vector\")\n  \n  if(!all(grepl(\"[a-z]\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"[A-Z]\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"[0-9]\", s))) stop(\"s contains no letters\")\n  \n \
    \ if(!all(grepl(\"\\\\s\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    \\\\p{L}\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{N}\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{P}\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{S}\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{Z}\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"\\\\p{C}\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"\\\\p{M}\", s))) stop(\"s contains no letters\")\n  \n\
    \  if(!all(grepl(\"\\\\p{Pc}\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    \\\\p{Cc}\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\\
    p{Cn}\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s)))\
    \ stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s))) stop(\"s contains\
    \ no letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s))) stop(\"s contains no\
    \ letters\")\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"\\\\p{Cn}\", s))) stop(\"s contains no letters\")\n \
    \ \n  if(!all(grepl(\"\\\\p", "\n  \n  if(length(s) == 0){\n    return(\"\")\n\
    \  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(s)\n    \n  }\n \
    \ \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <- tolower(s)\n    \n  }\n  \n  return(s)\n\
    }\n\nsolve(\"Hello\")\nsolve(\"HELLO\")\nsolve(\"hello\")\nsolve(\"hELLO\")\n\
    solve(\"hEllO\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"\
    hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\")\nsolve(\"hElLo\"\
    )\nsolve(\"hElLo\")\n", "\n  \n  if(!is.character(s)) stop(\"s must be a character\
    \ vector\")\n  \n  s <- toupper(s)\n  \n  for(i in 1:length(s)) {\n    if(!is.alpha(s[i]))\
    \ s[i] <- toupper(s[i])\n  }\n  \n  s\n}\n\nsolve(c(\"a\", \"b\", \"C\", \"D\"\
    ))", "\n  \n  if(!all(grepl(\"^[a-z]+$\", s))) {\n    s <- toupper(s)\n  }\n \
    \ \n  if(!all(grepl(\"^[A-Z]+$\", s))) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n\
    }\n\nsolve(\"hello\")", "\n  \n  if(length(s) == 0){\n    return(s)\n  }\n  \n\
    \  for(i in 1:length(s)){\n    if(s[i] == toupper(s[i])){\n      s[i] <- tolower(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBc", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  s <- toupper(s)\n  \n  if(grepl(\"\
    [a-z]\",s)) s <- tolower(s)\n  \n  if(grepl(\"[a-z]\",s)) s <- toupper(s)\n  \n\
    \  s\n}\n\nsolve(\"abC\")", "\n  \n  if(length(s) == 0) {\n    return(s)\n  }\n\
    \  \n  for(i in 1:length(s)) {\n    if(substr(s[i],1,1) != substr(s[i],2,1)) {\n\
    \      return(toupper(substr(s[i],1,1)) + substr(s[i],2,nchar(s[i])))\n    }\n\
    \  }\n  return(toupper(substr(s[1],1,1)) + substr(s[1],2,nchar(s[1])))\n}\n\n\
    solve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"a", "\n  \n  if(!is.character(s))\
    \ stop(\"s must be a character vector\")\n  \n  if(!all(grepl(\"[a-z]\",s))) stop(\"\
    s contains no letters\")\n  \n  if(sum(grepl(\"[a-z]\",s)) == 0) stop(\"s contains\
    \ no letters\")\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  ", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"\
    [a-z]\", s)){\n    \n    s <- toupper(tolower(s))\n    \n  }\n  \n  if(grepl(\"\
    [A-Z]\", s)){\n    \n    s <- tolower(toupper(s))\n    \n  }\n  \n  return(s)\n\
    }\n\nsolve(\"AaBbCcDd\")", "\n  if(!all(grepl(\"[a-z]\", s))) {\n    s <- toupper(s)\n\
    \  }\n  if(!all(grepl(\"[A-Z]\", s))) {\n    s <- tolower(s)\n  }\n  return(s)\n\
    }\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThis doesn't work if there\
    \ are multiple uppercase letters in the string. For example, `solve(\"AaBbCc\"\
    )` returns `\"AbCc\"`, but should return `\"AaBbCc\"`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to account for that case.\n<|/\
    \ c |>\n<| a tags=r,string,regex |>\n<code>\nsolve <- function(s) {\n  if(!all(grepl(\"\
    [a-z]\", s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"[A-Z]\", s))) {\n\
    \    s <- tolower(s)\n  }\n  return(s)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex\
    \ |>\n<code>\nsolve <- function(s) {\n  if(!all(grepl(\"[a-z]\", s))) {\n    s\
    \ <- toupper(s)\n  }\n  if(!all(grepl(\"[A-Z]\", s))) {\n    s <- tolower(s)\n\
    \  }\n  return(s)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex |>\n\
    <code>\nsolve <- function(s) {\n  if(!all(grepl(\"[a-z]\", s))) {\n    s <- toupper(s)\n\
    \  }\n  if(!all(grepl(\"[A-Z]\", s))) {\n    s <- tolower(s)\n  }\n  return(s)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsolve <- function(s)\
    \ {\n  if(!all(grepl(\"[a-z]\", s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"\
    [A-Z]\", s))) {\n    s <- tolower(s)\n  }\n  return(s)\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a tags=r,string,regex |>\n<code>\nsolve <- function(s) {\n  if(!all(grepl(\"\
    [a-z]\", s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"[A-Z]\", s))) {\n\
    \    s <- tolower(s)\n  }\n  return(s)\n}\n</code>\n<|/ a dscore=1 |>\n<| a d",
  "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  s <-\
    \ toupper(s)\n  \n  if(grepl(\"[a-z]\", s)) \n    s <- tolower(s)\n  \n  if(grepl(\"\
    [a-z]\", s)) \n    s <- toupper(s)\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"\
    aBc\") \nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve", "\n  \n  if(length(s) == 0){\n  \
    \  return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(sub(\"\
    [a-z]\", \"\", s))\n    \n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    \n    s <-\
    \ tolower(sub(\"[A-Z]\", \"\", s))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"\
    hello\")", "\n  \n  \n  \n}\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"helloWorld\"\
    )\nsolve(\"HELLOWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")", "\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", toupper, s)\n  s\
    \ <- gsub(\"[A-Z]\", tolower, s)\n  return(s)\n}\n\nsolve(\"AaBbCc\") # returns\
    \ \"AbCc\"\nsolve(\"aBc\") # returns \"aBc\"\nsolve(\"aBcD\") # returns \"aBcD\"\
    \nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"\
    aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\"\
    ) # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns\
    \ \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\
    \nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"\
    aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\"\
    ) # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns\
    \ \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\
    \nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"\
    aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\"\
    ) # returns \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") # returns\
    \ \"aBcD\"\nsolve(\"aBcD\") # returns \"aBcD\"\nsolve(\"aBcD\") ", "\n  \n  if(length(s)\
    \ == 0){\n    return(s)\n  }\n  \n  for(i in 1:length(s)){\n    if(s[i] == toupper(s[i])){\n\
    \      s[i] <- tolower(s[i])\n    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\"\
    )\nsolve(\"aBc\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"\
    aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBcD\"\
    ) \nsolve(\"aBcD\") \nsolve(\"aBcD\") \nsolve(\"aBc", "\n  \n  if(length(s) ==\
    \ 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\",s)){\n    \n    s <- toupper(sub(\"\
    [a-z]\",\"\",s))\n    \n  }\n  \n  if(grepl(\"[A-Z]\",s)){\n    \n    s <- tolower(sub(\"\
    [A-Z]\",\"\",s))\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"\
    HELLO\")\nsolve(\"hELLO\")\nsolve(\"HellO\")\nsolve(\"hELLO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"\
    HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO\")\nsolve(\"H", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n \
    \ \n  if(!is.character(s)){\n    stop(\"s must be a character vector\")\n  }\n\
    \  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"\
    [A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")",
  "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "\n  s <- toupper(s)\n  if(grepl(\"[a-z]\", s)) {\n    s <- tolower(s)\n  }\n  if(grepl(\"\
    [a-z]\", s)) {\n    s <- toupper(s)\n  }\n  s\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26867064)\n\
    <|/ c |>\n<| c |>\nI believe it does provide an answer to the question, since\
    \ it provides the solution to the problem in the question. I've added an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nIt does provide an answer to the question,\
    \ since it provides the solution to the problem in the question. I've added an\
    \ example to my answer.\n<|/ c |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26867064)\n<|/ c\
    \ |>\n<| c |>\nI believe it does provide an answer to the question, since it provides\
    \ the solution to the problem in the question. I've added an example to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\
    library(purrr)\n\nstr_replace_all(\"Hello World\", \"[a-z]\", function(x) toupper(x))",
  "\n  if(length(s) == 0){\n    return(s)\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n \
    \   s <- toupper(tolower(s))\n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(toupper(s))\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCcDd\")", "\n  if(!all(grepl(\"^[a-z]+$\"\
    , s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"^[A-Z]+$\", s))) {\n   \
    \ s <- tolower(s)\n  }\n  return(s)\n}\n\nsolve(\"AaBbCc\") # AaBbCc\nsolve(\"\
    AaBbCcDdEe\") # AaBbCcDdEe\nsolve(\"AaBbCcDdEeFf\") # AaBbCcDdEeFf\nsolve(\"AaBbCcDdEeFfGg\"\
    ) # AaBbCcDdEeFfGg\nsolve(\"AaBbCcDdEeFfGgHh\") # AaBbCcDdEeFfGgHh\nsolve(\"AaBbCcDdEeFfGgHhIi\"\
    ) # AaBbCcDdEeFfGgHhIi\nsolve(\"AaBbCcDdEeFfGgHhIj\") # AaBbCcDdEeFfGgHhIj\nsolve(\"\
    AaBbCcDdEeFfGgHhIjKk\") # AaBbCcDdEeFfGgHhIjKk\nsolve(\"AaBbCcDdEeFfGgHhIjKkLl\"\
    ) # AaBbCcDdEeFfGgHhIjKkLl\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMm\") # AaBbCcDdEeFfGgHhIjKkLlMm\n\
    solve(\"AaBbCcDdEeFfGgHhIjKkLlMmNn\") # AaBbCcDdEeFfGgHhIjKkLlMmNn\nsolve(\"AaBbCcDdEeFfGgHhIjKkLlMmNnOo\"\
    ) # AaBb", "\n  \n  if(length(s) == 0) {\n    return(s)\n  }\n  \n  if(grepl(\"\
    [a-z]\", s)) {\n    \n    s <- toupper(tolower(s))\n    \n  } else {\n    \n \
    \   s <- tolower(s)\n    \n  }\n  \n  return(s)\n}\n\nsolve(\"aBcD\")", "\n  \n\
    \  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  s <- toupper(s)\n\
    \  \n  if(!all(grepl(\"[a-z]\", s))) s <- tolower(s)\n  \n  return(s)\n}\n\nsolve(\"\
    abc\")", "\n  if(!all(grepl(\"[a-z]\", s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"\
    [A-Z]\", s))) {\n    s <- tolower(s)\n  }\n  s\n}\n\nsolve(\"aBcD\")", "\n  \n\
    \  \n  \n}\nsolve(\"Hello World\")\nsolve(\"Hello World!\")\nsolve(\"Hello\")\n\
    solve(\"Hello!\")\nsolve(\"H\")\nsolve(\"Hell\")\nsolve(\"Hello\")\nsolve(\"Hello!\"\
    )\nsolve(\"Hell\")\nsolve(\"Hell!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"\
    HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\n\
    solve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"\
    HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\n\
    solve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"\
    HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\n\
    solve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"\
    HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\"\
    )\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\n\
    solve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"\
    HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\"\
    )\nsolve(\"HellO!\")\nsolve(\"HellO\")\nsolve(\"HellO!\")\nsolve(\"HellO\")\n\
    solve(\"HellO!\")\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(!is.character(s)){\n\
    \    stop(\"s must be a character vector\")\n  }\n  \n  s <- tolower(s)\n  \n\
    \  for(i in 1:length(s)){\n    if(s[i] %in% letters){\n      s[i] <- toupper(s[i])\n\
    \    }\n  }\n  \n  s\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"\
    helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\")\nsolve(\"helloWorld\"\
    )\nsolve(\"helloWorld\")\n", "\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- gsub(\"[A-Z]\", \"\", s)\n  s <- paste0(toupper(s), tolower(s))\n\
    \  return(s)\n}\n</code>\n<|/ a tags=r,string |>\n<| c |>\nThis doesn't seem to\
    \ work. `solve(\"ab\")` returns `\"Aa\"`\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. Are you sure you copied the code correctly? I tested it on R 3.2.3\
    \ on Windows 7.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.3 on Windows 7 and it\
    \ works fine. Are you sure you copied the code correctly? I tested it on R 3.2.3\
    \ on Windows 7 and it works fine.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.3 on\
    \ Windows 7 and it works fine. Are you sure you copied the code correctly? I tested\
    \ it on R 3.2.3 on Windows 7 and it works fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on R 3.2.3 on Windows 7 and it works fine. Are you sure you copied the code\
    \ correctly? I tested it on R 3.2.3 on Windows 7 and it works fine.\n<|/ c |>\n\
    <| a tags=r,string |>\n<code>\nsolve <- function(s) {\n  s <- tolower(s)\n  s\
    \ <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[A-Z]\", \"\", s)\n  s <- paste0(toupper(s),\
    \ tolower(s))\n  return(s)\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    <code>\nsolve <- function(s) {\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- gsub(\"[A-Z]\", \"\", s)\n  s <- paste0(toupper(s), tolower(s))\n\
    \  return(s)\n}\n</code>\n<|/ a tags=r,string |>\n<| a |>\n<code>\nsolve <- function(s)\
    \ {\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[A-Z]\"\
    , \"\", s)\n  s <- paste0(toupper(s), tolower(s))\n  return(s)\n}\n</code>\n<|/\
    \ a tags=r,string dscore=3 |>\n<| a |>\n<code>", "\n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  ", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  if(grepl(\"\
    [a-z]\", s)){\n    s <- toupper(tolower(s))\n  }\n  \n  if(grepl(\"[A-Z]\", s)){\n\
    \    s <- tolower(toupper(s))\n  }\n  \n  return(s)\n}\n\nsolve(\"AaBbCcDd\")",
  "\n  \n  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"\
    [A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  \n  s\n}\n\nsolve(\"AaBbCcDdEeFfGgHh\"\
    )", "\n  \n  if(length(s) == 0){\n    return(\"\")\n  }\n  \n  for(i in 1:length(s)){\n\
    \    if(grepl(\"[a-z]\", s[i])){\n      s[i] <- toupper(s[i])\n    }\n    else\
    \ if(grepl(\"[A-Z]\", s[i])){\n      s[i] <- tolower(s[i])\n    }\n  }\n  \n \
    \ return(paste0(s))\n}\n\nsolve(\"abc\")\nsolve(\"aBc\") \nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve", "\n\
    \  \n  if(length(s)==0) return(s)\n  \n  for(i in 1:length(s)) {\n    if(grepl(\"\
    [a-z]\",s[i])) {\n      s[i] <- toupper(s[i])\n    } else {\n      s[i] <- tolower(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n  if(length(s) == 0){\n\
    \    return(\"\")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    \n    s <- toupper(tolower(s))\n\
    \    \n  }\n  \n  return(s)\n}\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\"\
    )\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"\
    helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\"\
    )\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"\
    HELLOWORLD\")\nsolve(\"helloWORLD\")\nsolve(\"HELLOWORLD\")\nsolve(\"helloWORLD",
  "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(s) == 0) return(s)\n  \n\
    \  for(i in 1:length(s)){\n    if(s[i] %in% LETTERS){\n      s[i] <- toupper(s[i])\n\
    \    }\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  \n  if(!is.character(s))\
    \ {\n    stop(\"s must be a character vector\")\n  }\n  \n  if(!all(grepl(\"^[a-z]+$\"\
    , s))) {\n    stop(\"s must be a character vector with only lowercase letters\"\
    )\n  }\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) {\n    stop(\"s must be a character\
    \ vector with only uppercase letters\")\n  }\n  \n  if(!all(grepl(\"^[a-z]+$\"\
    , s))) {\n    s <- toupper(s)\n  }\n  \n  if(!all(grepl(\"^[A-Z]+$\", s))) {\n\
    \    s <- tolower(s)\n  }\n  \n  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"aBc\"\
    ) \nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve", "\n  \n  if(length(s)\
    \ == 0){\n    return(s)\n  }\n  \n  for(i in 1:length(s)){\n    if(toupper(s[i])\
    \ == s[i]){\n      return(toupper(s))\n    }\n  }\n  \n  return(toupper(s))\n\
    }\n\nsolve(\"AaBbCcDd\")", "\n  s <- tolower(s)\n  s <- gsub(\"[a-z]\", \"\",\
    \ s)\n  s <- toupper(s)\n  return(s)\n}\n\nsolve(\"abC\")", "\n  if(!any(grepl(\"\
    [a-z]\",s))) {\n    s <- toupper(s)\n  } else {\n    s <- tolower(s)\n  }\n  return(s)\n\
    }\n\nsolve(\"abc\")", "\n  \n  if(!is.character(s)){\n    return(paste0(toupper(s),\
    \ tolower(s)))\n  }\n  \n  if(!any(grepl(\"[a-z]\", s))) {\n    return(paste0(toupper(s),\
    \ tolower(s)))\n  }\n  \n  return(paste0(toupper(substring(s, 1, 1)), \n     \
    \          tolower(substring(s, 2, nchar(s))), \n               toupper(substring(s,\
    \ nchar(s), nchar(s)))\n  ))\n}\n\nsolve(\"AaBbCcDd\")", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[a-z]\", toupper, s)\n  s <- gsub(\"[A-Z]\", tolower, s)\n  s\n\
    }\n\nsolve(\"Hello World\")", "\n  \n  if(!is.character(s)) stop(\"s must be a\
    \ character vector\")\n  \n  if(!all(grepl(\"[a-z]\", s))) stop(\"s contains no\
    \ letters\")\n  \n  if(!all(grepl(\"[A-Z]\", s))) stop(\"s contains no letters\"\
    )\n  \n  if(!all(grepl(\"[0-9]\", s))) stop(\"s contains no numbers\")\n  \n \
    \ if(!all(grepl(\"\\\\s\", s))) stop(\"s contains no spaces\")\n  \n  if(!all(grepl(\"\
    \\\\w\", s))) stop(\"s contains no words\")\n  \n  if(!all(grepl(\"\\\\W\", s)))\
    \ stop(\"s contains no non-words\")\n  \n  if(!all(grepl(\"\\\\p{L}\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{N}\", s))) stop(\"s contains\
    \ no numbers\")\n  \n  if(!all(grepl(\"\\\\p{P}\", s))) stop(\"s contains no punctuation\"\
    )\n  \n  if(!all(grepl(\"\\\\p{S}\", s))) stop(\"s contains no symbols\")\n  \n\
    \  if(!all(grepl(\"\\\\p{Z}\", s))) stop(\"s contains no whitespace\")\n  \n \
    \ if(!all(grepl(\"\\\\p{L}\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    \\\\p{N}\", s))) stop(\"s contains no numbers\")\n  \n  if(!all(grepl(\"\\\\p{P}\"\
    , s))) stop(\"s contains no punctuation\")\n  \n  if(!all(grepl(\"\\\\p{S}\",\
    \ s))) stop(\"s contains no symbols\")\n  \n  if(!all(grepl(\"\\\\p{Z}\", s)))\
    \ stop(\"s contains no whitespace\")\n  \n  if(!all(grepl(\"\\\\p{L}\", s))) stop(\"\
    s contains no letters\")\n  \n  if(!all(grepl(\"\\\\p{N}\", s))) stop(\"s contains\
    \ no numbers\")\n  \n  if(!all(grepl(\"\\\\p{P}\", s))) stop(\"s contains no punctuation\"\
    )\n  \n  if(!all(grepl(\"\\\\p{S}\", s))) stop(\"s contains no symbols\")\n  \n\
    \  if(!all(grepl(\"\\\\p{Z}\", s))) stop(\"s contains no whitespace\")\n  \n \
    \ if(!all(grepl(\"\\\\p{L}\", s))) stop(\"s contains no ", "\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  ", "\n  \n  if(!all(grepl(\"^[a-zA-Z]+$\", s))) {\n   \
    \ s <- toupper(s)\n  }\n  \n  if(grepl(\"^[a-zA-Z]+$\", s)) {\n    s <- tolower(s)\n\
    \  }\n  \n  s\n}\n\nsolve(\"abc\")", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  if(!all(grepl(\"[a-z]\",s))) {\n    s <- toupper(s)\n  }\n  if(!all(grepl(\"\
    [A-Z]\",s))) {\n    s <- tolower(s)\n  }\n  return(s)\n}\n\nsolve(\"AaBbCc\")\
    \ # AaBbCc\nsolve(\"aAaBbCc\") # aAaBbCc\nsolve(\"aAaBbCcDd\") # aAaBbCcDd\nsolve(\"\
    aAaBbCcDdEe\") # aAaBbCcDdEe\nsolve(\"aAaBbCcDdEeFf\") # aAaBbCcDdEeFf\nsolve(\"\
    aAaBbCcDdEeFfGg\") # aAaBbCcDdEeFfGg\nsolve(\"aAaBbCcDdEeFfGgHh\") # aAaBbCcDdEeFfGgHh\n\
    solve(\"aAaBbCcDdEeFfGgHhIi\") # aAaBbCcDdEeFfGgHhIi\nsolve(\"aAaBbCcDdEeFfGgHhIj\"\
    ) # aAaBbCcDdEeFfGgHhIj\nsolve(\"aAaBbCcDdEeFfGgHhIjKk\") # aAaBbCcDdEeFfGgHhIjKk\n\
    solve(\"aAaBbCcDdEeFfGgHhIjKkLl\") # aAaBbCcDdEeFfGgHhIjKkLl\nsolve(\"aAaBbCcDdEeFfGgHhIjKkLlMm\"\
    ) # aAaBbCcDdEeFfGgHhIjKkLlMm\nsolve(\"aAaBbCcDdEeFfGgHhIjKkLlMmNn\") # aAaBbC",
  "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  if(length(s)\
    \ == 0) return(s)\n  \n  if(grepl(\"[a-z]\", s)) return(toupper(s))\n  \n  return(tolower(s))\n\
    }\n\nsolve(c(\"a\", \"b\", \"c\", \"d\"))", "\n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  if(!is.character(s)) stop(\"s must be a character vector\")\n  if(!all(grepl(\"\
    [a-z]\", s))) stop(\"s contains no letters\")\n  if(!all(grepl(\"[A-Z]\", s)))\
    \ stop(\"s contains no letters\")\n  \n  s2 <- toupper(tolower(s))\n  s3 <- tolower(toupper(s))\n\
    \  \n  if(grepl(\"[a-z]\", s)) return(s2)\n  if(grepl(\"[A-Z]\", s)) return(s3)\n\
    \  return(s)\n}\n\nsolve(\"abc\")\nsolve(\"ABC\")\nsolve(\"aBc\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"\
    aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\"\
    )\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\n\
    solve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123\")\nsolve(\"aBc123", "\n\
    \  s <- toupper(s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- tolower(s)\n  return(s)\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27839475)\n<|/ c\
    \ |>\n<| c |>\nI believe it does answer the question. He wants to reverse the\
    \ case of a string and he has provided a solution. He also provided a link to\
    \ the solution. He also provided a link to his solution. He also provided a link\
    \ to his solution. He also provided a link to his solution. He also provided a\
    \ link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided ",
  "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\")\n  \n  s <-\
    \ toupper(s)\n  \n  if(grepl(\"[a-z]\", s)) \n  {\n    s <- tolower(s)\n  }\n\
    \  \n  if(grepl(\"[A-Z]\", s)) \n  {\n    s <- toupper(s)\n  }\n  \n  s\n}\n\n\
    solve(\"abc\")", "\n  \n  if(!is.character(s)) stop(\"s must be a character vector\"\
    )\n  \n  if(!all(grepl(\"[a-z]\", s))) stop(\"s contains no letters\")\n  \n \
    \ if(!all(grepl(\"[A-Z]\", s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"\
    [0-9]\", s))) stop(\"s contains no numbers\")\n  \n  if(!all(grepl(\"[[:alpha:]]\"\
    , s))) stop(\"s contains no letters\")\n  \n  if(!all(grepl(\"[[:digit:]]\", s)))\
    \ stop(\"s contains no numbers\")\n  \n  if(!all(grepl(\"[[:punct:]]\", s))) stop(\"\
    s contains no punctuation\")\n  \n  if(!all(grepl(\"[[:space:]]\", s))) stop(\"\
    s contains no spaces\")\n  \n  if(!all(grepl(\"[[:upper:]]\", s))) stop(\"s contains\
    \ no uppercase letters\")\n  \n  if(!all(grepl(\"[[:lower:]]\", s))) stop(\"s\
    \ contains no lowercase letters\")\n  \n  if(!all(grepl(\"[[:word:]]\", s))) stop(\"\
    s contains no words\")\n  \n  if(!all(grepl(\"[[:xdigit:]]\", s))) stop(\"s contains\
    \ no hexadecimal numbers\")\n  \n  if(!all(grepl(\"[[:alnum:]]\", s))) stop(\"\
    s contains no alphanumeric characters\")\n  \n  if(!all(grepl(\"[[:blank:]]\"\
    , s))) stop(\"s contains no blank spaces\")\n  \n  if(!all(grepl(\"[[:punct:]]\"\
    , s))) stop(\"s contains no punctuation\")\n  \n  if(!all(grepl(\"[[:space:]]\"\
    , s))) stop(\"s contains no spaces\")\n  \n  if(!all(grepl(\"[[:upper:]]\", s)))\
    \ stop(\"s contains no uppercase letters\")\n  \n  if(!all(grepl(\"[[:lower:]]\"\
    , s))) stop(\"s contains no lowercase letters\")\n  \n  if(!all(grepl(\"[[:word:]]\"\
    , s))) stop(\"s contains no words\")\n  \n  if(!all(grepl(\"[[:xdigit:]]\", s)))\
    \ stop(\"s contains no hexadecimal numbers\")\n  \n  if(!all(grepl(\"[[:alnum:]]\"\
    , s))) stop(\"s contains no ", "\n  \n  if(length(s) == 0){\n    return(s)\n \
    \ }\n  \n  if(grepl(\"[a-z]\", s)){\n    s <- toupper(sub(\"[a-z]\", \"\", s))\n\
    \  }\n  \n  if(grepl(\"[A-Z]\", s)){\n    s <- tolower(sub(\"[A-Z]\", \"\", s))\n\
    \  }\n  \n  return(s)\n}\n\nsolve(\"abc\")", "\n  s <- tolower(s)\n  s <- gsub(\"\
    [a-z]\", \"\", s)\n  s <- toupper(s)\n  return(s)\n}\n\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\n\
    solve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\"\
    )\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")\nsolve(\"\
    aBcD\")\nsolve(\"aBcD\")\nsolve(\"aBcD\")", "\n  if(!is.character(s)) stop(\"\
    s must be a character vector\")\n  if(!all(grepl(\"^[a-z]+$\", s))) stop(\"s contains\
    \ no letters\")\n  \n  s2 <- toupper(s)\n  s3 <- tolower(s)\n  \n  if(grepl(\"\
    ^[a-z]+$\", s)) return(s3)\n  if(grepl(\"^[A-Z]+$\", s)) return(s2)\n  \n  return(s2)\n\
    }\n\nsolve(\"hello\")\nsolve(\"HELLO\")\nsolve(\"hELLO\")\nsolve(\"HellO\")\n\
    solve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"\
    heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\"\
    )\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"\
    HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\"\
    )\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"\
    heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\"\
    )\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"\
    HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\"\
    )\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"\
    heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\"\
    )\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"\
    HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\")\nsolve(\"heLLO\")\nsolve(\"HellO\"\
    )\nsolve(\"heLLO\")\nsolve(\"HellO\")\n", "\n  \n  if(length(s) == 0){\n    return(\"\
    \")\n  }\n  \n  if(grepl(\"[a-z]\", s)){\n    s <- toupper(tolower(s))\n  }\n\
    \  \n  return(s)\n}\n\nsolve(\"aBcD\")"]
stop_tokens:
- "\n#"
- "\n```"
