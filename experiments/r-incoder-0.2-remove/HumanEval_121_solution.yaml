name: HumanEval_121_solution
language: r
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\nsolution <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- solution\n    if(!identical(candidate(c(5,\
  \ 8, 7, 1)), 12)){quit('no', 1)}\n    if(!identical(candidate(c(3, 3, 3, 3, 3)),\
  \ 9)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 24, 321)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(5, 9)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 23, 32)), 23)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(3, 13, 2, 9)), 3)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,length(lst),2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that returns the product of the even elements\
    \ that are in odd positions.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nQuestion 9\nWrite a function that returns a list of all numbers\
    \ between 1 and n that have no duplicates.\n\nFor example, given n = 10, the function\
    \ should return [1,2,3,4,5,6,7,8,9].\n\nWrite a function that returns a list of\
    \ all numbers between 1 and n that have no duplicates.\n\nFor example, given n\
    \ = 10, the function should return [1,2,3,4,5,6,7,8,9].\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that returns the product of all the even\
    \ elements in a given list.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the product of the even elements that are in odd positions.\n\nExamples\nsolution\
    \ <- function(lst) {\n  prod(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n\
    [1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1]\
    \ 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n\
    [1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1]\
    \ 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n\
    [1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1]\
    \ 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n\
    [1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1]\
    \ 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n\
    [1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1]\
    \ 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n\
    [1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1]\
    \ 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n\
    [1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1]\
    \ 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] 24\n[1] 6\n[1] ", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nProblem 7\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\nsolution(lst)", "\n  sum(lst[lst%%2==1])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nProblem 7\nImplement a function that returns a list consisting\
    \ of the first element in the list followed by every other element starting with\
    \ the second element.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\nThe Fibonacci\
    \ sequence is defined by the formula:\n\n$$ F_n = \\begin{cases}\n      0 & n\
    \ = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}\n\
    $$\n\nwhere $F_0 = 0$ and $F_1 = 1$. By starting with $F_n = F_{n-1}$ and repeatedly\
    \ applying $F_{n-1}$ and $F_{n-2}$ to $F_n$, eventually you will reach the $F_2$-th\
    \ term of the sequence.\n\nBy listing the first six terms, we get:\n\n$$ F_n =\
    \ F_1 + F_2 F_3 + F_4 F_5 + F_6 F_7 $$\n\nThe first three terms will be:\n\n$$\
    \ F_3 = F_1 + F_2 $$\n\nThe fourth term will be:\n\n$$ F_5 = F_3 + F_4 $$\n\n\
    The fifth term will be:\n\n$$ F_7 = F_5 + F_6 $$\n\nWrite a function in R that\
    \ computes the nth term of the Fibonacci sequence. The Fibonacci sequence is defined\
    \ by the formula:\n\n$$ F_n = \\begin{cases}\n      0 & n = 0\\\n      1 & n =\
    \ 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}\n$$\n\nwhere $F_0 = 0$\
    \ and $F_1 = 1$. By starting with $F_n = F_{n-1}$ and repeatedly applying $F_{n-1}$\
    \ and $F_{n-2}$ to $F_n$, eventually you will reach the $F_2$-th term of the sequence.\n\
    \nFor example, \n$$ F_7 = F_5 + F_6 $$\n$$ F_5 = F_3 + F_4 $$\n$$ F_3 = F_1 +\
    \ F_2 $$\n$$ F_1 = F_0 $$\n$$ F_0 = 1 $$\n\nTherefore, the 6th term of the sequence\
    \ is $F_6 = 1$. Your function should return the nth term of the Fibonacci sequence.\
    \ You may assume that n is always positive.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\n\
    Problem 8\nImplement a function that returns true if the given string has all\
    \ unique characters. Otherwise, return false.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns a list of all the numbers between 1 and n that\
    \ are divisible by 3.\n\nFor example, if the input is 4, the function should return\
    \ [1,2,4].\n\nIf the input is 5, the function should return [1,2,3,4,5].\n\nIf\
    \ the input is 6, the function should return [1,2,3,4,5,6].\n\nIf the input is\
    \ 7, the function should return [1,2,3,4,5,6,7].\n\nIf the input is 8, the function\
    \ should return [1,2,3,4,5,6,7,8].\n\nIf the input is 9, the function should return\
    \ [1,2,3,4,5,6,7,8,9].\n\nIf the input is 10, the function should return [1,2,3,4,5,6,7,8,9,10].\n\
    \nIf the input is 11, the function should return [1,2,3,4,5,6,7,8,9,10,11].\n\n\
    If the input is 12, the function should return [1,2,3,4,5,6,7,8,9,10,11,12].\n\
    \nIf the input is 13, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13].\n\
    \nIf the input is 14, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14].\n\
    \nIf the input is 15, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15].\n\
    \nIf the input is 16, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16].\n\
    \nIf the input is 17, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17].\n\
    \nIf the input is 18, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18].\n\
    \nIf the input is 19, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19].\n\
    \nIf the input is 20, the function should return [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].\n\
    \n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[lst%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nQuestion 7\nWrite a function that returns a list\
    \ of all numbers between two given numbers, inclusive.\n\n\n</text>\n<cell>",
  "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1,length(lst),2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the product of the even elements in a list. \nFor example, \nlst = c(2, 5, 3,\
    \ 6, 4, 8)\nshould return $24$.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns a list of all numbers between 1 and n that\
    \ have two of the same digits. For example, between 1 and 10, we have 1, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9. The list should contain all of the numbers from 1 to 10\
    \ that have two of the same digits.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n\
    </cell>\n<cell>", "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nProblem 8\nThe Fibonacci sequence is defined by the formula:\n\
    \n$$ F_n = \\begin{cases}\n      0 & n = 0\\\n      1 & n = 1 \\\n      F{n-1}\
    \ + F_{n-2} & n > 1\n    \\end{cases}\n$$\n\nwhere $F_1 = 1$ and $F_2 = 1$. By\
    \ starting with $F_n = F_{n-1}$ and repeatedly applying the formula, we can compute\
    \ the entire sequence $F_n$.\n\nBy computing the above formula with $F_n = F_{n-1}F_{n-2}$\
    \ and $F_{n-1}=1$ and $F_{n-2}=1$, we can see that $F_n$ is equal to the Fibonacci\
    \ sequence.\n\nNone Fibonacci sequence\n\n\nProblem 9\nThe Fibonacci sequence\
    \ is defined by the formula:\n\n$$ F_n = \\begin{cases}\n      0 & n = 0\\\n \
    \     1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}\n$$\n\nwhere\
    \ $F_1 = 1$ and $F_2 = 1$. By starting with $F_n = F_{n-1}$ and repeatedly applying\
    \ the formula, we can compute the entire sequence $F_n$.\n\nBy computing the above\
    \ formula with $F_n = F_{n-1}F_{n-2}$ and $F_{n-1}=1$ and $F_{n-2}=1$, we can\
    \ see that $F_n$ is equal to the Fibonacci sequence.\n\nNone Fibonacci sequence\n\
    \n\nProblem 10\nThe Fibonacci sequence is defined by the formula:\n\n$$ F_n =\
    \ \\begin{cases}\n      0 & n = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2}\
    \ & n > 1\n    \\end{cases}\n$$\n\nwhere $F_1 = 1$ and $F_2 = 1$. By starting\
    \ with $F_n = F_{n-1}$ and repeatedly applying the formula, we can compute the\
    \ entire sequence $F_n$.\n\nBy computing the above formula with $F_n = F_{n-1}F_{n-2}$\
    \ and $F_{n-1}=1$ and $F_{n-2}=1$, we can see that $F_n$ is equal to the Fibonac",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns the sum of the even elements that are in odd\
    \ positions.\n\nExamples\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>",
  "\n  sum(lst[seq(1,length(lst),2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that returns a list of all numbers between\
    \ two given numbers, inclusive.\nFor example, between 1 and 5, it should return\
    \ [1, 3, 5].\nIt should work for any two numbers, not just for 1 and 5.\n\n\n\
    </text>\n<cell>", "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[lst%%2==1])\n\
    }\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns a list of numbers, such that each number is the sum of the numbers\
    \ on either side.\n\nFor example, given [1,2,3,4,5,6,7], return [3,4,7,10,15]\
    \ (assuming no errors).\n\nIf there are fewer than three numbers, return any (possibly\
    \ empty) list. \nIf there are less than three numbers, left-pad your list with\
    \ zeros.\n\nIf this sounds confusing, here's an example. Given [-10,-3,5,-7,2],\
    \ return [-10,-3,5,-7,0,0,2,0].\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nProblem 8\nWrite a function that returns\
    \ the product of all the numbers in a list. Except the number 1 and the number\
    \ 0 should be considered to be two different numbers.\n\nExamples\nsolution <-\
    \ function(lst) {\n  prod(lst)\n}\nsolution(lst)\n[1] 24\n[1] 1\nsolution(lst)\n\
    [1] 0\n[1] 0\n[1] 1\n[1] 1\n[1] 2\n[1] 3\n[1] 6\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n\
    [1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n[1] 24\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n\
    </cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n\
    <cell>", "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns a list of all numbers from 1 to n that are divisible by 3.\n\n\
    Examples\nsolution <- function(n) {\n  return(seq(1, n, 3))\n}\nsolution(10)\n\
    solution(20)\nsolution(30)\nsolution(40)\nsolution(50)\nsolution(60)\nsolution(70)\n\
    solution(80)\nsolution(90)\nsolution(100)\nsolution(200)\nsolution(300)\nsolution(400)\n\
    solution(500)\nsolution(600)\nsolution(700)\nsolution(800)\nsolution(900)\nsolution(1000)\n\
    solution(2000)\nsolution(3000)\nsolution(4000)\nsolution(5000)\nsolution(6000)\n\
    solution(7000)\nsolution(8000)\nsolution(9000)\nsolution(10000)\nsolution(20000)\n\
    solution(30000)\nsolution(40000)\nsolution(50000)\nsolution(60000)\nsolution(70000)\n\
    solution(80000)\nsolution(90000)\nsolution(100000)\nsolution(200000)\nsolution(300000)\n\
    solution(400000)\nsolution(500000)\nsolution(600000)\nsolution(700000)\nsolution(800000)\n\
    solution(900000)\nsolution(1000000)\nsolution(2000000)\nsolution(3000000)\nsolution(4000000)\n\
    solution(5000000)\nsolution(6000000)\nsolution(7000000)\nsolution(8000000)\nsolution(9000000)\n\
    solution(100000000)\nsolution(200000000)\nsolution(300000000)\nsolution(400000000)\n\
    solution(500000000)\nsolution(600000000)\nsolution(700000000)\nsolution(800000000)\n\
    solution(900000000)\nsolution(1000000000)\nsolution(2000000000)\nsolution(3000000000)\n\
    solution(4000000000)\nsolution(5000000000)\nsolution(6000000000)\nsolution(7000000000)\n\
    solution(8000000000)\nsolution(9000000000)\nsolution(10000000000)\nsolution(20000000000)\n\
    solution(30000000000)\nsolution(40000000000)\nsolution(50000000000)\nsolution(60000000000)\n\
    solution(70000000000)\nsolution(80000000000)\nsolution(90000000000)\nsolution(100000000000)\n\
    solution(20000000000)\nsolution(30000000000)\nsolution(40000000000)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ a list of all numbers between two given numbers, including both numbers. Use\
    \ the range function.\n\nFor example, range(2, 8) returns [2, 3, 4, 5, 6, 7, 8].\
    \ range(2, 10, 2) returns [2, 4, 6, 8].\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[lst%%2 != 0])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n \
    \ sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nQuestion 5\nWrite a function that returns a list of all numbers between\
    \ 1 and 100 that are divisible by 3.\n\nFor example, if the given list is [12,\
    \ 33, 34, 45, 56, 67, 78, 89, 100], your function should return [12, 34, 56].\n\
    \nYour function should return a list of numbers, not a single number.\n\n\n</text>\n\
    <cell>", "\n  sum(lst[seq(1,length(lst),2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nQuestion 7\nWrite a function that returns the product of the\
    \ even elements that are in odd positions in a list.\n\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nQuestion 9\nWrite a function that returns the product of the even elements\
    \ that are in odd positions.\n\nExamples\nsolution <- function(lst) {\n  prod(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\n\
    solution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n\
    [1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] 24\nsolution(lst)\n[1] ", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n\
    </cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nProblem 3\nUse a list comprehension to create\
    \ a list of all numbers between 1 and 100 (both included) that have exactly three\
    \ digits.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nQuestion 7\nWrite a function that returns the\
    \ product of the even elements that are in odd positions.\n\nExamples\nsolution\
    \ <- function(lst) {\n  prod(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[lst%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that returns a list of all the numbers from 1 to n that are divisible by 3.\n\
    \n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nQuestion 9\nWrite a function that returns the\
    \ sum of the numbers in the list below but only including even numbers.\n\n\n\
    </text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n</cell>\n<cell>\nsolution <-\
    \ function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nQuestion 10\nWrite a function that returns the sum of the numbers\
    \ in the list below but only including even numbers that are divisible by 3.\n\
    \n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n</cell>\n<cell>\nsolution\
    \ <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nQuestion 11\nWrite a function that returns the\
    \ sum of the numbers in the list below but only including even numbers that are\
    \ divisible by 3 or 5.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n\
    </cell>\n<cell>\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 12\nWrite a function\
    \ that returns the sum of the numbers in the list below but only including even\
    \ numbers that are divisible by 3 or 5.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n\
    </cell>\n<cell>\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 13\nWrite a function\
    \ that returns the sum of the numbers in the list below but only including even\
    \ numbers that are divisible by 3 or 5.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n\
    </cell>\n<cell>\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 14\nWrite a function\
    \ that returns the sum of the numbers in the list below but only including even\
    \ numbers that are divisible by ", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n\
    </cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1,length(lst),2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[lst%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the product of the even elements that are in odd positions.\n\n\
    Examples\nsolution <- function(lst) {\n  prod(lst[seq(2, length(lst), 2)])\n}\n\
    solution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq(1,length(lst),2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns a list of all numbers between 1 and 100 (both included) which have\
    \ exactly three digits.\n\n\n</text>\n<cell>", "\n  sum(lst[lst%%2 != 0])\n}\n\
    solution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns a list of all numbers\
    \ from 1 to n that are divisible by 3.\n\nExamples\nsolution <- function(n) {\n\
    \  seq(1, n)\n}\nsolution(10)\nsolution(100)\nsolution(1000)\nsolution(10000)\n\
    solution(100000)\nsolution(1000000)\nsolution(10000000)\nsolution(100000000)\n\
    solution(1000000000)\nsolution(10000000000)\nsolution(100000000000)\nsolution(1000000000000)\n\
    solution(10000000000000)\nsolution(100000000000000)\nsolution(1000000000000000)\n\
    solution(10000000000000000)\nsolution(100000000000000000)\nsolution(1000000000000000000)\n\
    solution(10000000000000000000)\nsolution(100000000000000000000)\nsolution(1000000000000000000000)\n\
    solution(10000000000000000000000)\nsolution(100000000000000000000000)\nsolution(1000000000000000000000000)\n\
    solution(10000000000000000000000000)\nsolution(100000000000000000000000000)\n\
    solution(1000000000000000000000000000)\nsolution(10000000000000000000000000000)\n\
    solution(100000000000000000000000000000)\nsolution(1000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000)\nsolution(100000000000000000000000000000000)\n\
    solution(1000000000000000000000000000000000)\nsolution(10000000000000000000000000000000000)\n\
    solution(100000000000000000000000000000000000)\nsolution(1000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000)\nsolution(100000000000000000000000000000000000000)\n\
    solution(1000000000000000000000000000000000000000)\nsolution(10000000000000000000000000000000000000000)\n\
    solution(100000000000000000000000000000000000000000)\nsolution(1000000000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000000000)\nsolution(100000000000000000000000000000000000000000000)\n\
    solution(1000000000000000000000000000000000000000000000)\nsolution(10000000000000000000000000000000000000000000000)\n\
    solution(100000000000000000000000000000000000000000000000)\nsolution(1000000000000000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000000000000000)\nsolution(100000000000000000000000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000000000000000)\nsolution(100000000000000000000000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000000000000000)\nsolution(1000000000000000000000000000000000000000000000000)\n\
    solution(100000000000000000000000000000000000000000)\nsolution(10000000000000000000000000000000000000000)\n\
    solution(10000000000000000000000000000000000000000)\nsolution(10000000000000000000000000000000000000000)\n\
    solution(1000000000000000000", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\
    solution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq(1,length(lst),2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that returns the product of the even elements that are in odd positions.\n\
    \nExamples\nsolution <- function(lst) {\n  prod(lst[seq(2, length(lst), 2)])\n\
    }\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nProblem 8\nImplement a function that returns a\
    \ list of all numbers between 1 and n that contain exactly two digits.\n\n\n</text>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[lst%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that returns a list of all numbers between 1 and n that are divisible by 3.\n\
    \nFor example, given n = 10, the function should return [3, 6, 9, 12, 15].\n\n\
    Assume that n is always positive.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n \
    \ sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1,length(lst),2)])\n}\n\nsolution(lst)", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n\
    </cell>\n<text>\nQuestion 7\nWrite a function that returns the product of the\
    \ even elements that are in odd positions.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion\
    \ 9\nWrite a function that returns the product of all the even elements that are\
    \ in odd positions.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns a list\
    \ of all numbers between 1 and n that are divisible by k.\n\n\n</text>\n<cell>",
  "\n  sum(lst[seq(1,length(lst),2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nQuestion\
    \ 7\nWrite a function that returns the sum of the numbers in the list below but\
    \ only including even numbers.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n\
    </cell>\n<cell>\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nQuestion\
    \ 8\nWrite a function that returns the sum of the numbers in the list below but\
    \ only including even numbers that are divisible by 3.\n\n\n</text>\n<cell>\n\
    lst <- c(1,2,3,4,5,6,7,8,9,10)\n</cell>\n<cell>\nsolution <- function(lst) {\n\
    \  sum(lst[seq(2, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <cell>\nlst\n</cell>\n<text>\nQuestion 9\nWrite a function that returns the sum\
    \ of the numbers in the list below but only including even numbers that are divisible\
    \ by 3 or 5.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n</cell>\n<cell>\n\
    solution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nQuestion 10\nWrite\
    \ a function that returns the sum of the numbers in the list below but only including\
    \ even numbers that are divisible by 3 or 5.\n\n\n</text>\n<cell>\nlst <- c(1,2,3,4,5,6,7,8,9,10)\n\
    </cell>\n<cell>\nsolution <- function(lst) {\n  sum(lst[seq(2, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nQuestion\
    \ 11\nWrite a function that returns the sum of the numbers in the list below but\
    \ only including even numbers that are divisible by 3 or 5.\n\n\n</text>\n<cell>\n\
    lst <- c(1,2,3,4,5,6,7,8,9,10)\n</cell>\n<cell>\nsolution <- function(lst) {\n\
    \  sum(lst[seq", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the product of the even elements that are in odd positions.\n\n\
    \n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns a list of all the numbers from\
    \ 1 to n that are divisible by k.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1,length(lst),2)%%2==1])\n\
    }\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(lst)\n</cell>\n<text>\nProblem 8\nImplement a function that returns a\
    \ list consisting of the first n prime numbers. \nIf n is greater than the length\
    \ of the list, then return an empty list.\nIf n is less than or equal to 0, then\
    \ return an empty list.\nThe first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29.\nThe first 10 prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nQuestion 7\nWrite a function\
    \ that returns the product of the even elements in a list.\nExamples\nsolution\
    \ <- function(lst) {\n  prod(lst[seq(2, length(lst), 2)])\n}\nsolution(lst)",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\nsolution(lst)", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\nsolution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\
    solution(lst)\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\n\n</text>\n<cell>", "\n  sum(lst[lst%%2\
    \ != 0])\n}\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the product of the even elements in a list. Except the\
    \ number 1 can be included as an element of the product. \nFor example :\n\nproduct([1,2,3,4])\
    \ = 24\nproduct([1,4,5,6,7]) = 24\nproduct([1,2]) = 3\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
