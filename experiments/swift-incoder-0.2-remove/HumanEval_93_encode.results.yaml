language: swift
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter + String(letter)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6tqfuar2.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp6tqfuar2.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp6tqfuar2.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter + String(letter)\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)!\n        let replacement = english[index\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hn1xmte.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp5hn1xmte.swift:12:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter\n        } else {\n       \
    \     result += letter.lowercased()\n        }\n    }\n    for letter in result\
    \ {\n        if letter.hasPrefix(\"A\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"E\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"I\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"O\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"U\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"a\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"e\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"i\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"o\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"u\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"A\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"E\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"I\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"O\") {\n            letter = letter.removeFirst()\n\
    \        }\n        if letter.hasPrefix(\"U\") {\n            letter = letter.removeFirst()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9d5b4e8n.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp9d5b4e8n.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp9d5b4e8n.swift:18:19:\
    \ error: value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    A\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:19:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp9d5b4e8n.swift:19:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:21:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    E\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:22:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp9d5b4e8n.swift:22:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:24:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    I\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:25:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp9d5b4e8n.swift:25:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:27:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    O\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp9d5b4e8n.swift:28:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for letter in result {\n        if letter.hasPrefix(\"A\") {\n           \
    \ letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"E\"\
    ) {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    I\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    O\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    U\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    a\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    e\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    o\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    u\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    A\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    E\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    I\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    O\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    U\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    a\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    e\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    o\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    u\") {\n            letter = letter.removeFirst()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y0h813s.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2y0h813s.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2y0h813s.swift:18:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    A\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp2y0h813s.swift:19:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp2y0h813s.swift:19:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp2y0h813s.swift:21:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    E\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp2y0h813s.swift:22:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp2y0h813s.swift:22:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp2y0h813s.swift:24:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    I\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp2y0h813s.swift:25:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmp2y0h813s.swift:25:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp2y0h813s.swift:27:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    O\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmp2y0h813s.swift:28:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n        "
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter\n        } else if letter.isLowercase\
    \ {\n            result += letter.lowercased()\n        } else {\n           \
    \ result += letter.uppercased()\n        }\n    }\n    for vowel in \"aeiou\"\
    \ {\n        let index = result.index(of: vowel)\n        let replacement = result.index(index,\
    \ offsetBy: 2)\n        if replacement != nil {\n            let replacementString\
    \ = String(result[replacement!])\n            result = result.replacingCharacters(in:\
    \ Range(uncheckedBounds: (index!, replacement!)), with: replacementString)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt1u0gg7n.swift:12:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n/tmp/tmpt1u0gg7n.swift:20:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: vowel)\n\
    \                           ^\n/tmp/tmpt1u0gg7n.swift:20:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: vowel)\n                     \
    \      ^~~~~\n                           firstIndex\n/tmp/tmpt1u0gg7n.swift:21:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpt1u0gg7n.swift:21:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmpt1u0gg7n.swift:21:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmpt1u0gg7n.swift:24:29:\
    \ error: value of type 'String' has no member 'replacingCharacters'\n        \
    \    result = result.replacingCharacters(in: Range(uncheckedBounds: (index!, replacement!)),\
    \ with: replacementString)\n                     ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiouAEIOU\" {\n        let index = result.index(of: vowel)\n\
    \        if index != nil {\n            let twoLettersBefore = result[index!.advanced(by:\
    \ 2)!]\n            let replacement = englishAlphabet[twoLettersBefore]\n    \
    \        result += replacement\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpn7fgjq.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnpn7fgjq.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnpn7fgjq.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmpnpn7fgjq.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpnpn7fgjq.swift:20:50:\
    \ error: value of type 'String.Index' has no member 'advanced'\n            let\
    \ twoLettersBefore = result[index!.advanced(by: 2)!]\n                       \
    \                   ~~~~~~ ^~~~~~~~\n/tmp/tmpnpn7fgjq.swift:21:31: error: cannot\
    \ find 'englishAlphabet' in scope\n            let replacement = englishAlphabet[twoLettersBefore]\n\
    \                              ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += String(letter).swapcase()\n    \
    \    } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl13ems2m.swift:12:38: error: value of type 'String' has no member\
    \ 'swapcase'\n            result += String(letter).swapcase()\n              \
    \        ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpl13ems2m.swift:14:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var result = \"\"\n    for letter in message {\n        let index = letters.index(of:\
    \ letter)\n        let replacement = letters[(index + 2) % letters.count]\n  \
    \      result += letters.substring(from: index) + replacement\n    }\n    for\
    \ vowel in vowels {\n        let index = letters.index(of: vowel)\n        result\
    \ += letters[(index + 2) % letters.count]\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgpv6n0v3.swift:13:29: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = letters.index(of: letter)\n      \
    \                      ^\n/tmp/tmpgpv6n0v3.swift:13:29: note: use 'firstIndex(of:)'\
    \ instead\n        let index = letters.index(of: letter)\n                   \
    \         ^~~~~\n                            firstIndex\n/tmp/tmpgpv6n0v3.swift:14:36:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        let replacement = letters[(index + 2) % letters.count]\n    \
    \                               ^\n/tmp/tmpgpv6n0v3.swift:15:27: error: value\
    \ of type 'String' has no member 'substring'\n        result += letters.substring(from:\
    \ index) + replacement\n                  ~~~~~~~ ^~~~~~~~~\n/tmp/tmpgpv6n0v3.swift:18:29:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = letters.index(of: vowel)\n                            ^\n/tmp/tmpgpv6n0v3.swift:18:29:\
    \ note: use 'firstIndex(of:)' instead\n        let index = letters.index(of: vowel)\n\
    \                            ^~~~~\n                            firstIndex\n/tmp/tmpgpv6n0v3.swift:19:26:\
    \ error: no exact matches in call to subscript \n        result += letters[(index\
    \ + 2) % letters.count]\n                         ^\n/tmp/tmpgpv6n0v3.swift:19:26:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n        result += letters[(index + 2) % letters.count]\n      \
    \                   ^\n/tmp/tmpgpv6n0v3.swift:19:26: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n        result\
    \ += letters[(index + 2) % letters.count]\n                         ^\n/tmp/tmpgpv6n0v3.swift:19:28:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n        result += letters[(index + 2) % letters.count]\n            \
    \               ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    for letter in result {\n        switch letter {\n        case \"a\":\n  \
    \      case \"e\":\n        case \"i\":\n        case \"o\":\n        case \"\
    u\":\n            result += letter\n        default:\n            result += letter\n\
    \        }\n    }\n    for letter in result {\n        switch letter {\n     \
    \   case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\"\
    :\n        case \"u\":\n            result += letter\n        default:\n     \
    \       result += letter\n        }\n    }\n    for letter in result {\n     \
    \   switch letter {\n        case \"a\":\n        case \"e\":\n        case \"\
    i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch letter {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n        case\
    \ \"o\":\n        case \"u\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph9pvts1x.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmph9pvts1x.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:36:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:37:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:38:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:39:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:48:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)!\n        let replacement = english[index\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyrejfw10.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmpyrejfw10.swift:12:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += String(letter).swapcase()\n    \
    \    } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpl13ems2m.swift:12:38: error: value of type 'String' has no member\
    \ 'swapcase'\n            result += String(letter).swapcase()\n              \
    \        ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpl13ems2m.swift:14:23: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpis4m8csi.swift:23:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48n68v9t.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp48n68v9t.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:31:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for\
    \ letter in message {\n        let index = vowels.indexOf(letter)\n        if\
    \ index != nil {\n            let vowel = vowels[index]\n            let index\
    \ = vowels.indexOf(vowel, index! + 1)\n            if index != nil {\n       \
    \         result += vowel\n            } else {\n                result += vowel\n\
    \            }\n        } else {\n            result += letter\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_qbe25f0.swift:12:28: error: value of type 'String' has no member\
    \ 'indexOf'\n        let index = vowels.indexOf(letter)\n                    ~~~~~~\
    \ ^~~~~~~\n/tmp/tmp_qbe25f0.swift:15:32: error: value of type 'String' has no\
    \ member 'indexOf'\n            let index = vowels.indexOf(vowel, index! + 1)\n\
    \                        ~~~~~~ ^~~~~~~\n/tmp/tmp_qbe25f0.swift:22:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercaseString()\n       \
    \ } else {\n            result += letter.uppercaseString()\n        }\n    }\n\
    \    for letter in result {\n        if letter.hasPrefix(\"A\") {\n          \
    \  letter = \"B\"\n        } else if letter.hasPrefix(\"B\") {\n            letter\
    \ = \"A\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpizr5b65d.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpizr5b65d.swift:12:30:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += letter.lowercaseString()\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpizr5b65d.swift:14:30: error: value of type 'Character' has no member 'uppercaseString'\n\
    \            result += letter.uppercaseString()\n                      ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpizr5b65d.swift:18:19: error: value of type 'Character'\
    \ has no member 'hasPrefix'\n        if letter.hasPrefix(\"A\") {\n          \
    \ ~~~~~~ ^~~~~~~~~\n/tmp/tmpizr5b65d.swift:19:13: error: cannot assign to value:\
    \ 'letter' is a 'let' constant\n            letter = \"B\"\n            ^~~~~~\n\
    /tmp/tmpizr5b65d.swift:20:26: error: value of type 'Character' has no member 'hasPrefix'\n\
    \        } else if letter.hasPrefix(\"B\") {\n                  ~~~~~~ ^~~~~~~~~\n\
    /tmp/tmpizr5b65d.swift:21:13: error: cannot assign to value: 'letter' is a 'let'\
    \ constant\n            letter = \"A\"\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for\
    \ letter in message {\n        let index = vowels.indexOf(letter)\n        if\
    \ index != nil {\n            let twoLetters = vowels[index! + 1]\n          \
    \  let replacement = vowels[index!]\n            let replacementIndex = vowels.indexOf(replacement)\n\
    \            if replacementIndex != nil {\n                result += replacement\n\
    \            } else {\n                result += twoLetters\n            }\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1w5wames.swift:12:28: error: value of type 'String' has no member\
    \ 'indexOf'\n        let index = vowels.indexOf(letter)\n                    ~~~~~~\
    \ ^~~~~~~\n/tmp/tmp1w5wames.swift:16:43: error: value of type 'String' has no\
    \ member 'indexOf'\n            let replacementIndex = vowels.indexOf(replacement)\n\
    \                                   ~~~~~~ ^~~~~~~\n/tmp/tmp1w5wames.swift:23:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpis4m8csi.swift:23:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercaseString)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp82lg55hd.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp82lg55hd.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp82lg55hd.swift:18:25: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ = result.replacingOccurrences(of: vowel, with: vowel.lowercaseString)\n    \
    \             ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp82lg55hd.swift:18:69: error:\
    \ value of type 'Character' has no member 'lowercaseString'\n        result =\
    \ result.replacingOccurrences(of: vowel, with: vowel.lowercaseString)\n      \
    \                                                        ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    for letter in result {\n        switch letter {\n        case \"a\":\n  \
    \      case \"e\":\n        case \"i\":\n        case \"o\":\n        case \"\
    u\":\n            result += letter\n        default:\n            result += letter\n\
    \        }\n    }\n    for letter in result {\n        switch letter {\n     \
    \   case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\"\
    :\n        case \"u\":\n            result += letter\n        default:\n     \
    \       result += letter\n        }\n    }\n    for letter in result {\n     \
    \   switch letter {\n        case \"a\":\n        case \"e\":\n        case \"\
    i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch letter {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n        case\
    \ \"o\":\n        case \"u\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph9pvts1x.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmph9pvts1x.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:36:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:37:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:38:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:39:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:48:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpil8kr_39.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpil8kr_39.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter + String(letter)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6tqfuar2.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp6tqfuar2.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp6tqfuar2.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter + String(letter)\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            letter = String(letter).swapCase()\n       \
    \ }\n        if letter.hasPrefix(\"a\") {\n            letter = String(letter).replaceAll(\"\
    a\", \"e\")\n        }\n        if letter.hasPrefix(\"e\") {\n            letter\
    \ = String(letter).replaceAll(\"e\", \"a\")\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = String(letter).replaceAll(\"i\", \"o\")\n       \
    \ }\n        if letter.hasPrefix(\"o\") {\n            letter = String(letter).replaceAll(\"\
    o\", \"i\")\n        }\n        if letter.hasPrefix(\"u\") {\n            letter\
    \ = String(letter).replaceAll(\"u\", \"a\")\n        }\n        if letter.hasPrefix(\"\
    y\") {\n            letter = String(letter).replaceAll(\"y\", \"a\")\n       \
    \ }\n        if letter.hasPrefix(\"a\") {\n            letter = String(letter).replaceAll(\"\
    a\", \"e\")\n        }\n        if letter.hasPrefix(\"e\") {\n            letter\
    \ = String(letter).replaceAll(\"e\", \"a\")\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = String(letter).replaceAll(\"i\", \"o\")\n       \
    \ }\n        if letter.hasPrefix(\"o\") {\n            letter = String(letter).replaceAll(\"\
    o\", \"i\")\n        }\n        if letter.hasPrefix(\"u\") {\n            letter\
    \ = String(letter).replaceAll(\"u\", \"a\")\n        }\n        if letter.hasPrefix(\"\
    y\") {\n            letter = String(letter).replaceAll(\"y\", \"a\")\n       \
    \ }\n        result += letter\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdw48qnh1.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpdw48qnh1.swift:12:13:\
    \ error: cannot assign to value: 'letter' is a 'let' constant\n            letter\
    \ = String(letter).swapCase()\n            ^~~~~~\n/tmp/tmpdw48qnh1.swift:12:37:\
    \ error: value of type 'String' has no member 'swapCase'\n            letter =\
    \ String(letter).swapCase()\n                     ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpdw48qnh1.swift:14:19:\
    \ error: value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    a\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmpdw48qnh1.swift:15:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = String(letter).replaceAll(\"\
    a\", \"e\")\n            ^~~~~~\n/tmp/tmpdw48qnh1.swift:15:37: error: value of\
    \ type 'String' has no member 'replaceAll'\n            letter = String(letter).replaceAll(\"\
    a\", \"e\")\n                     ~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdw48qnh1.swift:17:19:\
    \ error: value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    e\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmpdw48qnh1.swift:18:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = String(letter).replaceAll(\"\
    e\", \"a\")\n            ^~~~~~\n/tmp/tmpdw48qnh1.swift:18:37: error: value of\
    \ type 'String' has no member 'replaceAll'\n            letter = String(letter).replaceAll(\"\
    e\", \"a\")\n                     ~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdw48qnh1.swift:20:19:\
    \ error: value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    i\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmpdw48qnh1.swift:21:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = String(letter).replaceAll(\"\
    i\", \"o\")\n            ^~~~~~\n/tmp/tmpdw48qnh1.swift:21:37: error: value of\
    \ type 'String' has no member 'replaceAll'\n            letter = String(letter).replaceAll(\"\
    i\", \"o\")\n                     ~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdw48qnh1.swift:23:19:\
    \ error: value of"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for letter in result {\n        if letter.hasPrefix(\"A\") {\n           \
    \ letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"E\"\
    ) {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    I\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    O\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    U\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    a\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    e\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    i\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    o\") {\n            letter = letter.removeFirst()\n        }\n        if letter.hasPrefix(\"\
    u\") {\n            letter = letter.removeFirst()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph1wgr50k.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmph1wgr50k.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmph1wgr50k.swift:18:19: error:\
    \ value of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    A\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmph1wgr50k.swift:19:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmph1wgr50k.swift:19:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmph1wgr50k.swift:21:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    E\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmph1wgr50k.swift:22:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmph1wgr50k.swift:22:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmph1wgr50k.swift:24:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    I\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmph1wgr50k.swift:25:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n            letter = letter.removeFirst()\n\
    \            ^~~~~~\n/tmp/tmph1wgr50k.swift:25:29: error: value of type 'Character'\
    \ has no member 'removeFirst'\n            letter = letter.removeFirst()\n   \
    \                  ~~~~~~ ^~~~~~~~~~~\n/tmp/tmph1wgr50k.swift:27:19: error: value\
    \ of type 'Character' has no member 'hasPrefix'\n        if letter.hasPrefix(\"\
    O\") {\n           ~~~~~~ ^~~~~~~~~\n/tmp/tmph1wgr50k.swift:28:13: error: cannot\
    \ assign to value: 'letter' is a 'let' constant\n        "
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for\
    \ char in message {\n        let index = vowels.characters.index(of: char)\n \
    \       if index != nil {\n            let vowel = vowels[index!]\n          \
    \  let index = vowels.characters.index(of: vowel, offsetBy: 2)\n            if\
    \ index != nil {\n                result += vowels[index!]\n            } else\
    \ {\n                result += vowel\n            }\n        } else {\n      \
    \      result += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjxuqqyuj.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n        let index = vowels.characters.index(of: char)\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjxuqqyuj.swift:12:39: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = vowels.characters.index(of:\
    \ char)\n                                      ^\n/tmp/tmpjxuqqyuj.swift:12:39:\
    \ note: use 'firstIndex(of:)' instead\n        let index = vowels.characters.index(of:\
    \ char)\n                                      ^~~~~\n                       \
    \               firstIndex\n/tmp/tmpjxuqqyuj.swift:15:43: error: no exact matches\
    \ in call to instance method 'index'\n            let index = vowels.characters.index(of:\
    \ vowel, offsetBy: 2)\n                                          ^\n/tmp/tmpjxuqqyuj.swift:15:43:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n            let index = vowels.characters.index(of: vowel, offsetBy: 2)\n\
    \                                          ^\n/tmp/tmpjxuqqyuj.swift:15:43: note:\
    \ candidate has partially matching parameter list (String.Index, offsetBy: Int)\n\
    \            let index = vowels.characters.index(of: vowel, offsetBy: 2)\n   \
    \                                       ^\nSwift.Collection:3:28: note: candidate\
    \ '(String.Element) -> String.Index?' (aka '(Character) -> Optional<String.Index>')\
    \ requires 1 argument, but 2 were provided\n    @inlinable public func index(of\
    \ element: Self.Element) -> Self.Index?\n                           ^\n/tmp/tmpjxuqqyuj.swift:15:43:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n            let index = vowels.characters.index(of: vowel, offsetBy: 2)\n\
    \                                          ^\n/tmp/tmpjxuqqyuj.swift:19:27: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                result += vowel\n                          ^"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrzvxuv3.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpnrzvxuv3.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter\n        } else {\n     \
    \       result += letter.lowercased()\n        }\n    }\n    for letter in result\
    \ {\n        if letter == \"A\" || letter == \"E\" || letter == \"I\" || letter\
    \ == \"O\" || letter == \"U\" {\n            result += \"a\"\n        } else if\
    \ letter == \"B\" || letter == \"F\" || letter == \"J\" || letter == \"K\" ||\
    \ letter == \"L\" || letter == \"M\" || letter == \"N\" || letter == \"P\" ||\
    \ letter == \"R\" || letter == \"S\" || letter == \"T\" || letter == \"V\" ||\
    \ letter == \"W\" || letter == \"X\" || letter == \"Y\" || letter == \"Z\" {\n\
    \            result += \"b\"\n        } else if letter == \"C\" || letter == \"\
    G\" || letter == \"K\" || letter == \"M\" || letter == \"O\" || letter == \"Q\"\
    \ || letter == \"S\" || letter == \"T\" || letter == \"U\" || letter == \"W\"\
    \ || letter == \"X\" || letter == \"Y\" || letter == \"Z\" {\n            result\
    \ += \"c\"\n        } else if letter == \"D\" || letter == \"H\" || letter ==\
    \ \"J\" || letter == \"L\" || letter == \"N\" || letter == \"P\" || letter ==\
    \ \"R\" || letter == \"T\" || letter == \"V\" || letter == \"X\" || letter ==\
    \ \"Z\" {\n            result += \"d\"\n        } else if letter == \"E\" || letter\
    \ == \"J\" || letter == \"K\" || letter == \"L\" || letter == \"M\" || letter\
    \ == \"N\" || letter == \"P\" || letter == \"R\" || letter == \"S\" || letter\
    \ == \"T\" || letter == \"V\" || letter == \"W\" || letter == \"X\" || letter\
    \ == \"Y\" || letter == \"Z\" {\n            result += \"e\"\n        } else if\
    \ letter == \"F\" || letter == \"L\" || letter == \"M\" || letter == \"N\" ||\
    \ letter == \"P\" || letter == \"R\" || letter == \"S\" || letter == \"T\" ||\
    \ letter == \"V\" || letter == \"W\" || letter == \"X\" || letter == \"Y\" ||\
    \ letter == \"Z\" {\n            result += \"f\"\n        } else if letter ==\
    \ \"G\" || letter == \"N\" || letter == \"P\" || letter == \"R\" || letter ==\
    \ \"S\" || letter == \"T\" || letter == \"V\" || letter == \"W\" || letter ==\
    \ \"X\" || letter == \"Y\" || letter == \"Z\" {\n            result += \"g\"\n\
    \        } else if letter == \"H\" || letter == \"O\" || letter == \"Q\" || letter\
    \ == \"S\" || letter == \"T\" || letter == \"U\" || letter == \"W\" || letter\
    \ == \"X\" || letter == \"Y\" || letter == \"Z\" {\n            result += \"h\"\
    \n        } else if letter == \"I\" || letter == \"P\" || letter == \"R\" || letter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9i7d4ixg.swift:34:76: error: expected '{' after 'if' condition\n\
    \        } else if letter == \"I\" || letter == \"P\" || letter == \"R\" || letter\n\
    \                                                                           ^\n\
    /tmp/tmp9i7d4ixg.swift:54:84: error: expected '}' at end of brace statement\n\
    assert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
    \ wRkTg\")\n                                                                 \
    \                  ^\n/tmp/tmp9i7d4ixg.swift:8:40: note: to match this opening\
    \ '{'\nfunc encode(message: String) -> String {\n                            \
    \           ^\n/tmp/tmp9i7d4ixg.swift:12:23: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            result += letter\n\
    \                      ^\n/tmp/tmp9i7d4ixg.swift:34:70: error: cannot convert\
    \ value of type 'Character' to expected argument type 'Bool'\n        } else if\
    \ letter == \"I\" || letter == \"P\" || letter == \"R\" || letter\n          \
    \                                                           ^\n/tmp/tmp9i7d4ixg.swift:38:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmabfw07w.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmabfw07w.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiouAEIOU\" {\n        let index = result.index(of: vowel)\n\
    \        let replacement = result.index(index, offsetBy: 2)\n        result =\
    \ result.substring(to: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpfjz81rem.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfjz81rem.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfjz81rem.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmpfjz81rem.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpfjz81rem.swift:19:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpfjz81rem.swift:18:13:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n        let index = result.index(of: vowel)\n        \
    \    ^\n        guard                               else { return <#default value#>\
    \ }\n/tmp/tmpfjz81rem.swift:18:28: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        let index = result.index(of:\
    \ vowel)\n                           ^\n                                     \
    \       ?? <#default value#>\n/tmp/tmpfjz81rem.swift:18:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n            \
    \                               !\n/tmp/tmpfjz81rem.swift:19:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let replacement = result.index(index, offsetBy: 2)\n                   \
    \                    ^\n                                             ?? <#default\
    \ value#>\n/tmp/tmpfjz81rem.swift:19:40: note: force-unwrap using '!' to abor"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n            result += \"B\"\n        case \"h\":\n     \
    \   case \"j\":\n        case \"k\":\n        case \"l\":\n        case \"m\"\
    :\n        case \"n\":\n        case \"p\":\n        case \"q\":\n        case\
    \ \"r\":\n        case \"s\":\n        case \"t\":\n        case \"v\":\n    \
    \    case \"w\":\n        case \"x\":\n        case \"y\":\n        case \"z\"\
    :\n            result += \"C\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0s2ae3_j.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp0s2ae3_j.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"l\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp0s2ae3_j.swift:28:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var result\
    \ = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += replacement\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz3pcdnbj.swift:12:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = alphabet.index(of: letter)!\n    \
    \                         ^\n/tmp/tmpz3pcdnbj.swift:12:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = alphabet.index(of: letter)!\n                 \
    \            ^~~~~\n                             firstIndex\n/tmp/tmpz3pcdnbj.swift:13:36:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let replacement = alphabet[index + 2]\n                     \
    \              ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercased()\n        } else\
    \ {\n            result += letter.uppercased()\n        }\n    }\n    for vowel\
    \ in \"AEIOU\" {\n        let index = result.index(of: vowel)\n        if index\
    \ != nil {\n            let twoAheadIndex = index + 2\n            if twoAheadIndex\
    \ < result.count {\n                let twoAhead = result[index!]\n          \
    \      result[index!] = result[twoAheadIndex]\n                result[twoAheadIndex]\
    \ = twoAhead\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpj7rv6xj7.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpj7rv6xj7.swift:18:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpj7rv6xj7.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpj7rv6xj7.swift:20:33:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            let twoAheadIndex = index + 2\n                         \
    \       ^\n/tmp/tmpj7rv6xj7.swift:23:23: error: cannot assign through subscript:\
    \ subscript is get-only\n                result[index!] = result[twoAheadIndex]\n\
    \                ~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).replacingOccurrences(of: \"A\", with:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7pepkdx8.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp7pepkdx8.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmp7pepkdx8.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).replacingOccurrences(of: \"a\", with:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8idfpj95.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp8idfpj95.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n/tmp/tmp8idfpj95.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"a\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter + String(message.index(letter, offsetBy:\
    \ 2))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkrd19lnu.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpkrd19lnu.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpkrd19lnu.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpkrd19lnu.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpkrd19lnu.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpkrd19lnu.swift:19:53:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            result += letter + String(message.index(letter, offsetBy: 2))\n \
    \                                                   ^\n/tmp/tmpkrd19lnu.swift:19:32:\
    \ error: no exact matches in call to initializer \n            result += letter\
    \ + String(message.index(letter, offsetBy: 2))\n                             \
    \  ^\n/tmp/tmpkrd19lnu.swift:19:32: note: found candidate with type '(String.Index)\
    \ -> String'\n            result += letter + String(message.index(letter, offsetBy:\
    \ 2))\n                               ^\n/tmp/tmpkrd19lnu.swift:19:32: note: found\
    \ candidate with type '(String.Index, Int, Bool) -> String'\n            result\
    \ += letter + String(message.index(letter, offsetBy: 2))\n                   \
    \            ^\n/tmp/tmpkrd19lnu.swift:19:32: note: candidate has partially matching\
    \ parameter list (describing: String.Index)\n            result += letter + String(message.index(letter,\
    \ offsetBy: 2))\n                               ^\n/tmp/tmpkrd19lnu.swift:19:32:\
    \ note: candidate has partially matching parameter list (reflecting: String.Index)\n\
    \            result += letter + String(message.inde"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n  \
    \      if index != nil {\n            let twoAheadIndex = index + 2\n        \
    \    if twoAheadIndex < result.count {\n                result += result[twoAheadIndex]\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjor_73dj.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjor_73dj.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjor_73dj.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmpjor_73dj.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpjor_73dj.swift:20:33:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            let twoAheadIndex = index + 2\n                         \
    \       ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpis4m8csi.swift:23:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter\n        } else if letter.isLower()\
    \ {\n            result += letter\n        } else {\n            result += letter.lowercased()\n\
    \        }\n    }\n    for vowel in \"aeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        let replacement = result.index(index, offsetBy: 2)\n       \
    \ let replacementLetter = result[index].lowercased()\n        result = result.replacingCharacters(in:\
    \ NSRange(location: index, length: 1), with: replacementLetter)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpe3g2vlvk.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpe3g2vlvk.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpe3g2vlvk.swift:13:26:\
    \ error: value of type 'Character' has no member 'isLower'\n        } else if\
    \ letter.isLower() {\n                  ~~~~~~ ^~~~~~~\n/tmp/tmpe3g2vlvk.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpe3g2vlvk.swift:20:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpe3g2vlvk.swift:20:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpe3g2vlvk.swift:21:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpe3g2vlvk.swift:21:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmpe3g2vlvk.swift:21:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmpe3g2vlvk.swift:22:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacementLetter = result[index].lowercased()\n\
    \                                       ^\n/tmp/tmpe3g2vlvk.swift:22:40: note:\
    \ coalesce using '??' to provide "
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += String(letter).swapCase()\n      \
    \  } else {\n            result += String(letter)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9xqitqmg.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp9xqitqmg.swift:12:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += String(letter).swapCase()\n      \
    \  } else {\n            result += String(letter)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9xqitqmg.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp9xqitqmg.swift:12:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var encodedMessage = \"\"\n\
    \    for letter in message {\n        if letter in vowels {\n            encodedMessage\
    \ += letter\n        } else {\n            encodedMessage += vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: vowels.index(letter, offsetBy: 1))]\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwvhi9yun.swift:12:19: error: expected '{' after 'if' condition\n\
    \        if letter in vowels {\n                  ^\n/tmp/tmpwvhi9yun.swift:12:12:\
    \ error: cannot convert value of type 'Character' to expected condition type 'Bool'\n\
    \        if letter in vowels {\n           ^~~~~~\n/tmp/tmpwvhi9yun.swift:13:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            encodedMessage += letter\n                              ^\n/tmp/tmpwvhi9yun.swift:15:37:\
    \ error: subscript 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n\
    \            encodedMessage += vowels[vowels.index(vowels.startIndex, offsetBy:\
    \ vowels.index(letter, offsetBy: 1))]\n                                    ^\n\
    Swift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable public\
    \ subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\n/tmp/tmpwvhi9yun.swift:15:38: error:\
    \ instance method 'index(_:offsetBy:)' requires that 'String.Index' conform to\
    \ 'BinaryInteger'\n            encodedMessage += vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: vowels.index(letter, offsetBy: 1))]\n                            \
    \         ^\nSwift.Collection:3:17: note: where 'T' = 'String.Index'\n    public\
    \ func index<T>(_ i: Self.Index, offsetBy n: T) -> Self.Index where T : BinaryInteger\n\
    \                ^\n/tmp/tmpwvhi9yun.swift:15:93: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String.Index'\n            encodedMessage\
    \ += vowels[vowels.index(vowels.startIndex, offsetBy: vowels.index(letter, offsetBy:\
    \ 1))]\n                                                                     \
    \                       ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n        case \"A\":\n        case \"\
    E\":\n        case \"I\":\n        case \"O\":\n        case \"U\":\n        \
    \    result += letter\n        default:\n            result += letter.swapCase()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy5i_069q.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpy5i_069q.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:16:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpy5i_069q.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpy5i_069q.swift:24:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter + String(letter)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6tqfuar2.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp6tqfuar2.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp6tqfuar2.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp6tqfuar2.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter + String(letter)\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrzvxuv3.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpnrzvxuv3.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for\
    \ char in message {\n        let index = vowels.characters.index(of: char)\n \
    \       if index != nil {\n            let vowel = vowels[index]\n           \
    \ let index = vowels.characters.index(of: vowel, offsetBy: 2)\n            if\
    \ index != nil {\n                result += vowel\n            } else {\n    \
    \            result += vowel\n            }\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphv3myqte.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n        let index = vowels.characters.index(of: char)\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphv3myqte.swift:12:39: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = vowels.characters.index(of:\
    \ char)\n                                      ^\n/tmp/tmphv3myqte.swift:12:39:\
    \ note: use 'firstIndex(of:)' instead\n        let index = vowels.characters.index(of:\
    \ char)\n                                      ^~~~~\n                       \
    \               firstIndex\n/tmp/tmphv3myqte.swift:14:32: error: value of optional\
    \ type 'String.Index?' must be unwrapped to a value of type 'String.Index'\n \
    \           let vowel = vowels[index]\n                               ^\n/tmp/tmphv3myqte.swift:14:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let vowel = vowels[index]\n                             \
    \  ^\n                                     ?? <#default value#>\n/tmp/tmphv3myqte.swift:14:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            let vowel = vowels[index]\n                             \
    \  ^\n                                    !\n/tmp/tmphv3myqte.swift:15:43: error:\
    \ no exact matches in call to instance method 'index'\n            let index =\
    \ vowels.characters.index(of: vowel, offsetBy: 2)\n                          \
    \                ^\n/tmp/tmphv3myqte.swift:15:43: note: found candidate with type\
    \ '(String.Index, Int) -> String.Index'\n            let index = vowels.characters.index(of:\
    \ vowel, offsetBy: 2)\n                                          ^\n/tmp/tmphv3myqte.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += char\n                      ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter\n        } else {\n       \
    \     result += letter.lowercased()\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjksst9eo.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpjksst9eo.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)!\n        let replacement = english[index\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hn1xmte.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp5hn1xmte.swift:12:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n        result += String(letter).replacingOccurrences(of: \"a\", with:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gmmn42u.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmp5gmmn42u.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmp5gmmn42u.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"a\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    for letter in result {\n        switch letter {\n        case \"a\":\n  \
    \      case \"e\":\n        case \"i\":\n        case \"o\":\n        case \"\
    u\":\n            result += letter\n        default:\n            result += letter\n\
    \        }\n    }\n    for letter in result {\n        switch letter {\n     \
    \   case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\"\
    :\n        case \"u\":\n            result += letter\n        default:\n     \
    \       result += letter\n        }\n    }\n    for letter in result {\n     \
    \   switch letter {\n        case \"a\":\n        case \"e\":\n        case \"\
    i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch letter {\n        case \"a\"\
    :\n        case \"e\":\n        case \"i\":\n        case \"o\":\n        case\
    \ \"u\":\n            result += letter\n        default:\n            result +=\
    \ letter\n        }\n    }\n    for letter in result {\n        switch letter\
    \ {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n        case\
    \ \"o\":\n        case \"u\":\n            result += letter\n        default:\n\
    \            result += letter\n        }\n    }\n    for letter in result {\n\
    \        switch letter {\n        case \"a\":\n        case \"e\":\n        case\
    \ \"i\":\n        case \"o\":\n        case \"u\":\n            result += letter\n\
    \        default:\n            result += letter\n        }\n    }\n    for letter\
    \ in result {\n        switch letter {\n        case \"a\":\n        case \"e\"\
    :\n        case \"i\":\n        case \"o\":\n        case \"u\":\n           \
    \ result += letter\n        default:\n            result += letter\n        }\n\
    \    }\n    for letter in result {\n        switch \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph9pvts1x.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmph9pvts1x.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:36:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:37:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:38:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:39:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmph9pvts1x.swift:48:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48n68v9t.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp48n68v9t.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:31:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48n68v9t.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp48n68v9t.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:31:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmabfw07w.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmabfw07w.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += \"A\"\n       \
    \ case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n\
    \        case \"g\":\n        case \"h\":\n        case \"j\":\n        case \"\
    k\":\n        case \"l\":\n        case \"m\":\n        case \"n\":\n        case\
    \ \"p\":\n        case \"q\":\n        case \"r\":\n        case \"s\":\n    \
    \    case \"t\":\n        case \"v\":\n        case \"w\":\n        case \"x\"\
    :\n        case \"y\":\n        case \"z\":\n            result += \"B\"\n   \
    \     default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1gvg9p7a.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp1gvg9p7a.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"b\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"c\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"d\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:21:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"f\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:22:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"g\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:23:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"h\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"j\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"k\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp1gvg9p7a.swift:26:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 1)!]\n        result += String(letter).replacingOccurrences(of: \"a\", with:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2u9m_7l.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpz2u9m_7l.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 1)!]\n                          ^~~~~~~\n/tmp/tmpz2u9m_7l.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"a\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n  \
    \      let replacement = result.index(index, offsetBy: 2)\n        result = result.substring(to:\
    \ replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpawhn3rb5.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpawhn3rb5.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpawhn3rb5.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmpawhn3rb5.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpawhn3rb5.swift:19:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpawhn3rb5.swift:18:13:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n        let index = result.index(of: vowel)\n        \
    \    ^\n        guard                               else { return <#default value#>\
    \ }\n/tmp/tmpawhn3rb5.swift:18:28: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n        let index = result.index(of:\
    \ vowel)\n                           ^\n                                     \
    \       ?? <#default value#>\n/tmp/tmpawhn3rb5.swift:18:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n            \
    \                               !\n/tmp/tmpawhn3rb5.swift:19:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let replacement = result.index(index, offsetBy: 2)\n                   \
    \                    ^\n                                             ?? <#default\
    \ value#>\n/tmp/tmpawhn3rb5.swift:19:40: note: force-unwrap using '!' to abor"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += String(letter).swapCase()\n      \
    \  } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp4rh8i2i.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpp4rh8i2i.swift:12:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpp4rh8i2i.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n        case \"A\":\n        case \"\
    E\":\n        case \"I\":\n        case \"O\":\n        case \"U\":\n        \
    \    result += letter\n        default:\n            result += letter\n      \
    \  }\n    }\n    for letter in result {\n        switch letter {\n        case\
    \ \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n    \
    \    case \"u\":\n        case \"A\":\n        case \"E\":\n        case \"I\"\
    :\n        case \"O\":\n        case \"U\":\n            result += letter\n  \
    \      default:\n            result += letter\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxq19dw0c.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpxq19dw0c.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:16:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:30:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:31:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpxq19dw0c.swift:32:9:\
    \ error: 'case' l"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += String(letter).replacingOccurrences(of: \"A\", with:\
    \ replacement)\n        result += String(letter).replacingOccurrences(of: \"E\"\
    , with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"I\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"O\", with: replacement)\n        result += String(letter).replacingOccurrences(of:\
    \ \"U\", with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphrx8rckv.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmphrx8rckv.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n/tmp/tmphrx8rckv.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"A\", with: replacement)\n     \
    \             ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphrx8rckv.swift:14:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"E\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphrx8rckv.swift:15:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"I\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphrx8rckv.swift:16:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"O\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmphrx8rckv.swift:17:34:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ result += String(letter).replacingOccurrences(of: \"U\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)!\n        let replacement = english[index\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hn1xmte.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp5hn1xmte.swift:12:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpil8kr_39.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpil8kr_39.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.uppercaseString()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp02l0h3sv.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp02l0h3sv.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp02l0h3sv.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp02l0h3sv.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp02l0h3sv.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp02l0h3sv.swift:19:30:\
    \ error: value of type 'Character' has no member 'uppercaseString'\n         \
    \   result += letter.uppercaseString()\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzaf410u.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzaf410u.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzaf410u.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpuzaf410u.swift:19:38:\
    \ error: value of type 'String' has no member 'swapCase'\n            result +=\
    \ String(letter).swapCase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercaseString()\n       \
    \ } else {\n            result += letter.uppercaseString()\n        }\n    }\n\
    \    for vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n \
    \       let nextIndex = result.index(of: vowel, offsetBy: index! + 1)\n      \
    \  if nextIndex == nil {\n            result += vowel\n        } else {\n    \
    \        result += vowel.lowercaseString()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyntbtdlk.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpyntbtdlk.swift:12:30:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   result += letter.lowercaseString()\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpyntbtdlk.swift:14:30: error: value of type 'Character' has no member 'uppercaseString'\n\
    \            result += letter.uppercaseString()\n                      ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpyntbtdlk.swift:18:28: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = result.index(of: vowel)\n\
    \                           ^\n/tmp/tmpyntbtdlk.swift:18:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: vowel)\n                     \
    \      ^~~~~\n                           firstIndex\n/tmp/tmpyntbtdlk.swift:19:32:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = result.index(of: vowel, offsetBy: index! + 1)\n                          \
    \     ^\n/tmp/tmpyntbtdlk.swift:19:32: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = result.index(of:\
    \ vowel, offsetBy: index! + 1)\n                               ^\n/tmp/tmpyntbtdlk.swift:19:32:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = result.index(of: vowel, offsetBy: index! + 1)\n\
    \                               ^\n/tmp/tmpyntbtdlk.swift:19:32: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = result.index(of: vowel, offsetBy: index! + 1)\n                          \
    \     ^\n/tmp/tmpyntbtdlk.swift:19:32: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = result.index(of:\
    \ vowel, offsetBy: index! + 1)\n                               ^\n/tmp/tmpyntbtdlk.swift:19:64:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextI"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.uppercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk824cg6i.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpk824cg6i.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpk824cg6i.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpk824cg6i.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpk824cg6i.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpis4m8csi.swift:23:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n  \
    \      if index != nil {\n            let twoAheadIndex = index + 2\n        \
    \    if twoAheadIndex < result.count {\n                let twoAhead = result[twoAheadIndex]\n\
    \                result.replaceSubrange(index..<twoAheadIndex, with: vowel.lowercaseString)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxb7g7q4d.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpxb7g7q4d.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpxb7g7q4d.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmpxb7g7q4d.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpxb7g7q4d.swift:20:33:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            let twoAheadIndex = index + 2\n                         \
    \       ^\n/tmp/tmpxb7g7q4d.swift:23:75: error: value of type 'Character' has\
    \ no member 'lowercaseString'\n                result.replaceSubrange(index..<twoAheadIndex,\
    \ with: vowel.lowercaseString)\n                                             \
    \                       ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpxb7g7q4d.swift:23:40: error:\
    \ value of optional type 'String.Index?' must be unwrapped to a value of type\
    \ 'String.Index'\n                result.replaceSubrange(index..<twoAheadIndex,\
    \ with: vowel.lowercaseString)\n                                       ^\n/tmp/tmpxb7g7q4d.swift:23:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                result.replaceSubrange(index..<twoAheadIndex, with: vowel.lowercaseString)\n\
    \                                       ^\n                                  \
    \     (     ?? <#default value#>)\n/tmp/tmpxb7g7q4d.swift:23:40: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \        result.replaceSubrange(index..<twoAheadIndex, with: vowel.lowercaseString)\n\
    \                                       ^\n                                  \
    \      "
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let vowelIndex = vowels.index(of:\
    \ letter)\n        if index != nil {\n            let replacement = english[index!\
    \ + 2]\n            result += replacement\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkmnm57wv.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpkmnm57wv.swift:12:26:\
    \ error: cannot find 'vowels' in scope\n        let vowelIndex = vowels.index(of:\
    \ letter)\n                         ^~~~~~\n/tmp/tmpkmnm57wv.swift:14:31: error:\
    \ cannot find 'english' in scope\n            let replacement = english[index!\
    \ + 2]\n                              ^~~~~~~\n/tmp/tmpkmnm57wv.swift:17:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        case \"A\":\n            result = \"B\"\n    \
    \    case \"E\":\n            result = \"F\"\n        case \"I\":\n          \
    \  result = \"G\"\n        case \"O\":\n            result = \"H\"\n        case\
    \ \"U\":\n            result = \"J\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpykf3uyck.swift:33:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrzvxuv3.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpnrzvxuv3.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48n68v9t.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp48n68v9t.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:31:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapcase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphvl4gi_e.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmphvl4gi_e.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmphvl4gi_e.swift:19:38:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(letter).swapcase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"A\":\n            result += \"\
    B\"\n        case \"E\":\n            result += \"F\"\n        case \"I\":\n \
    \           result += \"G\"\n        case \"O\":\n            result += \"H\"\n\
    \        case \"U\":\n            result += \"J\"\n        default:\n        \
    \    result += letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpns995g22.swift:33:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter\n        }\n    }\n    for letter in\
    \ result {\n        switch letter {\n        case \"a\":\n        case \"e\":\n\
    \        case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48n68v9t.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp48n68v9t.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"a\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"e\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp48n68v9t.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:19:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:29:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmp48n68v9t.swift:31:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercased()\n        } else\
    \ {\n            result += letter.uppercased()\n        }\n    }\n    for vowel\
    \ in \"aeiou\" {\n        let index = result.index(of: vowel)\n        if index\
    \ != nil {\n            let two = result[index! + 2]\n            result[index!]\
    \ = two\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmprt8gx2md.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmprt8gx2md.swift:18:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmprt8gx2md.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmprt8gx2md.swift:20:35:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let two = result[index! + 2]\n                          \
    \        ^\n/tmp/tmprt8gx2md.swift:21:19: error: cannot assign through subscript:\
    \ subscript is get-only\n            result[index!] = two\n            ~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    var newMessage = \"\"\n  \
    \  for letter in message {\n        if letter in vowels {\n            newMessage\
    \ += String(letter)\n        } else {\n            newMessage += String(letter).swapcase()\n\
    \        }\n    }\n    return newMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpk39d2zfh.swift:12:19: error: expected '{' after 'if' condition\n\
    \        if letter in vowels {\n                  ^\n/tmp/tmpk39d2zfh.swift:12:12:\
    \ error: cannot convert value of type 'Character' to expected condition type 'Bool'\n\
    \        if letter in vowels {\n           ^~~~~~\n/tmp/tmpk39d2zfh.swift:15:42:\
    \ error: value of type 'String' has no member 'swapcase'\n            newMessage\
    \ += String(letter).swapcase()\n                          ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrzvxuv3.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpnrzvxuv3.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let vowelIndex = index(of: \"a\"\
    )\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"e\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"i\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"o\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"u\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"A\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"E\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"I\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"O\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"U\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"a\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"e\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"i\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"o\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"u\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"A\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"E\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"I\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"O\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"U\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"a\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"e\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"i\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"o\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"u\")\n        let vowel = english[vowelIndex!]\n        let vowelIndex = index(of:\
    \ \"A\")\n        let vowel = english[vowelIndex!]\n        let \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp60mri3dv.swift:64:12: error: expected pattern\n        let \n \
    \          ^\n/tmp/tmp60mri3dv.swift:84:84: error: expected '}' at end of brace\
    \ statement\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT\
    \ kNqW wHcT Tq wRkTg\")\n                                                    \
    \                               ^\n/tmp/tmp60mri3dv.swift:8:40: note: to match\
    \ this opening '{'\nfunc encode(message: String) -> String {\n               \
    \                        ^\n/tmp/tmp60mri3dv.swift:11:21: error: cannot find 'english'\
    \ in scope\n        let index = english.index(of: letter)\n                  \
    \  ^~~~~~~\n/tmp/tmp60mri3dv.swift:13:21: error: cannot find 'english' in scope\n\
    \        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:15:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:17:21: error: cannot find\
    \ 'english' in scope\n        let vowel = english[vowelIndex!]\n             \
    \       ^~~~~~~\n/tmp/tmp60mri3dv.swift:19:21: error: cannot find 'english' in\
    \ scope\n        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n\
    /tmp/tmp60mri3dv.swift:21:21: error: cannot find 'english' in scope\n        let\
    \ vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:23:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:25:21: error: cannot find\
    \ 'english' in scope\n        let vowel = english[vowelIndex!]\n             \
    \       ^~~~~~~\n/tmp/tmp60mri3dv.swift:27:21: error: cannot find 'english' in\
    \ scope\n        let vowel = english[vowelIndex!]\n                    ^~~~~~~\n\
    /tmp/tmp60mri3dv.swift:29:21: error: cannot find 'english' in scope\n        let\
    \ vowel = english[vowelIndex!]\n                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:31:21:\
    \ error: cannot find 'english' in scope\n        let vowel = english[vowelIndex!]\n\
    \                    ^~~~~~~\n/tmp/tmp60mri3dv.swift:33:21: error: cannot find\
    \ 'english' in scope\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"e\"\
    :\n            result = \"f\"\n        case \"i\":\n            result = \"g\"\
    \n        case \"o\":\n            result = \"h\"\n        case \"u\":\n     \
    \       result = \"j\"\n        default:\n            result = letter\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpis4m8csi.swift:23:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n        case \"A\":\n        case \"\
    E\":\n        case \"I\":\n        case \"O\":\n        case \"U\":\n        \
    \    result += letter\n        default:\n            result += letter + String(message.index(letter,\
    \ offsetBy: 2))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdw219_5.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpbdw219_5.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:16:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"u\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"A\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:18:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"E\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:19:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpbdw219_5.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmpbdw219_5.swift:24:53:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            result += letter + String(message.index(letter, offsetBy: 2))\n \
    \                                                   ^\n/tmp/tmpbdw219_5.swift:24:32:\
    \ error: no exact matches in call to initializer \n            result += letter\
    \ + String(message.index(le"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n        result += String(letter).replacingOccurrences(of: \"AEIOUaeiou\"\
    , with: replacement)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpddc3e8mz.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpddc3e8mz.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n/tmp/tmpddc3e8mz.swift:13:34: error:\
    \ value of type 'String' has no member 'replacingOccurrences'\n        result\
    \ += String(letter).replacingOccurrences(of: \"AEIOUaeiou\", with: replacement)\n\
    \                  ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrzvxuv3.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpnrzvxuv3.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercased()\n        } else\
    \ {\n            result += letter.uppercased()\n        }\n    }\n    for letter\
    \ in result {\n        if letter == \"A\" {\n            result = \"B\"\n    \
    \    } else if letter == \"B\" {\n            result = \"C\"\n        } else if\
    \ letter == \"C\" {\n            result = \"D\"\n        } else if letter == \"\
    D\" {\n            result = \"E\"\n        } else if letter == \"E\" {\n     \
    \       result = \"F\"\n        } else if letter == \"F\" {\n            result\
    \ = \"G\"\n        } else if letter == \"G\" {\n            result = \"H\"\n \
    \       } else if letter == \"H\" {\n            result = \"I\"\n        } else\
    \ if letter == \"I\" {\n            result = \"J\"\n        } else if letter ==\
    \ \"J\" {\n            result = \"K\"\n        } else if letter == \"K\" {\n \
    \           result = \"L\"\n        } else if letter == \"L\" {\n            result\
    \ = \"M\"\n        } else if letter == \"M\" {\n            result = \"N\"\n \
    \       } else if letter == \"N\" {\n            result = \"O\"\n        } else\
    \ if letter == \"O\" {\n            result = \"P\"\n        } else if letter ==\
    \ \"P\" {\n            result = \"Q\"\n        } else if letter == \"Q\" {\n \
    \           result = \"R\"\n        } else if letter == \"R\" {\n            result\
    \ = \"S\"\n        } else if letter == \"S\" {\n            result = \"T\"\n \
    \       } else if letter == \"T\" {\n            result = \"U\"\n        } else\
    \ if letter == \"U\" {\n            result = \"V\"\n        } else if letter ==\
    \ \"V\" {\n            result = \"W\"\n        } else if letter == \"W\" {\n \
    \           result = \"X\"\n        } else if letter == \"X\" {\n            result\
    \ = \"Y\"\n        } else if letter == \"Y\" {\n            result = \"Z\"\n \
    \       } else if letter == \"Z\" {\n            result = \"A\"\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6s0z06zm.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += String(letter).swapCase()\n    \
    \    } else {\n            result += String(letter)\n        }\n    }\n    for\
    \ vowel in \"aeiouAEIOU\" {\n        let index = message.index(of: vowel)\n  \
    \      let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n      \
    \  if nextIndex == nil {\n            result += String(vowel)\n        } else\
    \ {\n            result += String(vowel).replacingOccurrences(of: vowel, with:\
    \ String(message.substring(to: index!)))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpylaiczbf.swift:12:38: error: value of type 'String' has no member\
    \ 'swapCase'\n            result += String(letter).swapCase()\n              \
    \        ~~~~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpylaiczbf.swift:18:29: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n        let index = message.index(of:\
    \ vowel)\n                            ^\n/tmp/tmpylaiczbf.swift:18:29: note: use\
    \ 'firstIndex(of:)' instead\n        let index = message.index(of: vowel)\n  \
    \                          ^~~~~\n                            firstIndex\n/tmp/tmpylaiczbf.swift:19:65:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                                                ^\n/tmp/tmpylaiczbf.swift:19:33:\
    \ error: no exact matches in call to instance method 'index'\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpylaiczbf.swift:19:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpylaiczbf.swift:19:33:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let nextIndex = message.index(of: vowel, offsetBy: index! + 1)\n\
    \                                ^\n/tmp/tmpylaiczbf.swift:19:33: note: candidate\
    \ has partially matching parameter list (of: String.Element)\n        let nextIndex\
    \ = message.index(of: vowel, offsetBy: index! + 1)\n                         \
    \       ^\n/tmp/tmpylaiczbf.swift:19:33: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let nextIndex = message.index(of:\
    \ vowel, offsetBy: index! + 1)\n                                ^\n/tmp/tmpylaiczbf.swift:23:90:\
    \ error: value of type 'String' has no member 'substring'\n            result\
    \ += String(vowel).replacingOccurrences(of: vowel, with: String(message.substring(to:\
    \ index!)))\n    "
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.lowercased()\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa0_594m9.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpa0_594m9.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpa0_594m9.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        case \"y\":\n            result += \"\
    k\"\n        default:\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphljny19o.swift:25:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)!\n        let replacement = english[index\
    \ + 2]\n        result += String(letter).uppercased() + replacement\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hn1xmte.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)!\n                    ^~~~~~~\n\
    /tmp/tmp5hn1xmte.swift:12:27: error: cannot find 'english' in scope\n        let\
    \ replacement = english[index + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += String(letter).swapcase()\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphvl4gi_e.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmphvl4gi_e.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphvl4gi_e.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmphvl4gi_e.swift:19:38:\
    \ error: value of type 'String' has no member 'swapcase'\n            result +=\
    \ String(letter).swapcase()\n                      ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 2]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmujv3l6a.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpmujv3l6a.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 2]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpil8kr_39.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmpil8kr_39.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!.advanced(by:\
    \ 2)!]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"b\"\n        case \"b\"\
    :\n            result = \"c\"\n        case \"c\":\n            result = \"d\"\
    \n        case \"d\":\n            result = \"e\"\n        case \"e\":\n     \
    \       result = \"f\"\n        case \"f\":\n            result = \"g\"\n    \
    \    case \"g\":\n            result = \"h\"\n        case \"h\":\n          \
    \  result = \"i\"\n        case \"i\":\n            result = \"j\"\n        case\
    \ \"j\":\n            result = \"k\"\n        case \"k\":\n            result\
    \ = \"l\"\n        case \"l\":\n            result = \"m\"\n        case \"m\"\
    :\n            result = \"n\"\n        case \"n\":\n            result = \"o\"\
    \n        case \"o\":\n            result = \"p\"\n        case \"p\":\n     \
    \       result = \"q\"\n        case \"q\":\n            result = \"r\"\n    \
    \    case \"r\":\n            result = \"s\"\n        case \"s\":\n          \
    \  result = \"t\"\n        case \"t\":\n            result = \"u\"\n        case\
    \ \"u\":\n            result = \"v\"\n        case \"v\":\n            result\
    \ = \"w\"\n        case \"w\":\n            result = \"x\"\n        case \"x\"\
    :\n            result = \"y\"\n        case \"y\":\n            result = \"z\"\
    \n        case \"z\":\n            result = \"A\"\n        default:\n        \
    \    result = letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpe9zepm5x.swift:65:22: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            result = letter\n                     ^~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUppercase {\n            result += letter.lowercaseString\n       \
    \ } else {\n            result += letter.uppercaseString\n        }\n    }\n \
    \   for vowel in \"aeiou\" {\n        let index = result.index(of: vowel)\n  \
    \      if index != nil {\n            let twoAheadIndex = index + 2\n        \
    \    if twoAheadIndex < result.count {\n                let twoAhead = result[index!]\n\
    \                let replacement = result[twoAheadIndex]\n                result\
    \ = result.replacingOccurrences(of: vowel, with: replacement)\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0vnhvrww.swift:12:30: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n            result += letter.lowercaseString\n          \
    \            ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp0vnhvrww.swift:14:30: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            result += letter.uppercaseString\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp0vnhvrww.swift:18:28: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = result.index(of: vowel)\n                           ^\n/tmp/tmp0vnhvrww.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmp0vnhvrww.swift:20:33:\
    \ error: cannot convert value of type 'String.Index?' to expected argument type\
    \ 'Int'\n            let twoAheadIndex = index + 2\n                         \
    \       ^\n/tmp/tmp0vnhvrww.swift:24:33: error: value of type 'String' has no\
    \ member 'replacingOccurrences'\n                result = result.replacingOccurrences(of:\
    \ vowel, with: replacement)\n                         ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        let\
    \ index = english.index(of: letter)\n        let replacement = english[index!\
    \ + 1]\n        result += replacement\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppzwqrlt6.swift:11:21: error: cannot find 'english' in scope\n \
    \       let index = english.index(of: letter)\n                    ^~~~~~~\n/tmp/tmppzwqrlt6.swift:12:27:\
    \ error: cannot find 'english' in scope\n        let replacement = english[index!\
    \ + 1]\n                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result += \"b\"\n        case \"\
    e\":\n            result += \"f\"\n        case \"i\":\n            result +=\
    \ \"g\"\n        case \"o\":\n            result += \"h\"\n        case \"u\"\
    :\n            result += \"j\"\n        default:\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplto4kd5p.swift:23:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            result += letter\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n        case \"e\":\n        case \"i\":\n  \
    \      case \"o\":\n        case \"u\":\n            result += letter\n      \
    \  default:\n            result += letter.swapCase()\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplku5gg58.swift:12:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmplku5gg58.swift:13:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:14:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:15:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmplku5gg58.swift:17:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result += letter\n                      ^\n/tmp/tmplku5gg58.swift:19:30:\
    \ error: value of type 'Character' has no member 'swapCase'\n            result\
    \ += letter.swapCase()\n                      ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\nfunc encode(message: String)\
    \ -> String {\n    var result = \"\"\n    for letter in message {\n        if\
    \ letter.isUpper() {\n            result += letter.lowercased()\n        } else\
    \ {\n            result += letter.uppercased()\n        }\n    }\n    for vowel\
    \ in \"aeiou\" {\n        let index = result.index(of: vowel)\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n        let replacementLetter = result[replacement]\n\
    \        result = result.replacingCharacters(in: Range(uncheckedBounds: (lower:\
    \ index, upper: replacement)), with: replacementLetter)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdivk6j8i.swift:11:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpdivk6j8i.swift:18:28:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let\
    \ index = result.index(of: vowel)\n                           ^\n/tmp/tmpdivk6j8i.swift:18:28:\
    \ note: use 'firstIndex(of:)' instead\n        let index = result.index(of: vowel)\n\
    \                           ^~~~~\n                           firstIndex\n/tmp/tmpdivk6j8i.swift:19:40:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n        let replacement = result.index(index, offsetBy:\
    \ 2)\n                                       ^\n/tmp/tmpdivk6j8i.swift:19:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let replacement = result.index(index, offsetBy: 2)\n        \
    \                               ^\n                                          \
    \   ?? <#default value#>\n/tmp/tmpdivk6j8i.swift:19:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let replacement\
    \ = result.index(index, offsetBy: 2)\n                                       ^\n\
    \                                            !\n/tmp/tmpdivk6j8i.swift:21:25:\
    \ error: value of type 'String' has no member 'replacingCharacters'\n        result\
    \ = result.replacingCharacters(in: Range(uncheckedBounds: (lower: index, upper:\
    \ replacement)), with: replacementLetter)\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdivk6j8i.swift:21:72: error: tuple type '(lower: String.Index?, upper:\
    \ String.Index)' is not convertible to tuple type '(lower: String.Index, upper:\
    \ String.Index)'\n        result = result.replacingCharacters(in: Range(uncheckedBounds:\
    \ (lower: index, upper: replacement)), with: replacementLetter)\n            \
    \                                                           ^\n"
  stdout: ''
  timestamp: 1659978672
