language: swift
name: HumanEval_106_f
results:
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_gn382d1/tmp_gn382d1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97cce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97ccb95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97ccb95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97ccb947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gn382d1                        0x00005584d66a25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b97cd08a460 __libc_start_main +
    245

    6    tmp_gn382d1                        0x00005584d66a2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * factorial[i - 1]!)\n        } else {\n            factorial.append(i)\n  \
    \      }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3rq6rndf.swift:12:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorial.append(sum)\n \
    \           sum = 1\n        }\n    }\n    factorial.append(sum)\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpqjsrfken/tmpqjsrfken.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9f47e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f44d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f44d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f44d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqjsrfken                        0x0000557b99f875d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af9f49cd460 __libc_start_main +
    245

    6    tmpqjsrfken                        0x0000557b99f87209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * factorial[i - 1]!)\n        } else {\n            factorial.append(i)\n  \
    \      }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3rq6rndf.swift:12:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * factorial[i - 1])\n        } else {\n            factorial.append(i)\n   \
    \     }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c1002ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c0fd25561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4c0fd25286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4c0fd2513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4c0fd24bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4c0fb24e83 <unavailable> + 188035

    6    tmpms6a9fhs                        0x00005594e098fb35 <unavailable> + 6965

    7    tmpms6a9fhs                        0x00005594e098f53b <unavailable> + 5435

    8    libc.so.6                          0x00002b4c1021a460 __libc_start_main +
    245

    9    tmpms6a9fhs                        0x00005594e098f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(factorials[i\
    \ - 1]!)\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3pm3szyw.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n/tmp/tmp3pm3szyw.swift:14:48: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            factorials.append(factorials[i\
    \ - 1]!)\n                              ~~~~~~~~~~~~~~~~~^\n                 \
    \                              \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n\
    \        } else {\n            factorial.append(i * factorial[factorial.count\
    \ - 1])\n        }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb8a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb598561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49eb598286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49eb59813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49eb597bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b49eb397e83 <unavailable> + 188035

    6    tmpk9qhsa9n                        0x00005599bfc73bda <unavailable> + 7130

    7    tmpk9qhsa9n                        0x00005599bfc7359b <unavailable> + 5531

    8    libc.so.6                          0x00002b49eba8d460 __libc_start_main +
    245

    9    tmpk9qhsa9n                        0x00005599bfc732b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(factorials[i\
    \ - 1]! + i)\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpov71fw0g.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n/tmp/tmpov71fw0g.swift:14:48: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            factorials.append(factorials[i\
    \ - 1]! + i)\n                              ~~~~~~~~~~~~~~~~~^\n             \
    \                                  \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorial.append(i)\n        } else {\n            sum += i\n   \
    \     }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpmk1wmrk_/tmpmk1wmrk_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7339a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73396fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73396fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73396fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk1wmrk_                        0x0000561d95f9e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7339bf2460 __libc_start_main +
    245

    6    tmpmk1wmrk_                        0x0000561d95f9e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n        else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmparpf0g3m/tmparpf0g3m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a26683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2637ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2637a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a263797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpf0g3m                        0x0000557f0024e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3a2686f460 __libc_start_main +
    245

    6    tmparpf0g3m                        0x0000557f0024e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[result.count - 1])\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9bb65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9bb355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9bb355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9bb35513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9bb354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9bb154e83 <unavailable> + 188035

    6    tmp2o21e3t6                        0x00005569fbda9bda <unavailable> + 7130

    7    tmp2o21e3t6                        0x00005569fbda959b <unavailable> + 5531

    8    libc.so.6                          0x00002ac9bb84a460 __libc_start_main +
    245

    9    tmp2o21e3t6                        0x00005569fbda92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7t3mjqq/tmpu7t3mjqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1bfc02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1bf8f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1bf8f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1bf8f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7t3mjqq                        0x0000562d73b815d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad1bfdee460 __libc_start_main +
    245

    6    tmpu7t3mjqq                        0x0000562d73b81209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(factorials[i\
    \ - 1]!)\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3pm3szyw.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n/tmp/tmp3pm3szyw.swift:14:48: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            factorials.append(factorials[i\
    \ - 1]!)\n                              ~~~~~~~~~~~~~~~~~^\n                 \
    \                              \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorial.append(i)\n        } else {\n            sum += i\n   \
    \     }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpmk1wmrk_/tmpmk1wmrk_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7339a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73396fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73396fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73396fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk1wmrk_                        0x0000561d95f9e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7339bf2460 __libc_start_main +
    245

    6    tmpmk1wmrk_                        0x0000561d95f9e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * (i + 1))\n        } else {\n            factorials.append(i)\n        }\n\
    \    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpweyjl4ik/tmpweyjl4ik.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c18bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c188bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c188bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c188be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpweyjl4ik                        0x00005602d7aeb5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4c18db4460 __libc_start_main +
    245

    6    tmpweyjl4ik                        0x00005602d7aeb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[0])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3061f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3061c74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3061c74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3061c7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3061c73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3061a73e83 <unavailable> + 188035

    6    tmp4rh47732                        0x000055baf97b7b2d <unavailable> + 6957

    7    tmp4rh47732                        0x000055baf97b753b <unavailable> + 5435

    8    libc.so.6                          0x00002b3062169460 __libc_start_main +
    245

    9    tmp4rh47732                        0x000055baf97b7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[result.count - 1])\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9bb65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9bb355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9bb355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9bb35513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9bb354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9bb154e83 <unavailable> + 188035

    6    tmp2o21e3t6                        0x00005569fbda9bda <unavailable> + 7130

    7    tmp2o21e3t6                        0x00005569fbda959b <unavailable> + 5531

    8    libc.so.6                          0x00002ac9bb84a460 __libc_start_main +
    245

    9    tmp2o21e3t6                        0x00005569fbda92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[result.count - 1])\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9bb65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9bb355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9bb355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9bb35513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9bb354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9bb154e83 <unavailable> + 188035

    6    tmp2o21e3t6                        0x00005569fbda9bda <unavailable> + 7130

    7    tmp2o21e3t6                        0x00005569fbda959b <unavailable> + 5531

    8    libc.so.6                          0x00002ac9bb84a460 __libc_start_main +
    245

    9    tmp2o21e3t6                        0x00005569fbda92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorial.append(i)\n        } else {\n            sum += i\n   \
    \     }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpmk1wmrk_/tmpmk1wmrk_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7339a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73396fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73396fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73396fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk1wmrk_                        0x0000561d95f9e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7339bf2460 __libc_start_main +
    245

    6    tmpmk1wmrk_                        0x0000561d95f9e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n            sum += i\n        } else {\n  \
    \          factorials.append(sum)\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpkk817r0q/tmpkk817r0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c9c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c9913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c9913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c99127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk817r0q                        0x0000557b096565d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82c9e08460 __libc_start_main +
    245

    6    tmpkk817r0q                        0x0000557b09656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[0])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3061f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3061c74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3061c74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3061c7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3061c73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3061a73e83 <unavailable> + 188035

    6    tmp4rh47732                        0x000055baf97b7b2d <unavailable> + 6957

    7    tmp4rh47732                        0x000055baf97b753b <unavailable> + 5435

    8    libc.so.6                          0x00002b3062169460 __libc_start_main +
    245

    9    tmp4rh47732                        0x000055baf97b7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n            sum += i\n        } else {\n  \
    \          factorials.append(sum)\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpkk817r0q/tmpkk817r0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c9c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c9913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c9913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c99127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk817r0q                        0x0000557b096565d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82c9e08460 __libc_start_main +
    245

    6    tmpkk817r0q                        0x0000557b09656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var factorial = 1\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            factorial *= i\n        } else {\n            factorial +=\
    \ i\n        }\n        result.append(factorial)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp5ch8tux4/tmp5ch8tux4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df174cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df1443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df1443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df14427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ch8tux4                        0x0000558cfe2495d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b1df1938460 __libc_start_main +
    245

    6    tmp5ch8tux4                        0x0000558cfe249209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * (i + 1))\n        } else {\n            factorials.append(i)\n        }\n\
    \    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpweyjl4ik/tmpweyjl4ik.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c18bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c188bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c188bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c188be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpweyjl4ik                        0x00005602d7aeb5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4c18db4460 __libc_start_main +
    245

    6    tmpweyjl4ik                        0x00005602d7aeb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorial.append(i)\n            sum += i\n        } else {\n   \
    \         factorial.append(sum)\n        }\n    }\n    return factorial\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpxy8f5bd3/tmpxy8f5bd3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d2a920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d2a617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d2a617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d2a6167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxy8f5bd3                        0x0000555f201725d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b2d2ab0c460 __libc_start_main +
    245

    6    tmpxy8f5bd3                        0x0000555f20172209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n            sum += i\n        } else {\n  \
    \          factorials.append(sum)\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpkk817r0q/tmpkk817r0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c9c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c9913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c9913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c99127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk817r0q                        0x0000557b096565d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82c9e08460 __libc_start_main +
    245

    6    tmpkk817r0q                        0x0000557b09656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[result.count - 1])\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9bb65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9bb355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9bb355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9bb35513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9bb354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9bb154e83 <unavailable> + 188035

    6    tmp2o21e3t6                        0x00005569fbda9bda <unavailable> + 7130

    7    tmp2o21e3t6                        0x00005569fbda959b <unavailable> + 5531

    8    libc.so.6                          0x00002ac9bb84a460 __libc_start_main +
    245

    9    tmp2o21e3t6                        0x00005569fbda92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorial.append(i)\n        } else {\n            sum += i\n   \
    \     }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpmk1wmrk_/tmpmk1wmrk_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7339a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73396fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73396fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73396fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk1wmrk_                        0x0000561d95f9e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7339bf2460 __libc_start_main +
    245

    6    tmpmk1wmrk_                        0x0000561d95f9e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7t3mjqq/tmpu7t3mjqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1bfc02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1bf8f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1bf8f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1bf8f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7t3mjqq                        0x0000562d73b815d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad1bfdee460 __libc_start_main +
    245

    6    tmpu7t3mjqq                        0x0000562d73b81209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n        else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmparpf0g3m/tmparpf0g3m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a26683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2637ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2637a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a263797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpf0g3m                        0x0000557f0024e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3a2686f460 __libc_start_main +
    245

    6    tmparpf0g3m                        0x0000557f0024e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i * 1 + 1)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw6cpmuvn/tmpw6cpmuvn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3926d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3926a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3926a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3926a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6cpmuvn                        0x00005629521335d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3926f51460 __libc_start_main +
    245

    6    tmpw6cpmuvn                        0x0000562952133209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[result.count - 1])\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9bb65ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9bb355561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9bb355286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9bb35513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9bb354bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac9bb154e83 <unavailable> + 188035

    6    tmp2o21e3t6                        0x00005569fbda9bda <unavailable> + 7130

    7    tmp2o21e3t6                        0x00005569fbda959b <unavailable> + 5531

    8    libc.so.6                          0x00002ac9bb84a460 __libc_start_main +
    245

    9    tmp2o21e3t6                        0x00005569fbda92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * factorial[i - 1]!)\n        } else {\n            factorial.append(i + factorial[i\
    \ - 1]!)\n        }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpx9da60uu.swift:12:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n/tmp/tmpx9da60uu.swift:14:50: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n            factorial.append(i + factorial[i - 1]!)\n\
    \                                 ~~~~~~~~~~~~~~~~^\n                        \
    \                         \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n        else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmparpf0g3m/tmparpf0g3m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a26683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2637ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2637a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a263797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpf0g3m                        0x0000557f0024e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3a2686f460 __libc_start_main +
    245

    6    tmparpf0g3m                        0x0000557f0024e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7t3mjqq/tmpu7t3mjqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1bfc02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1bf8f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1bf8f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1bf8f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7t3mjqq                        0x0000562d73b815d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad1bfdee460 __libc_start_main +
    245

    6    tmpu7t3mjqq                        0x0000562d73b81209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n\
    \        } else {\n            factorial.append(i * factorial[i - 1])\n      \
    \  }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8915d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8915a24561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8915a24286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8915a2413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8915a23bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8915823e83 <unavailable> + 188035

    6    tmpj879ma5x                        0x000055d787185b48 <unavailable> + 6984

    7    tmpj879ma5x                        0x000055d78718553b <unavailable> + 5435

    8    libc.so.6                          0x00002b8915f19460 __libc_start_main +
    245

    9    tmpj879ma5x                        0x000055d787185259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n            sum += i\n        } else {\n  \
    \          factorials.append(sum)\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpkk817r0q/tmpkk817r0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c9c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c9913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c9913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c99127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk817r0q                        0x0000557b096565d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82c9e08460 __libc_start_main +
    245

    6    tmpkk817r0q                        0x0000557b09656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1])\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b253655ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2536251561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2536251286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b253625113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2536250bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2536050e83 <unavailable> + 188035

    6    tmpf6dlfydk                        0x000055ca5e482b48 <unavailable> + 6984

    7    tmpf6dlfydk                        0x000055ca5e48253b <unavailable> + 5435

    8    libc.so.6                          0x00002b2536746460 __libc_start_main +
    245

    9    tmpf6dlfydk                        0x000055ca5e482259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n            sum += i\n        } else {\n  \
    \          factorials.append(sum)\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpkk817r0q/tmpkk817r0q.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c9c1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c9913b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c9913988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c99127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk817r0q                        0x0000557b096565d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82c9e08460 __libc_start_main +
    245

    6    tmpkk817r0q                        0x0000557b09656209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n\
    \        } else {\n            factorial.append(factorial[i-1] * i)\n        }\n\
    \    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aca78a46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca7873d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca7873d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca7873d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca7873cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aca7853ce83 <unavailable> + 188035

    6    tmpmxc6jl2i                        0x000055f74cb54b48 <unavailable> + 6984

    7    tmpmxc6jl2i                        0x000055f74cb5453b <unavailable> + 5435

    8    libc.so.6                          0x00002aca78c32460 __libc_start_main +
    245

    9    tmpmxc6jl2i                        0x000055f74cb54259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(sum)\n            sum *= i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_bbakkwf/tmp_bbakkwf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad20239bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad202092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad202092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2020917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bbakkwf                        0x000055b147d315d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad202587460 __libc_start_main +
    245

    6    tmp_bbakkwf                        0x000055b147d31209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014076
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n        factorials.append(sum)\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpspapvyes/tmpspapvyes.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0848adac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08487d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08487d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08487d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapvyes                        0x000055854be8b5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b0848cc6460 __libc_start_main +
    245

    6    tmpspapvyes                        0x000055854be8b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        }\n        else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmparpf0g3m/tmparpf0g3m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a26683c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2637ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2637a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a263797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpf0g3m                        0x0000557f0024e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3a2686f460 __libc_start_main +
    245

    6    tmparpf0g3m                        0x0000557f0024e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    var factorial = 1\n    for i in 1...n {\n        if i % 2 ==\
    \ 0 {\n            factorial *= i\n        } else {\n            factorial +=\
    \ i\n        }\n        result.append(factorial)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp5ch8tux4/tmp5ch8tux4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df174cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df1443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df1443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df14427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ch8tux4                        0x0000558cfe2495d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b1df1938460 __libc_start_main +
    245

    6    tmp5ch8tux4                        0x0000558cfe249209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorial\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorial.append(i\
    \ * 1)\n        } else {\n            factorial.append(i + 1)\n        }\n   \
    \ }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_e44qpzl/tmp_e44qpzl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2e8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2e5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2e5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2e5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_e44qpzl                        0x00005571222d35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b3d2eae5460 __libc_start_main +
    245

    6    tmp_e44qpzl                        0x00005571222d3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1]!)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0lcdvk50.swift:14:42: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            result.append(i * result[i-1]!)\n                  \
    \            ~~~~~~~~~~~^\n                                         \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            sum += i\n        } else {\n            factorials.append(sum)\n\
    \            sum = 1\n        }\n    }\n    factorials.append(sum)\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2crh_ouu/tmp2crh_ouu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d26dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d23d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d23d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d23d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2crh_ouu                        0x0000555a07bc05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ba7d28c8460 __libc_start_main +
    245

    6    tmp2crh_ouu                        0x0000555a07bc0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063f0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063ed97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063ed97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063ed9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063ed96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063eb96e83 <unavailable> + 188035

    6    tmp0jvrsmc0                        0x0000559f48fb5b30 <unavailable> + 6960

    7    tmp0jvrsmc0                        0x0000559f48fb553b <unavailable> + 5435

    8    libc.so.6                          0x00002b063f28c460 __libc_start_main +
    245

    9    tmp0jvrsmc0                        0x0000559f48fb5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7t3mjqq/tmpu7t3mjqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1bfc02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1bf8f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1bf8f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1bf8f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7t3mjqq                        0x0000562d73b815d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad1bfdee460 __libc_start_main +
    245

    6    tmpu7t3mjqq                        0x0000562d73b81209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i)\n        } else {\n            sum += i\n  \
    \      }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj0zm4rtg/tmpj0zm4rtg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8922c7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8922972b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8922972988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89229717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0zm4rtg                        0x000056504368d5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b8922e67460 __libc_start_main +
    245

    6    tmpj0zm4rtg                        0x000056504368d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2, 6,\
    \ 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\n\
    assert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpsl1xhkex/tmpsl1xhkex.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82176d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82173ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82173cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82173cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl1xhkex                        0x00005644fd3f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b82178c1460 __libc_start_main +
    245

    6    tmpsl1xhkex                        0x00005644fd3f6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * 1)\n        } else {\n            result.append(i + 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpu7t3mjqq/tmpu7t3mjqq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1bfc02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1bf8f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1bf8f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1bf8f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7t3mjqq                        0x0000562d73b815d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad1bfdee460 __libc_start_main +
    245

    6    tmpu7t3mjqq                        0x0000562d73b81209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i)\n\
    \        } else {\n            result.append(i * result[i-1]!)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0lcdvk50.swift:14:42: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            result.append(i * result[i-1]!)\n                  \
    \            ~~~~~~~~~~~^\n                                         \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n\
    \            factorials.append(i * factorials[i - 1]!)\n        } else {\n   \
    \         sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4taie93o.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(i)\n\
    \        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720,\
    \ 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6gnwcoh2.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var factorials\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            factorials.append(i\
    \ * factorials[i - 1]!)\n        } else {\n            factorials.append(factorials[i\
    \ - 1]! + i)\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpov71fw0g.swift:12:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n/tmp/tmpov71fw0g.swift:14:48: error: cannot force unwrap\
    \ value of non-optional type 'Int'\n            factorials.append(factorials[i\
    \ - 1]! + i)\n                              ~~~~~~~~~~~~~~~~~^\n             \
    \                                  \n"
  stdout: ''
  timestamp: 1660014075
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\nfunc f(n: Int) -> [Int] {\n    var result\
    \ = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            result.append(i\
    \ * i)\n        } else {\n            result.append(i)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoqn1bpe/tmpzoqn1bpe.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed5451ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed54211b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed54211988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed542107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoqn1bpe                        0x0000564c6bac25d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed54706460 __libc_start_main +
    245

    6    tmpzoqn1bpe                        0x0000564c6bac2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014075
