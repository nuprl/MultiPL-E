language: swift
name: HumanEval_3_below_zero
results:
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (sum, operation)\
    \ -> Int in\n        switch operation {\n        case 1:\n            return sum\
    \ + operation\n        case -1:\n            return sum - operation\n        default:\n\
    \            return sum\n        }\n    }\n    return balance < 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwqde21oh/tmpwqde21oh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3053ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a30235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a30235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a302347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqde21oh                        0x000055889f1924f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b7a3072a460 __libc_start_main +
    245

    6    tmpwqde21oh                        0x000055889f191fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (sum, operation)\
    \ -> Int in\n        switch operation {\n        case 1:\n            return sum\
    \ + operation\n        case -1:\n            return sum - operation\n        }\n\
    \    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0kwf38ny.swift:7:9: error: switch must be exhaustive\n        switch\
    \ operation {\n        ^\n/tmp/tmp0kwf38ny.swift:7:9: note: do you want to add\
    \ a default clause?\n        switch operation {\n        ^\n/tmp/tmp0kwf38ny.swift:6:9:\
    \ warning: variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (sum, operation) -> Int in\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmptrk6lp6j/tmptrk6lp6j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f24d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f24a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f24a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f24a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrk6lp6j                        0x000055e9da43e5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b1f24f30460 __libc_start_main +
    245

    6    tmptrk6lp6j                        0x000055e9da43e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp521l19or/tmp521l19or.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d12f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp521l19or                        0x000055f7199ef5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b3f0d625460 __libc_start_main +
    245

    6    tmp521l19or                        0x000055f7199ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp521l19or/tmp521l19or.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d12f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp521l19or                        0x000055f7199ef5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b3f0d625460 __libc_start_main +
    245

    6    tmp521l19or                        0x000055f7199ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    while\
    \ balance > 0 {\n        if balance < 0 {\n            return false\n        }\n\
    \        balance = balance.subtracting(operations.reduce(0) { $0 + $1 })\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpce9spg42.swift:11:27: error: value of type 'Int' has no member\
    \ 'subtracting'\n        balance = balance.subtracting(operations.reduce(0) {\
    \ $0 + $1 })\n                  ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ += operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7fc38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7f92f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4a7f92f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4a7f92f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4a7f92ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4a7f72ee83 <unavailable> + 188035

    6    tmpz81p68rz                        0x00005652ee9389c2 <unavailable> + 6594

    7    tmpz81p68rz                        0x00005652ee93841d <unavailable> + 5149

    8    libc.so.6                          0x00002b4a7fe24460 __libc_start_main +
    245

    9    tmpz81p68rz                        0x00005652ee938129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 200\n        case 4:\n            balance -= 200\n        case 5:\n     \
    \       balance += 300\n        case 6:\n            balance -= 300\n        case\
    \ 7:\n            balance += 400\n        case 8:\n            balance -= 400\n\
    \        case 9:\n            balance += 500\n        case 10:\n            balance\
    \ -= 500\n        case 11:\n            balance += 600\n        case 12:\n   \
    \         balance -= 600\n        case 13:\n            balance += 700\n     \
    \   case 14:\n            balance -= 700\n        case 15:\n            balance\
    \ += 800\n        case 16:\n            balance -= 800\n        case 17:\n   \
    \         balance += 900\n        case 18:\n            balance -= 900\n     \
    \   case 19:\n            balance += 1000\n        case 20:\n            balance\
    \ -= 1000\n        case 21:\n            balance += 1100\n        case 22:\n \
    \           balance -= 1100\n        case 23:\n            balance += 1200\n \
    \       case 24:\n            balance -= 1200\n        case 25:\n            balance\
    \ += 1300\n        case 26:\n            balance -= 1300\n        case 27:\n \
    \           balance += 1400\n        case 28:\n            balance -= 1400\n \
    \       case 29:\n            balance += 1500\n        case 30:\n            balance\
    \ -= 1500\n        case 31:\n            balance += 1600\n        case 32:\n \
    \           balance -= 1600\n        case 33:\n            balance += 1700\n \
    \       case 34:\n            balance -= 1700\n        case 35:\n            balance\
    \ += 1800\n        case 36:\n            balance -= 1800\n        case 37:\n \
    \           balance += 1900\n        case 38:\n            balance -= 1900\n \
    \       case 39:\n            balance += 2000\n        case 40:\n            balance\
    \ -= 2000\n        case 41:\n            balance += 2100\n        case 42:\n \
    \           balance -= 2100\n        case 43:\n            balance += 2200\n \
    \       case 44:\n            balance -= 2200\n        case 45:\n            balance\
    \ += 2300\n        case 46:\n            balance -= 2300\n        case 47:\n \
    \           balance += 2400\n        case 48:\n            balance -= 2400\n \
    \       case 49:\n            balance += 2500\n        case 50:\n            balance\
    \ -= 2500\n        case 51:\n            balance \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3l01p4cr.swift:131:69: error: expected '}' at end of brace statement\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)\n       \
    \                                                             ^\n/tmp/tmp3l01p4cr.swift:7:33:\
    \ note: to match this opening '{'\n    for operation in operations {\n       \
    \                         ^\n/tmp/tmp3l01p4cr.swift:131:69: error: expected '}'\
    \ at end of brace statement\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5,\
    \ 4, -4]) == true)\n                                                         \
    \           ^\n/tmp/tmp3l01p4cr.swift:5:44: note: to match this opening '{'\n\
    func below_zero(operations: [Int]) -> Bool {\n                               \
    \            ^\n/tmp/tmp3l01p4cr.swift:110:13: warning: variable is unused\n \
    \           balance \n            ^~~~~~~\n/tmp/tmp3l01p4cr.swift:8:9: error:\
    \ switch must be exhaustive\n        switch operation {\n        ^\n/tmp/tmp3l01p4cr.swift:8:9:\
    \ note: do you want to add a default clause?\n        switch operation {\n   \
    \     ^\n/tmp/tmp3l01p4cr.swift:114:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (sum, operation)\
    \ -> Int in\n        switch operation {\n        case 1:\n            return sum\
    \ + operation\n        case -1:\n            return sum - operation\n        default:\n\
    \            return sum\n        }\n    }\n    return balance < 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwqde21oh/tmpwqde21oh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a3053ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a30235b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a30235988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a302347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwqde21oh                        0x000055889f1924f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b7a3072a460 __libc_start_main +
    245

    6    tmpwqde21oh                        0x000055889f191fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (sum, operation)\
    \ -> Int in\n        switch operation {\n        case 1:\n            return sum\
    \ + operation\n        case -1:\n            return sum - operation\n        }\n\
    \    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0kwf38ny.swift:7:9: error: switch must be exhaustive\n        switch\
    \ operation {\n        ^\n/tmp/tmp0kwf38ny.swift:7:9: note: do you want to add\
    \ a default clause?\n        switch operation {\n        ^\n/tmp/tmp0kwf38ny.swift:6:9:\
    \ warning: variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (sum, operation) -> Int in\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        default:\n            break\n \
    \       }\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpgs3q0ub6/tmpgs3q0ub6.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0ec5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0e953b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0e953988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0e9527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs3q0ub6                        0x0000562031e285e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b1e0ee48460 __libc_start_main +
    245

    6    tmpgs3q0ub6                        0x0000562031e280d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        if balance < 0 {\n            return true\n        }\n        balance\
    \ += operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpx4lxcu74/tmpx4lxcu74.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0fe55dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0fe254b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0fe254988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0fe2537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4lxcu74                        0x0000563936d9b7f8 <unavailable> + 6136

    5    libc.so.6                          0x00002ab0fe749460 __libc_start_main +
    245

    6    tmpx4lxcu74                        0x0000563936d9b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0013a4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0013746561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0013746286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b001374613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0013745bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0013545e83 <unavailable> + 188035

    6    tmp2i_78iu5                        0x0000563fb1e029c2 <unavailable> + 6594

    7    tmp2i_78iu5                        0x0000563fb1e0241d <unavailable> + 5149

    8    libc.so.6                          0x00002b0013c3b460 __libc_start_main +
    245

    9    tmp2i_78iu5                        0x0000563fb1e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (acc, op) in\n  \
    \      switch op {\n        case 1:\n            return acc + op\n        case\
    \ -1:\n            return acc - op\n        }\n    }\n    return balance < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmp7icpjt9n.swift:7:9: error: switch must be exhaustive\n        switch\
    \ op {\n        ^\n/tmp/tmp7icpjt9n.swift:7:9: note: do you want to add a default\
    \ clause?\n        switch op {\n        ^\n/tmp/tmp7icpjt9n.swift:6:9: warning:\
    \ variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (acc, op) in\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmptrk6lp6j/tmptrk6lp6j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f24d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f24a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f24a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f24a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrk6lp6j                        0x000055e9da43e5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b1f24f30460 __libc_start_main +
    245

    6    tmptrk6lp6j                        0x000055e9da43e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ += operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7fc38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7f92f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4a7f92f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4a7f92f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4a7f92ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4a7f72ee83 <unavailable> + 188035

    6    tmpz81p68rz                        0x00005652ee9389c2 <unavailable> + 6594

    7    tmpz81p68rz                        0x00005652ee93841d <unavailable> + 5149

    8    libc.so.6                          0x00002b4a7fe24460 __libc_start_main +
    245

    9    tmpz81p68rz                        0x00005652ee938129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ += operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7fc38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7f92f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4a7f92f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4a7f92f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4a7f92ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4a7f72ee83 <unavailable> + 188035

    6    tmpz81p68rz                        0x00005652ee9389c2 <unavailable> + 6594

    7    tmpz81p68rz                        0x00005652ee93841d <unavailable> + 5149

    8    libc.so.6                          0x00002b4a7fe24460 __libc_start_main +
    245

    9    tmpz81p68rz                        0x00005652ee938129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        switch operation {\n        case 1:\n            balance += operation\n\
    \        case -1:\n            balance -= operation\n        }\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiplpok2_.swift:8:9: error: switch must be exhaustive\n        switch\
    \ operation {\n        ^\n/tmp/tmpiplpok2_.swift:8:9: note: do you want to add\
    \ a default clause?\n        switch operation {\n        ^\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { ($0 + $1), ($1 -\
    \ $0) }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp056g229w.swift:6:51: error: consecutive statements on a line must\
    \ be separated by ';'\n    var balance = operations.reduce(0) { ($0 + $1), ($1\
    \ - $0) }\n                                                  ^\n             \
    \                                     ;\n/tmp/tmp056g229w.swift:6:51: error: expected\
    \ expression\n    var balance = operations.reduce(0) { ($0 + $1), ($1 - $0) }\n\
    \                                                  ^\n/tmp/tmp056g229w.swift:6:9:\
    \ warning: variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { ($0 + $1), ($1 - $0) }\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmptrk6lp6j/tmptrk6lp6j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f24d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f24a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f24a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f24a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrk6lp6j                        0x000055e9da43e5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b1f24f30460 __libc_start_main +
    245

    6    tmptrk6lp6j                        0x000055e9da43e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0013a4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0013746561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0013746286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b001374613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0013745bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0013545e83 <unavailable> + 188035

    6    tmp2i_78iu5                        0x0000563fb1e029c2 <unavailable> + 6594

    7    tmp2i_78iu5                        0x0000563fb1e0241d <unavailable> + 5149

    8    libc.so.6                          0x00002b0013c3b460 __libc_start_main +
    245

    9    tmp2i_78iu5                        0x0000563fb1e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (sum, operation)\
    \ -> Int in\n        switch operation {\n        case 1:\n            return sum\
    \ + operation\n        case -1:\n            return sum - operation\n        }\n\
    \    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0kwf38ny.swift:7:9: error: switch must be exhaustive\n        switch\
    \ operation {\n        ^\n/tmp/tmp0kwf38ny.swift:7:9: note: do you want to add\
    \ a default clause?\n        switch operation {\n        ^\n/tmp/tmp0kwf38ny.swift:6:9:\
    \ warning: variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (sum, operation) -> Int in\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0013a4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0013746561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0013746286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b001374613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0013745bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0013545e83 <unavailable> + 188035

    6    tmp2i_78iu5                        0x0000563fb1e029c2 <unavailable> + 6594

    7    tmp2i_78iu5                        0x0000563fb1e0241d <unavailable> + 5149

    8    libc.so.6                          0x00002b0013c3b460 __libc_start_main +
    245

    9    tmp2i_78iu5                        0x0000563fb1e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp521l19or/tmp521l19or.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d12f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp521l19or                        0x000055f7199ef5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b3f0d625460 __libc_start_main +
    245

    6    tmp521l19or                        0x000055f7199ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (acc, op) in\n  \
    \      switch op {\n        case 1:\n            return acc + op\n        case\
    \ -1:\n            return acc - op\n        }\n    }\n    return balance < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmp7icpjt9n.swift:7:9: error: switch must be exhaustive\n        switch\
    \ op {\n        ^\n/tmp/tmp7icpjt9n.swift:7:9: note: do you want to add a default\
    \ clause?\n        switch op {\n        ^\n/tmp/tmp7icpjt9n.swift:6:9: warning:\
    \ variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (acc, op) in\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { ($0 + $1), ($1 -\
    \ $0) }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp056g229w.swift:6:51: error: consecutive statements on a line must\
    \ be separated by ';'\n    var balance = operations.reduce(0) { ($0 + $1), ($1\
    \ - $0) }\n                                                  ^\n             \
    \                                     ;\n/tmp/tmp056g229w.swift:6:51: error: expected\
    \ expression\n    var balance = operations.reduce(0) { ($0 + $1), ($1 - $0) }\n\
    \                                                  ^\n/tmp/tmp056g229w.swift:6:9:\
    \ warning: variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { ($0 + $1), ($1 - $0) }\n    ~~~ ^\n\
    \    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp521l19or/tmp521l19or.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d12f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp521l19or                        0x000055f7199ef5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b3f0d625460 __libc_start_main +
    245

    6    tmp521l19or                        0x000055f7199ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (acc, op) in\n  \
    \      switch op {\n        case 1:\n            return acc + op\n        case\
    \ -1:\n            return acc - op\n        }\n    }\n    return balance < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmp7icpjt9n.swift:7:9: error: switch must be exhaustive\n        switch\
    \ op {\n        ^\n/tmp/tmp7icpjt9n.swift:7:9: note: do you want to add a default\
    \ clause?\n        switch op {\n        ^\n/tmp/tmp7icpjt9n.swift:6:9: warning:\
    \ variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (acc, op) in\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        switch operation {\n        case 1:\n            balance += 100\n   \
    \     case 2:\n            balance -= 100\n        case 3:\n            balance\
    \ += 50\n        case 4:\n            balance -= 50\n        case 5:\n       \
    \     balance += 25\n        case 6:\n            balance -= 25\n        case\
    \ 7:\n            balance += 10\n        case 8:\n            balance -= 10\n\
    \        case 9:\n            balance += 5\n        case 10:\n            balance\
    \ -= 5\n        case 11:\n            balance += 2\n        case 12:\n       \
    \     balance -= 2\n        case 13:\n            balance += 1\n        case 14:\n\
    \            balance -= 1\n        case 15:\n            balance += 0\n      \
    \  case 16:\n            balance -= 0\n        case 17:\n            balance +=\
    \ -1\n        case 18:\n            balance -= -1\n        case 19:\n        \
    \    balance += -2\n        case 20:\n            balance -= -2\n        case\
    \ 21:\n            balance += -3\n        case 22:\n            balance -= -3\n\
    \        case 23:\n            balance += -4\n        case 24:\n            balance\
    \ -= -4\n        case 25:\n            balance += -5\n        case 26:\n     \
    \       balance -= -5\n        case 27:\n            balance += -6\n        case\
    \ 28:\n            balance -= -6\n        case 29:\n            balance += -7\n\
    \        case 30:\n            balance -= -7\n        case 31:\n            balance\
    \ += -8\n        case 32:\n            balance -= -8\n        case 33:\n     \
    \       balance += -9\n        case 34:\n            balance -= -9\n        case\
    \ 35:\n            balance += -10\n        case 36:\n            balance -= -10\n\
    \        case 37:\n            balance += -11\n        case 38:\n            balance\
    \ -= -11\n        case 39:\n            balance += -12\n        case 40:\n   \
    \         balance -= -12\n        case 41:\n            balance += -13\n     \
    \   case 42:\n            balance -= -13\n        case 43:\n            balance\
    \ += -14\n        case 44:\n            balance -= -14\n        case 45:\n   \
    \         balance += -15\n        case 46:\n            balance -= -15\n     \
    \   case 47:\n            balance += -16\n        case 48:\n            balance\
    \ -= -16\n        case 49:\n            balance += -17\n        case 50:\n   \
    \         balance -= -17\n        case 51:\n            balance += -18\n     \
    \   case 52:\n            balance -= -18\n        case 53:\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp545i_q88.swift:113:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case 53:\n        ^~~~~~~~\n    \
    \             break\n/tmp/tmp545i_q88.swift:134:69: error: expected '}' at end\
    \ of brace statement\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4])\
    \ == true)\n                                                                 \
    \   ^\n/tmp/tmp545i_q88.swift:7:33: note: to match this opening '{'\n    for operation\
    \ in operations {\n                                ^\n/tmp/tmp545i_q88.swift:134:69:\
    \ error: expected '}' at end of brace statement\nassert(below_zero(operations:\
    \ [1, -2, 2, -2, 5, -5, 4, -4]) == true)\n                                   \
    \                                 ^\n/tmp/tmp545i_q88.swift:5:44: note: to match\
    \ this opening '{'\nfunc below_zero(operations: [Int]) -> Bool {\n           \
    \                                ^\n/tmp/tmp545i_q88.swift:8:9: error: switch\
    \ must be exhaustive\n        switch operation {\n        ^\n/tmp/tmp545i_q88.swift:8:9:\
    \ note: do you want to add a default clause?\n        switch operation {\n   \
    \     ^\n/tmp/tmp545i_q88.swift:117:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp521l19or/tmp521l19or.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f0d439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f0d130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f0d130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f0d12f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp521l19or                        0x000055f7199ef5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b3f0d625460 __libc_start_main +
    245

    6    tmp521l19or                        0x000055f7199ef0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adc85c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc85927561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adc85927286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adc8592713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adc85926bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adc85726e83 <unavailable> + 188035

    6    tmpgmsfav0_                        0x000055a74a6cc9c2 <unavailable> + 6594

    7    tmpgmsfav0_                        0x000055a74a6cc41d <unavailable> + 5149

    8    libc.so.6                          0x00002adc85e1c460 __libc_start_main +
    245

    9    tmpgmsfav0_                        0x000055a74a6cc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = Int()\n    for operation in operations {\n\
    \        balance += operation\n    }\n    if balance < 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7xip1xkn/tmp7xip1xkn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54f0341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54f0038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54f0038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54f00377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xip1xkn                        0x000055b96425b5e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b54f052d460 __libc_start_main +
    245

    6    tmp7xip1xkn                        0x000055b96425b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014138
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ += operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7fc38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7f92f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4a7f92f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4a7f92f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4a7f92ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4a7f72ee83 <unavailable> + 188035

    6    tmpz81p68rz                        0x00005652ee9389c2 <unavailable> + 6594

    7    tmpz81p68rz                        0x00005652ee93841d <unavailable> + 5149

    8    libc.so.6                          0x00002b4a7fe24460 __libc_start_main +
    245

    9    tmpz81p68rz                        0x00005652ee938129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { (acc, op) -> Int\
    \ in\n        switch op {\n        case 1:\n            return acc + op\n    \
    \    case -1:\n            return acc - op\n        }\n    }\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp996kfx4_.swift:7:9: error: switch must be exhaustive\n        switch\
    \ op {\n        ^\n/tmp/tmp996kfx4_.swift:7:9: note: do you want to add a default\
    \ clause?\n        switch op {\n        ^\n/tmp/tmp996kfx4_.swift:6:9: warning:\
    \ variable 'balance' was never mutated; consider changing to 'let' constant\n\
    \    var balance = operations.reduce(0) { (acc, op) -> Int in\n    ~~~ ^\n   \
    \ let\n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0) { $0 + $1 }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpbcj_ammk/tmpbcj_ammk.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eaa261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ea9f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ea9f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ea9f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcj_ammk                        0x000055d71cc274f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b3eaa44d460 __libc_start_main +
    245

    6    tmpbcj_ammk                        0x000055d71cc26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, +)\n    return balance\
    \ < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpdiy01pyl/tmpdiy01pyl.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a76f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a76c84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a76c84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a76c837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiy01pyl                        0x000055574e1384f8 <unavailable> + 5368

    5    libc.so.6                          0x00002b4a77179460 __libc_start_main +
    245

    6    tmpdiy01pyl                        0x000055574e137fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp9kb_wnbt/tmp9kb_wnbt.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05d2133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05d1e2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05d1e2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05d1e297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9kb_wnbt                        0x00005555f7b735e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b05d231f460 __libc_start_main +
    245

    6    tmp9kb_wnbt                        0x00005555f7b730d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
- exit_code: 1
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations.reduce(0, combine: +)\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpji0enila.swift:6:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014319
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmp7ednqtv4/tmp7ednqtv4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64d378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64d06fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64d06f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64d06e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ednqtv4                        0x00005568effd45e8 <unavailable> + 5608

    5    libc.so.6                          0x00002ab64d564460 __libc_start_main +
    245

    6    tmp7ednqtv4                        0x00005568effd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014319
