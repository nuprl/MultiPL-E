language: swift
name: HumanEval_122_add_elements
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var max = 0\n    for element in arr {\n        if max < element\
    \ {\n            max = element\n        }\n    }\n    for element in arr {\n \
    \       if max < element {\n            sum += element\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2kohr0aj/tmp2kohr0aj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63faa97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63fa78eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63fa78e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63fa78d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kohr0aj                        0x000056113764c4ab <unavailable> + 5291

    5    libc.so.6                          0x00002b63fac83460 __libc_start_main +
    245

    6    tmp2kohr0aj                        0x000056113764c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = k\n    for element in arr {\n        if i >= len(arr) {\n\
    \            break\n        }\n        sum += element\n        i -= 1\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpt1k9xo7h.swift:12:17: error: cannot find 'len' in scope\n     \
    \   if i >= len(arr) {\n                ^~~\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14] + arr[15] + arr[16]\
    \ + arr[17] + arr[18] + arr[19] + arr[20] + arr[21] + arr[22] + arr[23] + arr[24]\
    \ + arr[25] + arr[26] + arr[27] + arr[28] + arr[29] + arr[30] + arr[31] + arr[32]\
    \ + arr[33] + arr[34] + arr[35] + arr[36] + arr[37] + arr[38] + arr[39] + arr[40]\
    \ + arr[41] + arr[42] + arr[43] + arr[44] + arr[45] + arr[46] + arr[47] + arr[48]\
    \ + arr[49] + arr[50] + arr[51] + arr[52] + arr[53] + arr[54] + arr[55] + arr[56]\
    \ + arr[57] + arr[58] + arr[59] + arr[60] + arr[61] + arr[62] + arr[63] + arr[64]\
    \ + arr[65] + arr[66] + arr[67] + arr[68] + arr[69] + arr[70] + arr[71] + arr[72]\
    \ + arr[73] + arr[74] + arr[75] + arr[76] + arr[77] + arr[78] + arr[79] + arr[80]\
    \ + arr[81] + arr[82] + arr[83] + arr[84] + arr[85] + arr[86] + arr[87] + arr[88]\
    \ + arr[89] + arr[90] + arr[91] + arr[92] + arr[93] + arr[94] + arr[95] + arr[96]\
    \ + arr[97] + arr[98] + arr[99] + arr[100]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4354aa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4354797561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4354797286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b435479713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4354796bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4354596e83 <unavailable> + 188035

    6    tmphciqqnz9                        0x000055e304ffa990 <unavailable> + 6544

    7    tmphciqqnz9                        0x000055e304ffa31d <unavailable> + 4893

    8    libc.so.6                          0x00002b4354c8c460 __libc_start_main +
    245

    9    tmphciqqnz9                        0x000055e304ff9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979611
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14] + arr[15] + arr[16]\
    \ + arr[17] + arr[18] + arr[19] + arr[20] + arr[21] + arr[22] + arr[23] + arr[24]\
    \ + arr[25] + arr[26] + arr[27] + arr[28] + arr[29] + arr[30] + arr[31] + arr[32]\
    \ + arr[33] + arr[34] + arr[35] + arr[36] + arr[37] + arr[38] + arr[39] + arr[40]\
    \ + arr[41] + arr[42] + arr[43] + arr[44] + arr[45] + arr[46] + arr[47] + arr[48]\
    \ + arr[49] + arr[50] + arr[51] + arr[52] + arr[53] + arr[54] + arr[55] + arr[56]\
    \ + arr[57] + arr[58] + arr[59] + arr[60] + arr[61] + arr[62] + arr[63] + arr[64]\
    \ + arr[65] + arr[66] + arr[67] + arr[68] + arr[69] + arr[70] + arr[71] + arr[72]\
    \ + arr[73] + arr[74] + arr[75] + arr[76] + arr[77] + arr[78] + arr[79] + arr[80]\
    \ + arr[81] + arr[82] + arr[83] + arr[84] + arr[85] + arr[86] + arr[87] + arr[88]\
    \ + arr[89] + arr[90] + arr[91] + arr[92] + arr[93] + arr[94] + arr[95] + arr[96]\
    \ + arr[97] + arr[98] + arr[99] + arr[100]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4354aa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4354797561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4354797286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b435479713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4354796bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4354596e83 <unavailable> + 188035

    6    tmphciqqnz9                        0x000055e304ffa990 <unavailable> + 6544

    7    tmphciqqnz9                        0x000055e304ffa31d <unavailable> + 4893

    8    libc.so.6                          0x00002b4354c8c460 __libc_start_main +
    245

    9    tmphciqqnz9                        0x000055e304ff9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979611
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var max = 0\n    for element in arr {\n        if max < element\
    \ {\n            max = element\n        }\n    }\n    for element in arr {\n \
    \       if max < element {\n            sum += element\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2kohr0aj/tmp2kohr0aj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63faa97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63fa78eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63fa78e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63fa78d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kohr0aj                        0x000056113764c4ab <unavailable> + 5291

    5    libc.so.6                          0x00002b63fac83460 __libc_start_main +
    245

    6    tmp2kohr0aj                        0x000056113764c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14] + arr[15] + arr[16]\
    \ + arr[17] + arr[18] + arr[19] + arr[20] + arr[21] + arr[22] + arr[23] + arr[24]\
    \ + arr[25] + arr[26] + arr[27] + arr[28] + arr[29] + arr[30] + arr[31] + arr[32]\
    \ + arr[33] + arr[34] + arr[35] + arr[36] + arr[37] + arr[38] + arr[39] + arr[40]\
    \ + arr[41] + arr[42] + arr[43] + arr[44] + arr[45] + arr[46] + arr[47] + arr[48]\
    \ + arr[49] + arr[50] + arr[51] + arr[52] + arr[53] + arr[54] + arr[55] + arr[56]\
    \ + arr[57] + arr[58] + arr[59] + arr[60] + arr[61] + arr[62] + arr[63] + arr[64]\
    \ + arr[65] + arr[66] + arr[67] + arr[68] + arr[69] + arr[70] + arr[71] + arr[72]\
    \ + arr[73] + arr[74] + arr[75] + arr[76] + arr[77] + arr[78] + arr[79] + arr[80]\
    \ + arr[81] + arr[82] + arr[83] + arr[84] + arr[85] + arr[86] + arr[87] + arr[88]\
    \ + arr[89] + arr[90] + arr[91] + arr[92] + arr[93] + arr[94] + arr[95] + arr[96]\
    \ + arr[97] + arr[98] + arr[99] + arr[100]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4354aa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4354797561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4354797286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b435479713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4354796bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4354596e83 <unavailable> + 188035

    6    tmphciqqnz9                        0x000055e304ffa990 <unavailable> + 6544

    7    tmphciqqnz9                        0x000055e304ffa31d <unavailable> + 4893

    8    libc.so.6                          0x00002b4354c8c460 __libc_start_main +
    245

    9    tmphciqqnz9                        0x000055e304ff9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979611
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14] + arr[15] + arr[16]\
    \ + arr[17] + arr[18] + arr[19] + arr[20] + arr[21] + arr[22] + arr[23] + arr[24]\
    \ + arr[25] + arr[26] + arr[27] + arr[28] + arr[29] + arr[30] + arr[31]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aff89e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff89b2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aff89b2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aff89b2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aff89b2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aff8992ae83 <unavailable> + 188035

    6    tmpx7gdmpby                        0x0000561ab333b990 <unavailable> + 6544

    7    tmpx7gdmpby                        0x0000561ab333b31d <unavailable> + 4893

    8    libc.so.6                          0x00002aff8a020460 __libc_start_main +
    245

    9    tmpx7gdmpby                        0x0000561ab333afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\
    \ + arr[9] + arr[10] + arr[11] + arr[12] + arr[13] + arr[14] + arr[15] + arr[16]\
    \ + arr[17] + arr[18] + arr[19] + arr[20] + arr[21] + arr[22] + arr[23] + arr[24]\
    \ + arr[25] + arr[26] + arr[27] + arr[28] + arr[29] + arr[30] + arr[31] + arr[32]\
    \ + arr[33] + arr[34] + arr[35] + arr[36] + arr[37] + arr[38] + arr[39] + arr[40]\
    \ + arr[41] + arr[42] + arr[43] + arr[44] + arr[45] + arr[46] + arr[47] + arr[48]\
    \ + arr[49] + arr[50] + arr[51] + arr[52] + arr[53] + arr[54] + arr[55] + arr[56]\
    \ + arr[57] + arr[58] + arr[59] + arr[60] + arr[61] + arr[62] + arr[63] + arr[64]\
    \ + arr[65] + arr[66] + arr[67] + arr[68] + arr[69] + arr[70] + arr[71] + arr[72]\
    \ + arr[73] + arr[74] + arr[75] + arr[76] + arr[77] + arr[78] + arr[79] + arr[80]\
    \ + arr[81] + arr[82] + arr[83] + arr[84] + arr[85] + arr[86] + arr[87] + arr[88]\
    \ + arr[89] + arr[90] + arr[91] + arr[92] + arr[93] + arr[94] + arr[95] + arr[96]\
    \ + arr[97] + arr[98] + arr[99] + arr[100]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4354aa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4354797561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4354797286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b435479713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4354796bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4354596e83 <unavailable> + 188035

    6    tmphciqqnz9                        0x000055e304ffa990 <unavailable> + 6544

    7    tmphciqqnz9                        0x000055e304ffa31d <unavailable> + 4893

    8    libc.so.6                          0x00002b4354c8c460 __libc_start_main +
    245

    9    tmphciqqnz9                        0x000055e304ff9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979611
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var last = 0\n    for index in 0..<k {\n        sum += arr[index]\n\
    \        last = index\n    }\n    for index in k..<arr.count {\n        sum +=\
    \ arr[index]\n        if sum > 9 {\n            sum += last - index\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpzn_w2ptj/tmpzn_w2ptj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affe0283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affdff7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affdff7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affdff797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzn_w2ptj                        0x00005618a1e7657b <unavailable> + 5499

    5    libc.so.6                          0x00002affe046f460 __libc_start_main +
    245

    6    tmpzn_w2ptj                        0x00005618a1e761a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpj4qv9ab7.swift:10:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i : Int in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7rlc7z6i/tmp7rlc7z6i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac52ed05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac52e9fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac52e9fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac52e9fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rlc7z6i                        0x000055967ca625fd <unavailable> + 5629

    5    libc.so.6                          0x00002ac52eef1460 __libc_start_main +
    245

    6    tmp7rlc7z6i                        0x000055967ca62149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0oebjeca/tmp0oebjeca.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c4c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c4944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c4944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c49437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0oebjeca                        0x00005574d0a885fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab8c4e39460 __libc_start_main +
    245

    6    tmp0oebjeca                        0x00005574d0a88149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxjvddjjz/tmpxjvddjjz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6956e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6956b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6956b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6956b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxjvddjjz                        0x000055bbed4675fd <unavailable> + 5629

    5    libc.so.6                          0x00002b6957009460 __libc_start_main +
    245

    6    tmpxjvddjjz                        0x000055bbed467149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979610
