name: HumanEval_58_common
language: swift
prompt: "\n/// Return sorted unique common elements for two lists.\nfunc common(l1:\
  \ [Int], l2: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2:\
  \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2:\
  \ [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
  assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
completions: ["    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common = l1\n    for element in l2 {\n        if commonIndexOf(common,\
    \ element) == -1 {\n            common = append(common, element)\n        }\n\
    \    }\n    return common", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    for\
    \ x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result", "    var result: [Int] = []\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n            if !result.contains(&y) {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result\
    \ = append(result, x)\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var common = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            common.append(x)\n        }\n\
    \    }\n    return common", "    var result: [Int] = []\n    for x in l1 {\n \
    \       if !contains(l2, x) {\n            result = append(result, x)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n\
    \        for y in l2 {\n            if x == y {\n                continue\n  \
    \          }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n        }\n    }\n    return result", "    var common: [Int] =\
    \ []\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n    \
    \            continue\n            }\n            if !common.contains(&x) {\n\
    \                common.append(x)\n            }\n            if !common.contains(&y)\
    \ {\n                common.append(y)\n            }\n        }\n    }\n    return\
    \ common", "    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if !result.contains(&x) {\n                result.append(x)\n            }\n\
    \            if !result.contains(&y) {\n                result.append(y)\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l1 {\n        if !contains(l2, i) {\n            result = append(result, i)\n\
    \        }\n    }\n    return result", "    var common = Set()\n    for x in l1\
    \ {\n        if !common.contains(x) {\n            common.add(x)\n        }\n\
    \    }\n    for x in l2 {\n        if !common.contains(x) {\n            common.add(x)\n\
    \        }\n    }\n    return Array(common)", "    var result: [Int] = []\n  \
    \  for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result\
    \ = append(result, x)\n            }\n        }\n    }\n    return result", " \
    \   var common: [Int] = []\n    for x in l1 {\n        for y in l2 {\n       \
    \     if x == y {\n                continue\n            }\n            if !common.contains(&x)\
    \ {\n                common.append(x)\n            }\n        }\n    }\n    return\
    \ common", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        if !contains(l2, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return result", "    var result = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for x in l1\
    \ {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.insert(x)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var common: [Int] = []\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !common.contains(&x) {\n                common.append(x)\n   \
    \         }\n            if !common.contains(&y) {\n                common.append(y)\n\
    \            }\n        }\n    }\n    return common", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var common = l1\n    for element in l2 {\n        if commonContains(common,\
    \ element) {\n            common = common[commonIndexOf(common, element)]\n  \
    \      } else {\n            common = append(common, element)\n        }\n   \
    \ }\n    return common", "    var result = [Int]()\n    for x in l1 {\n      \
    \  if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n   \
    \ return result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n\
    \                continue\n            }\n            if !result.contains(&x)\
    \ {\n                result.insert(x)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n         \
    \   if x == y {\n                continue\n            }\n            if !result.contains(&x)\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            result.append(x)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n       \
    \     result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result\
    \ = append(result, x)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.insert(x)\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n    \
    \            continue\n            }\n            if !contains(result, x) {\n\
    \                result = append(result, x)\n            }\n            if !contains(result,\
    \ y) {\n                result = append(result, y)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     for y in l2 {\n            if x == y {\n                continue\n     \
    \       }\n            if !contains(result, x) {\n                append(result,\
    \ x)\n            }\n            if !contains(result, y) {\n                append(result,\
    \ y)\n            }\n        }\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result =\
    \ append(result, x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !contains(result, x) {\n                result = append(result,\
    \ x)\n            }\n            if !contains(result, y) {\n                result\
    \ = append(result, y)\n            }\n        }\n    }\n    return result", " \
    \   var common: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n\
    \            common.append(x)\n        }\n    }\n    return common", "    var\
    \ result: [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n     \
    \       result.append(x)\n        }\n    }\n    for x in l2 {\n        if !contains(l1,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common: [Int] = []\n    for x in l1 {\n        for y in l2 {\n       \
    \     if x == y {\n                continue\n            }\n            if !common.contains(&x)\
    \ {\n                common.append(x)\n            }\n        }\n    }\n    return\
    \ common", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common = Set()\n    for x in l1 {\n        if !common.contains(&x) {\n\
    \            common = common.union(&x)\n        }\n    }\n    for x in l2 {\n\
    \        if !common.contains(&x) {\n            common = common.union(&x)\n  \
    \      }\n    }\n    return Array(common)", "    var result = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for x in l1\
    \ {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n        }\n    }\n    return result", "    var common = Set()\n\
    \    for x in l1 {\n        if !common.contains(x) {\n            common.add(x)\n\
    \        }\n    }\n    for x in l2 {\n        if !common.contains(x) {\n     \
    \       common.add(x)\n        }\n    }\n    return Array(common)", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if result.contains(&x) {\n                continue\n\
    \            }\n            result.insert(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n\
    \                continue\n            }\n            if result.contains(&x) {\n\
    \                continue\n            }\n            result.insert(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n\
    \        if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !contains(result, x) {\n                append(result, x)\n  \
    \          }\n            if !contains(result, y) {\n                append(result,\
    \ y)\n            }\n        }\n    }\n    return result", "    var common = Set()\n\
    \    for x in l1 {\n        if !common.contains(x) {\n            common.add(x)\n\
    \        }\n    }\n    for x in l2 {\n        if !common.contains(x) {\n     \
    \       common.add(x)\n        }\n    }\n    return Array(common)", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        for y in l2 {\n            if x == y\
    \ {\n                continue\n            }\n            if !result.contains(&x)\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    return\
    \ result", "    var common: [Int] = []\n    for i in l1 {\n        for j in l2\
    \ {\n            if i == j {\n                continue\n            }\n      \
    \      if !common.contains(i) {\n                common.append(i)\n          \
    \  }\n            if !common.contains(j) {\n                common.append(j)\n\
    \            }\n        }\n    }\n    return common", "    var result = [Int]()\n\
    \    for i in l1 {\n        if !contains(l2, i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result", "    var result = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result", "    var common: [Int] = []\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                common.append(x)\n\
    \                break\n            }\n        }\n    }\n    return common", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var common:\
    \ [Int] = []\n    for x in l1 {\n        for y in l2 {\n            if x == y\
    \ {\n                continue\n            }\n            if !common.contains(&x)\
    \ {\n                common.append(x)\n            }\n            if !common.contains(&y)\
    \ {\n                common.append(y)\n            }\n        }\n    }\n    return\
    \ common", "    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common: [Int] = []\n    for x in l1 {\n        for y in l2 {\n       \
    \     if x == y {\n                continue\n            }\n            if !common.contains(&x)\
    \ {\n                common = append(common, x)\n            }\n        }\n  \
    \  }\n    return common", "    var result = [Int]()\n    for x in l1 {\n     \
    \   for y in l2 {\n            if x == y {\n                continue\n       \
    \     }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n            if !result.contains(&y) {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n    \
    \            continue\n            }\n            if !contains(result, x) {\n\
    \                result = append(result, x)\n            }\n        }\n    }\n\
    \    return result", "    var common: [Int] = []\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                common.append(x)\n     \
    \           break\n            }\n        }\n    }\n    return common", "    var\
    \ result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n       \
    \     result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result", "    var common:\
    \ [Int] = []\n    for x in l1 {\n        for y in l2 {\n            if x == y\
    \ {\n                common.append(x)\n                break\n            }\n\
    \        }\n    }\n    return common", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result\
    \ = append(result, x)\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in l1 {\n        if !contains(l2, i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result\
    \ = append(result, x)\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n         \
    \   if x == y {\n                continue\n            }\n            if !result.contains(&x)\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           common.append(x)\n        }\n    }\n    return common", "    var result\
    \ = [Int]()\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n\
    \                continue\n            }\n            if result.contains(&x) {\n\
    \                continue\n            }\n            result.insert(x)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n\
    \        if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for x in l1 {\n \
    \       if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if result.contains(&x) {\n                continue\n            }\n       \
    \     result.insert(x)\n        }\n    }\n    return result", "    var common\
    \ = l1\n    for elem in l2 {\n        if common.isEmpty {\n            common\
    \ = l1\n        } else {\n            for elem2 in common {\n                if\
    \ elem == elem2 {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return common", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in l1 {\n        if !contains(l2, i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result", "    var common = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            common.append(x)\n   \
    \     }\n    }\n    return common", "    var common = l1\n    for element in l2\
    \ {\n        if !common.contains(element) {\n            common.append(element)\n\
    \        }\n    }\n    return common", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result\
    \ = append(result, x)\n            }\n            if !contains(result, y) {\n\
    \                result = append(result, y)\n            }\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result = append(result, i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    for\
    \ x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result", "    var result = [Int]()\n    for x in l1\
    \ {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if result.contains(&x) {\n                continue\n\
    \            }\n            result.insert(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n          \
    \  if x == y {\n                continue\n            }\n            if !result.contains(&x)\
    \ {\n                result.append(x)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var common: [Int] = []\n    for x in l1 {\n        for y in l2 {\n       \
    \     if x == y {\n                continue\n            }\n            if !common.contains(&x)\
    \ {\n                common = append(common, x)\n            }\n        }\n  \
    \  }\n    return common", "    var result = [Int]()\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if result.contains(&x) {\n                continue\n\
    \            }\n            result.insert(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var common\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            common.append(x)\n\
    \        }\n    }\n    return common", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     for y in l2 {\n            if x == y {\n                continue\n     \
    \       }\n            if result.contains(&x) {\n                continue\n  \
    \          }\n            result.insert(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        if !contains(l2, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return result", "    var common = l1\n    for element\
    \ in l2 {\n        if commonIndexOf(common, element) == -1 {\n            common\
    \ = append(common, element)\n        }\n    }\n    return common", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        if !contains(l2, x) {\n            result\
    \ = append(result, x)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n\
    \                continue\n            }\n            if !contains(result, x)\
    \ {\n                result = append(result, x)\n            }\n            if\
    \ !contains(result, y) {\n                result = append(result, y)\n       \
    \     }\n        }\n    }\n    return result", "    var result: [Int] = []\n \
    \   for i in l1 {\n        if !contains(l2, i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result", "    var result = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n   \
    \     }\n    }\n    for x in l2 {\n        if !contains(l1, x) {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var common = Set()\n    for x in l1\
    \ {\n        if !common.contains(&x) {\n            common = common.union(&x)\n\
    \        }\n    }\n    for x in l2 {\n        if !common.contains(&x) {\n    \
    \        common = common.union(&x)\n        }\n    }\n    return Array(common)",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    for x in l2 {\n        if !contains(l1, x) {\n        \
    \    result.append(x)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     for y in l2 {\n            if x == y {\n                continue\n     \
    \       }\n            if result.contains(&x) {\n                continue\n  \
    \          }\n            result.insert(x)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n  \
    \          result.append(x)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !result.contains(&x) {\n                result.append(x)\n\
    \            }\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    for x in l1 {\n        for y in l2 {\n            if x == y {\n    \
    \            continue\n            }\n            if !contains(result, x) {\n\
    \                result = append(result, x)\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for x in l1 {\n        for y in l2\
    \ {\n            if x == y {\n                continue\n            }\n      \
    \      if !contains(result, x) {\n                result = append(result, x)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        for y in l2 {\n            if x == y {\n         \
    \       continue\n            }\n            if !result.contains(&x) {\n     \
    \           result.append(x)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in l1 {\n        if !contains(l2, i) {\n  \
    \          result.append(i)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !contains(result, x) {\n                result.append(x)\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var common = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            common.append(x)\n        }\n    }\n    return\
    \ common", "    var result = [Int]()\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for x in l1 {\n        for y in l2 {\n            if x == y\
    \ {\n                continue\n            }\n            if !contains(result,\
    \ x) {\n                result = append(result, x)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n         \
    \   if x == y {\n                continue\n            }\n            if result.contains(&x)\
    \ {\n                continue\n            }\n            result.insert(x)\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var common = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            common.append(x)\n        }\n    }\n\
    \    return common", "    var result: [Int] = []\n    for i in l1 {\n        if\
    \ !contains(l2, i) {\n            result = append(result, i)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !contains(result, x) {\n                append(result, x)\n  \
    \          }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        for y in l2 {\n            if x == y {\n         \
    \       continue\n            }\n            if result.contains(&x) {\n      \
    \          continue\n            }\n            result.insert(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in l1 {\n        for y in l2 {\n\
    \            if x == y {\n                continue\n            }\n          \
    \  if !contains(result, x) {\n                result = append(result, x)\n   \
    \         }\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    for x in l1 {\n        for y in l2 {\n            if x == y {\n         \
    \       continue\n            }\n            if result.contains(&x) {\n      \
    \          continue\n            }\n            result.insert(x)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for x in l1 {\n \
    \       if !contains(l2, x) {\n            result = append(result, x)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n\
    \        if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for x in l1 {\n        for\
    \ y in l2 {\n            if x == y {\n                continue\n            }\n\
    \            if !contains(result, x) {\n                result = append(result,\
    \ x)\n            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    for x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        for y in l2 {\n            if x == y {\n                continue\n\
    \            }\n            if !contains(result, x) {\n                result.append(x)\n\
    \            }\n            if !contains(result, y) {\n                result.append(y)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for x in l1 {\n \
    \       for y in l2 {\n            if x == y {\n                continue\n   \
    \         }\n            if !contains(result, x) {\n                append(result,\
    \ x)\n            }\n            if !contains(result, y) {\n                append(result,\
    \ y)\n            }\n        }\n    }\n    return result", "    var common = [Int]()\n\
    \    for x in l1 {\n        if !contains(l2, x) {\n            common.append(x)\n\
    \        }\n    }\n    return common", "    var result = [Int]()\n    for x in\
    \ l1 {\n        if !contains(l2, x) {\n            result.append(x)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in l1 {\n   \
    \     if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for x in l1 {\n        if\
    \ !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for x in l1 {\n        if !contains(l2,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in l1 {\n        if !contains(l2, x) {\n \
    \           result.append(x)\n        }\n    }\n    return result", "    var common\
    \ = l1\n    for _i in l2 {\n        if common.remove(_i) {\n            break\n\
    \        }\n    }\n    return common", "    var result: [Int] = []\n    for x\
    \ in l1 {\n        if !contains(l2, x) {\n            result = append(result,\
    \ x)\n        }\n    }\n    return result", "    var result = [Int]()\n    for\
    \ x in l1 {\n        if !contains(l2, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result"]
stop_tokens:
- "\n}"
