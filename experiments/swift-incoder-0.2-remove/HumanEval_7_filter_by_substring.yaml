name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  func filter_by_substring(strings: [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["    return strings.filter { (string) -> Bool in\n        let substringRange\
    \ = string.range(of: substring)\n        return substringRange.lowerBound != nil\n\
    \    }", "    return strings.filter {\n        let range = ($0.lowercased()).range(of:\
    \ substring.lowercased())\n        return range != nil\n    }", '    return strings.filter
    { $0.contains(substring) }', "    var filtered = [String]()\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.contains(substring) }', "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter {\n        $0.contains(substring)\n\
    \    }", '    return strings.filter { $0.contains(substring) }', "    var filteredStrings:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    return strings.filter {\n\
    \        contains($0, substring)\n    }", "    return strings.filter {\n     \
    \   let range = Range(uncheckedBounds: (lower: String.Index(encodedOffset: substring.startIndex,\
    \ in: strings.startIndex, offsetBy: 0), upper: String.Index(encodedOffset: substring.endIndex,\
    \ in: strings.endIndex, offsetBy: 0)));\n        return range.contains(String.Index(encodedOffset:\
    \ $0, in: strings, offsetBy: 0));\n    }", "    var filtered: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    return\
    \ strings.filter { (string: String) -> Bool in\n        let range = string.range(of:\
    \ substring)\n        return range != nil\n    }", '    return strings.filter{
    $0.contains(substring) }', "    var filteredStrings = [String]()\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  '    return strings.filter { $0.contains(substring) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter { $0.contains(substring) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter({$0.contains(substring)})', "    var filtered = [String]()\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    return\
    \ strings.filter { (string: String) -> Bool in\n        let range = string.range(of:\
    \ substring)\n        return range != nil\n    }", "    return strings.filter\
    \ { (string) -> Bool in\n        let substringRange = string.rangeOfString(substring)\n\
    \        return substringRange.location != NSNotFound\n    }", "    var filteredStrings\
    \ = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings = [String]()\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        if let index = string.range(of: substring)\
    \ {\n            return true\n        }\n        return false\n    }", '    return
    strings.filter { $0.contains(substring) }', "    return strings.filter {\n   \
    \     contains($0, substring)\n    }", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filteredStrings: [String] =\
    \ []\n    for string in strings {\n        if string.contains(substring) {\n \
    \           filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter{ $0.contains(substring) }', "    return strings.filter\
    \ {\n        contains($0, substring)\n    }", '    return strings.filter { $0.contains(substring)
    }', "    var filteredStrings: [String] = []\n    for string in strings {\n   \
    \     if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", '    return strings.filter { $0.contains(substring)
    }', "    return strings.filter { (string: String) -> Bool in\n        let index\
    \ = string.index(of: substring)\n        return index != nil\n    }", "    var\
    \ filteredStrings: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filteredStrings: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter { (string: String) -> Bool in\n\
    \        let substringRange = string.range(of: substring)\n        return substringRange.lowerBound\
    \ != nil\n    }", "    var filteredStrings: [String] = []\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    return strings.filter {\n        guard let range = Range(uncheckedBounds: (lower:\
    \ String.Index(encodedOffset: substring.startIndex, in: strings.startIndex, offsetBy:\
    \ 0), upper: String.Index(encodedOffset: substring.endIndex, in: strings.endIndex,\
    \ offsetBy: 0))) else {\n            return false\n        }\n        return range.contains(String.Index(encodedOffset:\
    \ $0.startIndex, in: strings.startIndex, offsetBy: 0))\n    }", "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.contains(substring) }', "    var filteredStrings:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filtered: [String] =\
    \ []\n    for string in strings {\n        if string.contains(substring) {\n \
    \           filtered.append(string)\n        }\n    }\n    return filtered", " \
    \   var filteredStrings = [String]()\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let range = string.rangeOfString(substring)\n  \
    \      return range != nil\n    }", "    var filteredStrings: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    return strings.filter {\n        let range = ($0.lowercased(), $0.lowercased().range(of:\
    \ substring))\n        return range.count == 2\n    }", "    var filtered: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filtered: [String] = []\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  '    return strings.filter({$0.contains(substring)})', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let index = string.index(of: substring)\n      \
    \  return index != nil\n    }", "    var filteredStrings: [String] = []\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.contains(substring) }', "    var filtered: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let index = string.range(of:\
    \ substring)\n        return index != nil\n    }", "    return strings.filter\
    \ { (string: String) -> Bool in\n        let substringRange = string.range(of:\
    \ substring)\n        return substringRange.lowerBound != nil\n    }", "    var\
    \ filteredStrings: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let substringRange = string.range(of: substring)\n\
    \        return substringRange.lowerBound != nil\n    }", "    return strings.filter\
    \ {\n        if let index = string.range(of: substring) {\n            return\
    \ true\n        }\n        return false\n    }", "    var filtered: [String] =\
    \ []\n    for string in strings {\n        if string.contains(substring) {\n \
    \           filtered.append(string)\n        }\n    }\n    return filtered", " \
    \   return strings.filter { (string: String) -> Bool in\n        let index = string.rangeOfString(substring)\n\
    \        return index != nil\n    }", "    var filteredStrings: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let substringRange = string.range(of: substring)\n\
    \        return substringRange.lowerBound != nil\n    }", "    var filtered: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter({$0.contains(substring)})', "    return strings.filter\
    \ {\n        $0.contains(substring)\n    }", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter { (string) -> Bool in\n       \
    \ let substringRange = string.range(of: substring)\n        return substringRange.lowerBound\
    \ != nil\n    }", '    return strings.filter({$0.contains(substring)})', "   \
    \ var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filteredStrings = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    return strings.filter { (string: String) -> Bool in\n        let substringRange\
    \ = string.range(of: substring)\n        return substringRange.lowerBound != nil\n\
    \    }", "    return strings.filter { (string: String) -> Bool in\n        let\
    \ substringRange = string.range(of: substring)\n        return substringRange.lowerBound\
    \ != nil\n    }", "    return strings.filter { (string: String) -> Bool in\n \
    \       let index = string.range(of: substring)\n        return index != nil\n\
    \    }", '    return strings.filter { $0.contains(substring) }', "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter { $0.contains(substring) }', "    var filteredStrings:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    var filteredStrings: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    return strings.filter {\n\
    \        guard let index = string.range(of: substring) else { return false }\n\
    \        return index != nil\n    }", "    var filteredStrings: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", '    return strings.filter{ $0.contains(substring)
    }', "    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered", "    var filtered: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.contains(substring) }', "    var filtered = [String]()\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string) -> Bool in\n        let range = string.rangeOfString(substring)\n\
    \        return range != nil\n    }", "    return strings.filter { (string: String)\
    \ -> Bool in\n        let range = (string as NSString).rangeOfString(substring)\n\
    \        return range != nil\n    }", "    return strings.filter { (string: String)\
    \ -> Bool in\n        let range = (string as NSString).rangeOfString(substring)\n\
    \        return range != nil\n    }", "    return strings.filter({ (string: String)\
    \ -> Bool in\n        let range = string.rangeOfString(substring)\n        return\
    \ range != nil\n    })", "    var filteredStrings: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filtered: [String] =\
    \ []\n    for string in strings {\n        if string.contains(substring) {\n \
    \           filtered.append(string)\n        }\n    }\n    return filtered", " \
    \   var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", '    return strings.filter { $0.contains(substring)
    }', '    return strings.filter{ $0.contains(substring) }', '    return strings.filter{
    $0.contains(substring) }', "    var filtered: [String] = []\n    for string in\
    \ strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let substringRange = string.range(of: substring)\n\
    \        return substringRange.lowerBound != nil\n    }", '    return strings.filter{
    $0.contains(substring) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.contains(substring) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string) -> Bool in\n        let range = string.rangeOfString(substring)\n\
    \        return range != nil\n    }", "    return strings.filter {\n        let\
    \ range = ($0.lowercased(), $0.lowercased().range(of: substring))\n        return\
    \ range.count == 2\n    }", "    var filteredStrings = [String]()\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  '    return strings.filter { $0.contains(substring) }', '    return strings.filter({$0.contains(substring)})',
  "    var filtered: [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter { $0.contains(substring) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    return strings.filter {\n        guard let index = string.range(of: substring)\
    \ else { return false }\n        return index != nil\n    }", '    return strings.filter{
    $0.contains(substring) }', "    var filteredStrings: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", '    return strings.filter { $0.contains(substring)
    }', "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter { (string) -> Bool in\n       \
    \ let index = string.range(of: substring)\n        return index != nil\n    }",
  "    return strings.filter { (string) -> Bool in\n        let range = string.rangeOfString(substring)\n\
    \        return range != nil\n    }", "    return strings.filter {\n        let\
    \ substringIndex = string.range(of: substring)\n        return substringIndex\
    \ != nil\n    }", "    var filtered = [String]()\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string)\
    \ -> Bool in\n        let index = string.range(of: substring)\n        return\
    \ index != nil\n    }", "    var filteredStrings: [String] = []\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    var filteredStrings: [String]\
    \ = []\n    for string in strings {\n        if string.contains(substring) {\n\
    \            filteredStrings.append(string)\n        }\n    }\n    return filteredStrings",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let substringRange\
    \ = string.range(of: substring)\n        return substringRange.lowerBound != nil\n\
    \    }", "    var filtered = [String]()\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filtered.append(string)\n     \
    \   }\n    }\n    return filtered", "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.contains(substring) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter({ (string:\
    \ String) -> Bool in\n        let substringRange = string.range(of: substring)\n\
    \        return substringRange.lowerBound != nil\n    })", "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filteredStrings: [String] = []\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            filteredStrings.append(string)\n \
    \       }\n    }\n    return filteredStrings", '    return strings.filter{ $0.contains(substring)
    }', "    var filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.contains(substring) }', "    var filteredStrings:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filteredStrings.append(string)\n        }\n    }\n    return\
    \ filteredStrings", "    return strings.filter { (string) -> Bool in\n       \
    \ let range = string.rangeOfString(substring)\n        return range != nil\n \
    \   }", "    var filteredStrings: [String] = []\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", '    return strings.filter{ $0.contains(substring)
    }', "    var filteredStrings: [String] = []\n    for string in strings {\n   \
    \     if string.contains(substring) {\n            filteredStrings.append(string)\n\
    \        }\n    }\n    return filteredStrings", "    return strings.filter { (string)\
    \ -> Bool in\n        let substringRange = string.rangeOfString(substring)\n \
    \       return substringRange.location != NSNotFound\n    }"]
stop_tokens:
- "\n}"
