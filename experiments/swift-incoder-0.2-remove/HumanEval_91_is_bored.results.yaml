language: swift
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var currentWord = \"\
    \"\n    for c in S {\n        if c == '.' || c == '?' || c == '!' {\n        \
    \    if currentWord == \"I\" {\n                boredoms += 1\n            }\n\
    \            currentWord = \"\"\n        } else {\n            currentWord +=\
    \ String(c)\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiz76pn06.swift:10:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' || c == '?' || c == '!' {\n                ^~~\n\
    \                \".\"\n/tmp/tmpiz76pn06.swift:10:29: error: single-quoted string\
    \ literal found, use '\"'\n        if c == '.' || c == '?' || c == '!' {\n   \
    \                         ^~~\n                            \"?\"\n/tmp/tmpiz76pn06.swift:10:41:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n                                        ^~~\n      \
    \                                  \"!\"\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.characters.filter { $0 ==\
    \ \"I\" }.count\n    return boredom\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqolxj9ow.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let boredom = S.characters.filter { $0 == \"I\" }.count\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n  \
    \  var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n   \
    \ var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var\
    \ O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T\
    \ = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y =\
    \ 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n\
    \    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D\
    \ = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I =\
    \ 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n\
    \    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n \
    \   var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n  \
    \  var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n \
    \   var D = 0\n    var E = 0\n    var F = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpi3ylimjc.swift:60:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpi3ylimjc.swift:8:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpi3ylimjc.swift:61:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpi3ylimjc.swift:9:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpi3ylimjc.swift:62:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpi3ylimjc.swift:10:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpi3ylimjc.swift:63:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpi3ylimjc.swift:11:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpi3ylimjc.swift:64:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpi3ylimjc.swift:12:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpi3ylimjc.swift:65:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpi3ylimjc.swift:13:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpi3ylimjc.swift:66:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpi3ylimjc.swift:14:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpi3ylimjc.swift:67:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpi3ylimjc.swift:15:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpi3ylimjc.swift:68:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpi3ylimjc.swift:16:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpi3ylimjc.swift:69:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpi3ylimjc.swift:17:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpi3ylimjc.swift:70:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpi3ylimjc.swift:18:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpi3ylimjc.swift:71:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpi3ylim"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzdk95zea/tmpzdk95zea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdk95zea                        0x000055934772172b <unavailable> + 5931

    5    libc.so.6                          0x00002ae90f832460 __libc_start_main +
    245

    6    tmpzdk95zea                        0x0000559347721309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpggjki7f5/tmpggjki7f5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1998862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1998559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1998559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19985587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjki7f5                        0x00005615eb9b47b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b1998a4e460 __libc_start_main +
    245

    6    tmpggjki7f5                        0x00005615eb9b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var i = 0\n    while\
    \ i < S.count {\n        if S[i] == \"I\" {\n            boredoms += 1\n     \
    \   }\n        i += 1\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjr5320xo.swift:10:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if S[i] ==\
    \ \"I\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp38yh4u7g/tmp38yh4u7g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38yh4u7g                        0x00005647c0f2066b <unavailable> + 5739

    5    libc.so.6                          0x00002b468c751460 __libc_start_main +
    245

    6    tmp38yh4u7g                        0x00005647c0f20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Return number of boredoms in S\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpi6skhuv7/tmpi6skhuv7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef518ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef4e81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef4e81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef4e807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6skhuv7                        0x0000557143bef3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b2ef5376460 __libc_start_main +
    245

    6    tmpi6skhuv7                        0x0000557143beeee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpgbb062fx/tmpgbb062fx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7805eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7802e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7802e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7802e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbb062fx                        0x00005620b6ce972b <unavailable> + 5931

    5    libc.so.6                          0x00002ba7807da460 __libc_start_main +
    245

    6    tmpgbb062fx                        0x00005620b6ce9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzdk95zea/tmpzdk95zea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdk95zea                        0x000055934772172b <unavailable> + 5931

    5    libc.so.6                          0x00002ae90f832460 __libc_start_main +
    245

    6    tmpzdk95zea                        0x0000559347721309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpgbb062fx/tmpgbb062fx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7805eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7802e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7802e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7802e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbb062fx                        0x00005620b6ce972b <unavailable> + 5931

    5    libc.so.6                          0x00002ba7807da460 __libc_start_main +
    245

    6    tmpgbb062fx                        0x00005620b6ce9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0 == \"I\"})\n \
    \   return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9go1j_vd/tmp9go1j_vd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af41b7cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41b4c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af41b4c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af41b4c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9go1j_vd                        0x0000557bfc19752b <unavailable> + 5419

    5    libc.so.6                          0x00002af41b9b6460 __libc_start_main +
    245

    6    tmp9go1j_vd                        0x0000557bfc197109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcrxq2uok/tmpcrxq2uok.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1d5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1d2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1d2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1d2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxq2uok                        0x00005588890223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002baa1d7c4460 __libc_start_main +
    245

    6    tmpcrxq2uok                        0x0000558889021ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp38yh4u7g/tmp38yh4u7g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38yh4u7g                        0x00005647c0f2066b <unavailable> + 5739

    5    libc.so.6                          0x00002b468c751460 __libc_start_main +
    245

    6    tmp38yh4u7g                        0x00005647c0f20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.range(of: \"I\")\n    let\
    \ boredoms = S.components(separatedBy: \".\")\n    return boredoms.count - boredom.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpf5tzsk_5.swift:7:21: error: value of type 'String' has no member\
    \ 'range'\n    let boredom = S.range(of: \"I\")\n                  ~ ^~~~~\n/tmp/tmpf5tzsk_5.swift:8:22:\
    \ error: value of type 'String' has no member 'components'\n    let boredoms =\
    \ S.components(separatedBy: \".\")\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find all the sentences that start with the word \"I\".\n    \n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpkz1udfif/tmpkz1udfif.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b7b971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b7b668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b7b668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b7b6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkz1udfif                        0x00005644289a93b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b6b7bb5d460 __libc_start_main +
    245

    6    tmpkz1udfif                        0x00005644289a8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcrxq2uok/tmpcrxq2uok.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1d5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1d2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1d2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1d2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxq2uok                        0x00005588890223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002baa1d7c4460 __libc_start_main +
    245

    6    tmpcrxq2uok                        0x0000558889021ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredomCount = 0\n    var sentence = S.split(separator:\
    \ \".\", omittingEmptySubsequences: false)\n    for word in sentence {\n     \
    \   if word.hasPrefix(\"I\") {\n            boredomCount += 1\n        }\n   \
    \ }\n    return boredomCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp2983rvfj/tmp2983rvfj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e81e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e81b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e81b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e81b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2983rvfj                        0x0000562ac48c37cb <unavailable> + 6091

    5    libc.so.6                          0x00002b5e82072460 __libc_start_main +
    245

    6    tmp2983rvfj                        0x0000562ac48c33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    var boredoms = false\n\
    \    for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\")\
    \ {\n            boredoms = true\n        }\n        if boredoms {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpby7_7oa1/tmpby7_7oa1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7d9897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7d958eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7d958e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7d958d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpby7_7oa1                        0x00005591c7f0f72b <unavailable> + 5931

    5    libc.so.6                          0x00002ac7d9a83460 __libc_start_main +
    245

    6    tmpby7_7oa1                        0x00005591c7f0f309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0 == \"I\"})\n \
    \   return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9go1j_vd/tmp9go1j_vd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af41b7cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41b4c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af41b4c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af41b4c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9go1j_vd                        0x0000557bfc19752b <unavailable> + 5419

    5    libc.so.6                          0x00002af41b9b6460 __libc_start_main +
    245

    6    tmp9go1j_vd                        0x0000557bfc197109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6gf8tcq.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n                              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0 == \"I\"})\n \
    \   return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9go1j_vd/tmp9go1j_vd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af41b7cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41b4c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af41b4c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af41b4c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9go1j_vd                        0x0000557bfc19752b <unavailable> + 5419

    5    libc.so.6                          0x00002af41b9b6460 __libc_start_main +
    245

    6    tmp9go1j_vd                        0x0000557bfc197109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzdk95zea/tmpzdk95zea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdk95zea                        0x000055934772172b <unavailable> + 5931

    5    libc.so.6                          0x00002ae90f832460 __libc_start_main +
    245

    6    tmpzdk95zea                        0x0000559347721309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all the sentences that start with the word \"I\".\n    // HINT: You can\
    \ use the split() method to split a string into an array of strings.\n    // HINT:\
    \ You can use a for loop to iterate through the array of strings.\n    // HINT:\
    \ You can use the contains() method to check if a string contains a specific string.\n\
    \    // HINT: You can use the len() method to get the length of a string.\n  \
    \  // HINT: You can use the lower() method to convert a string's characters to\
    \ lower case.\n    // HINT: You can use the find() method to check if a string\
    \ contains a specific string.\n    // HINT: You can use the replace() method to\
    \ replace a specific substring with another substring.\n    // HINT: You can use\
    \ the replaceAll() method to replace all substrings of a specific substring with\
    \ another substring.\n    // HINT: You can use the toInt() method to convert a\
    \ string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // HINT: You can use the toInt() method to convert\
    \ a string to an integer.\n    // \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp_2g7auf3.swift:41:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: replace this implementation with\
    \ code that uses standard library\n    // functions to accomplish the same thing.\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgqyw0_h4.swift:9:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\
    \ $0.starts(with: \"I\") }\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var boredom: String\
    \ = S\n    while boredom.hasPrefix(\"I\") {\n        boredoms = boredoms + 1\n\
    \        boredom = boredom.dropFirst()\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp96smf0m4.swift:11:27: error: no 'dropFirst' candidates produce\
    \ the expected contextual result type 'String'\n        boredom = boredom.dropFirst()\n\
    \                          ^\nSwift.Sequence:4:40: note: 'dropFirst' produces\
    \ 'DropFirstSequence<String>', not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func dropFirst(_ k: Int = 1) -> DropFirstSequence<Self>\n\
    \                                       ^\nSwift.Collection:3:40: note: 'dropFirst'\
    \ produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func dropFirst(_ k:\
    \ Int = 1) -> Self.SubSequence\n                                       ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.characters.filter {\n    \
    \    switch $0 {\n        case \"I\":\n            return true\n        default:\n\
    \            return false\n        }\n    }.count\n    return boredom\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpchuyinhb.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let boredom = S.characters.filter {\n             \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcrxq2uok/tmpcrxq2uok.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1d5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1d2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1d2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1d2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxq2uok                        0x00005588890223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002baa1d7c4460 __libc_start_main +
    245

    6    tmpcrxq2uok                        0x0000558889021ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpkcuec507/tmpkcuec507.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a6548c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a623fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a623f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a623e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcuec507                        0x000055dcee26b72b <unavailable> + 5931

    5    libc.so.6                          0x00002b84a6734460 __libc_start_main +
    245

    6    tmpkcuec507                        0x000055dcee26b309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpplryus2i.swift:8:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.startsWith(\"\
    I\")})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpnft9dpe7.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter({$0.startsWith(\"\
    I\")})\n                             ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    // TODO: Write a function that takes\
    \ a string and returns the number of boredoms.\n    // HINT: Use a regular expression\
    \ to find all sentences that start with the word \"I\".\n    // HINT: You may\
    \ want to use split or split on whitespace.\n    \n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp_dgv8v3p/tmp_dgv8v3p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057609cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0575d93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0575d93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0575d927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dgv8v3p                        0x0000559e9a6893b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b0576288460 __libc_start_main +
    245

    6    tmp_dgv8v3p                        0x0000559e9a688ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    let boredoms = S.filter({\n        \n\
    \        switch $0 {\n            \n        case \"I\":\n            return true\n\
    \            \n        default:\n            return false\n        }\n    })\n\
    \    \n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp_kuv_edl/tmp_kuv_edl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b915bde3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b915badab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b915bada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b915bad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kuv_edl                        0x000055dad015552b <unavailable> + 5419

    5    libc.so.6                          0x00002b915bfcf460 __libc_start_main +
    245

    6    tmp_kuv_edl                        0x000055dad0155109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var sentence: String\
    \ = \"\"\n    var word: String = \"\"\n    var bored: Bool = false\n    for character\
    \ in S {\n        sentence = sentence + character\n        if character == \"\
    .\" {\n            bored = true\n        }\n        if character == \"?\" {\n\
    \            bored = true\n        }\n        if character == \"!\" {\n      \
    \      bored = true\n        }\n        if character == \" \" {\n            bored\
    \ = false\n        }\n        if character == \"\\n\" {\n            bored = false\n\
    \        }\n        if character == \"\\r\" {\n            bored = false\n   \
    \     }\n        if character == \"\\t\" {\n            bored = false\n      \
    \  }\n        if character == \"\\r\" {\n            bored = false\n        }\n\
    \        if character == \"\\n\" {\n            bored = false\n        }\n   \
    \     if character == \"\\n\" {\n            bored = false\n        }\n      \
    \  if character == \"\\r\" {\n            bored = false\n        }\n        if\
    \ character == \"\\n\" {\n            bored = false\n        }\n        if character\
    \ == \"\\n\" {\n            bored = false\n        }\n        if character ==\
    \ \"\\r\" {\n            bored = false\n        }\n        if character == \"\\\
    n\" {\n            bored = false\n        }\n        if character == \"\\n\" {\n\
    \            bored = false\n        }\n        if character == \"\\r\" {\n   \
    \         bored = false\n        }\n        if character == \"\\n\" {\n      \
    \      bored = false\n        }\n        if character == \"\\n\" {\n         \
    \   bored = false\n        }\n        if character == \"\\r\" {\n            bored\
    \ = false\n        }\n        if character == \"\\n\" {\n            bored = false\n\
    \        }\n        if character == \"\\n\" {\n            bored = false\n   \
    \     }\n        if character == \"\\r\" {\n            bored = false\n      \
    \  }\n        if character == \"\\n\" {\n            bored = false\n        }\n\
    \        if character == \"\\n\" {\n            bored = false\n        }\n   \
    \     if character == \"\\r\" {\n            bored = false\n        }\n      \
    \  if character == \"\\n\" {\n            bored = false\n        }\n        if\
    \ character == \"\\n\" {\n            bored = false\n        }\n        if character\
    \ == \"\\r\" {\n            bored = false\n        }\n        if character ==\
    \ \"\\n\" {\n            bored = false\n        }\n        if character == \"\\\
    n\" {\n            bored = false\n        }\n        if character == \"\\r\" {\n\
    \            bored = false\n        }\n        if character == \"\\n\" {\n   \
    \         bored = false\n        }\n        if character == \"\\n\" {\n      \
    \      bored = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvzyywj_v.swift:135:59: error: expected '}' at end of brace statement\n\
    assert(is_bored(S: \"You and I are going for a walk\") == 0)\n               \
    \                                           ^\n/tmp/tmpvzyywj_v.swift:11:24: note:\
    \ to match this opening '{'\n    for character in S {\n                      \
    \ ^\n/tmp/tmpvzyywj_v.swift:135:59: error: expected '}' at end of brace statement\n\
    assert(is_bored(S: \"You and I are going for a walk\") == 0)\n               \
    \                                           ^\n/tmp/tmpvzyywj_v.swift:6:33: note:\
    \ to match this opening '{'\nfunc is_bored(S: String) -> Int {\n             \
    \                   ^\n/tmp/tmpvzyywj_v.swift:12:31: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n        sentence = sentence\
    \ + character\n                              ^\n/tmp/tmpvzyywj_v.swift:118:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.starts(with: \"\
    I\")})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp50y72f1o.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter({$0.starts(with:\
    \ \"I\")})\n                             ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var lastWord = \"\"\n\
    \    for word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n \
    \           boredoms += 1\n        } else {\n            lastWord = word\n   \
    \     }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbsuq3gbq.swift:13:24: error: cannot assign value of type 'String.SubSequence'\
    \ (aka 'Substring') to type 'String'\n            lastWord = word\n          \
    \             ^~~~\n                       String( )\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpggjki7f5/tmpggjki7f5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1998862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1998559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1998559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19985587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggjki7f5                        0x00005615eb9b47b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b1998a4e460 __libc_start_main +
    245

    6    tmpggjki7f5                        0x00005615eb9b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpank8rmbz.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{ $0.startsWith(\"\
    I\") }\n                             ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return is_bored_helper(S, \"\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpccfolowb.swift:7:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpkcuec507/tmpkcuec507.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a6548c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a623fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a623f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a623e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcuec507                        0x000055dcee26b72b <unavailable> + 5931

    5    libc.so.6                          0x00002b84a6734460 __libc_start_main +
    245

    6    tmpkcuec507                        0x000055dcee26b309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var sentence: String\
    \ = S\n    var word: String = \"\"\n    var i: Int = 0\n    var j: Int = 0\n \
    \   var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var A: Int = 0\n    var B: Int = 0\n    var C: Int = 0\n    var\
    \ D: Int = 0\n    var E: Int = 0\n    var F: Int = 0\n    var G: Int = 0\n   \
    \ var H: Int = 0\n    var I: Int = 0\n    var J: Int = 0\n    var K: Int = 0\n\
    \    var L: Int = 0\n    var M: Int = 0\n    var N: Int = 0\n    var O: Int =\
    \ 0\n    var P: Int = 0\n    var Q: Int = 0\n    var R: Int = 0\n    var S: Int\
    \ = 0\n    var T: Int = 0\n    var U: Int = 0\n    var V: Int = 0\n    var W:\
    \ Int = 0\n    var X: Int = 0\n    var Y: Int = 0\n    var Z: Int = 0\n    var\
    \ _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n   \
    \ var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n\
    \    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int =\
    \ 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int\
    \ = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _:\
    \ Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var\
    \ _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n   \
    \ var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n\
    \    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int =\
    \ 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int = 0\n    var _: Int\
    \ = 0\n    var _: Int = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplgz48a9r.swift:94:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmplgz48a9r.swift:7:9: warning: variable 'boredoms' was never used;\
    \ consider replacing with '_' or removing it\n    var boredoms: Int = 0\n    \
    \    ^~~~~~~~\n        _\n/tmp/tmplgz48a9r.swift:8:9: warning: variable 'sentence'\
    \ was never used; consider replacing with '_' or removing it\n    var sentence:\
    \ String = S\n        ^~~~~~~~\n        _\n/tmp/tmplgz48a9r.swift:9:9: warning:\
    \ variable 'word' was never used; consider replacing with '_' or removing it\n\
    \    var word: String = \"\"\n        ^~~~\n        _\n/tmp/tmplgz48a9r.swift:10:9:\
    \ warning: variable 'i' was never used; consider replacing with '_' or removing\
    \ it\n    var i: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:11:9: warning:\
    \ variable 'j' was never used; consider replacing with '_' or removing it\n  \
    \  var j: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:12:9: warning:\
    \ variable 'k' was never used; consider replacing with '_' or removing it\n  \
    \  var k: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:13:9: warning:\
    \ variable 'l' was never used; consider replacing with '_' or removing it\n  \
    \  var l: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:14:9: warning:\
    \ variable 'm' was never used; consider replacing with '_' or removing it\n  \
    \  var m: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:15:9: warning:\
    \ variable 'n' was never used; consider replacing with '_' or removing it\n  \
    \  var n: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:16:9: warning:\
    \ variable 'o' was never used; consider replacing with '_' or removing it\n  \
    \  var o: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:17:9: warning:\
    \ variable 'p' was never used; consider replacing with '_' or removing it\n  \
    \  var p: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:18:9: warning:\
    \ variable 'q' was never used; consider replacing with '_' or removing it\n  \
    \  var q: Int = 0\n        ^\n        _\n/tmp/tmplgz48a9r.swift:19:9: warning:\
    \ variable 'r' was never used; consider replacing with '_' or removing it\n  \
    \  var r: Int = 0\n     "
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return is_bored(S.characters)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpx3wc1d5p.swift:7:21: error: missing argument label 'S:' in call\n\
    \    return is_bored(S.characters)\n                    ^\n                  \
    \  S: \n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.split(separator: \".?!\"\
    ).filter({ $0.hasPrefix(\"I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp38yh4u7g/tmp38yh4u7g.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468c565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468c25cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468c25c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468c25b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38yh4u7g                        0x00005647c0f2066b <unavailable> + 5739

    5    libc.so.6                          0x00002b468c751460 __libc_start_main +
    245

    6    tmp38yh4u7g                        0x00005647c0f20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var sentence: String\
    \ = \"\"\n    var word: String = \"\"\n    var i: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        sentence = sentence + word + \" \"\n        if word == \"\
    I\" {\n            boredoms = boredoms + 1\n        }\n    }\n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmptojlj3nf/tmptojlj3nf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b6697cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b66673b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b66673988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b666727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptojlj3nf                        0x0000563c67ccb8f2 <unavailable> + 6386

    5    libc.so.6                          0x00002b1b66b68460 __libc_start_main +
    245

    6    tmptojlj3nf                        0x0000563c67ccb429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: replace this implementation with\
    \ code that uses standard library\n    // functions to accomplish the same thing.\n\
    \    let words = S.components(separatedBy: \" \")\n    let boredoms = words.filter({\
    \ $0.hasPrefix(\"I\") })\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1w3uxgay.swift:9:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = S.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredomCount = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredomCount\
    \ += 1\n        }\n    }\n    return boredomCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmphf7zb3p8/tmphf7zb3p8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48f6c7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48f6973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48f6973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48f69727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphf7zb3p8                        0x00005648f836072b <unavailable> + 5931

    5    libc.so.6                          0x00002b48f6e68460 __libc_start_main +
    245

    6    tmphf7zb3p8                        0x00005648f8360309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0 == \"I\"})\n \
    \   return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp9go1j_vd/tmp9go1j_vd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af41b7cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af41b4c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af41b4c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af41b4c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9go1j_vd                        0x0000557bfc19752b <unavailable> + 5419

    5    libc.so.6                          0x00002af41b9b6460 __libc_start_main +
    245

    6    tmp9go1j_vd                        0x0000557bfc197109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.starts(with: \"I\")\n    return\
    \ boredom.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpiq2jwyuh.swift:8:20: error: value of type 'Bool' has no member\
    \ 'count'\n    return boredom.count\n           ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var currentWord:\
    \ String = \"\"\n    var currentSentence: String = \"\"\n    var currentWordIsBored:\
    \ Bool = false\n    for character in S {\n        switch character {\n       \
    \ case \"?\", \".\", \"!\":\n            if currentSentence != \"\" {\n      \
    \          boredoms += is_bored(currentSentence)\n                currentSentence\
    \ = \"\"\n            }\n            if currentWord != \"\" {\n              \
    \  currentWordIsBored = currentWord.characters.first == \"I\"\n            }\n\
    \            if currentWordIsBored {\n                currentWord += character\n\
    \            } else {\n                currentSentence += character\n        \
    \    }\n        default:\n            if currentSentence != \"\" {\n         \
    \       boredoms += is_bored(currentSentence)\n                currentSentence\
    \ = \"\"\n            }\n            if currentWord != \"\" {\n              \
    \  currentWordIsBored = currentWord.characters.first == \"I\"\n            }\n\
    \            if currentWordIsBored {\n                currentWord += character\n\
    \            } else {\n                currentSentence += character\n        \
    \    }\n        }\n    }\n    if currentSentence != \"\" {\n        boredoms +=\
    \ is_bored(currentSentence)\n    }\n    return boredoms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp45dnnz5u.swift:15:38: error: missing argument label 'S:' in call\n\
    \                boredoms += is_bored(currentSentence)\n                     \
    \                ^\n                                     S: \n/tmp/tmp45dnnz5u.swift:19:50:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     currentWordIsBored = currentWord.characters.first == \"I\"\n           \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp45dnnz5u.swift:22:32: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n                currentWord\
    \ += character\n                               ^\n/tmp/tmp45dnnz5u.swift:24:36:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                currentSentence += character\n                              \
    \     ^\n/tmp/tmp45dnnz5u.swift:28:38: error: missing argument label 'S:' in call\n\
    \                boredoms += is_bored(currentSentence)\n                     \
    \                ^\n                                     S: \n/tmp/tmp45dnnz5u.swift:32:50:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     currentWordIsBored = currentWord.characters.first == \"I\"\n           \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp45dnnz5u.swift:35:32: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n                currentWord\
    \ += character\n                               ^\n/tmp/tmp45dnnz5u.swift:37:36:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                currentSentence += character\n                              \
    \     ^\n/tmp/tmp45dnnz5u.swift:42:30: error: missing argument label 'S:' in call\n\
    \        boredoms += is_bored(currentSentence)\n                             ^\n\
    \            "
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.rangeOfString(\"I\")\n   \
    \ return boredom.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppix0_zxb.swift:7:21: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    let boredom = S.rangeOfString(\"I\")\n                \
    \  ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    var boredoms = \"\"\n \
    \   for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n\
    \            count += 1\n            boredoms += s\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpaa64p1yx/tmpaa64p1yx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b799e711c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b799e408b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b799e408988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b799e4077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaa64p1yx                        0x00005629568767db <unavailable> + 6107

    5    libc.so.6                          0x00002b799e8fd460 __libc_start_main +
    245

    6    tmpaa64p1yx                        0x00005629568763b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzdk95zea/tmpzdk95zea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdk95zea                        0x000055934772172b <unavailable> + 5931

    5    libc.so.6                          0x00002ae90f832460 __libc_start_main +
    245

    6    tmpzdk95zea                        0x0000559347721309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcrxq2uok/tmpcrxq2uok.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1d5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1d2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1d2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1d2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxq2uok                        0x00005588890223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002baa1d7c4460 __libc_start_main +
    245

    6    tmpcrxq2uok                        0x0000558889021ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.hasPrefix(\"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp1j19unmq/tmp1j19unmq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae33f05fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae33ed56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae33ed56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae33ed557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1j19unmq                        0x0000557ab231a70b <unavailable> + 5899

    5    libc.so.6                          0x00002ae33f24b460 __libc_start_main +
    245

    6    tmp1j19unmq                        0x0000557ab231a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6gf8tcq.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n                              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    var boredoms = \"\"\n \
    \   for s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n\
    \            count += 1\n        } else {\n            boredoms += s\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp3wxbyr1k/tmp3wxbyr1k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace6746bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace67162b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace67162988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace671617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3wxbyr1k                        0x00005652fcf257db <unavailable> + 6107

    5    libc.so.6                          0x00002ace67657460 __libc_start_main +
    245

    6    tmp3wxbyr1k                        0x00005652fcf253b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // Your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpknk6yqg3.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all sentences that start with the word \"I\".\n    // HINT: You may want\
    \ to use split or explode to split up the sentence into words.\n    // HINT: You\
    \ may want to use map to convert words to lowercase.\n    // HINT: You may want\
    \ to use reduce to iterate over all the words in the sentence and increment a\
    \ counter.\n    // HINT: You may want to use filter to remove any words that aren't\
    \ boredoms.\n    // HINT: You may want to use reduce to iterate over all the words\
    \ in the sentence and increment a counter.\n    // HINT: You may want to use reduce\
    \ to iterate over all the words in the sentence and increment a counter.\n   \
    \ // HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to use reduce to iterate over all the\
    \ words in the sentence and increment a counter.\n    // HINT: You may want to\
    \ use reduce to iterate over all the words in the sentence and increment a counter.\n\
    \    // HINT: You may want to use reduce to iterate over all the words in the\
    \ sentence and increment a counter.\n    // HINT: You may want to use reduce to\
    \ iterate over all the words in the sentence and increment a counter.\n    //\
    \ HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to use reduce to iterate over all the\
    \ words in the sentence and increment a counter.\n    // HINT: You may want to\
    \ use reduce to iterate over all the words in the sentence and increment a counter.\n\
    \    // HINT: You may want to use reduce to iterate over all the words in the\
    \ sentence and increment a counter.\n    // HINT: You may want to use reduce to\
    \ iterate over all the words in the sentence and increment a counter.\n    //\
    \ HINT: You may want to use reduce to iterate over all the words in the sentence\
    \ and increment a counter.\n    // HINT: You may want to use reduce to iterate\
    \ over all the words in the sentence and increment a counter.\n    // HINT: You\
    \ may want to use reduce to iterate over all the words in the sentence and increment\
    \ a counter.\n    // HINT: You may want to \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp3qc59yz4.swift:33:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var count = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp2k2fw1p3/tmp2k2fw1p3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31592e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3158fdcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3158fdc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3158fdb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2k2fw1p3                        0x0000556c9cf487b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b31594d1460 __libc_start_main +
    245

    6    tmp2k2fw1p3                        0x0000556c9cf482e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.hasPrefix(\"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpf5n17y0f/tmpf5n17y0f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0aed12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0aea09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0aea09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0aea087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5n17y0f                        0x0000555d09d5f70b <unavailable> + 5899

    5    libc.so.6                          0x00002ad0aeefe460 __libc_start_main +
    245

    6    tmpf5n17y0f                        0x0000555d09d5f2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var currentWord:\
    \ String = \"\"\n    var currentSentence: String = \"\"\n    var currentChar:\
    \ Character = \"?\"\n\n    for char in S {\n        currentChar = char\n     \
    \   if currentChar == \".\" || currentChar == \"!\" || currentChar == \"?\" {\n\
    \            currentSentence = currentSentence + currentChar\n        }\n    \
    \    else {\n            currentWord = currentWord + currentChar\n        }\n\
    \    }\n\n    if currentWord == \"I\" {\n        boredoms = boredoms + 1\n   \
    \ }\n\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkuazq8nv.swift:15:49: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            currentSentence = currentSentence\
    \ + currentChar\n                                                ^\n/tmp/tmpkuazq8nv.swift:18:41:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentWord = currentWord + currentChar\n                       \
    \                 ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    var boredoms = 0\n    \n    for word\
    \ in S.split(separator: \".?!\") {\n        if word.starts(with: \"I\") {\n  \
    \          boredoms += 1\n        }\n    }\n    \n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpktg5df7d/tmpktg5df7d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b460ff89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b460fc80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b460fc80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b460fc7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktg5df7d                        0x0000563d4032f72b <unavailable> + 5931

    5    libc.so.6                          0x00002b4610175460 __libc_start_main +
    245

    6    tmpktg5df7d                        0x0000563d4032f309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all sentences that start with the word \"I\".\n    // HINT: You may want\
    \ to use split function to split a string into an array of strings.\n    // HINT:\
    \ You may want to use map function to apply a function to every element of an\
    \ array.\n    // HINT: You may want to use reduce function to apply a function\
    \ to every element of an array.\n    // HINT: You may want to use filter function\
    \ to find elements that satisfy a predicate.\n    // HINT: You may want to use\
    \ reduce to apply a function to every element of an array.\n    // HINT: You may\
    \ want to use map to apply a function to every element of an array.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use filter function to find elements that satisfy\
    \ a predicate.\n    // HINT: You may want to use reduce to apply a function to\
    \ every element of an array.\n    // HINT: You may want to use map to apply a\
    \ function to every element of an array.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use filter function to find elements that satisfy a predicate.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use map to apply a function to every element of\
    \ an array.\n    // HINT: You may want to use reduce to apply a function to every\
    \ element of an array.\n    // HINT: You may want to use filter function to find\
    \ elements that satisfy a predicate.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use map to apply a function to every element of an array.\n    // HINT: You\
    \ may want to use reduce to apply a function to every element of an array.\n \
    \   // HINT: You may want to use filter function to find elements that satisfy\
    \ a predicate.\n    // HINT: You may want to use reduce to apply a function to\
    \ every element of an array.\n    // HINT: You may want to use map to apply a\
    \ function to every element of an array.\n    // HINT: You may want to use reduce\
    \ to apply a function to every element of an array.\n    // HINT: You may want\
    \ to use filter function to find elements that satisfy a predicate.\n    // HINT:\
    \ You may want to use reduce to apply a function to every element of an array.\n\
    \    // HINT: You may want to use map to apply a function to every element of\
    \ an array.\n    // HINT: You may want to use reduce to apply a function to every\
    \ element of an array.\n    // HINT: You may want to use filter function to find\
    \ elements that satisfy a \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpu6i1sqlj.swift:37:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6gf8tcq.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n                              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // Your code here\n    var boredoms = 0\n\
    \    for word in S.split(separator: \".?!\") {\n        if word.starts(with: \"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpxqurpsqo/tmpxqurpsqo.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60a337fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60a3076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60a3076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60a30757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqurpsqo                        0x0000556ac05b372b <unavailable> + 5931

    5    libc.so.6                          0x00002b60a356b460 __libc_start_main +
    245

    6    tmpxqurpsqo                        0x0000556ac05b3309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var boredom_word:\
    \ String = \"\"\n    var boredom_sentence: String = \"\"\n    var boredom_sentence_word:\
    \ String = \"\"\n    var boredom_sentence_words: Array<String> = []\n    var boredom_sentence_words_count:\
    \ Int = 0\n    var boredom_sentence_words_count_max: Int = 0\n    var boredom_sentence_words_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_avg: Int = 0\n    var boredom_sentence_words_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_max: Int = 0\n    var boredom_sentence_words_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_avg: Int = 0\n    var boredom_sentence_words_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_max: Int = 0\n   \
    \ var boredom_sentence_words_count_count_count_min: Int = 0\n    var boredom_sentence_words_count_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_sum: Int = 0\n   \
    \ var boredom_sentence_words_count_count_count_count_max: Int = 0\n    var boredom_sentence_words_count_count_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_avg: Int = 0\n\
    \    var boredom_sentence_words_count_count_count_count_sum: Int = 0\n    var\
    \ boredom_sentence_words_count_count_count_count_count_max: Int = 0\n    var boredom_sentence_words_count_count_count_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_avg: Int\
    \ = 0\n    var boredom_sentence_words_count_count_count_count_count_sum: Int =\
    \ 0\n    var boredom_sentence_words_count_count_count_count_count_count_max: Int\
    \ = 0\n    var boredom_sentence_words_count_count_count_count_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_avg:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_sum:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwxb95n4y.swift:41:9: error: invalid redeclaration of 'boredom_sentence_words_count_count_count_count_count_count_count_max'\n\
    \    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n        ^\n/tmp/tmpwxb95n4y.swift:37:9: note: 'boredom_sentence_words_count_count_count_count_count_count_count_max'\
    \ previously declared here\n    var boredom_sentence_words_count_count_count_count_count_count_count_max:\
    \ Int = 0\n        ^\n/tmp/tmpwxb95n4y.swift:42:9: error: invalid redeclaration\
    \ of 'boredom_sentence_words_count_count_count_count_count_count_count_min'\n\
    \    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n        ^\n/tmp/tmpwxb95n4y.swift:38:9: note: 'boredom_sentence_words_count_count_count_count_count_count_count_min'\
    \ previously declared here\n    var boredom_sentence_words_count_count_count_count_count_count_count_min:\
    \ Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.characters.filter({ $0 ==\
    \ \"I\" }).count\n    return boredom\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5a5ayl24.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let boredom = S.characters.filter({ $0 == \"I\" }).count\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\")\
    \ == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbu60ebbv/tmpbu60ebbv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28a32c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28a2fb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28a2fb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28a2fb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu60ebbv                        0x0000556e8d4d33b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b28a34ad460 __libc_start_main +
    245

    6    tmpbu60ebbv                        0x0000556e8d4d2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    // HINT: Use a regular expression to\
    \ find all sentences that start with the word \"I\".\n    // HINT: You can use\
    \ the split() method to split a string into an array of strings.\n    // HINT:\
    \ You can use a for loop to iterate through the array of strings.\n    // HINT:\
    \ You can use the contains() method to check if a string contains a specific string.\n\
    \    // HINT: You can use the count() method to count the number of occurrences\
    \ of a specific string.\n    // HINT: You can use the boredom_count variable to\
    \ keep track of the number of boredoms.\n    // HINT: You can use the boredom_array\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_string variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_word variable to keep track of the boredom words.\n    //\
    \ HINT: You can use the boredom_sentence variable to keep track of the boredom\
    \ sentences.\n    // HINT: You can use the boredom_word variable to keep track\
    \ of the boredom words.\n    // HINT: You can use the boredom_sentence variable\
    \ to keep track of the boredom sentences.\n    // HINT: You can use the boredom_word\
    \ variable to keep track of the boredom words.\n    // HINT: You can use the boredom_sentence\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_word variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_sentence variable to keep track of the boredom sentences.\n\
    \    // HINT: You can use the boredom_word variable to keep track of the boredom\
    \ words.\n    // HINT: You can use the boredom_sentence variable to keep track\
    \ of the boredom sentences.\n    // HINT: You can use the boredom_word variable\
    \ to keep track of the boredom words.\n    // HINT: You can use the boredom_sentence\
    \ variable to keep track of the boredom sentences.\n    // HINT: You can use the\
    \ boredom_word variable to keep track of the boredom words.\n    // HINT: You\
    \ can use the boredom_sentence variable to keep track of the boredom sentences.\n\
    \    // HINT: You can use the boredom_word variable to keep track of the boredom\
    \ words.\n    // HINT: You can use the boredom_sentence variable to keep track\
    \ of the boredom sentences.\n    // HINT: You can use the boredom_word variable\
    \ to keep track of the boredom words.\n    // HINT: You can use the bore\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: '/tmp/tmpzh217k_n.swift:34:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredom = S.rangeOfString(\"I\")\n   \
    \ return boredom.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppix0_zxb.swift:7:21: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    let boredom = S.rangeOfString(\"I\")\n                \
    \  ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0uqnloor/tmp0uqnloor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac700617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac70030eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac70030e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac70030d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0uqnloor                        0x000056457d19972b <unavailable> + 5931

    5    libc.so.6                          0x00002ac700803460 __libc_start_main +
    245

    6    tmp0uqnloor                        0x000056457d199309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpbhve8ydi/tmpbhve8ydi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab34cecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab349e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab349e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab349e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhve8ydi                        0x000055f9d6b8372b <unavailable> + 5931

    5    libc.so.6                          0x00002aab34ed8460 __libc_start_main +
    245

    6    tmpbhve8ydi                        0x000055f9d6b83309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word == \"I\" {\n            boredoms += 1\n        }\n\
    \    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp7j0ljqyi/tmp7j0ljqyi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabb621fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabb5f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabb5f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabb5f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7j0ljqyi                        0x000055cbe49407b2 <unavailable> + 6066

    5    libc.so.6                          0x00002aabb640b460 __libc_start_main +
    245

    6    tmp7j0ljqyi                        0x000055cbe49402e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6gf8tcq.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n                              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // TODO: Write a function that takes a string\
    \ and returns the number of boredoms.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpcrxq2uok/tmpcrxq2uok.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa1d5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1d2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1d2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1d2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrxq2uok                        0x00005588890223b2 <unavailable> + 5042

    5    libc.so.6                          0x00002baa1d7c4460 __libc_start_main +
    245

    6    tmpcrxq2uok                        0x0000558889021ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    var sentence: String\
    \ = S\n    var word: String = \"\"\n    var i: Int = 0\n    \n    while i < S.count\
    \ {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms\
    \ += 1\n            sentence = S[i..<S.count]\n            word = \"\"\n     \
    \   }\n        else if S[i] == ' ' {\n            boredoms += 1\n            sentence\
    \ = S[i..<S.count]\n            word = \"\"\n        }\n        else {\n     \
    \       word += S[i]\n        }\n        i += 1\n    }\n    \n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1xm_gx68.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n         \
    \          ^~~\n                   \".\"\n/tmp/tmp1xm_gx68.swift:13:35: error:\
    \ single-quoted string literal found, use '\"'\n        if S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!' {\n                                  ^~~\n           \
    \                       \"?\"\n/tmp/tmp1xm_gx68.swift:13:50: error: single-quoted\
    \ string literal found, use '\"'\n        if S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!' {\n                                                 ^~~\n           \
    \                                      \"!\"\n/tmp/tmp1xm_gx68.swift:18:25: error:\
    \ single-quoted string literal found, use '\"'\n        else if S[i] == ' ' {\n\
    \                        ^~~\n                        \" \"\n/tmp/tmp1xm_gx68.swift:13:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!' {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmp1xm_gx68.swift:13:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ S[i] == '.' || S[i] == '?' || S[i] == '!' {\n                          ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1xm_gx68.swift:13:42:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!' {\n                                         ^~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp1xm_gx68.swift:15:24: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an integer range,\
    \ use a String.Index range "
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter({$0.hasPrefix(\"I\"\
    )})\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz154ac4l.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter({$0.hasPrefix(\"\
    I\")})\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmph8s1jjod.swift:8:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var currentWord = \"\
    \"\n    for word in S.split(separator: \".?!\") {\n        if word.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n        currentWord = word\n   \
    \ }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0sakjzo6.swift:13:23: error: cannot assign value of type 'String.SubSequence'\
    \ (aka 'Substring') to type 'String'\n        currentWord = word\n           \
    \           ^~~~\n                      String( )\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmppeub246i/tmppeub246i.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b417d038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b417cd2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b417cd2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b417cd2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeub246i                        0x000055fe2cfa63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b417d224460 __libc_start_main +
    245

    6    tmppeub246i                        0x000055fe2cfa5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms: Int = 0\n    for word in S.split(separator:\
    \ \".?!\") {\n        if word.starts(with: \"I\") {\n            boredoms += 1\n\
    \        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpzdk95zea/tmpzdk95zea.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae90f646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae90f33db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae90f33d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae90f33c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdk95zea                        0x000055934772172b <unavailable> + 5931

    5    libc.so.6                          0x00002ae90f832460 __libc_start_main +
    245

    6    tmpzdk95zea                        0x0000559347721309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n    var boredoms: Int = 0\n    \n    for\
    \ s in S.split(separator: \".?!\") {\n        if s.starts(with: \"I\") {\n   \
    \         boredoms += 1\n        }\n    }\n    \n    return boredoms\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpr4v9n9hq/tmpr4v9n9hq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0320dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af031dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af031dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af031dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4v9n9hq                        0x000055b8a3b3f72b <unavailable> + 5931

    5    libc.so.6                          0x00002af0322ca460 __libc_start_main +
    245

    6    tmpr4v9n9hq                        0x000055b8a3b3f309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc6gf8tcq.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter { $0.startsWith(\"\
    I\") }\n                              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpludmoims.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter { $0.hasPrefix(\"\
    I\") }\n                              ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpjoi241mt/tmpjoi241mt.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6812dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab680fd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab680fd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab680fd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjoi241mt                        0x000055ec3820a3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab6814ca460 __libc_start_main +
    245

    6    tmpjoi241mt                        0x000055ec38209ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{ $0.hasPrefix(\"I\"\
    ) }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpc1rex2an.swift:7:33: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{ $0.hasPrefix(\"\
    I\") }\n                             ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp1ddch5st.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.startsWith(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptok0teit.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'startsWith'\n    let boredoms = S.filter{$0.startsWith(\"\
    I\")}\n                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    var boredoms = 0\n    var lastWord = \"\"\n\
    \    for word in S.split(separator: \".?!\") {\n        if word == \"I\" {\n \
    \           boredoms += 1\n        } else {\n            if lastWord == \"I\"\
    \ {\n                boredoms += 1\n            }\n        }\n        lastWord\
    \ = word\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp296ggach.swift:17:20: error: cannot assign value of type 'String.SubSequence'\
    \ (aka 'Substring') to type 'String'\n        lastWord = word\n              \
    \     ^~~~\n                   String( )\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter{$0.hasPrefix(\"I\"\
    )}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphc05g_eu.swift:7:32: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'hasPrefix'\n    let boredoms = S.filter{$0.hasPrefix(\"\
    I\")}\n                            ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\nfunc\
    \ is_bored(S: String) -> Int {\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpeqij3kr6.swift:7:34: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'starts'\n    let boredoms = S.filter { $0.starts(with:\
    \ \"I\") }\n                              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978590
