language: swift
name: HumanEval_63_fibfib
results:
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for _ in 1...n {\n        fibfibArray.append(fibfibArray[fibfibArray.count-1]\
    \ + fibfibArray[fibfibArray.count-2] + fibfibArray[fibfibArray.count-3])\n   \
    \ }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7adpfu8j/tmp7adpfu8j.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2378398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237808fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237808f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237808e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7adpfu8j                        0x00005650c6cce338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2378584460 __libc_start_main +
    245

    6    tmp7adpfu8j                        0x00005650c6ccdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3...n\
    \ {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8c138fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c1086561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8c1086286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8c108613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8c1085bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba8c0e857ec <unavailable> + 186348

    6    tmpwqzeg840                        0x000055b240e127b6 <unavailable> + 6070

    7    tmpwqzeg840                        0x000055b240e123cb <unavailable> + 5067

    8    libc.so.6                          0x00002ba8c157b460 __libc_start_main +
    245

    9    tmpwqzeg840                        0x000055b240e120e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9\
    \ {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n  \
    \  if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n\
    \    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n      \
    \  return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n ==\
    \ 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n   \
    \ }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return\
    \ 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n\
    \        return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n\
    \    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return\
    \ 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if n == 26\
    \ {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n \
    \   }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n    \
    \    return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n  \
    \  if n == 31 {\n        return 1254025\n    }\n    if n == 32 {\n        return\
    \ 1680046\n    }\n    if n == 33 {\n        return 2509827\n    }\n    if n ==\
    \ 34 {\n        return 4136961\n    }\n    if n == 35 {\n        return 5702887\n\
    \    }\n    if n == 36 {\n        return 9228263\n    }\n    if n == 37 {\n  \
    \      return 14303521\n    }\n    if n == 38 {\n        return 29951479\n   \
    \ }\n    if n == 39 {\n        return 46019801\n    }\n    if n == 40 {\n    \
    \    return 7151393\n    }\n    if n == 41 {\n        return 11356457\n    }\n\
    \    if n == 42 {\n        return 18363113\n    }\n    if n == 43 {\n        return\
    \ 27674255\n    }\n    if n == 44 {\n        return 41831607\n    }\n    if n\
    \ == 45 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpekelpncw.swift:167:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpekelpncw.swift:8:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpekelpncw.swift:149:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpekelpncw.swift:161:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmpekelpncw.swift:162:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpekelpncw.swift:163:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmpekelpncw.swift:164:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpekelpncw.swift:165:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmpekelpncw.swift:166:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpekelpncw.swift:167:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af5ae4b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5ae1ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af5ae1ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af5ae1ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af5ae1aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af5adfaa7ec <unavailable> + 186348

    6    tmpw57ap76b                        0x00005603635a97b6 <unavailable> + 6070

    7    tmpw57ap76b                        0x00005603635a93cb <unavailable> + 5067

    8    libc.so.6                          0x00002af5ae6a0460 __libc_start_main +
    245

    9    tmpw57ap76b                        0x00005603635a90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n       \
    \ return 1\n    }\n    \n    if n == 2 {\n        return 1\n    }\n    \n    if\
    \ n > 2 {\n        fibfib += fibfib(n-1) + fibfib(n-2)\n    }\n    \n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpiiok0gqo.swift:24:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmpiiok0gqo.swift:24:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl92aaikn.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for _ in 0..<n {\n        fibfibArray.append(fibfibArray[fibfibArray.count\
    \ - 2] + fibfibArray[fibfibArray.count - 3])\n    }\n    return fibfibArray[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7b9iiils/tmp7b9iiils.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40b86efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40b83e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40b83e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40b83e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b9iiils                        0x0000564b2a44d5de <unavailable> + 5598

    5    libc.so.6                          0x00002b40b88db460 __libc_start_main +
    245

    6    tmp7b9iiils                        0x0000564b2a44d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppg9kc924.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmppg9kc924.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmppg9kc924.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b992f88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b992f582561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b992f582286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b992f58213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b992f581bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b992f3817ec <unavailable> + 186348

    6    tmp4kd7nlmm                        0x000055e1dd9ac7b6 <unavailable> + 6070

    7    tmp4kd7nlmm                        0x000055e1dd9ac3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b992fa77460 __libc_start_main +
    245

    9    tmp4kd7nlmm                        0x000055e1dd9ac0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3...n\
    \ {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8c138fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c1086561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8c1086286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8c108613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8c1085bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba8c0e857ec <unavailable> + 186348

    6    tmpwqzeg840                        0x000055b240e127b6 <unavailable> + 6070

    7    tmpwqzeg840                        0x000055b240e123cb <unavailable> + 5067

    8    libc.so.6                          0x00002ba8c157b460 __libc_start_main +
    245

    9    tmpwqzeg840                        0x000055b240e120e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n       \
    \ return 1\n    }\n    \n    if n == 2 {\n        return 1\n    }\n    \n    if\
    \ n == 3 {\n        return 2\n    }\n    \n    fibfib += fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    \n    return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp8gpfhelp.swift:27:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmp8gpfhelp.swift:27:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmp8gpfhelp.swift:27:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for var i = 0; i < n; i++ {\n        fibfibArray.append(fibfibArray[i] +\
    \ fibfibArray[i-1])\n    }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprznznfh0.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp75cn5s40.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmp75cn5s40.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmp75cn5s40.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, to: n, by: -1) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f864b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f861af561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8f861af286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8f861af13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8f861aebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8f85fae7ec <unavailable> + 186348

    6    tmps62cf1kh                        0x00005612ca3e5836 <unavailable> + 6198

    7    tmps62cf1kh                        0x00005612ca3e544b <unavailable> + 5195

    8    libc.so.6                          0x00002b8f866a4460 __libc_start_main +
    245

    9    tmps62cf1kh                        0x00005612ca3e5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl92aaikn.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppg9kc924.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmppg9kc924.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmppg9kc924.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af5ae4b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5ae1ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af5ae1ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af5ae1ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af5ae1aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af5adfaa7ec <unavailable> + 186348

    6    tmpw57ap76b                        0x00005603635a97b6 <unavailable> + 6070

    7    tmpw57ap76b                        0x00005603635a93cb <unavailable> + 5067

    8    libc.so.6                          0x00002af5ae6a0460 __libc_start_main +
    245

    9    tmpw57ap76b                        0x00005603635a90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af5ae4b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5ae1ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af5ae1ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af5ae1ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af5ae1aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af5adfaa7ec <unavailable> + 186348

    6    tmpw57ap76b                        0x00005603635a97b6 <unavailable> + 6070

    7    tmpw57ap76b                        0x00005603635a93cb <unavailable> + 5067

    8    libc.so.6                          0x00002af5ae6a0460 __libc_start_main +
    245

    9    tmpw57ap76b                        0x00005603635a90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib += fibfib(n-1)\
    \ + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmplxt1l4sc.swift:20:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmplxt1l4sc.swift:20:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bxfsq0.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n    return fibfib\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpdy8_gltn.swift:20:18: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \            ^\n/tmp/tmpdy8_gltn.swift:20:32: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \                          ^\n/tmp/tmpdy8_gltn.swift:20:46: error: cannot call\
    \ value of non-function type 'Int'\n        fibfib = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                             ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp75cn5s40.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmp75cn5s40.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmp75cn5s40.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bxfsq0.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    var fibfibArrayIndex = 0\n    var fibfibArrayIndexMax = Int(ceil(Double(n)\
    \ / Double(2)))\n    for fibfibArrayIndex in 0..<fibfibArrayIndexMax {\n     \
    \   fibfibArray.append(fibfibArray[fibfibArrayIndex] + fibfibArray[fibfibArrayIndex\
    \ + 1] + fibfibArray[fibfibArrayIndex + 2])\n    }\n    return fibfibArray[fibfibArrayIndexMax]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmplq15kz3q.swift:11:35: error: cannot find 'ceil' in scope\n    var\
    \ fibfibArrayIndexMax = Int(ceil(Double(n) / Double(2)))\n                   \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib\
    \ += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp7xxm0s3v.swift:20:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmp7xxm0s3v.swift:20:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for var i = 0; i < n; i++ {\n        fibfibArray.append(fibfibArray[i] +\
    \ fibfibArray[i-1])\n    }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprznznfh0.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return fibfib\n    }\n    if n == 1 {\n        return\
    \ fibfib\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n \
    \       return 2\n    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    return fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp14a37erd.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmp14a37erd.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmp14a37erd.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b992f88bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b992f582561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b992f582286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b992f58213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b992f581bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b992f3817ec <unavailable> + 186348

    6    tmp4kd7nlmm                        0x000055e1dd9ac7b6 <unavailable> + 6070

    7    tmp4kd7nlmm                        0x000055e1dd9ac3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b992fa77460 __libc_start_main +
    245

    9    tmp4kd7nlmm                        0x000055e1dd9ac0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppg9kc924.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmppg9kc924.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmppg9kc924.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return fibfib\n    }\n    if n == 1 {\n        return fibfib\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n      \
    \  return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n\
    \        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n\
    \ == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n\
    \    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return\
    \ 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n\
    \        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if\
    \ n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n\
    \    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n     \
    \   return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n\
    \ == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return 17711\n\
    \    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n    \
    \    return 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if\
    \ n == 26 {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n\
    \    }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n   \
    \     return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n \
    \   if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n        return\
    \ 2094243\n    }\n    if n == 33 {\n        return 3415392\n    }\n    if n ==\
    \ 34 {\n        return 4697622\n    }\n    if n == 35 {\n        return 7502541\n\
    \    }\n    if n == 36 {\n        return 12139269\n    }\n    if n == 37 {\n \
    \       return 196417910\n    }\n    if n == 38 {\n        return 317811773\n\
    \    }\n    if n == 39 {\n        return 514229191\n    }\n    if n == 40 {\n\
    \        return 832039776\n    }\n    if n == 41 {\n        return 1264671746\n\
    \    }\n    if n == 42 {\n        return 2094242641\n    }\n    if n == 43 {\n\
    \        return 3415392344\n    }\n    if n == 44 {\n        return 4697\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp1r22fag3.swift:165:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmp1r22fag3.swift:8:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmp1r22fag3.swift:147:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp1r22fag3.swift:159:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmp1r22fag3.swift:160:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmp1r22fag3.swift:161:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmp1r22fag3.swift:162:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmp1r22fag3.swift:163:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmp1r22fag3.swift:164:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmp1r22fag3.swift:165:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n       \
    \ return 1\n    }\n    \n    if n == 2 {\n        return 1\n    }\n    \n    if\
    \ n > 2 {\n        fibfib += fibfib(n-1) + fibfib(n-2)\n    }\n    \n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpiiok0gqo.swift:24:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmpiiok0gqo.swift:24:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bxfsq0.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    var fibfibArrayIndex = 0\n    var fibfibArrayIndexMax = Int(ceil(Double(n)\
    \ / Double(2)))\n    for fibfibArrayIndex in 0..<fibfibArrayIndexMax {\n     \
    \   fibfibArray.append(fibfibArray[fibfibArrayIndex] + fibfibArray[fibfibArrayIndex\
    \ + 1] + fibfibArray[fibfibArrayIndex + 2])\n    }\n    return fibfibArray[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2kd_1727.swift:11:35: error: cannot find 'ceil' in scope\n    var\
    \ fibfibArrayIndexMax = Int(ceil(Double(n) / Double(2)))\n                   \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppg9kc924.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmppg9kc924.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmppg9kc924.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for _ in 0..<n {\n        fibfibArray.append(fibfibArray[fibfibArray.count\
    \ - 2] + fibfibArray[fibfibArray.count - 3])\n    }\n    return fibfibArray[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp7b9iiils/tmp7b9iiils.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40b86efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40b83e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40b83e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40b83e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b9iiils                        0x0000564b2a44d5de <unavailable> + 5598

    5    libc.so.6                          0x00002b40b88db460 __libc_start_main +
    245

    6    tmp7b9iiils                        0x0000564b2a44d199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return\
    \ fibfib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp75cn5s40.swift:22:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmp75cn5s40.swift:22:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmp75cn5s40.swift:22:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp446o7hb5.swift:13:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn3vtfp1b.swift:15:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpn3vtfp1b.swift:15:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpn3vtfp1b.swift:15:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af5ae4b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5ae1ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af5ae1ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af5ae1ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af5ae1aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af5adfaa7ec <unavailable> + 186348

    6    tmpw57ap76b                        0x00005603635a97b6 <unavailable> + 6070

    7    tmpw57ap76b                        0x00005603635a93cb <unavailable> + 5067

    8    libc.so.6                          0x00002af5ae6a0460 __libc_start_main +
    245

    9    tmpw57ap76b                        0x00005603635a90e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for index in 0..<n {\n        fibfibArray.append(fibfibArray[index-1] + fibfibArray[index-2]\
    \ + fibfibArray[index-3])\n    }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b082fdd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b082facb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b082facb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b082facb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b082facabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b082f8cae83 <unavailable> + 188035

    6    tmp_otio2mq                        0x0000555c692948f5 <unavailable> + 6389

    7    tmp_otio2mq                        0x0000555c692943db <unavailable> + 5083

    8    libc.so.6                          0x00002b082ffc0460 __libc_start_main +
    245

    9    tmp_otio2mq                        0x0000555c692940f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009823
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpelewxvp8.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpelewxvp8.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpelewxvp8.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 0
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfibArray = [Int]()\n\
    \    fibfibArray.append(0)\n    fibfibArray.append(0)\n    fibfibArray.append(1)\n\
    \    for _ in 0..<n {\n        fibfibArray.append(fibfibArray[fibfibArray.count-1]\
    \ + fibfibArray[fibfibArray.count-2] + fibfibArray[fibfibArray.count-3])\n   \
    \ }\n    return fibfibArray[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009823
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 0..<n\
    \ {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b28df41dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28df114561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b28df114286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b28df11413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b28df113bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b28def137ec <unavailable> + 186348

    6    tmpftxbhevm                        0x0000564fa4bb67b6 <unavailable> + 6070

    7    tmpftxbhevm                        0x0000564fa4bb63cb <unavailable> + 5067

    8    libc.so.6                          0x00002b28df609460 __libc_start_main +
    245

    9    tmpftxbhevm                        0x0000564fa4bb60e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009823
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpf6hfdwc9.swift:12:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpf6hfdwc9.swift:12:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpf6hfdwc9.swift:12:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n      \
    \  return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n\
    \        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n\
    \ == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n\
    \    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return\
    \ 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n\
    \        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if\
    \ n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n\
    \    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n     \
    \   return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n\
    \ == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return 17711\n\
    \    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n    \
    \    return 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if\
    \ n == 26 {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n\
    \    }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n   \
    \     return 514229\n    }\n    if n == 30 {\n        return 765366\n    }\n \
    \   if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n        return\
    \ 1814343\n    }\n    if n == 33 {\n        return 2361259\n    }\n    if n ==\
    \ 34 {\n        return 3028877\n    }\n    if n == 35 {\n        return 4602619\n\
    \    }\n    if n == 36 {\n        return 6151413\n    }\n    if n == 37 {\n  \
    \      return 7914641\n    }\n    if n == 38 {\n        return 10322522\n    }\n\
    \    if n == 39 {\n        return 1267129\n    }\n    if n == 40 {\n        return\
    \ 15160263\n    }\n    if n == 41 {\n        return 18677493\n    }\n    if n\
    \ == 42 {\n        return 23238377\n    }\n    if n == 43 {\n        return 27443276\n\
    \    }\n    if n == 44 {\n        return 31576457\n    }\n    if n == 45 {\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmz__lrkb.swift:167:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpmz__lrkb.swift:8:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpmz__lrkb.swift:149:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpmz__lrkb.swift:161:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmpmz__lrkb.swift:162:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpmz__lrkb.swift:163:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmpmz__lrkb.swift:164:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpmz__lrkb.swift:165:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmpmz__lrkb.swift:166:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpmz__lrkb.swift:167:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpogod2x_h/tmpogod2x_h.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd428bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd3f82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd3f82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd3f817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogod2x_h                        0x000056353278b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0bd4477460 __libc_start_main +
    245

    6    tmpogod2x_h                        0x000056353278afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b308862bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3088322561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3088322286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b308832213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3088321bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b30881217ec <unavailable> + 186348

    6    tmpxp6q0z2j                        0x000055f38c0e47b6 <unavailable> + 6070

    7    tmpxp6q0z2j                        0x000055f38c0e43cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3088817460 __libc_start_main +
    245

    9    tmpxp6q0z2j                        0x000055f38c0e40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_wl7_b6i/tmp_wl7_b6i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedf1982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedf1679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedf1679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedf16787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wl7_b6i                        0x000055f807b72338 <unavailable> + 4920

    5    libc.so.6                          0x00002aedf1b6e460 __libc_start_main +
    245

    6    tmp_wl7_b6i                        0x000055f807b71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n \
    \   fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl92aaikn.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  for _ in 0..<n {\n        fibfib = fibfib + fibfib + 1\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8pf2zln7/tmp8pf2zln7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1170c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba116db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba116db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba116db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pf2zln7                        0x00005591a3674338 <unavailable> + 4920

    5    libc.so.6                          0x00002ba1172ae460 __libc_start_main +
    245

    6    tmp8pf2zln7                        0x00005591a3673fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009823
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpt2a73fbd/tmpt2a73fbd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17999d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17999d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17999d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2a73fbd                        0x000055e5d2e40338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1799ecd460 __libc_start_main +
    245

    6    tmpt2a73fbd                        0x000055e5d2e3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660009822
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib\
    \ += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp7xxm0s3v.swift:20:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmp7xxm0s3v.swift:20:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1660009822
