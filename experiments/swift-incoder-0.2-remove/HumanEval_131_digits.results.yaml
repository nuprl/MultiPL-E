language: swift
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).unicodeScalars\
    \ {\n        product *= Int(digit)\n    }\n    return product % 2 == 0 ? product\
    \ : product - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqcnh9bdr.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).unicodeScalars {\n                       ^~~~~~~\n                  \
    \      repeating     count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) ==\
    \ 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n:\
    \ 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2bf4_y3e.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n:\
    \ 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
    \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
    \ 0)"
  status: SyntaxError
  stderr: "/tmp/tmp85j71x5n.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpn9cmuqtk.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product - 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkyl6a5mo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product % 2 == 0 ? product : product - 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_0ep48tz.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpipalbgyt.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpipalbgyt.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.digits) {\n        if\
    \ digit == \"0\" {\n            product *= 2\n        } else {\n            product\
    \ *= 10\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmply7b6vmp.swift:7:27: error: value of type 'Int' has no member 'digits'\n\
    \    for digit in String(n.digits) {\n                        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%0*d\", n, 0).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpk2n4yo6o.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:_:', expected '_:radix:uppercase:')\n    for digit in String(format:\
    \ \"%0*d\", n, 0).characters {\n                       ^~~~~~~~~\n           \
    \                             radix:  uppercase: \n/tmp/tmpk2n4yo6o.swift:7:18:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    for digit in String(format: \"%0*d\", n, 0).characters\
    \ {\n                 ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public\
    \ init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n/tmp/tmpk2n4yo6o.swift:7:44: error: type 'Int' cannot be used as\
    \ a boolean; test for '!= 0' instead\n    for digit in String(format: \"%0*d\"\
    , n, 0).characters {\n                                           ^\n         \
    \                                  ( != 0)\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.digits {\n        product *= d\n\
    \    }\n    return product % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_vjhbh2g.swift:7:16: error: value of type 'Int' has no member 'digits'\n\
    \    for d in n.digits {\n             ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            result /= 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmplp0d2bn6/tmplp0d2bn6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b333925dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3338f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3338f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3338f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp0d2bn6                        0x00005579e8354338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3339449460 __libc_start_main +
    245

    6    tmplp0d2bn6                        0x00005579e8353fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n        product *= Int(digit)\n    }\n    return product % 2 == 0 ? product\
    \ : product - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0m6656oh.swift:7:63: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'reverse'\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.digits) {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwunjhpxb.swift:7:27: error: value of type 'Int' has no member 'digits'\n\
    \    for digit in String(n.digits) {\n                        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxxxo0e7h.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphe8do5go.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 0 {\n\
    \            product *= 2\n            n /= 2\n        } else {\n            product\
    \ *= 3\n            n /= 3\n        }\n    }\n    return product\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmrxeff94.swift:10:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpmrxeff94.swift:13:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 3\n            ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 1...n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5np3zu2j.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplvuv_ovo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbv5gcvcs.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 1...n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5np3zu2j.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n) {\n        product *=\
    \ Int(digit)\n    }\n    return product % 2 == 0 ? product : product - 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpplxxnzo3.swift:8:20: error: no exact matches in call to initializer\
    \ \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_1k3h6z.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplvuv_ovo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reversed().characters {\n\
    \        product *= Int(d)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpco8hr5rv.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reversed().characters {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_1k3h6z.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_1k3h6z.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_w968rk0.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_w968rk0.swift:8:24: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n        product *= Int(digit)!\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_1k3h6z.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ % 2 == 1 {\n            product *= digit\n        }\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphk34axsl.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplvuv_ovo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2, toBase: 10)\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmlmzeria.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2, toBase: 10) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.digits) {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwunjhpxb.swift:7:27: error: value of type 'Int' has no member 'digits'\n\
    \    for digit in String(n.digits) {\n                        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpq48r2sdr.swift:7:63: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'reverse'\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        if\
    \ d % 2 == 1 {\n            product *= Int(d)\n        }\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphibkzazw.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpodd3zbwr.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.digits) {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwunjhpxb.swift:7:27: error: value of type 'Int' has no member 'digits'\n\
    \    for digit in String(n.digits) {\n                        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            result /= 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmplp0d2bn6/tmplp0d2bn6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b333925dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3338f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3338f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3338f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp0d2bn6                        0x00005579e8354338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3339449460 __libc_start_main +
    245

    6    tmplp0d2bn6                        0x00005579e8353fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.characters.dropFirst().reverse()\
    \ {\n        product *= Int(d)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9crq9drz.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.characters.dropFirst().reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxxxo0e7h.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ % 2 == 1 {\n            product *= Int(digit)\n        }\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_qf5usz2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    for\
    \ digit in n.toString() {\n        if digit == \"0\" {\n            continue\n\
    \        }\n        product *= Int(digit)\n    }\n    return product\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5t8ptfrs.swift:10:20: error: value of type 'Int' has no member\
    \ 'toString'\n    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) ==\
    \ 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n:\
    \ 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2bf4_y3e.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().filter({\
    \ $0 % 2 == 1 }) {\n        product *= Int(digit)!\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjz5ail1x.swift:7:72: error: cannot convert value of type 'Substring.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n    for digit in String(n.description).characters.dropFirst().filter({\
    \ $0 % 2 == 1 }) {\n                                                         \
    \              ^\n"
  stdout: ''
  timestamp: 1660028715
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmplvuv_ovo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            return 0\n        }\n        result /= 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmpiky1g7cq/tmpiky1g7cq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cabee1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cabbd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cabbd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cabbd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiky1g7cq                        0x0000558574fd3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2cac0cd460 __libc_start_main +
    245

    6    tmpiky1g7cq                        0x0000558574fd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  if digit % 2 == 1 {\n            product *= digit\n        }\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprjrzw8b7.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbv5gcvcs.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9vmv_m_8.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9vmv_m_8.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpipalbgyt.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpipalbgyt.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ % 2 == 1 {\n            product *= Int(digit)\n        }\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_qf5usz2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.reverse()\
    \ {\n        product *= Int(digit)\n    }\n    return product % 2 == 0 ? product\
    \ : product - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpancumldr.swift:7:51: error: value of type 'String' has no member\
    \ 'reverse'\n    for digit in String(n.description).characters.reverse() {\n \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n        product *= Int(digit)\n    }\n    return product % 2 == 0 ? product\
    \ : product - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0m6656oh.swift:7:63: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'reverse'\n    for digit in String(n.description).characters.dropFirst().reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 1...n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5np3zu2j.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).characters\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdv5769z2.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).characters {\n                       ^~~~~~~\n                      \
    \  repeating     count: \n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmmuo3mza.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmmuo3mza.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9vmv_m_8.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9vmv_m_8.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    for\
    \ _ in 0..<n {\n        product *= n % 10\n        n /= 10\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpks232jlh.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpohieolgu.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpohieolgu.swift:8:24: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        product\
    \ *= Int(digit)!\n                       ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 10 { return n }\n    var result = 1\n    for _ in 0..<n {\n\
    \        result *= 2\n        if result % 2 == 1 {\n            return 0\n   \
    \     }\n        result /= 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmps5l9kbs8/tmps5l9kbs8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a8090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98a7d87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98a7d87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98a7d867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5l9kbs8                        0x0000556e60e993b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b98a827c460 __libc_start_main +
    245

    6    tmps5l9kbs8                        0x0000556e60e98fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product - 1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkyl6a5mo.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 10 {\n        return n\n    }\n    var product = 1\n    for\
    \ digit in String(repeating: \"0\", count: n) {\n        if digit == \"0\" {\n\
    \            continue\n        }\n        product *= Int(digit)\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpdobqd41p.swift:14:20: error: no exact matches in call to initializer\
    \ \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).reverse()\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5fs9ck85.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).reverse() {\n                       ^~~~~~~\n                       \
    \ repeating     count: \n/tmp/tmp5fs9ck85.swift:7:42: error: value of type 'String'\
    \ has no member 'reverse'\n    for digit in String(format: \"%o\", n).reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    for\
    \ _ in 0..<n {\n        product *= n % 10\n        n /= 10\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpks232jlh.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 10\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpn9cmuqtk.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9vmv_m_8.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9vmv_m_8.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpel_ad_ey.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).characters {\n                       ^~~~~~~\n                      \
    \  repeating     count: \n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.digits {\n        product *= d\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpugklczsw.swift:7:16: error: value of type 'Int' has no member 'digits'\n\
    \    for d in n.digits {\n             ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9i67fgvr.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpel_ad_ey.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).characters {\n                       ^~~~~~~\n                      \
    \  repeating     count: \n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.digits {\n        if d % 2 == 1 {\n\
    \            product *= d\n        }\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmppx3fkplp.swift:7:16: error: value of type 'Int' has no member 'digits'\n\
    \    for d in n.digits {\n             ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 10 {\n        return n\n    }\n    var product = 1\n    var\
    \ digit = n % 10\n    for _ in 0..<n / 10 {\n        product *= digit\n      \
    \  digit /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmp_wjq57wf/tmp_wjq57wf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac8ff7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac8fc75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac8fc75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac8fc747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wjq57wf                        0x00005606f4f453b3 <unavailable> + 5043

    5    libc.so.6                          0x00002aac9016a460 __libc_start_main +
    245

    6    tmp_wjq57wf                        0x00005606f4f44fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9vmv_m_8.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9vmv_m_8.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        if digit % 2 == 1 {\n            product *= Int(digit)\n        }\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp09ftl8t3.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp09ftl8t3.swift:8:12: error: cannot convert value of\
    \ type 'Character' to expected argument type 'Int'\n        if digit % 2 == 1\
    \ {\n           ^\n/tmp/tmp09ftl8t3.swift:9:24: error: no exact matches in call\
    \ to initializer \n            product *= Int(digit)\n                       ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if n % 2 == 0 {\n            result *= 3\n            n /= 2\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3um7hbv3.swift:11:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            result /= 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmplp0d2bn6/tmplp0d2bn6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b333925dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3338f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3338f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3338f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp0d2bn6                        0x00005579e8354338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3339449460 __libc_start_main +
    245

    6    tmplp0d2bn6                        0x00005579e8353fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 10 {\n        return n\n    }\n    var result = 0\n    var\
    \ remainder = n % 10\n    while remainder > 0 {\n        result += (remainder\
    \ % 2) == 0\n        remainder = remainder / 2\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpkx5_7qm2.swift:12:35: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        result += (remainder % 2) == 0\n  \
    \                                ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpodd3zbwr.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbv5gcvcs.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphe8do5go.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 0 {\n\
    \            product *= 2\n            n /= 2\n        } else {\n            product\
    \ *= 3\n            n /= 3\n        }\n    }\n    return product\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmrxeff94.swift:10:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpmrxeff94.swift:13:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 3\n            ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 1 {\n\
    \            product *= 10\n        }\n        product *= n % 10\n        n /=\
    \ 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_db8vnn.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) ==\
    \ 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n:\
    \ 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpx6tlve0z.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpodd3zbwr.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0_1k3h6z.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9vmv_m_8.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst().reversed()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9vmv_m_8.swift:8:20: error: no exact matches\
    \ in call to initializer \n        product *= Int(digit)\n                   ^\n\
    Swift.Int:7:12: note: candidate expects value of type 'Float16' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float16)\n           ^\nSwift.Int:10:12:\
    \ note: candidate expects value of type 'Float' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate\
    \ expects value of type 'Double' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects\
    \ value of type 'Float80' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value\
    \ of type 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_\
    \ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects\
    \ value of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product % 2 == 0 ? product : product - 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_0ep48tz.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product % 2 == 0 ? product : product - 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_0ep48tz.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphe8do5go.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 1 {\n\
    \            product *= 10\n        }\n        product *= n % 10\n        n /=\
    \ 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_db8vnn.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 1...n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5np3zu2j.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product % 2 == 0 ? product : product\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphe8do5go.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7je1lcrc.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters {\n \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7je1lcrc.swift:8:20: error: no exact matches in call\
    \ to initializer \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            return 0\n        }\n        result /= 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmpiky1g7cq/tmpiky1g7cq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cabee1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cabbd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cabbd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cabbd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiky1g7cq                        0x0000558574fd3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2cac0cd460 __libc_start_main +
    245

    6    tmpiky1g7cq                        0x0000558574fd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reversed().characters.dropFirst().reversed()\
    \ {\n        product *= Int(d)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1t0mhkl1.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reversed().characters.dropFirst().reversed() {\n    \
    \         ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 1 {\n\
    \            product *= 10\n        }\n        product *= n % 10\n        n /=\
    \ 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_db8vnn.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ % 2 == 1 {\n            product *= Int(digit)\n        }\n    }\n    return\
    \ product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(digits(n: 5) == 5)\n\
    assert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014)\
    \ == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_qf5usz2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1yic838v.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbv5gcvcs.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxxxo0e7h.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp450u_st2.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpodd3zbwr.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for d in n.toString.reverse() {\n        if\
    \ d % 2 == 1 {\n            product *= Int(d)\n        }\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphibkzazw.swift:7:16: error: value of type 'Int' has no member 'toString'\n\
    \    for d in n.toString.reverse() {\n             ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpohieolgu.swift:7:40: error: 'characters' is unavailable: Please\
    \ use String directly\n    for digit in String(n.description).characters.dropFirst()\
    \ {\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpohieolgu.swift:8:24: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        product\
    \ *= Int(digit)!\n                       ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString(radix: 2) {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr2qjmm80.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString(radix: 2) {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    for\
    \ digit in n.toString() {\n        product *= Int(digit)!\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2i7hay56.swift:10:20: error: value of type 'Int' has no member\
    \ 'toString'\n    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 0 {\n        return 0\n    }\n    var product = 1\n    for\
    \ digit in String(n) {\n        product *= Int(digit)\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\n\
    assert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765)\
    \ == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxllbq7sv.swift:11:20: error: no exact matches in call to initializer\
    \ \n        product *= Int(digit)\n                   ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    if n < 10 {\n        return n\n    }\n    var product = 1\n    for\
    \ digit in String(n - 1, radix: .decimal) {\n        product *= Int(digit)\n \
    \   }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpisb0fjd8.swift:10:40: error: type 'Int' has no member 'decimal'\n\
    \    for digit in String(n - 1, radix: .decimal) {\n                         \
    \             ~^~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n) {\n        product *=\
    \ Int(digit)!\n    }\n    return product % 10\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbludvaq5.swift:8:24: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        product *= Int(digit)!\n       \
    \                ^\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: -4
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= 2\n     \
    \   if result % 2 == 1 {\n            return 0\n        }\n        result /= 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: Exception
  stderr: 'tmpiky1g7cq/tmpiky1g7cq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cabee1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cabbd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cabbd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cabbd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiky1g7cq                        0x0000558574fd3338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2cac0cd460 __libc_start_main +
    245

    6    tmpiky1g7cq                        0x0000558574fd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 1...n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5np3zu2j.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString() {\n        if digit\
    \ == \"0\" {\n            continue\n        }\n        product *= Int(digit)!\n\
    \    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj3n_l4az.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(n.digits) {\n        product\
    \ *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp068d086.swift:7:27: error: value of type 'Int' has no member 'digits'\n\
    \    for digit in String(n.digits) {\n                        ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%o\", n).reverse()\
    \ {\n        product *= Int(digit)!\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp5fs9ck85.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %o\", n).reverse() {\n                       ^~~~~~~\n                       \
    \ repeating     count: \n/tmp/tmp5fs9ck85.swift:7:42: error: value of type 'String'\
    \ has no member 'reverse'\n    for digit in String(format: \"%o\", n).reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0mni03qx.swift:7:24: error: incorrect argument labels in call (have\
    \ 'format:_:', expected 'repeating:count:')\n    for digit in String(format: \"\
    %2d\", n).characters {\n                       ^~~~~~~\n                     \
    \   repeating      count: \n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for digit in n.toString.reverse() {\n      \
    \  product *= Int(digit)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxxxo0e7h.swift:7:20: error: value of type 'Int' has no member 'toString'\n\
    \    for digit in n.toString.reverse() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        product *= n % 10\n\
    \        n /= 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(digits(n: 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n:\
    \ 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n: 98765) == 315)\n\
    assert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6erplzsu.swift:9:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028711
- exit_code: 1
  program: "\n/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\nfunc digits(n: Int) ->\
    \ Int {\n    var product = 1\n    for _ in 0..<n {\n        if n % 2 == 1 {\n\
    \            product *= 10\n        }\n        product *= n % 10\n        n /=\
    \ 10\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(digits(n:\
    \ 5) == 5)\nassert(digits(n: 54) == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n:\
    \ 5014) == 5)\nassert(digits(n: 98765) == 315)\nassert(digits(n: 5576543) == 2625)\n\
    assert(digits(n: 2468) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_db8vnn.swift:12:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n"
  stdout: ''
  timestamp: 1660028712
