language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.filter\
    \ { (i, j, k) -> Bool in\n        return i < j < k\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmph8hr6hfx.swift:16:18: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        return i < j < k\n        \
    \         ^   ~\n/tmp/tmph8hr6hfx.swift:16:22: error: binary operator '<' cannot\
    \ be applied to operands of type 'Bool' and '()'\n        return i < j < k\n \
    \              ~~~~~ ^ ~\n/tmp/tmph8hr6hfx.swift:16:22: note: overloads for '<'\
    \ exist with these partially matching parameter lists: ((), ()), (AnyIndex, AnyIndex),\
    \ (Character, Character), (ContinuousClock.Instant, ContinuousClock.Instant),\
    \ (Duration, Duration), (Int, Int), (Int16, Int16), (Int32, Int32), (Int64, Int64),\
    \ (Int8, Int8), (Never, Never), (ObjectIdentifier, ObjectIdentifier), (String,\
    \ String), (String.Index, String.Index), (SuspendingClock.Instant, SuspendingClock.Instant),\
    \ (TaskPriority, TaskPriority), (UInt, UInt), (UInt16, UInt16), (UInt32, UInt32),\
    \ (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass, Unicode.CanonicalCombiningClass),\
    \ (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index, _ValidUTF8Buffer.Index)\n\
    \        return i < j < k\n                     ^\n/tmp/tmph8hr6hfx.swift:15:23:\
    \ error: contextual closure type '(Int) throws -> Bool' expects 1 argument, but\
    \ 3 were used in closure body\n    return a.filter { (i, j, k) -> Bool in\n  \
    \                    ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) {\n            for\
    \ k in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpk3kd7hzy.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpk3kd7hzy.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpk3kd7hzy.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7o4g3vql/tmp7o4g3vql.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844454bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8444242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8444242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84442417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7o4g3vql                        0x000056498228f495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8444737460 __libc_start_main +
    245

    6    tmp7o4g3vql                        0x000056498228f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && j != k && i != k {\n                    a.append(i\
    \ * i - i + 1)\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpv_yli_0o/tmpv_yli_0o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964cf22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b964cc19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b964cc19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b964cc187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_yli_0o                        0x0000563ed20ff495 <unavailable> + 5269

    5    libc.so.6                          0x00002b964d10e460 __libc_start_main +
    245

    6    tmpv_yli_0o                        0x0000563ed20ff149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplr8x3_qm.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmplr8x3_qm.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmplr8x3_qm.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for\
    \ k in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_hzhjzpo.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp_hzhjzpo.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmp_hzhjzpo.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp7o4g3vql/tmp7o4g3vql.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b844454bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8444242b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8444242988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84442417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7o4g3vql                        0x000056498228f495 <unavailable> + 5269

    5    libc.so.6                          0x00002b8444737460 __libc_start_main +
    245

    6    tmp7o4g3vql                        0x000056498228f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..(n-1){\n        for j in (i+1)..(n-1){\n            for k in\
    \ (i+1)..(n-1){\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq26ocpj9.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1){\n              ^~\n            \
    \  ...\n/tmp/tmpq26ocpj9.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1){\n                      ^~\n\
    \                      ...\n/tmp/tmpq26ocpj9.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1){\n   \
    \                       ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp02w5sp5x.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmp02w5sp5x.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) {\n            for\
    \ k in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpap0w1a4t.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpap0w1a4t.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpap0w1a4t.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] + a[j] + a[k]\
    \ == 3 {\n                        count += 1\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_ma9ym51.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp_ma9ym51.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n                        a.append(i)\n\
    \                        a.append(j)\n                        a.append(k)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a1f56dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a1f264561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a1f264286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a1f26413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a1f263bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a1f063e83 <unavailable> + 188035

    6    tmpvp9i6zpd                        0x0000558946a67ac0 <unavailable> + 6848

    7    tmpvp9i6zpd                        0x0000558946a67478 <unavailable> + 5240

    8    libc.so.6                          0x00002b3a1f759460 __libc_start_main +
    245

    9    tmpvp9i6zpd                        0x0000558946a67199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n       \
    \         if a[j] > 0 && a[j] > a[k] && a[k] > 0 {\n                    a[j] +=\
    \ a[k]\n                    a[k] = 0\n                    count += 1\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fefe4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fefb44561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7fefb44286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7fefb4413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7fefb43bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7fef943e83 <unavailable> + 188035

    6    tmpzq_t61vq                        0x000055ff38e94ae7 <unavailable> + 6887

    7    tmpzq_t61vq                        0x000055ff38e94428 <unavailable> + 5160

    8    libc.so.6                          0x00002b7ff0039460 __libc_start_main +
    245

    9    tmpzq_t61vq                        0x000055ff38e94149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    let sum = Int(a[i]) +\
    \ Int(a[j]) + Int(a[k])\n                    if sum % 3 == 0 {\n             \
    \           count += 1\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0t7_3dj0.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp0t7_3dj0.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) { \n            for\
    \ k in (j+1)..(n) { \n                if a[i] < a[j] && a[i] < a[k] && a[j] <\
    \ a[k] {\n                    triples += 1\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp63k2g27_.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmp63k2g27_.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) { \n                      ^~\n\
    \                      ...\n/tmp/tmp63k2g27_.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) { \n   \
    \                       ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n                        a.append(i)\n\
    \                        a.append(j)\n                        a.append(k)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a1f56dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a1f264561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a1f264286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a1f26413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a1f263bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a1f063e83 <unavailable> + 188035

    6    tmpvp9i6zpd                        0x0000558946a67ac0 <unavailable> + 6848

    7    tmpvp9i6zpd                        0x0000558946a67478 <unavailable> + 5240

    8    libc.so.6                          0x00002b3a1f759460 __libc_start_main +
    245

    9    tmpvp9i6zpd                        0x0000558946a67199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    a[i] = a[i] +\
    \ a[j] + a[k]\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b63ce93ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63ce635561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b63ce635286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b63ce63513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b63ce634bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b63ce434e83 <unavailable> + 188035

    6    tmpxbd_2luo                        0x0000562a25346ab0 <unavailable> + 6832

    7    tmpxbd_2luo                        0x0000562a25346468 <unavailable> + 5224

    8    libc.so.6                          0x00002b63ceb2a460 __libc_start_main +
    245

    9    tmpxbd_2luo                        0x0000562a25346189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for i in 1...n\
    \ {\n        for j in 1...n {\n            for k in 1...n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[i] < a[j] + a[k] {\n\
    \                        a[i] = a[j] + a[k]\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2aa271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2a9f68561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2a9f68286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2a9f6813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2a9f67bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2a9d67e83 <unavailable> + 188035

    6    tmpnmk79sd7                        0x0000561fa38b0bf5 <unavailable> + 7157

    7    tmpnmk79sd7                        0x0000561fa38b0428 <unavailable> + 5160

    8    libc.so.6                          0x00002ab2aa45d460 __libc_start_main +
    245

    9    tmpnmk79sd7                        0x0000561fa38b0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        if a[j] < a[k] {\n        \
    \                    count += 1\n                        }\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpqntbi5s9/tmpqntbi5s9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708ba47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b73eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b73e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b73d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqntbi5s9                        0x000055681c005535 <unavailable> + 5429

    5    libc.so.6                          0x00002b708bc33460 __libc_start_main +
    245

    6    tmpqntbi5s9                        0x000055681c0051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    a.append(i\
    \ * i - i + 1)\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp99chz24k/tmp99chz24k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac072476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07216db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07216d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07216c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99chz24k                        0x00005629c8f03495 <unavailable> + 5269

    5    libc.so.6                          0x00002ac072662460 __libc_start_main +
    245

    6    tmp99chz24k                        0x00005629c8f03149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpxvs7slaa/tmpxvs7slaa.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d85e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d82dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d82da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d82d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvs7slaa                        0x000055e9a3c32495 <unavailable> + 5269

    5    libc.so.6                          0x00002b11d87cf460 __libc_start_main +
    245

    6    tmpxvs7slaa                        0x000055e9a3c32149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                    if a[j] < a[i] && a[j] < a[k] {\n              \
    \          count += 1\n                    }\n                    if a[k] < a[i]\
    \ && a[k] < a[j] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmplcuhyzwb/tmplcuhyzwb.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae24dccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae24ac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae24ac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae24ac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplcuhyzwb                        0x000055af2c433535 <unavailable> + 5429

    5    libc.so.6                          0x00002aae24fb8460 __libc_start_main +
    245

    6    tmplcuhyzwb                        0x000055af2c4331e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) {\n            for\
    \ k in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpap0w1a4t.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpap0w1a4t.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpap0w1a4t.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp02w5sp5x.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmp02w5sp5x.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && j != k && i != k {\n                    let sum = i *\
    \ i - i + j * j + k * k\n                    if sum % 3 == 0 {\n             \
    \           a.append(sum)\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvr881mnw/tmpvr881mnw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ada039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ad9d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ad9d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ad9d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr881mnw                        0x000055ae0ecbf495 <unavailable> + 5269

    5    libc.so.6                          0x00002b9ada225460 __libc_start_main +
    245

    6    tmpvr881mnw                        0x000055ae0ecbf149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _ in 1...n\
    \ {\n        for j in 1...n {\n            for i in 1...n {\n                if\
    \ a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j] + a[k]\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpim300ejv.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmpim300ejv.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n          \
    \  for k in 0..<a.count {\n                if i != j && i != k && j != k {\n \
    \                   if a[i] < a[j] && a[i] < a[k] {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp3n1retiy/tmp3n1retiy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b992d275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b992cf6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b992cf6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b992cf6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n1retiy                        0x00005573126495d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b992d461460 __libc_start_main +
    245

    6    tmp3n1retiy                        0x0000557312649289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplr8x3_qm.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmplr8x3_qm.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmplr8x3_qm.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i - i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i + i*i\
    \ + i*i + \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpe9xczzms.swift:17:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpe9xczzms.swift:35:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmpe9xczzms.swift:14:28: note: to match this opening '{'\n     \
    \       for k in 1...n {\n                           ^\n/tmp/tmpe9xczzms.swift:35:41:\
    \ error: expected '}' at end of brace statement\nassert(get_max_triples(n: 100)\
    \ == 53361)\n                                        ^\n/tmp/tmpe9xczzms.swift:13:24:\
    \ note: to match this opening '{'\n        for j in 1...n {\n                \
    \       ^\n/tmp/tmpe9xczzms.swift:35:41: error: expected '}' at end of brace statement\n\
    assert(get_max_triples(n: 100) == 53361)\n                                   \
    \     ^\n/tmp/tmpe9xczzms.swift:12:20: note: to match this opening '{'\n    for\
    \ i in 1...n {\n                   ^\n/tmp/tmpe9xczzms.swift:35:41: error: expected\
    \ '}' at end of brace statement\nassert(get_max_triples(n: 100) == 53361)\n  \
    \                                      ^\n/tmp/tmpe9xczzms.swift:10:37: note:\
    \ to match this opening '{'\nfunc get_max_triples(n: Int) -> Int {\n         \
    \                           ^\n/tmp/tmpe9xczzms.swift:20:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-2) {\n        for j in (i+1)..(n-1) {\n            for\
    \ k in (i+1)..(n-1) {\n                if a[i] < a[j] && a[j] < a[k] {\n     \
    \               count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmppklqst_j.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-2) {\n              ^~\n           \
    \   ...\n/tmp/tmppklqst_j.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmppklqst_j.swift:18:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && j != k && i != k {\n                    if a[i]\
    \ < a[j] + a[k] {\n                        a[i] = a[j] + a[k]\n              \
    \      }\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa1fe2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa1cd9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeaa1cd9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeaa1cd913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeaa1cd8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeaa1ad8e83 <unavailable> + 188035

    6    tmpplundlmf                        0x000055ee6d28cab0 <unavailable> + 6832

    7    tmpplundlmf                        0x000055ee6d28c468 <unavailable> + 5224

    8    libc.so.6                          0x00002aeaa21ce460 __libc_start_main +
    245

    9    tmpplundlmf                        0x000055ee6d28c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.filter({\
    \ (i, j, k) -> Bool in\n        i < j < k\n    }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpusvmzwsj.swift:16:11: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        i < j < k\n          ^   ~\n\
    /tmp/tmpusvmzwsj.swift:15:23: error: contextual closure type '(Int) throws ->\
    \ Bool' expects 1 argument, but 3 were used in closure body\n    return a.filter({\
    \ (i, j, k) -> Bool in\n                      ^\n/tmp/tmpusvmzwsj.swift:16:15:\
    \ error: binary operator '<' cannot be applied to operands of type 'Bool' and\
    \ '()'\n        i < j < k\n        ~~~~~ ^ ~\n/tmp/tmpusvmzwsj.swift:16:15: note:\
    \ overloads for '<' exist with these partially matching parameter lists: ((),\
    \ ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n        i < j < k\n              ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                    if a[j] < a[i] && a[j] < a[k] {\n              \
    \          count += 1\n                    }\n                    if a[k] < a[i]\
    \ && a[k] < a[j] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp4i29d2pb/tmp4i29d2pb.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342bae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b342b7dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b342b7db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b342b7da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i29d2pb                        0x000055b72a70c535 <unavailable> + 5429

    5    libc.so.6                          0x00002b342bcd0460 __libc_start_main +
    245

    6    tmp4i29d2pb                        0x000055b72a70c1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] || a[i]\
    \ < a[k] || a[j] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl0_k9a4s.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpl0_k9a4s.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp02w5sp5x.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmp02w5sp5x.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i + 1)...n {\n            for\
    \ k in (i + 1)...n {\n                if a[i] < a[j] && a[i] < a[k] && a[j] <\
    \ a[k] {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpt7dhxd5g.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    a.append(i*i\
    \ - i + 1)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx6lz762h/tmpx6lz762h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8364fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8361f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8361f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8361f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6lz762h                        0x00005640c33d1495 <unavailable> + 5269

    5    libc.so.6                          0x00002ab8366e6460 __libc_start_main +
    245

    6    tmpx6lz762h                        0x00005640c33d1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if i < j && j < i && a[i] + a[j] + a[k] == 3 {\n                   \
    \ count += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa4cb7d2u.swift:19:54: error: cannot find 'k' in scope\n       \
    \         if i < j && j < i && a[i] + a[j] + a[k] == 3 {\n                   \
    \                                  ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ == a[j] + a[k] {\n                        return a[i]\n                    }\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b87fbbc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87fb8bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b87fb8bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b87fb8bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b87fb8bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b87fb6bee83 <unavailable> + 188035

    6    tmpl9fqoeri                        0x000055fe13136a59 <unavailable> + 6745

    7    tmpl9fqoeri                        0x000055fe131363c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b87fbdb4460 __libc_start_main +
    245

    9    tmpl9fqoeri                        0x000055fe131360e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n                        a.append(i)\n\
    \                        a.append(j)\n                        a.append(k)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a1f56dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a1f264561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a1f264286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a1f26413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a1f263bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a1f063e83 <unavailable> + 188035

    6    tmpvp9i6zpd                        0x0000558946a67ac0 <unavailable> + 6848

    7    tmpvp9i6zpd                        0x0000558946a67478 <unavailable> + 5240

    8    libc.so.6                          0x00002b3a1f759460 __libc_start_main +
    245

    9    tmpvp9i6zpd                        0x0000558946a67199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp819fzcqa/tmp819fzcqa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bf8b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bf8846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bf8846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bf88457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp819fzcqa                        0x000055d6cb784535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2bf8d3b460 __libc_start_main +
    245

    6    tmp819fzcqa                        0x000055d6cb7841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && j != k && i != k {\n                    a.append(i*i\
    \ - i + 1)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr43h344e/tmpr43h344e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478c75dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478c454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478c454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478c4537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr43h344e                        0x000055b8bce9c495 <unavailable> + 5269

    5    libc.so.6                          0x00002b478c949460 __libc_start_main +
    245

    6    tmpr43h344e                        0x000055b8bce9c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var triples =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3r8ovir6/tmp3r8ovir6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b916541dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9165114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9165114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91651137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r8ovir6                        0x00005584adb36535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9165609460 __libc_start_main +
    245

    6    tmp3r8ovir6                        0x00005584adb361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.filter({$0\
    \ % 3 == 0}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpz8s8o7jq/tmpz8s8o7jq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebb1903c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebb15fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebb15fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebb15f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz8s8o7jq                        0x000055e8bb03e555 <unavailable> + 5461

    5    libc.so.6                          0x00002aebb1aef460 __libc_start_main +
    245

    6    tmpz8s8o7jq                        0x000055e8bb03e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplr8x3_qm.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmplr8x3_qm.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmplr8x3_qm.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.filter\
    \ { (i, j, k) -> Bool in\n        return i < j < k\n    }.filter { (i, j, k) ->\
    \ Bool in\n        return i * i + j * j + k * k == 3 * i * j\n    }.count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0zqikfhd.swift:16:18: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        return i < j < k\n        \
    \         ^   ~\n/tmp/tmp0zqikfhd.swift:15:12: error: the compiler is unable to\
    \ type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n    return a.filter { (i, j, k) -> Bool in\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009374
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n          \
    \  for k in 0..<a.count {\n                if i != j && i != k && j != k {\n \
    \                   if a[i] + a[j] + a[k] == 3 {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpn7k39wb0/tmpn7k39wb0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73cfed8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73cfbcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73cfbcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73cfbce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7k39wb0                        0x00005581d884c5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b73d00c4460 __libc_start_main +
    245

    6    tmpn7k39wb0                        0x00005581d884c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        a[i] = a[i] + a[j] + a[k]\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adee604ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adee5d45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adee5d45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adee5d4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adee5d44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adee5b44e83 <unavailable> + 188035

    6    tmp6064bach                        0x000055c678d79ab0 <unavailable> + 6832

    7    tmp6064bach                        0x000055c678d79468 <unavailable> + 5224

    8    libc.so.6                          0x00002adee623a460 __libc_start_main +
    245

    9    tmp6064bach                        0x000055c678d79189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp2940szji.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k in\
    \ (i+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn2lkuokk.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmpn2lkuokk.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpn2lkuokk.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        triples += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpju90u6rj.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpju90u6rj.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    if a[i] + a[j]\
    \ + a[k] == i*i*i - i*i + i*i*i + i*i*i + i*i*i {\n                        a.append(i)\n\
    \                        a.append(j)\n                        a.append(k)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba598887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba59857e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba59857e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba59857e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba59857dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba59837de83 <unavailable> + 188035

    6    tmpyjro5bz_                        0x0000559526f0eac0 <unavailable> + 6848

    7    tmpyjro5bz_                        0x0000559526f0e478 <unavailable> + 5240

    8    libc.so.6                          0x00002ba598a73460 __libc_start_main +
    245

    9    tmpyjro5bz_                        0x0000559526f0e199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        if a[j] < a[k] {\n        \
    \                    count += 1\n                        }\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpromewb96/tmpromewb96.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd43cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd40c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd40c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd40c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpromewb96                        0x0000558ea9f4b535 <unavailable> + 5429

    5    libc.so.6                          0x00002aabd45ba460 __libc_start_main +
    245

    6    tmpromewb96                        0x0000558ea9f4b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        result += 3\n             \
    \       }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbevm1_7n/tmpbevm1_7n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d8fc59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d8f950b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d8f950988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d8f94f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbevm1_7n                        0x000055bf155b2535 <unavailable> + 5429

    5    libc.so.6                          0x00002b1d8fe45460 __libc_start_main +
    245

    6    tmpbevm1_7n                        0x000055bf155b21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && j != k && i != k {\n                    let sum\
    \ = i * i - i + j * j + k * k\n                    if sum % 3 == 0 {\n       \
    \                 a.append(sum)\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpfcd4gr_d/tmpfcd4gr_d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a95348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a9503fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a9503f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a9503e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcd4gr_d                        0x000055913ac1b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b0a95534460 __libc_start_main +
    245

    6    tmpfcd4gr_d                        0x000055913ac1b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \              if a[j] < a[i] && a[j] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[k] < a[i] && a[k] < a[j]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa8jrnmcu.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpa8jrnmcu.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpxvs7slaa/tmpxvs7slaa.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d85e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d82dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d82da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d82d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvs7slaa                        0x000055e9a3c32495 <unavailable> + 5269

    5    libc.so.6                          0x00002b11d87cf460 __libc_start_main +
    245

    6    tmpxvs7slaa                        0x000055e9a3c32149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i != j && i != k && j != k {\n      \
    \              if a[i] < a[j] && a[i] < a[k] {\n                        result++\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpnqvllilw.swift:21:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        result++\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i < j && j < k && k < i {\n                    a.append(i\
    \ * i - i + 1)\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp1suid06b/tmp1suid06b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52219dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae521e94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae521e94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae521e937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1suid06b                        0x000055f1fc900495 <unavailable> + 5269

    5    libc.so.6                          0x00002ae522389460 __libc_start_main +
    245

    6    tmp1suid06b                        0x000055f1fc900149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == 3 {\n                        triples += 1\n               \
    \     }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp8hg1rmqd/tmp8hg1rmqd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b952646fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9526166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9526166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95261657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hg1rmqd                        0x0000564b2e4e8535 <unavailable> + 5429

    5    libc.so.6                          0x00002b952665b460 __libc_start_main +
    245

    6    tmp8hg1rmqd                        0x0000564b2e4e81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    a.append(i*i\
    \ - i + 1)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx6lz762h/tmpx6lz762h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8364fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8361f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8361f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8361f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6lz762h                        0x00005640c33d1495 <unavailable> + 5269

    5    libc.so.6                          0x00002ab8366e6460 __libc_start_main +
    245

    6    tmpx6lz762h                        0x00005640c33d1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n       \
    \         if i != j && i != k && j != k {\n                    a[i] += a[j] +\
    \ a[k]\n                }\n            }\n        }\n    }\n    for k in 0..<n\
    \ {\n        if a[k] % 3 == 0 {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp4pgfhns7/tmp4pgfhns7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98b545dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98b5154b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98b5154988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98b51537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pgfhns7                        0x00005602476d8585 <unavailable> + 5509

    5    libc.so.6                          0x00002b98b5649460 __libc_start_main +
    245

    6    tmp4pgfhns7                        0x00005602476d8239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpxvs7slaa/tmpxvs7slaa.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11d85e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11d82dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11d82da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11d82d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvs7slaa                        0x000055e9a3c32495 <unavailable> + 5269

    5    libc.so.6                          0x00002b11d87cf460 __libc_start_main +
    245

    6    tmpxvs7slaa                        0x000055e9a3c32149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp02w5sp5x.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmp02w5sp5x.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (j+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplr8x3_qm.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmplr8x3_qm.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmplr8x3_qm.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..(n-1){\n        for j in (i+1)..(n-1){\n            for k in\
    \ (i+1)..(n-1){\n                if a[i] < a[j] && a[j] < a[k] && a[i] < a[j]\
    \ + a[k] {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp9pootvmd.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1){\n              ^~\n            \
    \  ...\n/tmp/tmp9pootvmd.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1){\n                      ^~\n\
    \                      ...\n/tmp/tmp9pootvmd.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1){\n   \
    \                       ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n\
    \                if i < j < k {\n                    let sum = Int(a[i]) + Int(a[j])\
    \ + Int(a[k])\n                    if sum % 3 == 0 {\n                       \
    \ count += 1\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpf6lgdyo8.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpf6lgdyo8.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i < j < k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        result += 3\n             \
    \       }\n                    if a[j] < a[i] && a[j] < a[k] {\n             \
    \           result += 3\n                    }\n                    if a[k] <\
    \ a[i] && a[k] < a[j] {\n                        result += 3\n               \
    \     }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpic8xvj7d.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpic8xvj7d.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                        count += 1\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpi4mzvwtr.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpi4mzvwtr.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        triples += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpju90u6rj.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpju90u6rj.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && j != k && i != k {\n                    a.append(i*i\
    \ - i + 1)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpr43h344e/tmpr43h344e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b478c75dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b478c454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b478c454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b478c4537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr43h344e                        0x000055b8bce9c495 <unavailable> + 5269

    5    libc.so.6                          0x00002b478c949460 __libc_start_main +
    245

    6    tmpr43h344e                        0x000055b8bce9c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        if a[j] < a[k] {\n        \
    \                    count += 1\n                        }\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpqntbi5s9/tmpqntbi5s9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708ba47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b708b73eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b708b73e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b708b73d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqntbi5s9                        0x000055681c005535 <unavailable> + 5429

    5    libc.so.6                          0x00002b708bc33460 __libc_start_main +
    245

    6    tmpqntbi5s9                        0x000055681c0051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n          \
    \  for k in 0..<a.count {\n                if i < j < k {\n                  \
    \  if a[i] < a[j] + a[k] {\n                        triples += 1\n           \
    \         }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxjldpmty.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpxjldpmty.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    let sum = Int(a[i]) +\
    \ Int(a[j]) + Int(a[k])\n                    if sum % 3 == 0 {\n             \
    \           count += 1\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp0t7_3dj0.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp0t7_3dj0.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            if a[j] > 0 {\n          \
    \      for k in 1...n {\n                    if a[j] > 0 && a[j] > a[k] && a[k]\
    \ > 0 {\n                        a[j] += a[k]\n                        a[k] =\
    \ 0\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aeee9564c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeee925b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aeee925b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aeee925b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aeee925abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aeee905ae83 <unavailable> + 188035

    6    tmpkxrmbvkm                        0x0000560ed44409c5 <unavailable> + 6597

    7    tmpkxrmbvkm                        0x0000560ed4440428 <unavailable> + 5160

    8    libc.so.6                          0x00002aeee9750460 __libc_start_main +
    245

    9    tmpkxrmbvkm                        0x0000560ed4440149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] + a[j] + a[k]\
    \ == 3 {\n                        count += 1\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_ma9ym51.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp_ma9ym51.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var triples =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp3r8ovir6/tmp3r8ovir6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b916541dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9165114b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9165114988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91651137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3r8ovir6                        0x00005584adb36535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9165609460 __libc_start_main +
    245

    6    tmp3r8ovir6                        0x00005584adb361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples++\n               \
    \     }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxxbck8oj.swift:21:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ == a[j] + a[k] {\n                        return a[i]\n                    }\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b87fbbc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87fb8bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b87fb8bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b87fb8bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b87fb8bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b87fb6bee83 <unavailable> + 188035

    6    tmpl9fqoeri                        0x000055fe13136a59 <unavailable> + 6745

    7    tmpl9fqoeri                        0x000055fe131363c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b87fbdb4460 __libc_start_main +
    245

    9    tmpl9fqoeri                        0x000055fe131360e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var count = 0\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp819fzcqa/tmp819fzcqa.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bf8b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bf8846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bf8846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bf88457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp819fzcqa                        0x000055d6cb784535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2bf8d3b460 __libc_start_main +
    245

    6    tmp819fzcqa                        0x000055d6cb7841e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        triples += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpju90u6rj.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpju90u6rj.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 1...n {\n        for j in 1...n {\n            for k in 1...n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples++\n               \
    \     }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbq92ckfj.swift:21:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i < j && j < k && i < k {\n                    a[i] = a[i]\
    \ + a[j] + a[k]\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad09a524c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad09a21b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad09a21b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad09a21b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad09a21abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad09a01ae83 <unavailable> + 188035

    6    tmpv19l4mn7                        0x0000559bc7bafaa3 <unavailable> + 6819

    7    tmpv19l4mn7                        0x0000559bc7baf468 <unavailable> + 5224

    8    libc.so.6                          0x00002ad09a710460 __libc_start_main +
    245

    9    tmpv19l4mn7                        0x0000559bc7baf189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    let triple\
    \ = i + j + k\n                    if triple.isMultiple(of: 3) {\n           \
    \             a.append(triple)\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpzgheb2jm/tmpzgheb2jm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1da3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1da0d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1da0d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1da0d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzgheb2jm                        0x000055f0d69ab595 <unavailable> + 5525

    5    libc.so.6                          0x00002ac1da5c8460 __libc_start_main +
    245

    6    tmpzgheb2jm                        0x000055f0d69ab249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i - i*i + i*i*i + j*j*j + j*j*j + k*k*k {\n           \
    \             a.append(i)\n                        a.append(j)\n             \
    \           a.append(k)\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b67e15dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67e12d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b67e12d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b67e12d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b67e12d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b67e10d2e83 <unavailable> + 188035

    6    tmpbqkth2lf                        0x000055ef34868ac0 <unavailable> + 6848

    7    tmpbqkth2lf                        0x000055ef34868478 <unavailable> + 5240

    8    libc.so.6                          0x00002b67e17c8460 __libc_start_main +
    245

    9    tmpbqkth2lf                        0x000055ef34868199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.filter\
    \ { ($0 % 3) == 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpguwgk009/tmpguwgk009.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d1e5f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d1e2ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d1e2ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d1e2eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguwgk009                        0x000055b00e281555 <unavailable> + 5461

    5    libc.so.6                          0x00002b8d1e7e1460 __libc_start_main +
    245

    6    tmpguwgk009                        0x000055b00e281209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptf0hddxk.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmptf0hddxk.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmptf0hddxk.swift:20:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmptf0hddxk.swift:20:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i != j && i != k && j != k {\n      \
    \              if a[i] < a[j] && a[i] < a[k] {\n                        result\
    \ = result + 1\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpmdy4181m/tmpmdy4181m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba124303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba123ffab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba123ffa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba123ff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdy4181m                        0x00005608f33ad5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002ba1244ef460 __libc_start_main +
    245

    6    tmpmdy4181m                        0x00005608f33ad289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (i+1)..(n) {\n                if a[i] < a[j] && a[j] < a[k] {\n         \
    \           count += 1\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpswnfhbli.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmpswnfhbli.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpswnfhbli.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        count += 1\n                    }\n      \
    \              if a[j] < a[i] && a[j] < a[k] {\n                        count\
    \ += 1\n                    }\n                    if a[k] < a[i] && a[k] < a[j]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa8jrnmcu.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpa8jrnmcu.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n {\n       \
    \         if i != j && i != k && j != k {\n                    a[i] += a[j] +\
    \ a[k]\n                    if a[i] % 3 == 0 {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp7o0oy2hr/tmp7o0oy2hr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b366a6dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b366a3d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b366a3d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b366a3d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7o0oy2hr                        0x000055ad1a085585 <unavailable> + 5509

    5    libc.so.6                          0x00002b366a8ca460 __libc_start_main +
    245

    6    tmp7o0oy2hr                        0x000055ad1a085239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n          \
    \  for k in 0..<a.count {\n                if i != j && i != k && j != k {\n \
    \                   if a[i] < a[j] && a[i] < a[k] {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp3n1retiy/tmp3n1retiy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b992d275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b992cf6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b992cf6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b992cf6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3n1retiy                        0x00005573126495d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b992d461460 __libc_start_main +
    245

    6    tmp3n1retiy                        0x0000557312649289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a: [Int] = []\n    for\
    \ i in 1...n {\n        a[i] = i * i - i + 1\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c01511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c01208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c01208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c0120813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c01207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0c010077ec <unavailable> + 186348

    6    tmpp6x1qso1                        0x00005559796f87f4 <unavailable> + 6132

    7    tmpp6x1qso1                        0x00005559796f8438 <unavailable> + 5176

    8    libc.so.6                          0x00002b0c016fd460 __libc_start_main +
    245

    9    tmpp6x1qso1                        0x00005559796f8159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i < j < k {\n                    if a[i]\
    \ < a[j] + a[k] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbzh3g_97.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbzh3g_97.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] < a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptf0hddxk.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmptf0hddxk.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmptf0hddxk.swift:20:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmptf0hddxk.swift:20:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    a.append(i*i\
    \ - i + 1)\n                }\n            }\n        }\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpx6lz762h/tmpx6lz762h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8364fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8361f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8361f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8361f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6lz762h                        0x00005640c33d1495 <unavailable> + 5269

    5    libc.so.6                          0x00002ab8366e6460 __libc_start_main +
    245

    6    tmpx6lz762h                        0x00005640c33d1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp2940szji.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    if a[i] + a[j]\
    \ + a[k] == 3 * i {\n                        return i\n                    }\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b59005f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59002ec561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b59002ec286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b59002ec13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b59002ebbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b59000ebe83 <unavailable> + 188035

    6    tmpybe13grb                        0x0000564bb4eb8a4d <unavailable> + 6733

    7    tmpybe13grb                        0x0000564bb4eb83c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b59007e1460 __libc_start_main +
    245

    9    tmpybe13grb                        0x0000564bb4eb80e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 1...n {\n        for j in 1...n {\n            for k in 1...n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] && a[i]\
    \ < a[k] {\n                        triples += 1\n                    }\n    \
    \                if a[j] < a[i] && a[j] < a[k] {\n                        triples\
    \ += 1\n                    }\n                    if a[k] < a[i] && a[k] < a[j]\
    \ {\n                        triples += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpn0zhs3hn.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpn0zhs3hn.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i < j && j < k && k < i {\n                    a[i] = a[i]\
    \ + a[j] + a[k]\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmppfk24p6j/tmppfk24p6j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59eea00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ee6f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ee6f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ee6f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfk24p6j                        0x0000557e7dfce4d5 <unavailable> + 5333

    5    libc.so.6                          0x00002b59eebec460 __libc_start_main +
    245

    6    tmppfk24p6j                        0x0000557e7dfce189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for _\
    \ in 1...n {\n        for j in 1...n {\n            for i in 1...n {\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                    a[i] = a[i] + a[j]\
    \ + a[k]\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp02w5sp5x.swift:19:44: error: cannot find 'k' in scope\n       \
    \         if a[i] < a[j] && a[i] < a[k] {\n                                  \
    \         ^\n/tmp/tmp02w5sp5x.swift:20:44: error: cannot find 'k' in scope\n \
    \                   a[i] = a[i] + a[j] + a[k]\n                              \
    \             ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i*i - i + 1)\n    }\n    var result = 0\n\
    \    for i in 0..(n-1){\n        for j in (i+1)...n{\n            for k in (i+1)...n{\n\
    \                if a[i] < a[j] && a[j] < a[k] && a[i] < a[j] + a[k] {\n     \
    \               result++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpj6xem3_f.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1){\n              ^~\n            \
    \  ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    a.append(i\
    \ * i - i + 1)\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp99chz24k/tmp99chz24k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac072476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07216db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07216d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07216c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp99chz24k                        0x00005629c8f03495 <unavailable> + 5269

    5    libc.so.6                          0x00002ac072662460 __libc_start_main +
    245

    6    tmp99chz24k                        0x00005629c8f03149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] + a[k]\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq3bk5s8z.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpq3bk5s8z.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    let triple = a[i] + a[j]\
    \ + a[k]\n                    if triple % 3 == 0 {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpgwt6um12.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpgwt6um12.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count = 0\n  \
    \  for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i < j < k {\n                    if a[i] < a[j] + a[k] {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpa1xxebzj.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpa1xxebzj.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i != j && i != k && j != k {\n      \
    \              if a[i] < a[j] && a[i] < a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp9x23htdh/tmp9x23htdh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35ed13dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35ece34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35ece34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35ece337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x23htdh                        0x0000557d9705a5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b35ed329460 __libc_start_main +
    245

    6    tmp9x23htdh                        0x0000557d9705a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    a[i] = a[i] +\
    \ a[j] + a[k]\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b63ce93ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63ce635561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b63ce635286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b63ce63513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b63ce634bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b63ce434e83 <unavailable> + 188035

    6    tmpxbd_2luo                        0x0000562a25346ab0 <unavailable> + 6832

    7    tmpxbd_2luo                        0x0000562a25346468 <unavailable> + 5224

    8    libc.so.6                          0x00002b63ceb2a460 __libc_start_main +
    245

    9    tmpxbd_2luo                        0x0000562a25346189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var result =\
    \ 0\n    for i in 0..(n-1) { \n        for j in (i+1)...n {\n            for k\
    \ in (i+1)...n {\n                if a[i] < a[j] && a[j] < a[k] {\n          \
    \          result = result + 1\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp19w6egr9.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i < j < k {\n                    if a[i] < a[j] < a[k]\
    \ {\n                        triples += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7un6wdz2.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp7un6wdz2.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmp7un6wdz2.swift:20:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmp7un6wdz2.swift:20:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) {\n            for\
    \ k in (i+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpyhwpgm5r.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpyhwpgm5r.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpyhwpgm5r.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a: [Int] = []\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    a[i] = a[i] +\
    \ a[j] + a[k]\n                }\n            }\n        }\n    }\n    return\
    \ a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aad8fe57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad8fb4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aad8fb4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aad8fb4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aad8fb4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aad8f94de83 <unavailable> + 188035

    6    tmp9mw2aec4                        0x0000562da7c31adb <unavailable> + 6875

    7    tmp9mw2aec4                        0x0000562da7c31488 <unavailable> + 5256

    8    libc.so.6                          0x00002aad90043460 __libc_start_main +
    245

    9    tmp9mw2aec4                        0x0000562da7c311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n) {\n            for k\
    \ in (i+1)..(n) {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_i8j82mm.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp_i8j82mm.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmp_i8j82mm.swift:18:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpt5oeffy8/tmpt5oeffy8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe219b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe216a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe216a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe216a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt5oeffy8                        0x000055c09d676535 <unavailable> + 5429

    5    libc.so.6                          0x00002afe21b9c460 __libc_start_main +
    245

    6    tmpt5oeffy8                        0x000055c09d6761e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a: [Int] = []\n    for\
    \ i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n     \
    \           if i != j && i != k && j != k {\n                    let triple =\
    \ a[i] + a[j] + a[k]\n                    if triple.isMultiple(of: 3) {\n    \
    \                    return triple\n                    }\n                }\n\
    \            }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9095eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9095baa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9095baa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9095baa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9095ba9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90959a9e83 <unavailable> + 188035

    6    tmpd353d54_                        0x000055ad8cd18b7b <unavailable> + 7035

    7    tmpd353d54_                        0x000055ad8cd184d8 <unavailable> + 5336

    8    libc.so.6                          0x00002b909609f460 __libc_start_main +
    245

    9    tmpd353d54_                        0x000055ad8cd181f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for _ in 1...n {\n        a.append(0)\n    }\n    var count = 0\n    for i\
    \ in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n       \
    \         if i != j && i != k && j != k {\n                    let sum = i * i\
    \ + j * j + k * k\n                    if sum % 3 == 0 {\n                   \
    \     count += 1\n                        a[i] = sum\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b40611e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4060edc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4060edc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4060edc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4060edbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4060cdb7ec <unavailable> + 186348

    6    tmpqd649thu                        0x000055716e453cf7 <unavailable> + 7415

    7    tmpqd649thu                        0x000055716e4533d8 <unavailable> + 5080

    8    libc.so.6                          0x00002b40613d1460 __libc_start_main +
    245

    9    tmpqd649thu                        0x000055716e4530f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.maxElement()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpl3pr4r24.swift:15:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for k in 0..<n\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ < a[j] && a[i] < a[k] {\n                        triples += 1\n            \
    \        }\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp548f1s1p/tmp548f1s1p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57e7d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57e4ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57e4ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57e4cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp548f1s1p                        0x000055930ae8d535 <unavailable> + 5429

    5    libc.so.6                          0x00002af57e9c3460 __libc_start_main +
    245

    6    tmp548f1s1p                        0x000055930ae8d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var triples\
    \ = 0\n    for i in 0..(n-2) {\n        for j in (i+1)..(n-1) {\n            for\
    \ k in (i+1)..(n-1) {\n                if a[i] < a[j] && a[j] < a[k] {\n     \
    \               triples += 1\n                }\n            }\n        }\n  \
    \  }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_kr7krv2.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-2) {\n              ^~\n           \
    \   ...\n/tmp/tmp_kr7krv2.swift:17:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmp_kr7krv2.swift:18:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = [Int]()\n    for\
    \ i in 1...n {\n        a[i] = i * i - i + 1\n    }\n    return a.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d76fd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d76cc7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8d76cc7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8d76cc713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8d76cc6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8d76ac67ec <unavailable> + 186348

    6    tmplocwop_u                        0x000055a07433e7c9 <unavailable> + 6089

    7    tmplocwop_u                        0x000055a07433e418 <unavailable> + 5144

    8    libc.so.6                          0x00002b8d771bc460 __libc_start_main +
    245

    9    tmplocwop_u                        0x000055a07433e139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        for j in 1...n {\n            for k in 1...n {\n\
    \                if i != j && i != k && j != k {\n                    if a[i]\
    \ + a[j] + a[k] == i*i*i + j*j*j + k*k*k {\n                        a.append(i)\n\
    \                        a.append(j)\n                        a.append(k)\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a1f56dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a1f264561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3a1f264286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3a1f26413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3a1f263bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3a1f063e83 <unavailable> + 188035

    6    tmpvp9i6zpd                        0x0000558946a67ac0 <unavailable> + 6848

    7    tmpvp9i6zpd                        0x0000558946a67478 <unavailable> + 5240

    8    libc.so.6                          0x00002b3a1f759460 __libc_start_main +
    245

    9    tmpvp9i6zpd                        0x0000558946a67199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    var count =\
    \ 0\n    for i in 0..<a.count {\n        for j in 0..<a.count {\n            for\
    \ k in 0..<a.count {\n                if i < j < k {\n                    if a[i]\
    \ < a[j] + a[k] {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbzh3g_97.swift:19:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbzh3g_97.swift:19:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1,\
    \ 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var a = Array<Int>()\n \
    \   for i in 1...n {\n        a.append(i * i - i + 1)\n    }\n    return a.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpga71jzyx/tmpga71jzyx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281dcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281d9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281d9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281d9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga71jzyx                        0x000055afbec96495 <unavailable> + 5269

    5    libc.so.6                          0x00002b281dee0460 __libc_start_main +
    245

    6    tmpga71jzyx                        0x000055afbec96149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660009328
