language: swift
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_xczam9v.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_xczam9v.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_xczam9v.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_xczam9v.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp_xczam9v.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   return [0]\n    }\n    if n == 1 {\n        return [1]\n    }\n    if n ==\
    \ 2 {\n        return [1, 2]\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpik515eie.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpik515eie.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpik515eie.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpik515eie.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpik515eie.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpik515eie.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpik515eie.swift:30:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnxuyr5am.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpnxuyr5am.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpnxuyr5am.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpnxuyr5am.swift:37:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnxuyr5am.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnxuyr5am.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnxuyr5am.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzzsr56gc.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzzsr56gc.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzzsr56gc.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzzsr56gc.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzzsr56gc.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzzsr56gc.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzzsr56gc.swift:40:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzzsr56gc.swift:40:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzzsr56gc.swift:41:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzzsr56gc.swift:41:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjgdnyysb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjgdnyysb.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjgdnyysb.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjgdnyysb.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjgdnyysb.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjgdnyysb.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjgdnyysb.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 3\n    var\
    \ b = 2\n    var c = 1\n    for _ in 0..<n {\n        result.append(a)\n     \
    \   if n % 2 == 0 {\n            result.append(b)\n        }\n        if n % 2\
    \ == 1 {\n            result.append(c)\n        }\n        a = a + b + c\n   \
    \     b = c\n        c = a + b\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpunqaof_r/tmpunqaof_r.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd1d74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbd1a6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbd1a6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbd1a6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunqaof_r                        0x000056490e9965ca <unavailable> + 5578

    5    libc.so.6                          0x00002afbd1f60460 __libc_start_main +
    245

    6    tmpunqaof_r                        0x000056490e996209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result;\n    }\n    if n == 2 {\n       \
    \ result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmplvia7k57.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmplvia7k57.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplvia7k57.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplvia7k57.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplvia7k57.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmplvia7k57.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmplvia7k57.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmplvia7k57.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmplvia7k57.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmplvia7k57.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var first = 0\n   \
    \ var second = 1\n    var third = 1\n    for _ in 1...n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        first++\n\
    \        second++\n        third++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa2pinshu.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        first++\n             ^~\n/tmp/tmpa2pinshu.swift:26:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        second++\n\
    \              ^~\n/tmp/tmpa2pinshu.swift:27:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        third++\n             ^~\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpknqk0wlr.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpknqk0wlr.swift:156:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpknqk0wlr.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpknqk0wlr.swift:131:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpknqk0wlr.swift:135:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(n)\n        result.append(n + 1 )\n        return\
    \ result\n    }\n    \n    result.append(n)\n    result.append(n + 1 )\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb06hc07u.swift:32:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpb06hc07u.swift:32:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpb06hc07u.swift:32:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpb06hc07u.swift:32:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpje0v2gpk.swift:25:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpje0v2gpk.swift:25:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpje0v2gpk.swift:25:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpje0v2gpk.swift:25:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpje0v2gpk.swift:27:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpje0v2gpk.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpje0v2gpk.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpje0v2gpk.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpje0v2gpk.swift:28:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpje0v2gpk.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk30llupy.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk30llupy.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk30llupy.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk30llupy.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpk30llupy.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf7oq_u49.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpf7oq_u49.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpf7oq_u49.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpf7oq_u49.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpf7oq_u49.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpf7oq_u49.swift:37:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmpf7oq_u49.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpf7oq_u49.swift:37:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpf7oq_u49.swift:37:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp28_4umwh.swift:25:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp28_4umwh.swift:25:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp28_4umwh.swift:25:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp28_4umwh.swift:25:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp28_4umwh.swift:27:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp28_4umwh.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp28_4umwh.swift:27:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpe4vjfo_6.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpe4vjfo_6.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe4vjfo_6.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe4vjfo_6.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe4vjfo_6.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpe4vjfo_6.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpe4vjfo_6.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpe4vjfo_6.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpe4vjfo_6.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpe4vjfo_6.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n == 3 {\n        result.append(3)\n   \
    \     result.append(1)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7036l79e.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp7036l79e.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7036l79e.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7036l79e.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7036l79e.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp7036l79e.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp7036l79e.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp7036l79e.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp7036l79e.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp7036l79e.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(2)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n + 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyc2qwd9e.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyc2qwd9e.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyc2qwd9e.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyc2qwd9e.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyc2qwd9e.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpyc2qwd9e.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyc2qwd9e.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyc2qwd9e.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyc2qwd9e.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpyc2qwd9e.swift:39:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1"
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbnfje5ba.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbnfje5ba.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbnfje5ba.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbnfje5ba.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbnfje5ba.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpbnfje5ba.swift:37:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n  \
    \                        ^\n                          n: \n/tmp/tmpbnfje5ba.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpbnfje5ba.swift:37:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpbnfje5ba.swift:37:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(2)\n   \
    \ result.append(3)\n    result.append(4)\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgn81uh0l.swift:39:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpgn81uh0l.swift:39:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpgn81uh0l.swift:39:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpgn81uh0l.swift:46:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpgn81uh0l.swift:46:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpgn81uh0l.swift:46:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpgn81uh0l.swift:46:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk30llupy.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk30llupy.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk30llupy.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk30llupy.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpk30llupy.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n     \
    \   if n % 2 == 0 {\n            c += a + b\n        } else {\n            c +=\
    \ b + a\n        }\n        a = b\n        b = c\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp47xw0gbh/tmp47xw0gbh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d01298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d00f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d00f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d00f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47xw0gbh                        0x000055ccb314b5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b9d01484460 __libc_start_main +
    245

    6    tmp47xw0gbh                        0x000055ccb314b209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyfr_dxpe.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyfr_dxpe.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyfr_dxpe.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyfr_dxpe.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyfr_dxpe.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyfr_dxpe.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpyfr_dxpe.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv6ac0szl.swift:25:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv6ac0szl.swift:25:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv6ac0szl.swift:25:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv6ac0szl.swift:25:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv6ac0szl.swift:27:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv6ac0szl.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv6ac0szl.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv6ac0szl.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv6ac0szl.swift:28:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpv6ac0szl.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(2)\n   \
    \ result.append(3)\n    result.append(4)\n    result.append(5)\n    result.append(6)\n\
    \    result.append(7)\n    result.append(8)\n    result.append(9)\n    result.append(10)\n\
    \    result.append(11)\n    result.append(12)\n    result.append(13)\n    result.append(14)\n\
    \    result.append(15)\n    result.append(16)\n    result.append(17)\n    result.append(18)\n\
    \    result.append(19)\n    result.append(20)\n    result.append(21)\n    result.append(22)\n\
    \    result.append(23)\n    result.append(24)\n    result.append(25)\n    result.append(26)\n\
    \    result.append(27)\n    result.append(28)\n    result.append(29)\n    result.append(30)\n\
    \    result.append(31)\n    result.append(32)\n    result.append(33)\n    result.append(34)\n\
    \    result.append(35)\n    result.append(36)\n    result.append(37)\n    result.append(38)\n\
    \    result.append(39)\n    result.append(40)\n    result.append(41)\n    result.append(42)\n\
    \    result.append(43)\n    result.append(44)\n    result.append(45)\n    result.append(46)\n\
    \    result.append(47)\n    result.append(48)\n    result.append(49)\n    result.append(50)\n\
    \    result.append(51)\n    result.append(52)\n    result.append(53)\n    result.append(54)\n\
    \    result.append(55)\n    result.append(56)\n    result.append(57)\n    result.append(58)\n\
    \    result.append(59)\n    result.append(60)\n    result.append(61)\n    result.append(62)\n\
    \    result.append(63)\n    result.append(64)\n    result.append(65)\n    result.append(66)\n\
    \    result.append(67)\n    result.append(68)\n    result.append(69)\n    result.append(70)\n\
    \    result.append(71)\n    result.append(72)\n    result.append(73)\n    result.append(74)\n\
    \    result.append(75)\n    result.append(76)\n    result.append(77)\n    result.append(78)\n\
    \    result.append(79)\n    result.append(80)\n    result.append(81)\n    result.append(82)\n\
    \    result.append(83)\n    result.append(84)\n    result.append(85)\n    result.append(86)\n\
    \    result.append(87)\n    result.append(88)\n    result.append(89)\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1ss2nca9.swift:39:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmp1ss2nca9.swift:39:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmp1ss2nca9.swift:39:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(2)\n   \
    \ result.append(3)\n    result.append(4)\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgn81uh0l.swift:39:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpgn81uh0l.swift:39:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpgn81uh0l.swift:39:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpgn81uh0l.swift:46:16: error:\
    \ missing argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n               ^\n               n: \n/tmp/tmpgn81uh0l.swift:46:29:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n                            ^\n              \
    \              n: \n/tmp/tmpgn81uh0l.swift:46:42: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \                                         ^\n                                \
    \         n: \n/tmp/tmpgn81uh0l.swift:46:55: error: missing argument label 'n:'\
    \ in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    \
    \                                                  ^\n                       \
    \                               n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzallfpwz.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzallfpwz.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzallfpwz.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzallfpwz.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzallfpwz.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzallfpwz.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzallfpwz.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzallfpwz.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzallfpwz.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpzallfpwz.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result;\n    }\n    if n == 2 {\n       \
    \ result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg7i_nlbt.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpg7i_nlbt.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg7i_nlbt.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg7i_nlbt.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg7i_nlbt.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg7i_nlbt.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg7i_nlbt.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg7i_nlbt.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg7i_nlbt.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n))\n                      ^\n                      contentsOf: \n\
    /tmp/tmpg7i_nlbt.swift:30:27: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + "
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsrga7hy2.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp81ibsc7_.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp81ibsc7_.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp81ibsc7_.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp81ibsc7_.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp81ibsc7_.swift:39:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmp81ibsc7_.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmp81ibsc7_.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else {\n        result.append(1)\n        result.append(n\
    \ / 2)\n        if n % 2 == 1 {\n            result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        } else {\n            result.append(tri(n - 1) +\
    \ tri(n - 2))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp765uu3ry.swift:25:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmp765uu3ry.swift:25:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmp765uu3ry.swift:25:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmp765uu3ry.swift:25:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n/tmp/tmp765uu3ry.swift:27:27:\
    \ error: missing argument label 'contentsOf:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2))\n                          ^\n                          contentsOf:\
    \ \n/tmp/tmp765uu3ry.swift:27:31: error: missing argument label 'n:' in call\n\
    \            result.append(tri(n - 1) + tri(n - 2))\n                        \
    \      ^\n                              n: \n/tmp/tmp765uu3ry.swift:27:44: error:\
    \ missing argument label 'n:' in call\n            result.append(tri(n - 1) +\
    \ tri(n - 2))\n                                           ^\n                \
    \                           n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \   result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpl905m1me.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpl905m1me.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpl905m1me.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpl905m1me.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpl905m1me.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpl905m1me.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpl905m1me.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpl905m1me.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpl905m1me.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpl905m1me.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpr_y6xk9m.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpr_y6xk9m.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpr_y6xk9m.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpr_y6xk9m.swift:37:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr_y6xk9m.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr_y6xk9m.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr_y6xk9m.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var first = 0\n   \
    \ var second = 1\n    var third = 1\n    for _ in 0..<n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        first +=\
    \ second\n        second += third\n        third += second\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp52axisjg/tmp52axisjg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b110c17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110be72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110be72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110be717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52axisjg                        0x000055826636c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b110c367460 __libc_start_main +
    245

    6    tmp52axisjg                        0x000055826636c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var first = 3\n   \
    \ var second = 1\n    var third = 1\n    var fourth = 1\n    if n % 2 == 0 {\n\
    \        first = 1\n        second = 2\n        third = 1\n        fourth = 1\n\
    \    }\n    else {\n        first = 1\n        second = 1\n        third = 2\n\
    \        fourth = 1\n    }\n    for i in 1...n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        result.append(fourth)\n\
    \        first = second\n        second = third\n        third = fourth\n    \
    \    fourth = first + second + third + fourth\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqzn2ubmb/tmpqzn2ubmb.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6875c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6872c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6872c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6872bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqzn2ubmb                        0x000055f100f4e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad6877b5460 __libc_start_main +
    245

    6    tmpqzn2ubmb                        0x000055f100f4e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(2)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n        result.append(tri(n - 2) + tri(n - 1))\n        return result\n\
    \    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    result.append(tri(n\
    \ - 2) + tri(n - 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpns1p551x.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpns1p551x.swift:36:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpns1p551x.swift:36:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpns1p551x.swift:37:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n - 1))\n\
    \                      ^\n                      contentsOf: \n/tmp/tmpns1p551x.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n - 1))\n                          ^\n                          n: \n\
    /tmp/tmpns1p551x.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 2) + tri(n - 1))\n                               \
    \        ^\n                                       n: \n/tmp/tmpns1p551x.swift:41:19:\
    \ error: missing argument label 'contentsOf:' in call\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n                  ^\n                  contentsOf: \n/tmp/tmpns1p551x.swift:41:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                      ^\n                      n: \n/tmp/tmpns1p551x.swift:41:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n/tmp/tmpns1p551x.swift:42:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 2) + tri(n - 1))\n                  ^\n \
    \                 contentsOf: \n/tmp/tmpns1p551x.swift:42:23: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 2) + tri(n - 1))\n           \
    \           ^\n                      n: \n/tmp/tmpns1p551x.swift:42:36: er"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        a = b\n        b = c\n\
    \        c = a + b\n        result.append(c)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbb76m261/tmpbb76m261.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4233328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b423301fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b423301f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b423301e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb76m261                        0x0000559347f5344a <unavailable> + 5194

    5    libc.so.6                          0x00002b4233514460 __libc_start_main +
    245

    6    tmpbb76m261                        0x0000559347f53089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjz0rs6fo.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjz0rs6fo.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjz0rs6fo.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjz0rs6fo.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjz0rs6fo.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpjz0rs6fo.swift:36:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpjz0rs6fo.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpjz0rs6fo.swift:36:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1b7j3pc.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1b7j3pc.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1b7j3pc.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1b7j3pc.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1b7j3pc.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1b7j3pc.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1b7j3pc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var first = 3\n   \
    \ var second = 1\n    var third = 1\n    var fourth = 1\n    var fifth = 1\n \
    \   if n % 2 == 0 {\n        first = 3\n        second = 1\n        third = 1\n\
    \        fourth = 1\n        fifth = 1\n    } else {\n        first = 1\n    \
    \    second = 1\n        third = 1\n        fourth = 1\n        fifth = 1\n  \
    \  }\n    for _ in 1...n {\n        result.append(first)\n        third = first\
    \ + second\n        fourth = first + second + third\n        fifth = first + second\
    \ + third + fourth\n        first = third\n        second = fourth\n        third\
    \ = fifth\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6iuo1azo/tmp6iuo1azo.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a9532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a9229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a9229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a92287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6iuo1azo                        0x000055ae00a845ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad9a971e460 __libc_start_main +
    245

    6    tmp6iuo1azo                        0x000055ae00a84209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n    \
    \    a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2gpw3p5h/tmp2gpw3p5h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84da04ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d9d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d9d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d9d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gpw3p5h                        0x0000558d1e07244a <unavailable> + 5194

    5    libc.so.6                          0x00002b84da23a460 __libc_start_main +
    245

    6    tmp2gpw3p5h                        0x0000558d1e072089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n    \
    \    a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2gpw3p5h/tmp2gpw3p5h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84da04ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d9d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d9d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d9d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gpw3p5h                        0x0000558d1e07244a <unavailable> + 5194

    5    libc.so.6                          0x00002b84da23a460 __libc_start_main +
    245

    6    tmp2gpw3p5h                        0x0000558d1e072089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(3)\n        return result\n    }\n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n == 3 {\n   \
    \     result.append(1)\n        result.append(2)\n        result.append(3)\n \
    \       return result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n)\n        result.append(n + 2)\n        return result\n\
    \    }\n    result.append(1)\n    result.append(n)\n    result.append(n + 2)\n\
    \    result.append(n + 3)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpqa1g3gw4/tmpqa1g3gw4.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00a7fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00a7cb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00a7cb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00a7cb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqa1g3gw4                        0x00005611f743f4da <unavailable> + 5338

    5    libc.so.6                          0x00002b00a81ae460 __libc_start_main +
    245

    6    tmpqa1g3gw4                        0x00005611f743f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaf7zvv4q.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaf7zvv4q.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaf7zvv4q.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaf7zvv4q.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpknqk0wlr.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpknqk0wlr.swift:156:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpknqk0wlr.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpknqk0wlr.swift:131:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpknqk0wlr.swift:135:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjgdnyysb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjgdnyysb.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjgdnyysb.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjgdnyysb.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjgdnyysb.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjgdnyysb.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjgdnyysb.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9es5fk21.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9es5fk21.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9es5fk21.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9es5fk21.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9es5fk21.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    var d = c + a\n    var e = d + b\n    var f =\
    \ e + c\n    var g = f + d\n    var h = g + e\n    var i = h + f\n    var j =\
    \ i + g\n    var k = j + h\n    var l = k + i\n    var m = l + j\n    var n =\
    \ m + k\n    result.append(n)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzwi6s_ne/tmpzwi6s_ne.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33030e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3302ddfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3302ddf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3302dde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwi6s_ne                        0x0000560bec47844a <unavailable> + 5194

    5    libc.so.6                          0x00002b33032d4460 __libc_start_main +
    245

    6    tmpzwi6s_ne                        0x0000560bec478089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result;\n    }\n    if n == 1 {\n       \
    \ result.append(1)\n        return result;\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzi_s03s8.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzi_s03s8.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmpzi_s03s8.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzi_s03s8.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzi_s03s8.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpzi_s03s8.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzi_s03s8.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzi_s03s8.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_xczam9v.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_xczam9v.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_xczam9v.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_xczam9v.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp_xczam9v.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n    \
    \    a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2gpw3p5h/tmp2gpw3p5h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84da04ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d9d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d9d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d9d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gpw3p5h                        0x0000558d1e07244a <unavailable> + 5194

    5    libc.so.6                          0x00002b84da23a460 __libc_start_main +
    245

    6    tmp2gpw3p5h                        0x0000558d1e072089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_vc6zx3b.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9stvtkv8.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9stvtkv8.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9stvtkv8.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9stvtkv8.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9stvtkv8.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9stvtkv8.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9stvtkv8.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa03di0ls.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpa03di0ls.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpa03di0ls.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpa03di0ls.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpa03di0ls.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpa03di0ls.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpa03di0ls.swift:38:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    result.append(0)\n    result.append(1)\n    result.append(2)\n\
    \    result.append(3)\n    result.append(4)\n    result.append(5)\n    result.append(6)\n\
    \    result.append(7)\n    result.append(8)\n    result.append(9)\n    result.append(10)\n\
    \    result.append(11)\n    result.append(12)\n    result.append(13)\n    result.append(14)\n\
    \    result.append(15)\n    result.append(16)\n    result.append(17)\n    result.append(18)\n\
    \    result.append(19)\n    result.append(20)\n    result.append(21)\n    result.append(22)\n\
    \    result.append(23)\n    result.append(24)\n    result.append(25)\n    result.append(26)\n\
    \    result.append(27)\n    result.append(28)\n    result.append(29)\n    result.append(30)\n\
    \    result.append(31)\n    result.append(32)\n    result.append(33)\n    result.append(34)\n\
    \    result.append(35)\n    result.append(36)\n    result.append(37)\n    result.append(38)\n\
    \    result.append(39)\n    result.append(40)\n    result.append(41)\n    result.append(42)\n\
    \    result.append(43)\n    result.append(44)\n    result.append(45)\n    result.append(46)\n\
    \    result.append(47)\n    result.append(48)\n    result.append(49)\n    result.append(50)\n\
    \    result.append(51)\n    result.append(52)\n    result.append(53)\n    result.append(54)\n\
    \    result.append(55)\n    result.append(56)\n    result.append(57)\n    result.append(58)\n\
    \    result.append(59)\n    result.append(60)\n    result.append(61)\n    result.append(62)\n\
    \    result.append(63)\n    result.append(64)\n    result.append(65)\n    result.append(66)\n\
    \    result.append(67)\n    result.append(68)\n    result.append(69)\n    result.append(70)\n\
    \    result.append(71)\n    result.append(72)\n    result.append(73)\n    result.append(74)\n\
    \    result.append(75)\n    result.append(76)\n    result.append(77)\n    result.append(78)\n\
    \    result.append(79)\n    result.append(80)\n    result.append(81)\n    result.append(82)\n\
    \    result.append(83)\n    result.append(84)\n    result.append(85)\n    result.append(86)\n\
    \    result.append(87)\n    result.append(88)\n    result.append(89)\n    result.append(90)\n\
    \    result.append(91)\n    result.append(92)\n    result.append(93)\n    result.append(94)\n\
    \    result.append(95\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvr_6onxt.swift:134:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpvr_6onxt.swift:133:18: note: to match this opening '('\n    result.append(95\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjf2lqtaa.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjf2lqtaa.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjf2lqtaa.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjf2lqtaa.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjf2lqtaa.swift:30:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpjf2lqtaa.swift:30:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpjf2lqtaa.swift:30:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n + 1) + tri(n +\
    \ 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppzmm_cj6.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmppzmm_cj6.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppzmm_cj6.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppzmm_cj6.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmppzmm_cj6.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmppzmm_cj6.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppzmm_cj6.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppzmm_cj6.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmppzmm_cj6.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n + 1) + tri(n\
    \ + 2))\n                      ^\n                      contentsOf: \n/tmp/tmppzmm_cj6.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n + 1) + tri(n + 2))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyihz6nkx.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyihz6nkx.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyihz6nkx.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyihz6nkx.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyihz6nkx.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyihz6nkx.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpyihz6nkx.swift:37:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_vc6zx3b.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprtqzpt__.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprtqzpt__.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprtqzpt__.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprtqzpt__.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprtqzpt__.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprtqzpt__.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprtqzpt__.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result;\n    }\n    if n == 1 {\n       \
    \ result.append(1)\n        return result;\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8u6u6x9i.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8u6u6x9i.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8u6u6x9i.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8u6u6x9i.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8u6u6x9i.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8u6u6x9i.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8u6u6x9i.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8u6u6x9i.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8u6u6x9i.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp8u6u6x9i.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppt2gjl4t.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmppt2gjl4t.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmppt2gjl4t.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmppt2gjl4t.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmppt2gjl4t.swift:37:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmppt2gjl4t.swift:37:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmppt2gjl4t.swift:37:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmppt2gjl4t.swift:37:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv0r5g3zb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv0r5g3zb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv0r5g3zb.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv0r5g3zb.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv0r5g3zb.swift:34:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpv0r5g3zb.swift:34:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpv0r5g3zb.swift:34:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_xczam9v.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_xczam9v.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_xczam9v.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_xczam9v.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp_xczam9v.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmprtqzpt__.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprtqzpt__.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprtqzpt__.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprtqzpt__.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmprtqzpt__.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmprtqzpt__.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmprtqzpt__.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmprtqzpt__.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsrga7hy2.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_vc6zx3b.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_vc6zx3b.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_vc6zx3b.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_vc6zx3b.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_vc6zx3b.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpknqk0wlr.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpknqk0wlr.swift:156:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpknqk0wlr.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpknqk0wlr.swift:131:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpknqk0wlr.swift:135:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpc49v4vh3.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpc49v4vh3.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpc49v4vh3.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpc49v4vh3.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpc49v4vh3.swift:37:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmph81fk270.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmph81fk270.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmph81fk270.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmph81fk270.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3))\n                      ^\n                      contentsOf: \n/tmp/tmph81fk270.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmph81fk270.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmph81fk270.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(2)\n        result.append(3)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpz3kdwj7j.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpz3kdwj7j.swift:33:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpz3kdwj7j.swift:33:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpz3kdwj7j.swift:35:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpz3kdwj7j.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpz3kdwj7j.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpz3kdwj7j.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaf7zvv4q.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaf7zvv4q.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaf7zvv4q.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaf7zvv4q.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyfr_dxpe.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpyfr_dxpe.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpyfr_dxpe.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpyfr_dxpe.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpyfr_dxpe.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpyfr_dxpe.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpyfr_dxpe.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg9u5mqhe.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg9u5mqhe.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg9u5mqhe.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg9u5mqhe.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg9u5mqhe.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg9u5mqhe.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg9u5mqhe.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n     \
    \   if n % 2 == 0 {\n            a += b\n            b += c\n            c +=\
    \ 1\n        } else {\n            b += c\n            c += 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp6x5sz7f5/tmp6x5sz7f5.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbd51e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbd4eddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbd4edd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbd4edc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6x5sz7f5                        0x00005628e0cad5ca <unavailable> + 5578

    5    libc.so.6                          0x00002adbd53d2460 __libc_start_main +
    245

    6    tmp6x5sz7f5                        0x00005628e0cad209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpesxeqtyv.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpesxeqtyv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpesxeqtyv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpesxeqtyv.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpesxeqtyv.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpesxeqtyv.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpesxeqtyv.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else {\n        result.append(1)\n        result.append(n\
    \ / 2)\n        if n % 2 == 0 {\n            result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        } else {\n            result.append(tri(n - 1) +\
    \ tri(n - 2))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnpfs25gu.swift:25:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmpnpfs25gu.swift:25:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmpnpfs25gu.swift:25:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmpnpfs25gu.swift:25:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n/tmp/tmpnpfs25gu.swift:27:27:\
    \ error: missing argument label 'contentsOf:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2))\n                          ^\n                          contentsOf:\
    \ \n/tmp/tmpnpfs25gu.swift:27:31: error: missing argument label 'n:' in call\n\
    \            result.append(tri(n - 1) + tri(n - 2))\n                        \
    \      ^\n                              n: \n/tmp/tmpnpfs25gu.swift:27:44: error:\
    \ missing argument label 'n:' in call\n            result.append(tri(n - 1) +\
    \ tri(n - 2))\n                                           ^\n                \
    \                           n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg9u5mqhe.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg9u5mqhe.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg9u5mqhe.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg9u5mqhe.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg9u5mqhe.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg9u5mqhe.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg9u5mqhe.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpg9u5mqhe.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpya53h7av.swift:34:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpya53h7av.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpya53h7av.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpya53h7av.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpya53h7av.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpya53h7av.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpya53h7av.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpya53h7av.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpya53h7av.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpya53h7av.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(n)\n        result.append(1 + n / 2)\n    } else\
    \ {\n        result.append(n)\n        result.append(1 + n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8zqq7csr.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8zqq7csr.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8zqq7csr.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8zqq7csr.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpy2_eyqor.swift:43:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + result\n              \
    \     ^\n                   n: \n/tmp/tmpy2_eyqor.swift:43:33: error: missing\
    \ argument label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + result\n                                ^\n                         \
    \       n: \n/tmp/tmpy2_eyqor.swift:43:46: error: missing argument label 'n:'\
    \ in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + result\n    \
    \                                         ^\n                                \
    \             n: \n/tmp/tmpy2_eyqor.swift:51:16: error: missing argument label\
    \ 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + result\n   \
    \            ^\n               n: \n/tmp/tmpy2_eyqor.swift:51:29: error: missing\
    \ argument label 'n:' in call\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + result\n                            ^\n                            n: \n/tmp/tmpy2_eyqor.swift:51:42:\
    \ error: missing argument label 'n:' in call\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + result\n                                         ^\n     \
    \                                    n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5dlkm88x.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp5dlkm88x.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5dlkm88x.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5dlkm88x.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5dlkm88x.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp5dlkm88x.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5dlkm88x.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5dlkm88x.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp5dlkm88x.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp5dlkm88x.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979816
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = 1\n    for i in 1...n {\n        result.append(c)\n     \
    \   if i % 2 == 0 {\n            a = b\n            b = c\n            c = a +\
    \ b\n        } else {\n            a = b\n            b = c\n            c = a\
    \ + b\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpqj4q9ext/tmpqj4q9ext.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e49141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e48e38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e48e38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e48e377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqj4q9ext                        0x000055c2afd345ca <unavailable> + 5578

    5    libc.so.6                          0x00002b4e4932d460 __libc_start_main +
    245

    6    tmpqj4q9ext                        0x000055c2afd34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3cz85j3g.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp3cz85j3g.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp3cz85j3g.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp3cz85j3g.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp3cz85j3g.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp3cz85j3g.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp3cz85j3g.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjcwjx75k.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpjcwjx75k.swift:33:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpjcwjx75k.swift:33:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpjcwjx75k.swift:35:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpjcwjx75k.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjcwjx75k.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjcwjx75k.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxg0rqub4.swift:25:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxg0rqub4.swift:25:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxg0rqub4.swift:25:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxg0rqub4.swift:27:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxg0rqub4.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxg0rqub4.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxg0rqub4.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else {\n        result.append(1)\n        result.append(n\
    \ / 2)\n        if n % 2 == 0 {\n            result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8a472_1x.swift:25:27: error: missing argument label 'contentsOf:'\
    \ in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \                         ^\n                          contentsOf: \n/tmp/tmp8a472_1x.swift:25:31:\
    \ error: missing argument label 'n:' in call\n            result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n                              ^\n         \
    \                     n: \n/tmp/tmp8a472_1x.swift:25:44: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                           ^\n                      \
    \                     n: \n/tmp/tmp8a472_1x.swift:25:57: error: missing argument\
    \ label 'n:' in call\n            result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                                        ^\n         \
    \                                               n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkayrevpz.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpkayrevpz.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpkayrevpz.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkayrevpz.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkayrevpz.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        a = b\n        b = c\n\
    \        c = a + b\n        result.append(c)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbb76m261/tmpbb76m261.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4233328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b423301fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b423301f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b423301e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb76m261                        0x0000559347f5344a <unavailable> + 5194

    5    libc.so.6                          0x00002b4233514460 __libc_start_main +
    245

    6    tmpbb76m261                        0x0000559347f53089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c <= n {\n        result.append(c)\n   \
    \     a = b\n        b = c\n        c = a + b\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp64pbgyr3/tmp64pbgyr3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae011ba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae011899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae011899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0118987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64pbgyr3                        0x00005564dcc8c44a <unavailable> + 5194

    5    libc.so.6                          0x00002ae011d8e460 __libc_start_main +
    245

    6    tmp64pbgyr3                        0x00005564dcc8c089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzkzfdn_k.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpzkzfdn_k.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpzkzfdn_k.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpzkzfdn_k.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpzkzfdn_k.swift:34:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(2)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpotyhii82.swift:36:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpotyhii82.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpotyhii82.swift:36:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpotyhii82.swift:36:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpotyhii82.swift:40:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpotyhii82.swift:40:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpotyhii82.swift:40:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt3trgi6m.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt3trgi6m.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt3trgi6m.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpt3trgi6m.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt3trgi6m.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt3trgi6m.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpt3trgi6m.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxg0rqub4.swift:25:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxg0rqub4.swift:25:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxg0rqub4.swift:25:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxg0rqub4.swift:27:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxg0rqub4.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxg0rqub4.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxg0rqub4.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpr_y6xk9m.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpr_y6xk9m.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpr_y6xk9m.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpr_y6xk9m.swift:37:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpr_y6xk9m.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpr_y6xk9m.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpr_y6xk9m.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv0r5g3zb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv0r5g3zb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv0r5g3zb.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv0r5g3zb.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv0r5g3zb.swift:34:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpv0r5g3zb.swift:34:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpv0r5g3zb.swift:34:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsrga7hy2.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var firstThree = [Int]()\n\
    \    var secondThree = [Int]()\n    var thirdThree = [Int]()\n    var fourthThree\
    \ = [Int]()\n    var fifthThree = [Int]()\n    var sixthThree = [Int]()\n    var\
    \ seventhThree = [Int]()\n    var eighthThree = [Int]()\n    var ninethThree =\
    \ [Int]()\n    var tenthThree = [Int]()\n    var eleventhThree = [Int]()\n   \
    \ var twelfthThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var thirtiethThree\
    \ = [Int]()\n    var fourtiethThree = [Int]()\n    var fiftiethThree = [Int]()\n\
    \    var sixtiethThree = [Int]()\n    var seventiethThree = [Int]()\n    var eightiethThree\
    \ = [Int]()\n    var ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n\
    \    var thousandthThree = [Int]()\n    var millionthThree = [Int]()\n    var\
    \ billionthThree = [Int]()\n    var trillionthThree = [Int]()\n    var quadrillionthThree\
    \ = [Int]()\n    var quintillionthThree = [Int]()\n    var sextillionthThree =\
    \ [Int]()\n    var septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n\
    \    var nonillionthThree = [Int]()\n    var decillionthThree = [Int]()\n    var\
    \ undecillionthThree = [Int]()\n    var duodecillionthThree = [Int]()\n    var\
    \ tredecillionthThree = [Int]()\n    var quattuordecillionthThree = [Int]()\n\
    \    var quindecillionthThree = [Int]()\n    var sexdecillionthThree = [Int]()\n\
    \    var septendecillionthThree = [Int]()\n    var octodecillionthThree = [Int]()\n\
    \    var novemdecillionthThree = [Int]()\n    var vigintilli\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb6eq7ejv.swift:66:9: error: type annotation missing in pattern\n\
    \    var vigintilli\n        ^\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var first = 3\n   \
    \ var second = 1\n    var third = 1\n    for _ in 0..<n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        first++\n\
    \        second++\n        third++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp1nrvm35x.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        first++\n             ^~\n/tmp/tmp1nrvm35x.swift:26:15:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        second++\n\
    \              ^~\n/tmp/tmp1nrvm35x.swift:27:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        third++\n             ^~\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1 + n / 2)\n    }\n \
    \   \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpgaxkfwha.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpgaxkfwha.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpgaxkfwha.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpgaxkfwha.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt3trgi6m.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt3trgi6m.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt3trgi6m.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpt3trgi6m.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpt3trgi6m.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpt3trgi6m.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpt3trgi6m.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpt3trgi6m.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n -\
    \ 3))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpg9qnmqyn.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpg9qnmqyn.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpg9qnmqyn.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpg9qnmqyn.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpg9qnmqyn.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpg9qnmqyn.swift:32:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n  \
    \                        ^\n                          n: \n/tmp/tmpg9qnmqyn.swift:32:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpg9qnmqyn.swift:32:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpg9qnmqyn.swift:32:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbqhq1f0l.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpbqhq1f0l.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbqhq1f0l.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbqhq1f0l.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbqhq1f0l.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpbqhq1f0l.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpbqhq1f0l.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpbqhq1f0l.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpbqhq1f0l.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpbqhq1f0l.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp23cdiphg.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp23cdiphg.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp23cdiphg.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp23cdiphg.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp23cdiphg.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp23cdiphg.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp23cdiphg.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp23cdiphg.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp23cdiphg.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp23cdiphg.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        result.append(1 + n / 2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(n)\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeyvvh9zm.swift:39:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n         \
    \         ^\n                  contentsOf: \n/tmp/tmpeyvvh9zm.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpeyvvh9zm.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpeyvvh9zm.swift:39:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpesxeqtyv.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpesxeqtyv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpesxeqtyv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpesxeqtyv.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpesxeqtyv.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpesxeqtyv.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpesxeqtyv.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpesxeqtyv.swift:40:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2ciicwd_.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp2ciicwd_.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2ciicwd_.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2ciicwd_.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp2ciicwd_.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp2ciicwd_.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp2ciicwd_.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp2ciicwd_.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp2ciicwd_.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 2) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp2ciicwd_.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 2)\
    \ + tri(n + 1))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjf2lqtaa.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjf2lqtaa.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjf2lqtaa.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjf2lqtaa.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjf2lqtaa.swift:30:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpjf2lqtaa.swift:30:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpjf2lqtaa.swift:30:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpknqk0wlr.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpknqk0wlr.swift:156:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpknqk0wlr.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpknqk0wlr.swift:131:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpknqk0wlr.swift:135:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1) + tri(n + 1))\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk0v13s3t.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk0v13s3t.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk0v13s3t.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk0v13s3t.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk0v13s3t.swift:36:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n + 1))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk0v13s3t.swift:36:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n + 1))\n                          ^\n                          n: \n\
    /tmp/tmpk0v13s3t.swift:36:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n + 1))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1 + n / 2)\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptdlc4tie.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptdlc4tie.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptdlc4tie.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptdlc4tie.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpj1b7j3pc.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1b7j3pc.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1b7j3pc.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1b7j3pc.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpj1b7j3pc.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpj1b7j3pc.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpj1b7j3pc.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpj1b7j3pc.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n        "
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        a = b\n        b = c\n\
    \        c = a + b\n        result.append(c)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbb76m261/tmpbb76m261.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4233328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b423301fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b423301f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b423301e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb76m261                        0x0000559347f5344a <unavailable> + 5194

    5    libc.so.6                          0x00002b4233514460 __libc_start_main +
    245

    6    tmpbb76m261                        0x0000559347f53089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9es5fk21.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9es5fk21.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9es5fk21.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9es5fk21.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9es5fk21.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(3)\n        return result\n    }\n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(1)\n        result.append(n / 2)\n    } else {\n      \
    \  result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq8_1xaxv.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpq8_1xaxv.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpq8_1xaxv.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpq8_1xaxv.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6vv33uto.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp6vv33uto.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp6vv33uto.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp6vv33uto.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp6vv33uto.swift:38:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n == 3 {\n        result.append(2)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq_fcd7ab.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpq_fcd7ab.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpq_fcd7ab.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpq_fcd7ab.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpq_fcd7ab.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpq_fcd7ab.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpq_fcd7ab.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpq_fcd7ab.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpq_fcd7ab.swift:34:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaxha037u.swift:26:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpaxha037u.swift:26:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpaxha037u.swift:26:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpaxha037u.swift:28:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpaxha037u.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaxha037u.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaxha037u.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(3)\n        return result\n    }\n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(1)\n        result.append(n)\n        result.append(n +\
    \ 2)\n        return result\n    }\n    result.append(1)\n    result.append(n)\n\
    \    result.append(n + 2)\n    result.append(n + 3)\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjd_jrbb4/tmpjd_jrbb4.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec5b2b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec5afafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec5afaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec5afae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd_jrbb4                        0x000055c0c954f4da <unavailable> + 5338

    5    libc.so.6                          0x00002aec5b4a4460 __libc_start_main +
    245

    6    tmpjd_jrbb4                        0x000055c0c954f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkayrevpz.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpkayrevpz.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpkayrevpz.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkayrevpz.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkayrevpz.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9stvtkv8.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9stvtkv8.swift:27:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9stvtkv8.swift:27:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9stvtkv8.swift:29:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9stvtkv8.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9stvtkv8.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9stvtkv8.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = Int(3)\n  \
    \  var b = Int(1)\n    var c = Int(2)\n    for _ in 0..<n {\n        result.append(a)\n\
    \        a = b\n        b = c\n        if n % 2 == 0 {\n            c = a + b\n\
    \        } else {\n            c = b + c\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjbqgvtid/tmpjbqgvtid.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24808a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b248059cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b248059c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b248059b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbqgvtid                        0x000055fe6fd4c5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b2480a91460 __libc_start_main +
    245

    6    tmpjbqgvtid                        0x000055fe6fd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 2 {\n        result.append(3)\n        result.append(3)\n       \
    \ return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpemxt2ltw.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpemxt2ltw.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpemxt2ltw.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpemxt2ltw.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpemxt2ltw.swift:31:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpemxt2ltw.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpemxt2ltw.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpemxt2ltw.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpemxt2ltw.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpemxt2ltw.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979817
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        result.append(n + 2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 2)\n    result.append(n + 3)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpuwork6f0/tmpuwork6f0.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dec87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24de97eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24de97e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24de97d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuwork6f0                        0x000055f8e2e4c4da <unavailable> + 5338

    5    libc.so.6                          0x00002b24dee73460 __libc_start_main +
    245

    6    tmpuwork6f0                        0x000055f8e2e4c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5d_0e49i.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp5d_0e49i.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp5d_0e49i.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp5d_0e49i.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp5d_0e49i.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp5d_0e49i.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp5d_0e49i.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp8k8tocfu.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp8k8tocfu.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8k8tocfu.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8k8tocfu.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8k8tocfu.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp8k8tocfu.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp8k8tocfu.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp8k8tocfu.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp8k8tocfu.swift:38:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpfnvzyc8t.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpfnvzyc8t.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfnvzyc8t.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfnvzyc8t.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfnvzyc8t.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpfnvzyc8t.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpfnvzyc8t.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpfnvzyc8t.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpfnvzyc8t.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpfnvzyc8t.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9es5fk21.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9es5fk21.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9es5fk21.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9es5fk21.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9es5fk21.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpo2fkfu7l.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpo2fkfu7l.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpo2fkfu7l.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpo2fkfu7l.swift:38:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3))\n                      ^\n                      contentsOf: \n/tmp/tmpo2fkfu7l.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3))\n                          ^\n                  \
    \        n: \n/tmp/tmpo2fkfu7l.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpo2fkfu7l.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n - 3))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpu2gxa9jz.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpu2gxa9jz.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpu2gxa9jz.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpu2gxa9jz.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpu2gxa9jz.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpu2gxa9jz.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpu2gxa9jz.swift:33:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaxp7aj6l.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpaxp7aj6l.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpaxp7aj6l.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpaxp7aj6l.swift:38:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpaxp7aj6l.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaxp7aj6l.swift:38:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaxp7aj6l.swift:38:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaf7zvv4q.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaf7zvv4q.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaf7zvv4q.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaf7zvv4q.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_xczam9v.swift:33:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_xczam9v.swift:33:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_xczam9v.swift:33:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_xczam9v.swift:35:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmp_xczam9v.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmp_xczam9v.swift:35:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        a = b\n        b = c\n\
    \        c = a + b\n        result.append(c)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbb76m261/tmpbb76m261.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4233328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b423301fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b423301f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b423301e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb76m261                        0x0000559347f5344a <unavailable> + 5194

    5    libc.so.6                          0x00002b4233514460 __libc_start_main +
    245

    6    tmpbb76m261                        0x0000559347f53089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9es5fk21.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp9es5fk21.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp9es5fk21.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp9es5fk21.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp9es5fk21.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp9es5fk21.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmphigvmqen.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmphigvmqen.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmphigvmqen.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmphigvmqen.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmphigvmqen.swift:34:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmphigvmqen.swift:34:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmphigvmqen.swift:34:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsrga7hy2.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(3)\n    } else {\n        result.append(1)\n        result.append(n\
    \ / 2)\n        if n % 2 == 0 {\n            result.append(1 + n / 2)\n      \
    \  } else {\n            result.append(1 + n / 2)\n            result.append(1\
    \ + n / 2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpbf04tswh/tmpbf04tswh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac98a160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac989e57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac989e57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac989e567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbf04tswh                        0x000055d3074624da <unavailable> + 5338

    5    libc.so.6                          0x00002ac98a34c460 __libc_start_main +
    245

    6    tmpbf04tswh                        0x000055d307462119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result;\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1 + n / 2)\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptku4x47o.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmptku4x47o.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmptku4x47o.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmptku4x47o.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf7oq_u49.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpf7oq_u49.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpf7oq_u49.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpf7oq_u49.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpf7oq_u49.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpf7oq_u49.swift:37:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \                        ^\n                          n: \n/tmp/tmpf7oq_u49.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \     ^\n                                       n: \n/tmp/tmpf7oq_u49.swift:37:53:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2))\n                                  \
    \                  ^\n                                                    n: \n\
    /tmp/tmpf7oq_u49.swift:37:66: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n     \
    \                                                            ^\n             \
    \                                                    n: \n"
  stdout: ''
  timestamp: 1659979825
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(2)\n        return result\n    }\n    \n\
    \    let mid = n / 2\n    result.append(tri(n - 1) + tri(n - 2))\n    result.append(tri(mid)\
    \ + tri(mid + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcxxdu5fu.swift:33:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(n - 1) + tri(n - 2))\n                  ^\n \
    \                 contentsOf: \n/tmp/tmpcxxdu5fu.swift:33:23: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n           \
    \           ^\n                      n: \n/tmp/tmpcxxdu5fu.swift:33:36: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                                   ^\n                                \
    \   n: \n/tmp/tmpcxxdu5fu.swift:34:19: error: missing argument label 'contentsOf:'\
    \ in call\n    result.append(tri(mid) + tri(mid + 1))\n                  ^\n \
    \                 contentsOf: \n/tmp/tmpcxxdu5fu.swift:34:23: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(mid) + tri(mid + 1))\n           \
    \           ^\n                      n: \n/tmp/tmpcxxdu5fu.swift:34:34: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(mid) + tri(mid +\
    \ 1))\n                                 ^\n                                 n:\
    \ \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpk30llupy.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpk30llupy.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpk30llupy.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpk30llupy.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2))\n    \
    \                  ^\n                      contentsOf: \n/tmp/tmpk30llupy.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                          ^\n                          n: \n\
    /tmp/tmpk30llupy.swift:29:40: error: missing argument label 'n:' in call\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n                               \
    \        ^\n                                       n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxfpmoav9.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxfpmoav9.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxfpmoav9.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxfpmoav9.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxfpmoav9.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqps653pl.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqps653pl.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqps653pl.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqps653pl.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqps653pl.swift:32:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqps653pl.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqps653pl.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqps653pl.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqps653pl.swift:33:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqps653pl.swift:33:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else {\n        var firstTribonacci = tri(n -\
    \ 1) + tri(n - 2)\n        result.append(firstTribonacci)\n        var secondTribonacci\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        result.append(secondTribonacci)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpbx24h_y9.swift:22:35: error: missing argument label 'n:' in call\n\
    \        var firstTribonacci = tri(n - 1) + tri(n - 2)\n                     \
    \             ^\n                                  n: \n/tmp/tmpbx24h_y9.swift:22:48:\
    \ error: missing argument label 'n:' in call\n        var firstTribonacci = tri(n\
    \ - 1) + tri(n - 2)\n                                               ^\n      \
    \                                         n: \n/tmp/tmpbx24h_y9.swift:24:36: error:\
    \ missing argument label 'n:' in call\n        var secondTribonacci = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                                   ^\n       \
    \                            n: \n/tmp/tmpbx24h_y9.swift:24:49: error: missing\
    \ argument label 'n:' in call\n        var secondTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                                ^\n     \
    \                                           n: \n/tmp/tmpbx24h_y9.swift:24:62:\
    \ error: missing argument label 'n:' in call\n        var secondTribonacci = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                                           \
    \                  ^\n                                                       \
    \      n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpv0r5g3zb.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpv0r5g3zb.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpv0r5g3zb.swift:30:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpv0r5g3zb.swift:30:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpv0r5g3zb.swift:34:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmpv0r5g3zb.swift:34:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmpv0r5g3zb.swift:34:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_edulfuv.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_edulfuv.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_edulfuv.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_edulfuv.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_edulfuv.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa0ijqd4p.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpa0ijqd4p.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpa0ijqd4p.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpa0ijqd4p.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpa0ijqd4p.swift:38:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpiul4mop5.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpiul4mop5.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiul4mop5.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiul4mop5.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiul4mop5.swift:39:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpiul4mop5.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpiul4mop5.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpiul4mop5.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpiul4mop5.swift:40:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpiul4mop5.swift:40:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1"
  stdout: ''
  timestamp: 1659979828
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 2\n    var tri3 = tri1 + tri2\n    if n % 2 == 0 {\n        result.append(tri1)\n\
    \        tri1 = tri2\n        tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n\
    \    for _ in 1...n {\n        result.append(tri3)\n        tri3 = tri1 + tri2\n\
    \        tri2 = tri3\n        tri1 = tri3\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpbmrse7_v/tmpbmrse7_v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c90d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c8dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c8dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c8dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmrse7_v                        0x000055a8353fa5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab5c92bd460 __libc_start_main +
    245

    6    tmpbmrse7_v                        0x000055a8353fa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979817
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 2\n    var tri3 = tri1 + tri2\n    if n % 2 == 0 {\n        result.append(tri3)\n\
    \        tri1 = tri2\n        tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n\
    \    for _ in 1...n {\n        result.append(tri3)\n        tri1 = tri2\n    \
    \    tri2 = tri3\n        tri3 = tri1 + tri2\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpft4cozvv/tmpft4cozvv.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b4462fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b44326b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b44326988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b443257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpft4cozvv                        0x0000558992efa5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b5b4481b460 __libc_start_main +
    245

    6    tmpft4cozvv                        0x0000558992efa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd1ffz7ai.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpd1ffz7ai.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpd1ffz7ai.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpd1ffz7ai.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpd1ffz7ai.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpd1ffz7ai.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = 3\n    var c = a + b\n    while c < n {\n        result.append(c)\n    \
    \    a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2gpw3p5h/tmp2gpw3p5h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84da04ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84d9d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84d9d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84d9d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gpw3p5h                        0x0000558d1e07244a <unavailable> + 5194

    5    libc.so.6                          0x00002b84da23a460 __libc_start_main +
    245

    6    tmp2gpw3p5h                        0x0000558d1e072089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpsrga7hy2.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpsrga7hy2.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpsrga7hy2.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpsrga7hy2.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpsrga7hy2.swift:38:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979815
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(n)\n        result.append(n + 2)\n        return\
    \ result\n    }\n    \n    result.append(n)\n    result.append(n + 2)\n    result.append(n\
    \ + 3)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpwd5vt8fr/tmpwd5vt8fr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2affa47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aff73eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2aff73e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2aff73d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwd5vt8fr                        0x00005598f4afa4da <unavailable> + 5338

    5    libc.so.6                          0x00002b2affc33460 __libc_start_main +
    245

    6    tmpwd5vt8fr                        0x00005598f4afa119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxfpmoav9.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxfpmoav9.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxfpmoav9.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxfpmoav9.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxfpmoav9.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpvf9xpuft.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpvf9xpuft.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvf9xpuft.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvf9xpuft.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvf9xpuft.swift:37:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpvf9xpuft.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpvf9xpuft.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpvf9xpuft.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpvf9xpuft.swift:38:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmpvf9xpuft.swift:38:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1"
  stdout: ''
  timestamp: 1659979828
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return\
    \ result\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2))\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp81ibsc7_.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp81ibsc7_.swift:35:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp81ibsc7_.swift:35:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp81ibsc7_.swift:35:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp81ibsc7_.swift:39:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2))\n        \
    \          ^\n                  contentsOf: \n/tmp/tmp81ibsc7_.swift:39:23: error:\
    \ missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n -\
    \ 2))\n                      ^\n                      n: \n/tmp/tmp81ibsc7_.swift:39:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2))\n                                   ^\n                              \
    \     n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpcfbdhaak.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpcfbdhaak.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcfbdhaak.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcfbdhaak.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcfbdhaak.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpcfbdhaak.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpcfbdhaak.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpcfbdhaak.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpcfbdhaak.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpcfbdhaak.swift:30:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n          "
  stdout: ''
  timestamp: 1659979818
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n    } else {\n\
    \        result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp53g1y426.swift:29:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp53g1y426.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp53g1y426.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp53g1y426.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        result.append(4)\n\
    \        result.append(5)\n        result.append(6)\n        result.append(7)\n\
    \        result.append(8)\n        result.append(9)\n        result.append(10)\n\
    \        result.append(11)\n        result.append(12)\n        result.append(13)\n\
    \        result.append(14)\n        result.append(15)\n        result.append(16)\n\
    \        result.append(17)\n        result.append(18)\n        result.append(19)\n\
    \        result.append(20)\n        result.append(21)\n        result.append(22)\n\
    \        result.append(23)\n        result.append(24)\n        result.append(25)\n\
    \        result.append(26)\n        result.append(27)\n        result.append(28)\n\
    \        result.append(29)\n        result.append(30)\n        result.append(31)\n\
    \        result.append(32)\n        result.append(33)\n        result.append(34)\n\
    \        result.append(35)\n        result.append(36)\n        result.append(37)\n\
    \        result.append(38)\n        result.append(39)\n        result.append(40)\n\
    \        result.append(41)\n        result.append(42)\n        result.append(43)\n\
    \        result.append(44)\n        result.append(45)\n        result.append(46)\n\
    \        result.append(47)\n        result.append(48)\n        result.append(49)\n\
    \        result.append(50)\n        result.append(51)\n        result.append(52)\n\
    \        result.append(53)\n        result.append(54)\n        result.append(55)\n\
    \        result.append(56)\n        result.append(57)\n        result.append(58)\n\
    \        result.append(59)\n        result.append(60)\n        result.append(61)\n\
    \        result.append(62)\n        result.append(63)\n        result.append(64)\n\
    \        result.append(65)\n        result.append(66)\n        result.append(67)\n\
    \        result.append(68)\n        result.append(69)\n        result.append(70)\n\
    \        result.append(71)\n        result.append(72)\n        result.append(73)\n\
    \        result.append(74)\n        result.append(75)\n        result.append(76)\n\
    \        result.append(77)\n        result.append(78)\n        result.append(79)\n\
    \        result.append(80)\n        result.append(81)\n        result.append(82)\n\
    \        result.append(83)\n        result.append(84)\n        result.append(85)\n\
    \        result.append(86)\n        result.append(87)\n        result.append(88)\n\
    \        result.append(89)\n        result.append(90)\n        result.append(91)\n\
    \        result.append(92)\n        result.append(93)\n        result.append(94)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp10cii53u.swift:158:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmp10cii53u.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmp10cii53u.swift:137:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqucd53cj.swift:31:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpqucd53cj.swift:31:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqucd53cj.swift:31:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqucd53cj.swift:31:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqucd53cj.swift:34:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpqucd53cj.swift:34:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpqucd53cj.swift:34:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpqucd53cj.swift:34:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpqucd53cj.swift:35:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var firstThree = [Int]()\n\
    \    var secondThree = [Int]()\n    var thirdThree = [Int]()\n    var fourthThree\
    \ = [Int]()\n    var fifthThree = [Int]()\n    var sixthThree = [Int]()\n    var\
    \ seventhThree = [Int]()\n    var eighthThree = [Int]()\n    var ninethThree =\
    \ [Int]()\n    var tenthThree = [Int]()\n    var eleventhThree = [Int]()\n   \
    \ var twelfthThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var thirtiethThree\
    \ = [Int]()\n    var fourtiethThree = [Int]()\n    var fiftiethThree = [Int]()\n\
    \    var sixtiethThree = [Int]()\n    var seventiethThree = [Int]()\n    var eightiethThree\
    \ = [Int]()\n    var ninetiethThree = [Int]()\n    var hundredthThree = [Int]()\n\
    \    var thousandthThree = [Int]()\n    var millionthThree = [Int]()\n    var\
    \ billionthThree = [Int]()\n    var trillionthThree = [Int]()\n    var quadrillionthThree\
    \ = [Int]()\n    var quintillionthThree = [Int]()\n    var sextillionthThree =\
    \ [Int]()\n    var septillionthThree = [Int]()\n    var octillionthThree = [Int]()\n\
    \    var nonillionthThree = [Int]()\n    var decillionthThree = [Int]()\n    var\
    \ undecillionthThree = [Int]()\n    var duodecillionthThree = [Int]()\n    var\
    \ tredecillionthThree = [Int]()\n    var quattuordecillionthThree = [Int]()\n\
    \    var quindecillionthThree = [Int]()\n    var sexdecillionthThree = [Int]()\n\
    \    var septendecillionthThree = [Int]()\n    var octodecillionthThree = [Int]()\n\
    \    var novemdecillionthThree = [Int]()\n    var vigintilli\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpb6eq7ejv.swift:66:9: error: type annotation missing in pattern\n\
    \    var vigintilli\n        ^\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_n1r52e0.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmp_n1r52e0.swift:27:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_n1r52e0.swift:27:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_n1r52e0.swift:27:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_n1r52e0.swift:29:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_n1r52e0.swift:29:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_n1r52e0.swift:29:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_n1r52e0.swift:29:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmp_n1r52e0.swift:30:23: error: missing argument label\
    \ 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n                      ^\n                      contentsOf:\
    \ \n/tmp/tmp_n1r52e0.swift:30:27: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1"
  stdout: ''
  timestamp: 1659979828
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq8mo92nm.swift:43:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpq8mo92nm.swift:43:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpq8mo92nm.swift:43:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    } else if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n    } else {\n        let firstTri = tri(n - 1) + tri(n\
    \ - 2)\n        result.append(firstTri)\n        result.append(firstTri + tri(n\
    \ + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmppkzlw_tw.swift:25:28: error: missing argument label 'n:' in call\n\
    \        let firstTri = tri(n - 1) + tri(n - 2)\n                           ^\n\
    \                           n: \n/tmp/tmppkzlw_tw.swift:25:41: error: missing\
    \ argument label 'n:' in call\n        let firstTri = tri(n - 1) + tri(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n/tmp/tmppkzlw_tw.swift:27:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(firstTri + tri(n + 1))\n                    \
    \  ^\n                      contentsOf: \n/tmp/tmppkzlw_tw.swift:27:38: error:\
    \ missing argument label 'n:' in call\n        result.append(firstTri + tri(n\
    \ + 1))\n                                     ^\n                            \
    \         n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 1\n    var\
    \ b = 2\n    var c = 3\n    for _ in 0..<n {\n        result.append(a)\n     \
    \   if n % 2 == 0 {\n            result.append(b)\n        }\n        else {\n\
    \            result.append(c)\n        }\n        a, b, c = b, c, a + b + c\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxd5uvyjj.swift:29:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        a, b, c = b, c, a + b + c\n         ^\n       \
    \  ;\n/tmp/tmpxd5uvyjj.swift:29:10: error: expected expression\n        a, b,\
    \ c = b, c, a + b + c\n         ^\n/tmp/tmpxd5uvyjj.swift:29:9: warning: variable\
    \ is unused\n        a, b, c = b, c, a + b + c\n        ^\n/tmp/tmpxd5uvyjj.swift:18:9:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \    var a = 1\n    ~~~ ^\n    let\n/tmp/tmpxd5uvyjj.swift:19:9: warning: variable\
    \ 'b' was never mutated; consider changing to 'let' constant\n    var b = 2\n\
    \    ~~~ ^\n    let\n/tmp/tmpxd5uvyjj.swift:20:9: warning: variable 'c' was never\
    \ mutated; consider changing to 'let' constant\n    var c = 3\n    ~~~ ^\n   \
    \ let\n"
  stdout: ''
  timestamp: 1659979817
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = 2\n    var\
    \ b = a + 1\n    var c = b + 1\n    while c < n {\n        result.append(c)\n\
    \        a = b\n        b = c\n        c = a + b\n    }\n    result.append(c)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpc3jizoox/tmpc3jizoox.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488c6c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488c3b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488c3b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488c3b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc3jizoox                        0x000055ffbe1a044a <unavailable> + 5194

    5    libc.so.6                          0x00002b488c8ae460 __libc_start_main +
    245

    6    tmpc3jizoox                        0x000055ffbe1a0089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n        result.append(1\
    \ + n / 2)\n    }\n    \n    if n % 2 == 1 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaf7zvv4q.swift:28:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpaf7zvv4q.swift:28:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpaf7zvv4q.swift:28:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpaf7zvv4q.swift:28:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n    result.append(88)\n    result.append(89)\n\
    \    result.append(90)\n    result.append(91)\n    result.append(92)\n    result.append(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptasusnlb.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmptasusnlb.swift:35:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmptasusnlb.swift:35:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmptasusnlb.swift:35:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmptasusnlb.swift:131:18: error:\
    \ missing argument for parameter #1 in call\n    result.append(\n            \
    \     ^\n                 <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjz0rs6fo.swift:32:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpjz0rs6fo.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpjz0rs6fo.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpjz0rs6fo.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpjz0rs6fo.swift:36:19: error: missing argument label\
    \ 'contentsOf:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                  ^\n                  contentsOf: \n/tmp/tmpjz0rs6fo.swift:36:23:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                      ^\n                      n: \n/tmp/tmpjz0rs6fo.swift:36:36:\
    \ error: missing argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n                                   ^\n                 \
    \                  n: \n/tmp/tmpjz0rs6fo.swift:36:49: error: missing argument\
    \ label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \                                                ^\n                         \
    \                       n: \n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxfpmoav9.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpxfpmoav9.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpxfpmoav9.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpxfpmoav9.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxfpmoav9.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxfpmoav9.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(3)\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(2)\n    result.append(3)\n    result.append(4)\n    result.append(5)\n\
    \    result.append(6)\n    result.append(7)\n    result.append(8)\n    result.append(9)\n\
    \    result.append(10)\n    result.append(11)\n    result.append(12)\n    result.append(13)\n\
    \    result.append(14)\n    result.append(15)\n    result.append(16)\n    result.append(17)\n\
    \    result.append(18)\n    result.append(19)\n    result.append(20)\n    result.append(21)\n\
    \    result.append(22)\n    result.append(23)\n    result.append(24)\n    result.append(25)\n\
    \    result.append(26)\n    result.append(27)\n    result.append(28)\n    result.append(29)\n\
    \    result.append(30)\n    result.append(31)\n    result.append(32)\n    result.append(33)\n\
    \    result.append(34)\n    result.append(35)\n    result.append(36)\n    result.append(37)\n\
    \    result.append(38)\n    result.append(39)\n    result.append(40)\n    result.append(41)\n\
    \    result.append(42)\n    result.append(43)\n    result.append(44)\n    result.append(45)\n\
    \    result.append(46)\n    result.append(47)\n    result.append(48)\n    result.append(49)\n\
    \    result.append(50)\n    result.append(51)\n    result.append(52)\n    result.append(53)\n\
    \    result.append(54)\n    result.append(55)\n    result.append(56)\n    result.append(57)\n\
    \    result.append(58)\n    result.append(59)\n    result.append(60)\n    result.append(61)\n\
    \    result.append(62)\n    result.append(63)\n    result.append(64)\n    result.append(65)\n\
    \    result.append(66)\n    result.append(67)\n    result.append(68)\n    result.append(69)\n\
    \    result.append(70)\n    result.append(71)\n    result.append(72)\n    result.append(73)\n\
    \    result.append(74)\n    result.append(75)\n    result.append(76)\n    result.append(77)\n\
    \    result.append(78)\n    result.append(79)\n    result.append(80)\n    result.append(81)\n\
    \    result.append(82)\n    result.append(83)\n    result.append(84)\n    result.append(85)\n\
    \    result.append(86)\n    result.append(87)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpq8mo92nm.swift:43:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpq8mo92nm.swift:43:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpq8mo92nm.swift:43:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpnxuyr5am.swift:35:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpnxuyr5am.swift:35:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpnxuyr5am.swift:35:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpnxuyr5am.swift:37:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpnxuyr5am.swift:37:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpnxuyr5am.swift:37:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpnxuyr5am.swift:37:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var a = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    for _ in 0..<n {\n        result.append(a)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpjdpnnmn2.swift:18:17: error: missing argument label 'n:' in call\n\
    \    var a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                ^\n       \
    \         n: \n/tmp/tmpjdpnnmn2.swift:18:30: error: missing argument label 'n:'\
    \ in call\n    var a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                \
    \             ^\n                             n: \n/tmp/tmpjdpnnmn2.swift:18:43:\
    \ error: missing argument label 'n:' in call\n    var a = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                                          ^\n             \
    \                             n: \n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpkayrevpz.swift:37:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:37:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmpkayrevpz.swift:37:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmpkayrevpz.swift:39:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmpkayrevpz.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpkayrevpz.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpkayrevpz.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4))\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxhc79ybj.swift:39:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                 ^\n                      contentsOf: \n/tmp/tmpxhc79ybj.swift:39:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmpxhc79ybj.swift:39:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmpxhc79ybj.swift:39:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n/tmp/tmpxhc79ybj.swift:41:9: error: the compiler is unable\
    \ to type-check this expression in reasonable time; try breaking up the expression\
    \ into distinct sub-expressions\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4))\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979847
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_0sovczd.swift:30:23: error: missing argument label 'contentsOf:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2))\n                  \
    \    ^\n                      contentsOf: \n/tmp/tmp_0sovczd.swift:30:27: error:\
    \ missing argument label 'n:' in call\n        result.append(tri(n - 1) + tri(n\
    \ - 2))\n                          ^\n                          n: \n/tmp/tmp_0sovczd.swift:30:40:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n                                       ^\n                  \
    \                     n: \n/tmp/tmp_0sovczd.swift:32:23: error: missing argument\
    \ label 'contentsOf:' in call\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n                      ^\n                      contentsOf: \n/tmp/tmp_0sovczd.swift:32:27:\
    \ error: missing argument label 'n:' in call\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n                          ^\n                  \
    \        n: \n/tmp/tmp_0sovczd.swift:32:40: error: missing argument label 'n:'\
    \ in call\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n     \
    \                                  ^\n                                       n:\
    \ \n/tmp/tmp_0sovczd.swift:32:53: error: missing argument label 'n:' in call\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n               \
    \                                     ^\n                                    \
    \                n: \n"
  stdout: ''
  timestamp: 1659979818
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1 + n / 2)\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    }\n    \n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpeejxe583.swift:31:20: error: missing argument label 'n:' in call\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n                   ^\n \
    \                  n: \n/tmp/tmpeejxe583.swift:31:33: error: missing argument\
    \ label 'n:' in call\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \                              ^\n                                n: \n/tmp/tmpeejxe583.swift:31:46:\
    \ error: missing argument label 'n:' in call\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n                                             ^\n        \
    \                                     n: \n/tmp/tmpeejxe583.swift:34:19: error:\
    \ missing argument label 'contentsOf:' in call\n    result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n                  ^\n                  contentsOf:\
    \ \n/tmp/tmpeejxe583.swift:34:23: error: missing argument label 'n:' in call\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n                   \
    \   ^\n                      n: \n/tmp/tmpeejxe583.swift:34:36: error: missing\
    \ argument label 'n:' in call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n                                   ^\n                              \
    \     n: \n/tmp/tmpeejxe583.swift:34:49: error: missing argument label 'n:' in\
    \ call\n    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            \
    \                                    ^\n                                     \
    \           n: \n"
  stdout: ''
  timestamp: 1659979818
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 2\n    var tri3 = 1\n    var tri4 = 1\n    for _ in 0..<n {\n       \
    \ tri3 = tri1 + tri2\n        tri4 = tri1 + tri2 + tri3\n        result.append(tri3)\n\
    \        result.append(tri4)\n        tri1 = tri2\n        tri2 = tri3\n     \
    \   tri3 = tri4\n        tri4 = tri1 + tri2 + tri3\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptizb5vpe/tmptizb5vpe.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23fce7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23f9deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23f9de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23f9dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptizb5vpe                        0x000055db8dfcc5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab23fed3460 __libc_start_main +
    245

    6    tmptizb5vpe                        0x000055db8dfcc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979818
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    func tri(n: Int) -> [Int] {\n    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)\n        result.append(95)\n\
    \        result.append(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpknqk0wlr.swift:132:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpknqk0wlr.swift:156:28: error: expected '}' at end of brace statement\n\
    assert(tri(n: 1) == [1, 3])\n                           ^\n/tmp/tmpknqk0wlr.swift:16:27:\
    \ note: to match this opening '{'\nfunc tri(n: Int) -> [Int] {\n             \
    \             ^\n/tmp/tmpknqk0wlr.swift:131:22: error: missing argument for parameter\
    \ #1 in call\n        result.append(\n                     ^\n               \
    \      <#Int#>\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Element)\n               \
    \                     ^\n/tmp/tmpknqk0wlr.swift:135:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979814
