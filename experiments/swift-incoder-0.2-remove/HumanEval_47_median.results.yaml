language: swift
name: HumanEval_47_median
results:
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    } else {\n        return Double(0)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbfbcdzzh/tmpbfbcdzzh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4257d95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4257a8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4257a8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4257a8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfbcdzzh                        0x00005577d99d267d <unavailable> + 5757

    5    libc.so.6                          0x00002b4257f81460 __libc_start_main +
    245

    6    tmpbfbcdzzh                        0x00005577d99d21d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  m = m + (x - m) / Double(l.count - 1)\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeskefffq.swift:7:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m + (x - m) / Double(l.count\
    \ - 1)\n                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var mid = l.count / 2\n    if l.count % 2 ==\
    \ 0 {\n        return l[mid]\n    } else {\n        return (l[mid] + l[mid-1])\
    \ / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5meptto1.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp5meptto1.swift:9:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l.isEmpty() {\n        return 0\n    }\n    \n    var l\
    \ = l\n    l.sort()\n    \n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    \n    return l[(l.count - 1) / 2] + l[l.count / 2]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9dfaxnav.swift:4:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmp9dfaxnav.swift:12:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2]\n               ~^~~~~~~~~~~~~~~~~~~\n  \
    \             Double(             )\n/tmp/tmp9dfaxnav.swift:15:33: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n    return\
    \ l[(l.count - 1) / 2] + l[l.count / 2]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \           Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l.isEmpty() {\n        return 0\n    }\n    l.sort()\n \
    \   return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg3sfn1s4.swift:4:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpg3sfn1s4.swift:7:7:\
    \ error: cannot use mutating member on immutable value: 'l' is a 'let' constant\n\
    \    l.sort()\n    ~ ^\n/tmp/tmpg3sfn1s4.swift:8:14: error: cannot find 'len'\
    \ in scope\n    return l[len(l)/2]\n             ^~~\n/tmp/tmpg3sfn1s4.swift:8:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[len(l)/2]\n           ~^~~~~~~~~~\n           Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  m = m + (x - m) / Double(l.count - 1)\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeskefffq.swift:7:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m + (x - m) / Double(l.count\
    \ - 1)\n                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    \n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjxzslsit.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpjxzslsit.swift:7:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2]\n               ~^~~~~~~~~~~~~~~~~~~\n  \
    \             Double(             )\n/tmp/tmpjxzslsit.swift:9:66: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return Double(0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpc_kysos4/tmpc_kysos4.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62d575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62d26cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62d26c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62d26b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_kysos4                        0x0000563998e4f67d <unavailable> + 5757

    5    libc.so.6                          0x00002ae62d761460 __libc_start_main +
    245

    6    tmpc_kysos4                        0x0000563998e4f1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_430kgvm/tmp_430kgvm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbdf2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbdc21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbdc21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbdc207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_430kgvm                        0x000056214bf3267d <unavailable> + 5757

    5    libc.so.6                          0x00002b7cbe116460 __libc_start_main +
    245

    6    tmp_430kgvm                        0x000056214bf321d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l.isEmpty() {\n        return 0\n    }\n    \n    var l\
    \ = l\n    var mid = l.count / 2\n    var left = l[mid..<l.count]\n    var right\
    \ = l[..<mid]\n    \n    var leftMedian = median(left)\n    var rightMedian =\
    \ median(right)\n    \n    if leftMedian == rightMedian {\n        return leftMedian\n\
    \    }\n    \n    return Double(leftMedian) + Double(rightMedian) / 2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpslrqihal.swift:4:10: error: cannot call value of non-function type\
    \ 'Bool'\n    if l.isEmpty() {\n         ^      ~~\n                \n/tmp/tmpslrqihal.swift:13:29:\
    \ error: missing argument label 'l:' in call\n    var leftMedian = median(left)\n\
    \                            ^\n                            l: \n/tmp/tmpslrqihal.swift:13:29:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    var leftMedian = median(left)\n                            ^\n\
    /tmp/tmpslrqihal.swift:14:30: error: missing argument label 'l:' in call\n   \
    \ var rightMedian = median(right)\n                             ^\n          \
    \                   l: \n/tmp/tmpslrqihal.swift:14:30: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    var rightMedian\
    \ = median(right)\n                             ^\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[(l.count - 1) / 2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0374on30.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp0374on30.swift:5:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2]\n           ~^~~~~~~~~~~~~~~~~~~\n          \
    \ Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2) / 2].0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0yij2vhm.swift:9:59: error: expected ',' separator\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].0\n                      \
    \                                    ^\n                                     \
    \                     ,\n/tmp/tmp0yij2vhm.swift:9:59: error: expected expression\
    \ in list of expressions\n        return (l[(l.count - 1) / 2] - l[(l.count -\
    \ 2) / 2) / 2].0\n                                                          ^\n\
    /tmp/tmp0yij2vhm.swift:10:5: error: expected ')' in expression list\n    }\n \
    \   ^\n/tmp/tmp0yij2vhm.swift:9:16: note: to match this opening '('\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].0\n               ^\n/tmp/tmp0yij2vhm.swift:7:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2]\n               ~^~~~~~~~~~~~~~~~~~~\n  \
    \             Double(             )\n/tmp/tmp0yij2vhm.swift:9:38: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].0\n               ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                            )\n/tmp/tmp0yij2vhm.swift:9:66:\
    \ error: value of type 'Int' has no member '0'\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2) / 2].0\n                                       ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978498
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpj0g8sx50/tmpj0g8sx50.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df340fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df3106b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7df3106988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7df31057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0g8sx50                        0x0000555dfd70867d <unavailable> + 5757

    5    libc.so.6                          0x00002b7df35fb460 __libc_start_main +
    245

    6    tmpj0g8sx50                        0x0000555dfd7081d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpliml2pzd.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  m = m + (x - m) / Double(l.count - 1)\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeskefffq.swift:7:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m + (x - m) / Double(l.count\
    \ - 1)\n                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l == nil || l.isEmpty() {\n        return Double.nan\n \
    \   }\n    l.sort()\n    return l[(l.count - 1) / 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkyo2qg70.swift:4:22: error: cannot call value of non-function type\
    \ 'Bool'\n    if l == nil || l.isEmpty() {\n                     ^      ~~\n \
    \                           \n/tmp/tmpkyo2qg70.swift:7:7: error: cannot use mutating\
    \ member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n\
    /tmp/tmpkyo2qg70.swift:8:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[(l.count - 1) / 2]\n           ~^~~~~~~~~~~~~~~~~~~\n\
    \           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpliml2pzd.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp8fbsso_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpp8fbsso_.swift:9:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2]) / 2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6uxeqxqe.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp6uxeqxqe.swift:9:89:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count\
    \ - 1) / 2]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                                      \
    \               )\n"
  stdout: ''
  timestamp: 1659978515
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    if l.len() % 2 == 0 {\n        return l[(l.len()\
    \ / 2) - 1]\n    } else {\n        return l[(l.len() / 2)]\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5_rv5f33.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp5_rv5f33.swift:5:10:\
    \ error: value of type '[Int]' has no member 'len'\n    if l.len() % 2 == 0 {\n\
    \       ~ ^~~\n/tmp/tmp5_rv5f33.swift:6:17: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return l[(l.len() / 2) - 1]\n\
    \               ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp5_rv5f33.swift:6:21:\
    \ error: value of type '[Int]' has no member 'len'\n        return l[(l.len()\
    \ / 2) - 1]\n                  ~ ^~~\n/tmp/tmp5_rv5f33.swift:8:17: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ l[(l.len() / 2)]\n               ~^~~~~~~~~~~~~~~\n               Double(  \
    \       )\n/tmp/tmp5_rv5f33.swift:8:21: error: value of type '[Int]' has no member\
    \ 'len'\n        return l[(l.len() / 2)]\n                  ~ ^~~\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprlzjmifv.swift:7:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmprlzjmifv.swift:7:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmprlzjmifv.swift:8:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  m = m + (x - m) / Double(l.count)\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8wirxhi9.swift:7:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m + (x - m) / Double(l.count)\n\
    \                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978499
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp8fbsso_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpp8fbsso_.swift:9:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprlzjmifv.swift:7:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmprlzjmifv.swift:7:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmprlzjmifv.swift:8:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[l.count / 2]) / 2.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdhk5t6jw.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdhk5t6jw.swift:9:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[l.count / 2]) / 2.0\n              \
    \                       ^\n               Double(                            \
    \    )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp81uo8lqa.swift:9:59: error: expected ',' separator\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n            \
    \                                              ^\n                           \
    \                               ,\n/tmp/tmp81uo8lqa.swift:9:59: error: expected\
    \ expression in list of expressions\n        return (l[(l.count - 1) / 2] - l[(l.count\
    \ - 2) / 2) / 2].doubleValue\n                                               \
    \           ^\n/tmp/tmp81uo8lqa.swift:10:5: error: expected ')' in expression\
    \ list\n    }\n    ^\n/tmp/tmp81uo8lqa.swift:9:16: note: to match this opening\
    \ '('\n        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ^\n/tmp/tmp81uo8lqa.swift:7:17: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n\
    \               ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp81uo8lqa.swift:9:38:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                                      )\n\
    /tmp/tmp81uo8lqa.swift:9:66: error: value of type 'Int' has no member 'doubleValue'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978498
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[(l.count - 1) / 2]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0374on30.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmp0374on30.swift:5:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2]\n           ~^~~~~~~~~~~~~~~~~~~\n          \
    \ Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpliml2pzd.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted()[l.count / 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgmywvtsq.swift:4:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.sorted()[l.count / 2]\n   \
    \        ~~~~~~~~~~^~~~~~~~~~~~~\n           Double(                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp8fbsso_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpp8fbsso_.swift:9:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbagbcb2e.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbagbcb2e.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprlzjmifv.swift:7:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmprlzjmifv.swift:7:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmprlzjmifv.swift:8:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxv5wrfo3.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxv5wrfo3.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxv5wrfo3.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxv5wrfo3.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m1 = l[0]\n    var m2 = l[0]\n    for x\
    \ in l {\n        if x < m1 {\n            m2 = m1\n            m1 = x\n     \
    \   } else if x > m2 {\n            m2 = x\n        }\n    }\n    return m1 +\
    \ (m2 - m1) / (l.count / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqlnerkmk.swift:15:15: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return m1 + (m2 - m1) / (l.count / 2)\n\
    \           ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n           Double(               \
    \        )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp81uo8lqa.swift:9:59: error: expected ',' separator\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n            \
    \                                              ^\n                           \
    \                               ,\n/tmp/tmp81uo8lqa.swift:9:59: error: expected\
    \ expression in list of expressions\n        return (l[(l.count - 1) / 2] - l[(l.count\
    \ - 2) / 2) / 2].doubleValue\n                                               \
    \           ^\n/tmp/tmp81uo8lqa.swift:10:5: error: expected ')' in expression\
    \ list\n    }\n    ^\n/tmp/tmp81uo8lqa.swift:9:16: note: to match this opening\
    \ '('\n        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ^\n/tmp/tmp81uo8lqa.swift:7:17: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n\
    \               ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp81uo8lqa.swift:9:38:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                                      )\n\
    /tmp/tmp81uo8lqa.swift:9:66: error: value of type 'Int' has no member 'doubleValue'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978498
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l.count <= 1 {\n        return l[0]\n    }\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptmlozh_j.swift:5:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmptmlozh_j.swift:7:7: error: cannot use mutating\
    \ member on immutable value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n\
    /tmp/tmptmlozh_j.swift:8:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[(l.count - 1) / 2]\n           ~^~~~~~~~~~~~~~~~~~~\n\
    \           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    if l.count < 2 {\n        return l[0]\n    }\n    var l = l\n\
    \    var mid = l.count / 2\n    var pivot = l[mid]\n    for i := 0; i < mid; i++\
    \ {\n        if l[i] < pivot {\n            l[i], l[mid] = l[mid], l[i]\n    \
    \    }\n    }\n    l[mid], l[0] = l[0], l[mid]\n    return pivot\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpiapbkmfw.swift:10:12: error: expected type\n    for i := 0; i <\
    \ mid; i++ {\n           ^\n            <#type#>\n/tmp/tmpiapbkmfw.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < mid; i++ {\n\
    \           ^\n/tmp/tmpiapbkmfw.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < mid; i++ {\n           ^\n/tmp/tmpiapbkmfw.swift:12:17:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   l[i], l[mid] = l[mid], l[i]\n                ^\n                ;\n/tmp/tmpiapbkmfw.swift:12:17:\
    \ error: expected expression\n            l[i], l[mid] = l[mid], l[i]\n      \
    \          ^\n/tmp/tmpiapbkmfw.swift:5:17: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpiapbkmfw.swift:16:12: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return pivot\n\
    \           ^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_430kgvm/tmp_430kgvm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbdf2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbdc21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbdc21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbdc207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_430kgvm                        0x000056214bf3267d <unavailable> + 5757

    5    libc.so.6                          0x00002b7cbe116460 __libc_start_main +
    245

    6    tmp_430kgvm                        0x000056214bf321d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  m = m + (x - m) / Double(l.count)\n    }\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8wirxhi9.swift:7:18: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        m = m + (x - m) / Double(l.count)\n\
    \                 ^\n                 Double( )\n"
  stdout: ''
  timestamp: 1659978499
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[l.count / 2]) / 2.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdhk5t6jw.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdhk5t6jw.swift:9:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[l.count / 2]) / 2.0\n              \
    \                       ^\n               Double(                            \
    \    )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpliml2pzd.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(l.count)\n    var count = 0\n\
    \    for x in l {\n        if x > m {\n            m = x\n        }\n        count\
    \ += 1\n    }\n    return m / Double(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvxjr4578.swift:8:14: error: binary operator '>' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x > m {\n           ~ ^ ~\n\
    /tmp/tmpvxjr4578.swift:8:14: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x > m {\n             ^\n/tmp/tmpvxjr4578.swift:9:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[l.count / 2]) / 2.0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdhk5t6jw.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdhk5t6jw.swift:9:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[l.count / 2]) / 2.0\n              \
    \                       ^\n               Double(                            \
    \    )\n"
  stdout: ''
  timestamp: 1659978500
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_430kgvm/tmp_430kgvm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbdf2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbdc21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbdc21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbdc207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_430kgvm                        0x000056214bf3267d <unavailable> + 5757

    5    libc.so.6                          0x00002b7cbe116460 __libc_start_main +
    245

    6    tmp_430kgvm                        0x000056214bf321d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc0qr0nh8.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpc0qr0nh8.swift:9:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count/2) - 1]\n    } else {\n        return l[(l.count/2) - 1]\
    \ + l[(l.count/2) - 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjumwcg07.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count/2) - 1]\n    \
    \           ~^~~~~~~~~~~~~~~~~\n               Double(           )\n/tmp/tmpjumwcg07.swift:9:35:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count/2) - 1] + l[(l.count/2) - 2]\n               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 1 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxv5wrfo3.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxv5wrfo3.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprlzjmifv.swift:7:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmprlzjmifv.swift:7:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmprlzjmifv.swift:8:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    for x in l {\n      \
    \  if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprlzjmifv.swift:7:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmprlzjmifv.swift:7:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmprlzjmifv.swift:8:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    } else {\n        return Double(0)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbfbcdzzh/tmpbfbcdzzh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4257d95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4257a8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4257a8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4257a8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbfbcdzzh                        0x00005577d99d267d <unavailable> + 5757

    5    libc.so.6                          0x00002b4257f81460 __libc_start_main +
    245

    6    tmpbfbcdzzh                        0x00005577d99d21d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp8fbsso_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpp8fbsso_.swift:9:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[(l.count - 1) / 2 - 1]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsi89xxds.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsi89xxds.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n            \
    \   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n               Double(  \
    \                                      )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    var m = Double(0)\n    var n = Double(0)\n \
    \   for x in l {\n        if n > x {\n            m = x\n            n = x\n \
    \       } else {\n            n = n\n        }\n    }\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7zy50rqb.swift:8:14: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        if n > x {\n           ~ ^ ~\n\
    /tmp/tmp7zy50rqb.swift:8:14: note: overloads for '>' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if n > x {\n             ^\n/tmp/tmp7zy50rqb.swift:9:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n/tmp/tmp7zy50rqb.swift:10:17: error:\
    \ cannot assign value of type 'Int' to type 'Double'\n            n = x\n    \
    \            ^\n                Double( )\n/tmp/tmp7zy50rqb.swift:12:15: error:\
    \ assigning a variable to itself\n            n = n\n            ~ ^ ~\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted()[l.count / 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgmywvtsq.swift:4:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.sorted()[l.count / 2]\n   \
    \        ~~~~~~~~~~^~~~~~~~~~~~~\n           Double(                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted()[l.count / 2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgmywvtsq.swift:4:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.sorted()[l.count / 2]\n   \
    \        ~~~~~~~~~~^~~~~~~~~~~~~\n           Double(                )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpj0g8sx50/tmpj0g8sx50.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df340fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df3106b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7df3106988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7df31057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0g8sx50                        0x0000555dfd70867d <unavailable> + 5757

    5    libc.so.6                          0x00002b7df35fb460 __libc_start_main +
    245

    6    tmpj0g8sx50                        0x0000555dfd7081d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpj0g8sx50/tmpj0g8sx50.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df340fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df3106b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7df3106988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7df31057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0g8sx50                        0x0000555dfd70867d <unavailable> + 5757

    5    libc.so.6                          0x00002b7df35fb460 __libc_start_main +
    245

    6    tmpj0g8sx50                        0x0000555dfd7081d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2].0) / 2\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3vhev330.swift:7:64: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2].0) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                            )\n/tmp/tmp3vhev330.swift:7:61:\
    \ error: value of type 'Int' has no member '0'\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2].0) / 2\n                                       ~~~~~~~~~~~~~~~~~~~~\
    \ ^\n/tmp/tmp3vhev330.swift:9:13: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n          \
    \ Double( )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpliml2pzd.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf679fp6h.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqziphah_.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpqziphah_.swift:6:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2]\n               ~^~~~~~~~~~~~~~~~~~~\n  \
    \             Double(             )\n/tmp/tmpqziphah_.swift:8:66: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                              )\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count - 1) /\
    \ 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplt3vdu0t.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplt3vdu0t.swift:9:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count / 2) - 1]\n    } else {\n        return l[(l.count / 2)]\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp8fbsso_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpp8fbsso_.swift:9:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2armk4i_.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count - 1) / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1jw93au8.swift:6:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmajcfcho.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpmajcfcho.swift:9:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp_430kgvm/tmp_430kgvm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cbdf2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cbdc21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cbdc21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cbdc207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_430kgvm                        0x000056214bf3267d <unavailable> + 5757

    5    libc.so.6                          0x00002b7cbe116460 __libc_start_main +
    245

    6    tmp_430kgvm                        0x000056214bf321d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpctqbsnhk.swift:7:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n      \
    \  return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp81uo8lqa.swift:9:59: error: expected ',' separator\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n            \
    \                                              ^\n                           \
    \                               ,\n/tmp/tmp81uo8lqa.swift:9:59: error: expected\
    \ expression in list of expressions\n        return (l[(l.count - 1) / 2] - l[(l.count\
    \ - 2) / 2) / 2].doubleValue\n                                               \
    \           ^\n/tmp/tmp81uo8lqa.swift:10:5: error: expected ')' in expression\
    \ list\n    }\n    ^\n/tmp/tmp81uo8lqa.swift:9:16: note: to match this opening\
    \ '('\n        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ^\n/tmp/tmp81uo8lqa.swift:7:17: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n\
    \               ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp81uo8lqa.swift:9:38:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \               ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \               Double(                                                      )\n\
    /tmp/tmp81uo8lqa.swift:9:66: error: value of type 'Int' has no member 'doubleValue'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2) / 2].doubleValue\n\
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978498
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpwu_oe3dy/tmpwu_oe3dy.swift:20: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf27fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf27cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf27cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf27cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwu_oe3dy                        0x000055f2c4e7f471 <unavailable> + 5233

    5    libc.so.6                          0x00002aaf281b3460 __libc_start_main +
    245

    6    tmpwu_oe3dy                        0x000055f2c4e7f0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    var l = l\n    l.sort()\n    if l.count > 0 {\n        return\
    \ Double(l[l.count / 2])\n    } else {\n        return Double(0)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpf1o2lu5h/tmpf1o2lu5h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff02c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4feffb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4feffb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4feffb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1o2lu5h                        0x00005590a5b4667d <unavailable> + 5757

    5    libc.so.6                          0x00002b4ff04ae460 __libc_start_main +
    245

    6    tmpf1o2lu5h                        0x00005590a5b461d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978497
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\nfunc median(l: [Int])\
    \ -> Double {\n    l.sort()\n    return l[len(l)/2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsubkadws.swift:4:7: error: cannot use mutating member on immutable\
    \ value: 'l' is a 'let' constant\n    l.sort()\n    ~ ^\n/tmp/tmpsubkadws.swift:5:14:\
    \ error: cannot find 'len' in scope\n    return l[len(l)/2]\n             ^~~\n\
    /tmp/tmpsubkadws.swift:5:13: error: cannot convert return expression of type 'Int'\
    \ to return type 'Double'\n    return l[len(l)/2]\n           ~^~~~~~~~~~\n  \
    \         Double(    )\n"
  stdout: ''
  timestamp: 1659978497
