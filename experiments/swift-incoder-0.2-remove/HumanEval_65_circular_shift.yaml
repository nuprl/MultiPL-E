name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = digit.unicodeScalars.first! + result\n    }\n    return result.unicodeScalars.first!\
    \ + result.reversed()", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result += digit\n    }\n    for _ in 0..<shift {\n        result\
    \ = result.reversed()\n    }\n    return result", "    var s = String(x)\n   \
    \ if shift > s.count {\n        s = s[s.count - shift - 1 ..< s.count].reversed()\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % digits.count\n\
    \    let digits_count = digits.count\n    let digits_shift = digits_count - shift\n\
    \    let digits_shift = digits_shift < 0 ? 0 : digits_shift\n    let digits_shift\
    \ = digits_shift > digits_count ? digits_count : digits_shift\n    let digits_shift\
    \ = digits_shift == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift\
    \ == digits_count ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift\
    \ == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift == digits_count\
    \ ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift == 0\
    \ ? 0 : digits_shift\n    let digits_shift = digits_shift == digits_count ? digits_shift\
    \ : digits_shift + 1\n    let digits_shift = digits_shift == 0 ? 0 : digits_shift\n\
    \    let digits_shift = digits_shift == digits_count ? digits_shift : digits_shift\
    \ + 1\n    let digits_shift = digits_shift == 0 ? 0 : digits_shift\n    let digits_shift\
    \ = digits_shift == digits_count ? digits_shift : digits_shift + 1\n    let digits_shift\
    \ = digits_shift == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift\
    \ == digits_count ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift\
    \ == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift == digits_count\
    \ ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift == 0\
    \ ? 0 : digits_shift\n    let digits_shift = digits_shift == digits_count ? digits_shift\
    \ : digits_shift + 1\n    let digits_shift = digits_shift == 0 ? 0 : digits_shift\n\
    \    let digits_shift = digits_shift == digits_count ? digits_shift : digits_shift\
    \ + 1\n    let digits_shift = digits_shift == 0 ? 0 : digits_shift\n    let digits_shift\
    \ = digits_shift == digits_count ? digits_shift : digits_shift + 1\n    let digits_shift\
    \ = digits_shift == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift\
    \ == digits_count ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift\
    \ == 0 ? 0 : digits_shift\n    let digits_shift = digits_shift == digits_count\
    \ ? digits_shift : digits_shift + 1\n    let digits_shift = digits_shift == 0\
    \ ? 0 : digits_shift\n    let digit", "    var result = \"\"\n    var remainder\
    \ = x % 10\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n    result\
    \ += String(remainder)\n    if shift > result.characters.count {\n        let\
    \ reversed = result.reversed()\n        return reversed\n    }\n    return result",
  "    var result = \"\"\n    var carry = 0\n    for digit in x.toString() {\n   \
    \     let digit = Int(digit)\n        let digitShifted = digit << shift\n    \
    \    let digitCarry = (digit >> shift) + carry\n        carry = digitCarry & 1\n\
    \        result = digitCarry + String(digitShifted >> 1) + result\n    }\n   \
    \ if carry > 0 {\n        result = String(digitShifted >> 1) + result\n    }\n\
    \    return result.reversed()", "    var result = \"\"\n    var remainder = x\
    \ % 10\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n    result +=\
    \ String(remainder)\n    if shift > result.characters.count {\n        return\
    \ String(result.reversed())\n    }\n    return String(result)", "    var s = String(x)\n\
    \    var shiftDigits = shift % len(s)\n    if shiftDigits == 0 {\n        return\
    \ s\n    }\n    shiftDigits = len(s) - shiftDigits\n    for _ in 0..<shiftDigits\
    \ {\n        s = s[0..<len(s)-1] + s[len(s)-1]\n    }\n    return s", "    var\
    \ result = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n      \
    \  result = String(remainder) + result\n        remainder = remainder / 10\n \
    \   }\n    return String(remainder) + result", "    var s = String(x)\n    for\
    \ _ in 0..<shift {\n        s = String(Int(s[s.startIndex..<s.endIndex]) + Int(s[s.startIndex..<s.endIndex].unicodeScalars.first!.value\
    \ - 48))\n    }\n    return s", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result = digits[digit] + result\n    }\n    if shift > result.characters.count\
    \ {\n        return reverse(result.reverse())\n    }\n    return reverse(result)\
    \ + reverse(result.reverse())", "    var result = \"\"\n    var remainder = x\n\
    \    var shiftDigits = shift\n    var digits = Int(log10(Double(remainder))) +\
    \ 1\n    if digits > shift {\n        digits = shift\n    }\n    for _ in 0..digits\
    \ {\n        var digit = remainder % 10\n        remainder = remainder / 10\n\
    \        if digit > 0 {\n            digit = digit - 10\n        }\n        result\
    \ = String(digit) + result\n    }\n    if remainder > 0 {\n        result = String(remainder)\
    \ + result\n    }\n    return result", "    var s = String(x)\n    for _ in 0..<shift\
    \ {\n        s = String(s.characters[s.startIndex.advancedBy(s.startIndex.advancedBy(1))])\n\
    \    }\n    return s", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        result = digit.characters.reversed().append(result)\n    }\n    if shift\
    \ > result.characters.count {\n        return result.reversed()\n    }\n    return\
    \ result.characters.reversed()[shift..<result.characters.count].reversed()", " \
    \   var result = \"\"\n    var carry = 0\n    for digit in x.digits() {\n    \
    \    let digit = digit + carry\n        carry = digit / 10\n        digit = digit\
    \ % 10\n        result += String(digit)\n    }\n    if carry > 0 {\n        result\
    \ += \"0\"\n    }\n    if shift > result.characters.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result[(result.characters.count - shift)..<result.characters.count])",
  "    var result = \"\"\n    var carry = 0\n    for digit in x.digits() {\n     \
    \   let digit = digit + carry\n        carry = digit / 10\n        digit = digit\
    \ % 10\n        result += String(digit)\n    }\n    if carry > 0 {\n        result\
    \ += \"0\"\n    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result + String(shift)", "    let digits = x.digits\n    let\
    \ shift = shift % digits.count\n    let digits_count = digits.count\n    var result\
    \ = \"\"\n    for i in 0..<digits_count {\n        let digit = digits[i]\n   \
    \     let digit2 = digits[digits_count - 1 - i]\n        let digit3 = digits[digits_count\
    \ - 2 - i]\n        let digit4 = digits[digits_count - 3 - i]\n        let digit5\
    \ = digits[digits_count - 4 - i]\n        let digit6 = digits[digits_count - 5\
    \ - i]\n        let digit7 = digits[digits_count - 6 - i]\n        let digit8\
    \ = digits[digits_count - 7 - i]\n        let digit9 = digits[digits_count - 8\
    \ - i]\n        let digit10 = digits[digits_count - 9 - i]\n        let digit11\
    \ = digits[digits_count - 10 - i]\n        let digit12 = digits[digits_count -\
    \ 11 - i]\n        let digit13 = digits[digits_count - 12 - i]\n        let digit14\
    \ = digits[digits_count - 13 - i]\n        let digit15 = digits[digits_count -\
    \ 14 - i]\n        let digit16 = digits[digits_count - 15 - i]\n        let digit17\
    \ = digits[digits_count - 16 - i]\n        let digit18 = digits[digits_count -\
    \ 17 - i]\n        let digit19 = digits[digits_count - 18 - i]\n        let digit20\
    \ = digits[digits_count - 19 - i]\n        let digit21 = digits[digits_count -\
    \ 20 - i]\n        let digit22 = digits[digits_count - 21 - i]\n        let digit23\
    \ = digits[digits_count - 22 - i]\n        let digit24 = digits[digits_count -\
    \ 23 - i]\n        let digit25 = digits[digits_count - 24 - i]\n        let digit26\
    \ = digits[digits_count - 25 - i]\n        let digit27 = digits[digits_count -\
    \ 26 - i]\n        let digit28 = digits[digits_count - 27 - i]\n        let digit29\
    \ = digits[digits_count - 28 - i]\n        let digit30 = digits[digits_count -\
    \ 29 - i]\n        let digit31 = digits[digits_count - 30 - i]\n        let digit32\
    \ = digits[digits_count - 31 - i]\n        let digit33 = digits[digits_count -\
    \ 32 - i]\n        let digit34 = digits[digits_count - 33 - i]\n        let digit35\
    \ = digits[digits_count - 34 - i]\n        let digit36 = digits[digits_count -\
    \ 35 - ", "    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = digit.chars().dropFirst(shift).append(result)\n    }\n    return result.reversed()",
  "    var s = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n      \
    \  s += x[i]\n        i += 1\n    }\n    return s", "    let digits = x.digits\n\
    \    let len = digits.count\n    let shift = len - shift\n    let digits_reversed\
    \ = digits.reversed()\n    let digits_shifted = digits_reversed[shift..<len]\n\
    \    return String(digits_shifted)", "    var result = \"\"\n    for digit in\
    \ x.toString() {\n        result = digit.characters.reversed()[Int(digit.characters.count)\
    \ - Int(shift)].toString() + result\n    }\n    return result", "    var s = \"\
    \"\n    var i = shift\n    while i >= 0 {\n        s = String(format: \"%0*d\"\
    , i, x) + s\n        i -= 1\n    }\n    return s", "    var result = \"\"\n  \
    \  var remainder = x % 10\n    for _ in 0..<shift {\n        result += String(remainder)\n\
    \        remainder = (remainder % 10) + 10\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.reversed())\n    }\n    return String(result)",
  "    var result = \"\"\n    for digit in x.toString() {\n        if digit == \"\
    0\" {\n            result += digit\n        } else {\n            result += String(digit)[(shift\
    \ - result.count) % result.count]\n        }\n    }\n    return result.reversed()",
  "    var digits = String(x)\n    if shift > digits.count {\n        digits = digits.reversed()\n\
    \    }\n    \n    var result = \"\"\n    for _ in 0..<shift {\n        result\
    \ += digits.popLast()\n    }\n    \n    return result + digits", "    var result\
    \ = \"\"\n    var carry = 0\n    for _ in 0..shift {\n        let digit = x %\
    \ 10\n        x /= 10\n        result += String(digit)\n        carry = digit\
    \ + carry\n    }\n    if carry > 0 {\n        result += \"0\"\n    }\n    return\
    \ result.reversed()", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        result += String(digit)[(shift - result.length) % len(digit)]\n    }\n\
    \    return result", "    var s = \"\"\n    var carry = 0\n    for digit in x.digits()\
    \ {\n        let digit = digit + carry\n        carry = digit / 10\n        digit\
    \ = digit % 10\n        s = String(digit) + s\n    }\n    if carry > 0 {\n   \
    \     s = String(carry) + s\n    }\n    if shift > s.characters.count {\n    \
    \    return s.reversed()\n    }\n    return s", "    var result = \"\"\n    for\
    \ digit in x.toString() {\n        result = digit.chars().dropFirst(shift).append(result)\n\
    \    }\n    return result.reversed()", "    var result = \"\"\n    var carry:\
    \ UInt8 = 0\n    var digit: UInt8 = 0\n    var i: Int = 0\n    for i = shift -\
    \ 1; i >= 0; i-- {\n        digit = x % 10\n        x /= 10\n        carry = digit\
    \ + carry\n        result = String(digit) + result\n    }\n    if carry != 0 {\n\
    \        result = String(carry) + result\n    }\n    return result", "    var\
    \ s = String(x)\n    for _ in 0..<shift {\n        s = s.reversed()\n    }\n \
    \   return s", "    var digits = x.digits\n    if shift > digits.count {\n   \
    \     shift = digits.count - 1\n    }\n    for _ in 0..<shift {\n        digits.append(0)\n\
    \    }\n    return String(digits)", "    var s = \"\"\n    var carry: Int = 0\n\
    \    for _ in 0..<shift {\n        carry = x % 10\n        x /= 10\n        s\
    \ += String(carry)\n    }\n    if carry > 0 {\n        s += String(carry)\n  \
    \  }\n    return s", "    var result = \"\"\n    var carry = 0\n    for digit\
    \ in x.digits() {\n        var digit = digit + carry\n        carry = digit /\
    \ 10\n        digit = digit % 10\n        result += String(digit)\n    }\n   \
    \ if carry > 0 {\n        result += \"0\"\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result + String(shift)",
  "    var s = String(x)\n    if shift > s.count {\n        shift = s.count - 1\n\
    \    }\n    for _ in 0..<shift {\n        s = String(s.reversed()) + s\n    }\n\
    \    return s", "    var result = \"\"\n    var carry = 0\n    for digit in x.digits()\
    \ {\n        let digit = digit + carry\n        carry = digit / 10\n        digit\
    \ = digit % 10\n        result = String(digit) + result\n    }\n    if carry >\
    \ 0 {\n        result = String(carry) + result\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result", "    var result\
    \ = \"\"\n    for digit in x.toString() {\n        result = digit.stringByAppendingString(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result.stringByAppendingString(String(repeating: 0, count:\
    \ shift - result.characters.count))", "    var result = \"\"\n    var remainder\
    \ = x % 10\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n    result\
    \ += String(remainder)\n    x /= 10\n    for _ in 0..<shift {\n        result\
    \ += \"0\"\n    }\n    result += String(x % 10)\n    return result", "    var\
    \ result = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    var s = \"\"\n\
    \    var n = x\n    for _ in 0..<shift {\n        s = String(n % 10) + s\n   \
    \     n = n / 10\n    }\n    if n > 0 {\n        s = String(n % 10) + s\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        s =\
    \ s.reversed()\n    }\n    var result = \"\"\n    for index in stride(from: s.count,\
    \ to: shift, by: -1) {\n        result = String(s.suffix(from: index))\n    }\n\
    \    return result", "    var s = String(x)\n    if shift > s.count {\n      \
    \  s = s.reversed()\n    }\n    return String(s.characters.prefix(shift))", " \
    \   var s = \"\"\n    for digit in x.toString() {\n        s += digit\n    }\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    return s.reversed().prefix(shift).reversed()",
  "    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x.reversed())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        digits = digits.reversed()\n    }\n  \
    \  for _ in 0..<shift {\n        digits = digits[1..<digits.count]\n    }\n  \
    \  return digits", "    var result = \"\"\n    for digit in x.toString() {\n \
    \       if digit == \"0\" {\n            continue\n        }\n        result +=\
    \ \"0\"\n    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        result += \"0\"\n    }\n    return result",
  "    var s = String(x)\n    if shift > s.count {\n        s = s[s.count - shift\
    \ - 1 ..< s.count].reversed()\n    }\n    return s", "    var result = \"\"\n\
    \    var remainder = x\n    var shiftLeft = shift\n    var shiftRight = shift\
    \ - 1\n    for _ in 0..<shift {\n        remainder, remainder = remainder / 10,\
    \ remainder % 10\n    }\n    for _ in 0..<shiftLeft {\n        result = \"\\(result)0\\\
    (remainder)\"\n        remainder, remainder = remainder / 10, remainder % 10\n\
    \    }\n    for _ in 0..<shiftRight {\n        result = \"\\(result)\\(remainder)\"\
    \n        remainder, remainder = remainder / 10, remainder % 10\n    }\n    return\
    \ result", "    var s = \"\"\n    var carry = 0\n    for digit in x.toString()\
    \ {\n        let digit = Int(digit)\n        let digitShifted = digit << shift\n\
    \        let digitCarry = (digitShifted & UInt32(UInt32.max)) != 0\n        if\
    \ digitCarry {\n            s += \"1\"\n        } else {\n            s += \"\
    0\"\n        }\n        carry = digitCarry\n        shift -= 1\n    }\n    if\
    \ carry {\n        s += \"1\"\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s.reversed()\n    }\n    var result = \"\
    \"\n    for _ in 0..<shift {\n        result = String(s.characters.reversed())\
    \ + result\n    }\n    return result", "    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(format: \"%0*d\", shift, x) + result\n    }\n   \
    \ return result.reversed()", "    var result = \"\"\n    var shiftDigits = shift\
    \ % 10\n    var digits = shift / 10\n    for _ in 0..<digits {\n        result\
    \ = String(format: \"%0*d\", 0, result) + String(format: \"%0*d\", 10, x)\n  \
    \      x = x >> 10\n    }\n    if shiftDigits > 0 {\n        result = String(format:\
    \ \"%0*d\", 0, result) + String(format: \"%0*d\", 10, x)\n    }\n    return result",
  "    var result = \"\"\n    var carry = 0\n    for digit in x.digits() {\n     \
    \   let digit = digit + carry\n        carry = digit / 10\n        digit = digit\
    \ % 10\n        result = String(digit) + result\n    }\n    if carry != 0 {\n\
    \        result = String(carry) + result\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return String(result.characters.suffix(shift))",
  "    var s = String(x)\n    var carry = 0\n    for _ in 0..<shift {\n        if\
    \ let index = s.endIndex.advancedBy(1) {\n            let digit = Int(s[index])\n\
    \            let newDigit = digit + carry\n            if newDigit > 9 {\n   \
    \             newDigit -= 9\n                carry = 1\n            } else {\n\
    \                carry = 0\n            }\n            s[index] = String(newDigit)\n\
    \        } else {\n            break\n        }\n    }\n    if carry != 0 {\n\
    \        s += String(carry)\n    }\n    return s", "    var result = \"\"\n  \
    \  for digit in x.toString() {\n        result += String(digit)[(shift - result.length)\
    \ % len(digit)]\n    }\n    return result.reversed()", "    var s = \"\"\n   \
    \ for digit in x.toString() {\n        s += String(digit)\n    }\n    if shift\
    \ > s.count {\n        return s.reversed()\n    }\n    for _ in 0..<shift {\n\
    \        s = s.reversed()\n    }\n    return s", "    var s = String(x)\n    if\
    \ shift > s.count {\n        s = s[s.count - shift - 1 ..< s.count].reversed()\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % digits.count\n\
    \    let digits_count = digits.count\n    let digits_shift = digits_count - shift\n\
    \    let digits_shift_digits = digits[digits_shift..<digits_count - digits_shift]\n\
    \    let digits_shift_reversed = digits_shift_digits.reversed()\n    let digits_shift_reversed_digits\
    \ = digits_shift_reversed.map { String($0) }\n    let digits_shift_reversed_digits_joined\
    \ = digits_shift_reversed_digits.joined()\n    return digits_shift_reversed_digits_joined",
  "    var digits = String(x)\n    if shift > digits.count {\n        digits = digits[0..<(digits.count\
    \ - shift)].reversed()\n    }\n    return digits", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        digits = digits[0..<(digits.count - shift)].reversed()\n\
    \    }\n    return digits", "    var result = \"\"\n    var remainder = x % 10\n\
    \    for _ in 0..<shift {\n        result += \"0\"\n    }\n    result += String(remainder)\n\
    \    if shift > result.count {\n        for _ in 0..<(shift - result.count) {\n\
    \            result += \"0\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var carry = 0\n    for digit in x.digits() {\n        let digit\
    \ = digit + carry\n        carry = digit / 10\n        digit = digit % 10\n  \
    \      result += String(digit)\n    }\n    if carry > 0 {\n        result += \"\
    0\"\n    }\n    if shift > result.characters.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result[(result.characters.count - shift)..<result.characters.count])",
  "    var s = \"\"\n    var i = shift\n    for _ in 0..<shift {\n        s = String(format:\
    \ \"%0*d\", i, s) + s\n        i -= 1\n    }\n    return s", "    var result =\
    \ \"\"\n    var carry = 0\n    for digit in x.digits() {\n        let digit =\
    \ digit + carry\n        carry = digit / 10\n        digit = digit % 10\n    \
    \    result = String(digit) + result\n    }\n    if carry > 0 {\n        result\
    \ = String(carry) + result\n    }\n    if shift > result.characters.count {\n\
    \        return String(result.reversed()[shift..<0])\n    }\n    return String(result.reversed()[shift..<result.characters.count])",
  "    let digits = x.digits\n    let len = digits.count\n    if shift > len {\n \
    \       return digits.reversed()\n    }\n    let start = shift % len\n    let\
    \ end = len + start\n    let result = String()\n    for i in start..end {\n  \
    \      result.append(digits[i])\n    }\n    return result.reversed()", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return s", " \
    \   var s = String(x)\n    for _ in 0..<shift {\n        s = s.reversed()\n  \
    \  }\n    return s", "    var result = String()\n    var remainder = x % 10\n\
    \    var digit = x % 10\n    for _ in 0..<shift {\n        result += String(digit)\n\
    \        digit /= 10\n    }\n    result += String(digit)\n    result += String(remainder)\n\
    \    return result", "    var s = String(x)\n    var shift: Int = shift\n    var\
    \ digit: Int = 0\n    var digits: String = \"\"\n    while shift > 0 {\n     \
    \   digit = Int(s[digit])\n        digits = String(digit) + digits\n        shift\
    \ -= 1\n    }\n    return digits", "    var s = \"\"\n    var i = 0\n    for digit\
    \ in x.toString() {\n        s += digit\n        i += 1\n        if i >= shift\
    \ {\n            i -= shift\n        }\n    }\n    return s", "    var result\
    \ = String()\n    var remainder = x % 10\n    for _ in 0..<shift {\n        result\
    \ += String(remainder)\n        remainder = (remainder % 10) + 10\n    }\n   \
    \ if shift > result.characters.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result)", "    var s = String(x)\n    \n    if shift\
    \ > s.count {\n        let reversed = s.reversed()\n        \n        switch shift\
    \ {\n        case 0:\n            return reversed\n        case 1:\n         \
    \   return reversed[0..<s.count]\n        case 2:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count]\n        case 3:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count-2] + reversed[3..<s.count]\n        case 4:\n       \
    \     return reversed[0..<s.count-2] + reversed[2..<s.count-2] + reversed[3..<s.count-2]\
    \ + reversed[4..<s.count]\n        case 5:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count-2] + reversed[3..<s.count-2] + reversed[4..<s.count-2]\
    \ + reversed[5..<s.count]\n        case 6:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count-2] + reversed[3..<s.count-2] + reversed[4..<s.count-2]\
    \ + reversed[5..<s.count-2] + reversed[6..<s.count]\n        case 7:\n       \
    \     return reversed[0..<s.count-2] + reversed[2..<s.count-2] + reversed[3..<s.count-2]\
    \ + reversed[4..<s.count-2] + reversed[5..<s.count-2] + reversed[6..<s.count-2]\
    \ + reversed[7..<s.count]\n        case 8:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count-2] + reversed[3..<s.count-2] + reversed[4..<s.count-2]\
    \ + reversed[5..<s.count-2] + reversed[6..<s.count-2] + reversed[7..<s.count-2]\
    \ + reversed[8..<s.count]\n        case 9:\n            return reversed[0..<s.count-2]\
    \ + reversed[2..<s.count-2] + reversed[3..<s.count-2] + reversed[4..<s.count-2]\
    \ + reversed[5..<s.count-2] + reversed[6..<s.count-2] + reversed[7..<s.count-2]\
    \ + reversed[8..<s.count-2] + reversed[9..<s.count]\n        default:\n      \
    \      return reversed[0..<s.count-2] + reversed[2..<s.count-2] + reversed[3..<s.count-2]\
    \ + reversed[4..<", "    var result = \"\"\n    var carry = 0\n    for digit in\
    \ x.digits() {\n        let digit = digit + carry\n        carry = digit / 10\n\
    \        digit = digit % 10\n        result = String(digit) + result\n    }\n\
    \    if carry > 0 {\n        result = String(carry) + result\n    }\n    if shift\
    \ > result.characters.count {\n        return String(result.reversed()[shift..<0])\n\
    \    }\n    return String(result.reversed()[shift..<result.characters.count])",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digits[digit]\
    \ + result\n    }\n    if shift > result.characters.count {\n        return result.reversed()\n\
    \    }\n    return result.prefix(shift)", "    var s = \"\"\n    var i = shift\n\
    \    for digit in x {\n        s += String(digit)\n        i -= 1\n        if\
    \ i < 0 {\n            i = -shift\n        }\n    }\n    return s", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        digits = digits.reversed()\n\
    \    }\n    return String(digits[0..<shift])", "    var result = \"\"\n    for\
    \ digit in x.toString() {\n        result = digit.chars().dropLast().append(result)\n\
    \    }\n    return result.dropFirst(shift)", "    var result = \"\"\n    for digit\
    \ in x.toString() {\n        result = digit.characters.reversed().append(result)\n\
    \    }\n    if shift > result.characters.count {\n        return result.characters.reversed()\n\
    \    }\n    return result.characters.reversed().prefix(shift).append(result)",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.chars().dropFirst(shift).append(result)\n\
    \    }\n    return result.reversed()", "    var s = String(x)\n    if shift >\
    \ s.count {\n        return s.reversed()\n    }\n    for _ in 0..<shift {\n  \
    \      s = s.reversed()\n    }\n    return s", "    var result = \"\"\n    var\
    \ remainder = x % 10\n    for _ in 0..<shift {\n        result = String(remainder)\
    \ + result\n        remainder = (remainder % 10) + 10\n    }\n    return String(remainder)\
    \ + result", "    var result = \"\"\n    var carry = 0\n    var digit = x % 10\n\
    \    for _ in 0..<shift {\n        result += String(digit)\n        carry = digit\
    \ / 10\n        digit = digit % 10\n    }\n    if carry > 0 {\n        result\
    \ += String(carry)\n    }\n    return result.reversed()", "    var result = \"\
    \"\n    for digit in x.toString() {\n        result += String(digit)[(shift -\
    \ result.length) % len(digit)]\n    }\n    return result.reversed()", "    var\
    \ result = \"\"\n    for digit in x.toString() {\n        result = digit.chars().dropFirst(shift).append(result)\n\
    \    }\n    return result.reversed()", "    var s = String(x)\n    if shift >\
    \ s.count {\n        s = s.reversed()\n    }\n    return String(s.characters.prefix(shift))",
  "    var s = \"\"\n    var i = shift\n    for digit in x {\n        s += String(digit)\n\
    \        i -= 1\n        if i < 0 {\n            i = -i - 1\n        }\n    }\n\
    \    return s", "    var digits = String(x)\n    if shift > digits.count {\n \
    \       digits = digits[0..<(digits.count - shift)].reversed()\n    }\n    return\
    \ digits", "    var s = String(x)\n    var shiftDigits = shift % len(s)\n    if\
    \ shiftDigits == 0 {\n        return s[0..<shift]\n    }\n    if shiftDigits >\
    \ 0 {\n        s = s[0..<shiftDigits] + s[shiftDigits..<len(s)]\n    }\n    return\
    \ s[0..<len(s)-shiftDigits]", "    var s = String(x)\n    var shift: Int = shift\n\
    \    var digit: Int = 0\n    var digits: String = \"\"\n    while shift > 0 {\n\
    \        digit = Int(s[digit])\n        digits = String(digit) + digits\n    \
    \    shift -= 1\n    }\n    return digits", "    var s = String(x)\n    if shift\
    \ > s.count {\n        return s.reversed()\n    }\n    \n    var i = 0\n    for\
    \ c in s.characters {\n        s[i] = c\n        i += 1\n    }\n    \n    for\
    \ _ in 0..<shift {\n        s[i] = '0'\n        i += 1\n    }\n    \n    return\
    \ s", "    var digits = x.digits\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = digits[digits.startIndex.advancedBy(digits.startIndex.advancedBy(1))]\
    \ + result\n    }\n    return result.reversed()", "    var result = String()\n\
    \    for digit in x.toString() {\n        result = digit.characters.reversed()[Int(digit.characters.count)\
    \ - Int(shift)..<Int(digit.characters.count)].joined() + result\n    }\n    return\
    \ result", "    var s = String(x)\n    var i = 0\n    for _ in 0..<shift {\n \
    \       i += 1\n        s = String(s.characters[0..<i] + s.characters[i..<s.count])\n\
    \    }\n    return s", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        result += String(digit)[(shift - result.count) % result.count]\n    }\n\
    \    return result.reversed()", "    var s = \"\"\n    for digit in x.toString()\
    \ {\n        s += String(digit)\n    }\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift {\n     \
    \   result += s\n    }\n    return result", "    var s = String(x)\n    for _\
    \ in 0..<shift {\n        s = s.reversed()\n    }\n    return s", "    var digits\
    \ = String(x)\n    if shift > digits.count {\n        digits = digits.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        digits = digits[1..<digits.count]\n\
    \    }\n    return digits", "    var s = String(x)\n    for _ in 0..<shift {\n\
    \        s = s.reversed()\n    }\n    return s", "    var s = String(x)\n    for\
    \ _ in 0..<shift {\n        s += String(x%10)\n        x /= 10\n    }\n    return\
    \ s", "    var s = \"\"\n    for digit in x.toString() {\n        s += String(digit)[(shift\
    \ - 1) - Int(digit)]\n    }\n    return s", "    var s = String(x)\n    if shift\
    \ > s.count {\n        shift = s.count - 1\n    }\n    for _ in 0..<shift {\n\
    \        s = String(s.reversed()) + s\n    }\n    return s", "    var s = String(x)\n\
    \    for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return s", " \
    \   var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return\
    \ s", "    var result = \"\"\n    for digit in x.toString() {\n        result\
    \ = digit.rotate_right(shift)\n    }\n    return result", "    var result = \"\
    \"\n    for _ in 0..<shift {\n        result = String(x.reversed()) + result\n\
    \        x = x >> 1\n    }\n    return result", "    var s = \"\"\n    for _ in\
    \ 0..<shift {\n        s += \"0\"\n    }\n    for _ in 0..<shift {\n        s\
    \ += \"1\"\n    }\n    return s.reverse()", "    var result = \"\"\n    for digit\
    \ in x.toString() {\n        result = digit.chars().dropFirst(shift).append(result)\n\
    \    }\n    return result.reversed()", "    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(format: \"%0*d\", shift, x) + result\n        x >>=\
    \ 1\n    }\n    return result", "    var s = String(x)\n    if shift > s.count\
    \ {\n        return s.reversed()\n    }\n    for _ in 0..<shift {\n        s =\
    \ s.reversed()\n    }\n    return s", "    var result = \"\"\n    var carry =\
    \ 0\n    for digit in x.digits() {\n        let digit = digit + carry\n      \
    \  carry = digit / 10\n        digit = digit % 10\n        result = String(digit)\
    \ + result\n    }\n    if carry > 0 {\n        result = String(carry) + result\n\
    \    }\n    if shift > result.characters.count {\n        result = result.reversed()\n\
    \    }\n    return result", "    var s = String(x)\n    for _ in 0..<shift {\n\
    \        s += \"0\"\n    }\n    for _ in 0..<(shift - 1) {\n        s += \"1\"\
    \n    }\n    return s", "    var s = \"\"\n    var carry = 0\n    for digit in\
    \ x.toString() {\n        let digit = digit.toInt()\n        let digitShifted\
    \ = digit << shift\n        let digitCarry = (digit & 1) == 0 ? 0 : digitShifted\
    \ >> 1\n        s = digitCarry + s\n        carry = digitCarry\n    }\n    if\
    \ carry != 0 {\n        s += String(carry)\n    }\n    return s", "    var s =\
    \ \"\"\n    var i = shift\n    while i >= 0 {\n        s = String(format: \"%0*d\"\
    , i, x) + s\n        i -= 1\n    }\n    return s", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        digits = digits[0..<(digits.count - shift)].reversed()\n\
    \    }\n    return digits", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        digits = digits.reversed()\n    }\n    var result = \"\"\n    for\
    \ _ in 0..<shift {\n        result = digits[digits.startIndex.advancedBy(digits.startIndex.advancedBy(1)\
    \ + 1)]\n    }\n    return result", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        digits = digits.reversed()\n    }\n    digits = String(digits[0..<shift])\n\
    \    digits = String(digits[0..<digits.count])\n    return digits", "    let digits\
    \ = x.digits\n    var result = \"\"\n    for digit in digits {\n        let digit\
    \ = digit % 10\n        result += String(digit)\n        digit /= 10\n    }\n\
    \    if shift > result.characters.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result[(result.characters.count - shift):])", "    var\
    \ digits = String(x)\n    digits = String(digits[0..<shift])\n    digits = String(digits[0..<(digits.count\
    \ - shift)..<digits.count])\n    return digits", "    var result = String()\n\
    \    for _ in 0..<shift {\n        result = String(x.toInt()) + result\n     \
    \   x = x >> 1\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x % 10\n    for _ in 0..<shift {\n        result += String(remainder)\n  \
    \      remainder = (remainder % 10) + 10\n    }\n    result += String(remainder)\n\
    \    return result", "    var s = String(x)\n    if shift > s.count {\n      \
    \  let reversed = s[s.count - shift - 1 ..< s.count].reversed()\n        return\
    \ reversed\n    }\n    return String(s[shift ..< s.count])", "    var result =\
    \ \"\"\n    for _ in 0..<shift {\n        result = String(x % 10) + result\n \
    \       x /= 10\n    }\n    return result", "    var s = \"\"\n    var i = shift\n\
    \    for _ in 0..<shift {\n        s = String(format: \"%0*d\", i, s) + s\n  \
    \      i -= 1\n    }\n    return s", "    var result = \"\"\n    var remainder\
    \ = x % 10\n    for _ in 0..<shift {\n        result = String(remainder) + result\n\
    \        remainder = (remainder % 10) + 10\n    }\n    return String(remainder)\
    \ + result", "    var s = String(x)\n    var shifts = shift / len(s)\n    for\
    \ _ in 0..<shifts {\n        s = s.reversed()\n    }\n    return s", "    var\
    \ s = String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n\
    \    var i = 0\n    for _ in 0..<shift {\n        i += 1\n        s = String(s.suffix(s.count\
    \ - i))\n    }\n    return s", "    var result = String()\n    var remainder =\
    \ x % 10\n    for _ in 0..<shift {\n        result = String(remainder) + result\n\
    \        remainder = (remainder % 10) + 10\n    }\n    return String(remainder)\
    \ + result", "    var result = \"\"\n    for digit in x.toString() {\n       \
    \ result = digit.chars().dropFirst(shift).append(result)\n    }\n    return result.reversed()",
  "    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x.toInt())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        digits = digits.reversed()\n    }\n  \
    \  return digits.reversed().prefix(shift).reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var i = 0\n\
    \    for c in s.characters {\n        s[i] = s[(i + shift) % s.count]\n      \
    \  i += 1\n    }\n    return s", "    var s = \"\"\n    for _ in 0..shift {\n\
    \        s += \"0\"\n    }\n    for _ in 0..(shift - 1) {\n        s += \"1\"\n\
    \    }\n    return s + String(x)", "    var s = String(x)\n    var i = shift -\
    \ 1\n    for c in s.characters {\n        s[i] = c\n        i -= 1\n    }\n  \
    \  return s", "    var digits = String(x)\n    if shift > digits.count {\n   \
    \     digits = digits.reversed()\n    }\n    guard digits.count > shift else {\
    \ return digits }\n    digits.reverse()\n    digits.insert(shift, 0)\n    return\
    \ digits", "    var s = \"\"\n    var i = shift\n    for c in String(format: \"\
    %0*d\", 0, x).characters {\n        s += String(format: \"%c\", c)\n        i\
    \ -= 1\n        if i < 0 {\n            i = shift + i\n        }\n    }\n    return\
    \ s", "    var digits = String(x)\n    if shift > digits.count {\n        digits\
    \ = digits.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift {\n\
    \        result += digits.popLast()\n    }\n    return result + digits", "   \
    \ var s = String(x)\n    if shift > s.count {\n        let end = s.count - shift\n\
    \        for _ in 0..<end {\n            s.insert(s.first!, at: 0)\n        }\n\
    \    }\n    return s", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        digits = digits.reversed()\n    }\n    \n    var result = \"\"\n\
    \    for index in 0..<shift {\n        result += digits[index%digits.count]\n\
    \    }\n    \n    return result", "    var result = \"\"\n    var carry = 0\n\
    \    for _ in 0..shift {\n        let digit = x % 10\n        result += \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    [digit]\n        x /= 10\n        carry = digit + carry\n    }\n    if carry >\
    \ 0 {\n        result += \"0123456789abcdefghijklmnopqrstuvwxyz\"[carry]\n   \
    \ }\n    return result", "    var s = String(x)\n    var digits = Int(s.count)\n\
    \    var shiftDigits = Int(shift)\n    if shiftDigits > digits {\n        shiftDigits\
    \ = digits\n    }\n    for _ in 0..<shiftDigits {\n        s = String(Int(s.unicodeScalars.first!.value\
    \ - Int(s.unicodeScalars.first!.value) % Int(s.unicodeScalars.first!.value)))\n\
    \    }\n    return s", "    var s = String(x)\n    if shift > s.count {\n    \
    \    shift = s.count - 1\n    }\n    for _ in 0..<shift {\n        s = s.reversed()\n\
    \    }\n    return s", "    var result = \"\"\n    for digit in x.toString() {\n\
    \        result = digits[digit] + result\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result.substringToIndex(result.startIndex.advancedBy(-shift)).reversed()",
  "    var s = \"\"\n    var i = shift\n    while i >= 0 {\n        s = String(format:\
    \ \"%0*d\", i, x) + s\n        i -= 1\n    }\n    return s", "    var digits =\
    \ String(x)\n    if shift > digits.count {\n        digits = digits.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        digits = digits[0..<digits.count-1]\
    \ + digits[digits.count-1..<digits.count]\n    }\n    return digits", "    var\
    \ s = String(x)\n    for _ in 0..<shift {\n        s = s.reversed()\n    }\n \
    \   return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s[s.count - shift - 1 ..< s.count].reversed()\n    }\n    return s[0..<shift].reversed()",
  "    var s = String(x)\n    for _ in 0..<shift {\n        s = s.reversed()\n   \
    \ }\n    return s", "    var result = \"\"\n    var shiftDigits = shift % 10\n\
    \    var shiftRemainder = shift / 10\n    for digit in x.digits() {\n        if\
    \ digit > 0 {\n            result += String(digit)\n        }\n        if shiftRemainder\
    \ > 0 {\n            result += String(shiftRemainder)\n        }\n        if shiftDigits\
    \ > 0 {\n            result += String(shiftDigits)\n        }\n        shiftRemainder--\n\
    \        shiftDigits++\n    }\n    return result.reversed()", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s.reversed()\n    }\n    return String(s.characters.prefix(shift))",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.rotate_right(shift)\n\
    \    }\n    return result", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result += String(digit)[(shift - result.length) % len(digit)]\n \
    \   }\n    return result", "    let digits = x.digits\n    if shift > digits.count\
    \ {\n        return digits.reversed()\n    }\n    var result = \"\"\n    for i\
    \ in 0..<shift {\n        let digit = digits[i]\n        result += digit\n   \
    \ }\n    for i in 0..<shift {\n        let digit = digits[digits.count - 1 - i]\n\
    \        result += digit\n    }\n    return result", "    var result = \"\"\n\
    \    var carry = 0\n    for digit in x.toString() {\n        var digit = Int(digit)\n\
    \        if digit > 0 {\n            digit -= shift\n            digit += carry\n\
    \            carry = digit / 10\n            digit %= 10\n        } else {\n \
    \           digit = digit + carry\n            carry = 0\n        }\n        result\
    \ = String(digit) + result\n    }\n    if carry > 0 {\n        result = String(carry)\
    \ + result\n    }\n    return result", "    var s = \"\"\n    var i = shift\n\
    \    for _ in 0..<shift {\n        s += String(x % 10)\n        x /= 10\n    }\n\
    \    for _ in 0..<shift {\n        x /= 10\n    }\n    return s", "    var s =\
    \ String(x)\n    if shift > s.count {\n        return s.reversed()\n    }\n  \
    \  var i = 0\n    for _ in 0..<shift {\n        i += 1\n        s = String(s.suffix(s.count\
    \ - i))\n    }\n    return s", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        digits = digits[0..<(digits.count - shift)].reversed()\n    }\n \
    \   return digits", "    var s = String(x)\n    if shift > s.count {\n       \
    \ return s.reversed()\n    }\n    var shiftDigits = shift % s.count\n    if shiftDigits\
    \ == 0 {\n        return s.reversed()\n    }\n    var digits = Array(s.characters)\n\
    \    digits.reverse()\n    digits[shiftDigits] = digits[shiftDigits].reverse()\n\
    \    return String(digits)", "    var result = \"\"\n    for _ in 0..<shift {\n\
    \        result = String(x.remainder(dividingBy: 10) + 10) + result\n        x\
    \ = x.quotient\n    }\n    return result.reversed()", "    var s = \"\"\n    for\
    \ digit in x.toString() {\n        s += String(digit)\n    }\n    if shift > s.count\
    \ {\n        return s.reversed()\n    }\n    return String(s[0..<shift])", " \
    \   var s = \"\"\n    for _ in 0..<shift {\n        s += \"0\"\n    }\n    for\
    \ _ in 0..<shift {\n        s += \"1\"\n    }\n    return s + String(x)", "  \
    \  var s = \"\"\n    for _ in 0..<shift {\n        s += \"0\"\n    }\n    for\
    \ _ in 0..<shift {\n        s += \"1\"\n    }\n    return s + String(x)", "  \
    \  var result = \"\"\n    var carry = 0\n    for digit in x.toString() {\n   \
    \     let digit = Int(digit)\n        let digitShifted = digit << shift\n    \
    \    let digitCarry = (digitShifted >> 1) + (carry << 1)\n        carry = digitCarry\
    \ >> 1\n        result += String(digitCarry)\n    }\n    if carry > 0 {\n    \
    \    result += \"1\"\n    }\n    return result.reversed()", "    var s = \"\"\n\
    \    var i = shift\n    for c in x.unicodeScalars {\n        s += String(c.value)\n\
    \        i -= 1\n        if i < 0 {\n            i = -shift\n        }\n    }\n\
    \    return s", "    var digits = String(x)\n    if shift > digits.count {\n \
    \       digits = digits[0..<(digits.count - shift)].reversed()\n    }\n    return\
    \ digits", "    var digits = String(x)\n    if shift > digits.count {\n      \
    \  digits = digits[0..<(digits.count - shift)].reversed()\n    }\n    return digits",
  "    var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return\
    \ s", "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n\
    \    }\n    var result = \"\"\n    for _ in 0..<shift {\n        result += \"\
    0\"\n    }\n    for _ in 0..<s.count {\n        result += s[s.startIndex.advancedBy(shift)]\n\
    \    }\n    return result", "    var result = \"\"\n    for digit in x.toString()\
    \ {\n        result += String(digit)[(shift - result.count) % result.count]\n\
    \    }\n    return result.reversed()", "    var s = String(x)\n    if shift >\
    \ s.count {\n        s = s.reversed()\n    }\n    return String(s.characters.prefix(shift))",
  "    var result = \"\"\n    for digit in x.toString() {\n        result = digit.chars().dropFirst().append(result)\n\
    \    }\n    if shift > result.characters.count {\n        return String(result.characters.reversed())\n\
    \    }\n    return String(result.characters.dropFirst(shift))", "    var result\
    \ = \"\"\n    var remainder = x\n    var shift = shift % 10\n    for _ in 0..<shift\
    \ {\n        remainder, remainder = remainder / 10, remainder % 10\n        result\
    \ += String(remainder)\n    }\n    if shift > 0 {\n        remainder, remainder\
    \ = remainder / 10, remainder % 10\n        result += String(remainder)\n    }\n\
    \    return result", "    var s = String(x)\n    var shifts = shift / len(s)\n\
    \    for _ in 0..<shifts {\n        s = s.reversed()\n    }\n    return s", " \
    \   var result = \"\"\n    var remainder = x\n    var shiftCount = shift\n   \
    \ while (remainder > 0) {\n        remainder, remainder = remainder / 10, remainder\
    \ % 10\n        result = String(remainder) + result\n        shiftCount -= 1\n\
    \    }\n    if shiftCount > 0 {\n        result = String(result[shiftCount:])\
    \ + result[0:shiftCount]\n    }\n    return result", "    var result = String()\n\
    \    var remainder = x % 10\n    for _ in 0..<shift {\n        result = String(remainder)\
    \ + result\n        remainder = remainder / 10\n    }\n    if shift > result.characters.count\
    \ {\n        return String(result.reversed()) + String(remainder)\n    }\n   \
    \ return String(result) + String(remainder)", "    var s = String(x)\n    if shift\
    \ > s.count {\n        s = s.reversed()\n    }\n    var result = \"\"\n    for\
    \ _ in 0..<shift {\n        result += s[s.startIndex]\n    }\n    return result",
  "    var s = \"\"\n    var i = shift\n    for digit in x.toString() {\n        s\
    \ += String(digit)\n        if i == 0 {\n            break\n        }\n      \
    \  i -= 1\n    }\n    return s", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        digits = digits[0..<(digits.count - shift)].reversed()\n    }\n \
    \   return digits", "    var result = \"\"\n    var carry = 0\n    for _ in 0..<shift\
    \ {\n        result += \"0\"\n    }\n    for digit in x.toString() {\n       \
    \ carry += Int(digit)\n        result += String(Int(digit) - Int(carry))\n   \
    \ }\n    if carry > 0 {\n        result += \"1\"\n    }\n    return result.reversed()",
  "    var digits = String(x)\n    if shift > digits.count {\n        digits = digits[0..<(digits.count\
    \ - shift)].reversed()\n    }\n    return digits", "    var s = String(x)\n  \
    \  for _ in 0..<shift {\n        s = s.reversed()\n    }\n    return s", "   \
    \ var result = \"\"\n    for digit in x.toString() {\n        result = digit.rotate_right(shift)\n\
    \    }\n    return result.reverse()", "    var s = \"\"\n    for _ in 0..shift\
    \ {\n        s = String(x % 10) + s\n        x = x / 10\n    }\n    return s",
  "    var result = \"\"\n    for _ in 0..<shift {\n        result = String(x % 10)\
    \ + result\n        x = x / 10\n    }\n    if shift > result.characters.count\
    \ {\n        return result.reversed()\n    }\n    return result", "    var result\
    \ = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift {\n        result\
    \ += String(remainder)\n        remainder = remainder / 10\n    }\n    if remainder\
    \ != 0 {\n        result += String(remainder)\n    }\n    return result", "  \
    \  var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n   \
    \ }\n    var result = \"\"\n    for _ in 0..<shift {\n        result = String(s.characters.reversed())\
    \ + result\n    }\n    return result", "    var s = String(x)\n    if shift >\
    \ s.count {\n        s = s.reversed()\n    }\n    for _ in 0..<shift {\n     \
    \   s = s.reversed()\n    }\n    return s", "    var result = \"\"\n    var carry\
    \ = 0\n    for digit in x.toString() {\n        let digit = digit.toInt()\n  \
    \      let digitShifted = digit << shift\n        let digitCarry = (digit >> shift)\
    \ + carry\n        carry = (digitCarry > 9) ? digitCarry - 9 : 0\n        result\
    \ = digitShifted + result\n    }\n    if carry > 0 {\n        result = result\
    \ + \"0\"\n    }\n    return result", "    var s = \"\"\n    var carry = 0\n \
    \   for _ in 0..<shift {\n        var digit = x % 10\n        x /= 10\n      \
    \  if carry == 0 {\n            s += digit\n        } else {\n            s +=\
    \ String(digit) + String(digit)\n        }\n        carry = digit\n    }\n   \
    \ if carry != 0 {\n        s += String(carry)\n    }\n    return s", "    var\
    \ result = \"\"\n    for digit in x.toString() {\n        result = digit.chars().dropFirst(shift).append(result)\n\
    \    }\n    return result.reversed()", "    var s = \"\"\n    for _ in 0..<shift\
    \ {\n        s += \"0\"\n    }\n    for _ in 0..<shift {\n        s += \"1\"\n\
    \    }\n    return s.reverse()", "    var s = String(x)\n    if shift > s.count\
    \ {\n        s = s[s.count - shift - 1 ..< s.count].reversed()\n    }\n    return\
    \ s", "    var result = \"\"\n    var remainder = x % 10\n    for _ in 0..<shift\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ / 10\n    }\n    return String(remainder) + result", "    var result = \"\"\n\
    \    var carry = 0\n    for digit in x.toString() {\n        let digit = digit.toInt()\n\
    \        let newDigit = digit + carry + shift\n        carry = newDigit / 10\n\
    \        result = String(newDigit % 10) + result\n    }\n    if carry > 0 {\n\
    \        result = String(10) + result\n    }\n    return result", "    var s =\
    \ String(x)\n    if shift > s.count {\n        let reversed = s[s.count - shift\
    \ - 1 ..< s.count].reversed()\n        return reversed\n    }\n    return String(s[shift\
    \ ..< s.count])", "    var s = \"\"\n    for _ in 0..<shift {\n        s = String(x\
    \ % 10) + s\n        x = x / 10\n    }\n    return s", "    var s = String(x)\n\
    \    for _ in 0..<shift {\n        s = String(s.characters.reversed()) + s\n \
    \   }\n    return s", "    var result = \"\"\n    var remainder = x % 10\n   \
    \ for _ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = (remainder % 10) + 10\n    }\n    return String(remainder) + result", "  \
    \  var digits = String(x)\n    if shift > digits.count {\n        digits = digits.reversed()\n\
    \    }\n    \n    var result = \"\"\n    \n    for _ in 0..<shift {\n        result\
    \ += digits[digits.startIndex]\n        digits.startIndex -= 1\n    }\n    \n\
    \    return result", "    var s = String(x)\n    var i = shift\n    while i >=\
    \ 0 {\n        s = String(s.characters.dropLast())\n        i -= 1\n    }\n  \
    \  return s", "    var digits = String(x)\n    if shift > digits.count {\n   \
    \     digits = digits[0..<(digits.count - shift)].reversed()\n    }\n    return\
    \ digits"]
stop_tokens:
- "\n}"
