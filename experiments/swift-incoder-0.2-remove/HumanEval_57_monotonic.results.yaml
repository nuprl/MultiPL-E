language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    while i < l.count {\n        if l[i] < l[j] {\n      \
    \      k = i\n            i = j\n            j = k\n        } else {\n       \
    \     k = i\n            i = j\n            j = k\n        }\n    }\n    return\
    \ i == l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpif4peqm9.swift:8:17: error: value of type 'Int' has no member 'count'\n\
    \    while i < l.count {\n              ~ ^~~~~\n/tmp/tmpif4peqm9.swift:9:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] < l[j] {\n   \
    \        ~^\n/tmp/tmpif4peqm9.swift:9:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] < l[j] {\n                  ~^\n/tmp/tmpif4peqm9.swift:19:19:\
    \ error: value of type 'Int' has no member 'count'\n    return i == l.count\n\
    \                ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpotgsfse9/tmpotgsfse9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6575dcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6575ac1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6575ac1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6575ac07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotgsfse9                        0x000055acd26e03b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b6575fb6460 __libc_start_main +
    245

    6    tmpotgsfse9                        0x000055acd26e0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmmisy9fy/tmpmmisy9fy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3833a38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383372fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383372f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383372e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmisy9fy                        0x000056360d37b64e <unavailable> + 5710

    5    libc.so.6                          0x00002b3833c24460 __libc_start_main +
    245

    6    tmpmmisy9fy                        0x000056360d37b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] > l[j] {\n            return false\n      \
    \  }\n        if l[i] < l[j] {\n            return true\n        }\n        i\
    \ += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpeb4p55ui/tmpeb4p55ui.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abceee50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abceeb47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abceeb47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abceeb467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeb4p55ui                        0x0000556e86ac253e <unavailable> + 5438

    5    libc.so.6                          0x00002abcef03c460 __libc_start_main +
    245

    6    tmpeb4p55ui                        0x0000556e86ac2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else if x > l[len(l)-1] {\n            isIncreasing = false\n\
    \        } else {\n            break\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkx43i_n3.swift:9:25: error: cannot find 'len' in scope\n      \
    \  } else if x > l[len(l)-1] {\n                        ^~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var m = l.count\n    while i < m && j < m {\n        if l[i] < l[j] {\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            j += 1\n   \
    \     } else {\n            k += 1\n        }\n    }\n    return i == m && j ==\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) ==\
    \ true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1,\
    \ 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for x in l {\n\
    \        if x < l[0] {\n            monotonic = false\n            break\n   \
    \     }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmphewq5l35/tmphewq5l35.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a3d40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a3d104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a3d104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a3d1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphewq5l35                        0x000055de75bdf64e <unavailable> + 5710

    5    libc.so.6                          0x00002b9a3d5f9460 __libc_start_main +
    245

    6    tmphewq5l35                        0x000055de75bdf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ i == 0 {\n            i = x\n            continue\n        }\n        if x <\
    \ i {\n            return false\n        }\n        i = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp085q_d30/tmp085q_d30.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78929d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78926cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78926cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78926cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp085q_d30                        0x0000564ed89546e1 <unavailable> + 5857

    5    libc.so.6                          0x00002b7892bc2460 __libc_start_main +
    245

    6    tmp085q_d30                        0x0000564ed89540d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing && l[idx] < l[idx+1]\
    \ {\n            isDecreasing = false\n        } else if !isDecreasing && l[idx]\
    \ > l[idx+1] {\n            isDecreasing = true\n        }\n        if isIncreasing\
    \ && isDecreasing {\n            return false\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b57d548ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57d5185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b57d5185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b57d518513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b57d5184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b57d4f84e83 <unavailable> + 188035

    6    tmp8tttowlv                        0x0000565250d2ce1c <unavailable> + 7708

    7    tmp8tttowlv                        0x0000565250d2c4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b57d567a460 __libc_start_main +
    245

    9    tmp8tttowlv                        0x0000565250d2c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for i = 1; i\
    \ < l.count; i++ {\n        if l[i-1] > l[i] {\n            monotonic = false\n\
    \            break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkk5hd8m4.swift:5:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 1; i < l.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var monotonic = false\n    while i < j {\n        if l[i]\
    \ > l[j] {\n            k = j\n        } else {\n            i = i + 1\n     \
    \   }\n        if i < k {\n            if l[i] < l[k] {\n                monotonic\
    \ = true\n            } else {\n                j = k\n            }\n       \
    \ } else {\n            if l[i] > l[k] {\n                j = k\n            }\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ i > x {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpemv0zc05/tmpemv0zc05.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab422ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4227c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4227c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4227c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemv0zc05                        0x00005612acf795fe <unavailable> + 5630

    5    libc.so.6                          0x00002ab422cbd460 __libc_start_main +
    245

    6    tmpemv0zc05                        0x00005612acf790d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ i > x {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpemv0zc05/tmpemv0zc05.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab422ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4227c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4227c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4227c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemv0zc05                        0x00005612acf795fe <unavailable> + 5630

    5    libc.so.6                          0x00002ab422cbd460 __libc_start_main +
    245

    6    tmpemv0zc05                        0x00005612acf790d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] > l[j] {\n            return false\n      \
    \  }\n        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpet1kqoxq/tmpet1kqoxq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ee485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ee17cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ee17c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ee17b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet1kqoxq                        0x00005602181a5621 <unavailable> + 5665

    5    libc.so.6                          0x00002b54ee671460 __libc_start_main +
    245

    6    tmpet1kqoxq                        0x00005602181a5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j + 1\n    while i < m && j < k {\n        if l[i]\
    \ < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n            j\
    \ -= 1\n        } else {\n            k += 1\n        }\n    }\n    return i ==\
    \ m && j == k\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpac2fpthj/tmpac2fpthj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d49bcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d498c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d498c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d498c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpac2fpthj                        0x000056057d49d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b8d49db7460 __libc_start_main +
    245

    6    tmpac2fpthj                        0x000056057d49d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i\
    \ += 1\n        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n\
    \            i += 1\n            j -= 1\n        }\n        if i < k {\n     \
    \       if l[i] < l[k] {\n                i += 1\n            } else {\n     \
    \           k -= 1\n            }\n        }\n    }\n    return i == j\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp80vweo8h/tmp80vweo8h.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e73deac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e73ae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e73ae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e73ae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80vweo8h                        0x000056121ebf553e <unavailable> + 5438

    5    libc.so.6                          0x00002b4e73fd6460 __libc_start_main +
    245

    6    tmp80vweo8h                        0x000056121ebf5019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var monotonic = true\n    while i < l.count && j < l.count && k < l.count\
    \ {\n        if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j]\
    \ {\n            j += 1\n        } else {\n            k += 1\n        }\n   \
    \     if i < l.count && j < l.count && k < l.count {\n            if l[i] < l[j]\
    \ {\n                monotonic = false\n            }\n        }\n    }\n    return\
    \ monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmphujqc3ep/tmphujqc3ep.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cda897c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cda58eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cda58e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cda58d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphujqc3ep                        0x000055d971f8f53e <unavailable> + 5438

    5    libc.so.6                          0x00002b2cdaa83460 __libc_start_main +
    245

    6    tmphujqc3ep                        0x000055d971f8f019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var m = l.count\n    while i < m && j < m {\n        if l[i] < l[j] {\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            j += 1\n   \
    \     } else {\n            k += 1\n        }\n    }\n    return i == m && j ==\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) ==\
    \ true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1,\
    \ 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] < l[j] {\n            return false\n      \
    \  }\n        if l[i] > l[j] {\n            return true\n        }\n        i\
    \ += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpi7yvgh1r/tmpi7yvgh1r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c27c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c24bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c24ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c24b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7yvgh1r                        0x0000555ec81663b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab8c29af460 __libc_start_main +
    245

    6    tmpi7yvgh1r                        0x0000555ec8166019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ l[0]\n    for element in l {\n        if element < k {\n            k = element\n\
    \            j = i\n        }\n        if element > k {\n            k = element\n\
    \            i = j\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfj33oqsn/tmpfj33oqsn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32b5e1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32b5b13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32b5b13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32b5b127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfj33oqsn                        0x000055fa7420564e <unavailable> + 5710

    5    libc.so.6                          0x00002b32b6008460 __libc_start_main +
    245

    6    tmpfj33oqsn                        0x000055fa74205129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var monotonic = true\n    var prev = -1\n    var curr = l[i]\n    while\
    \ i < len(l) {\n        if l[i] < curr {\n            monotonic = false\n    \
    \        break\n        }\n        prev = curr\n        j = i\n        while j\
    \ < len(l) {\n            if l[j] > prev {\n                monotonic = false\n\
    \                break\n            }\n            prev = l[j]\n            j\
    \ += 1\n        }\n        i += 1\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0pvubrre.swift:10:15: error: cannot find 'len' in scope\n    while\
    \ i < len(l) {\n              ^~~\n/tmp/tmp0pvubrre.swift:17:19: error: cannot\
    \ find 'len' in scope\n        while j < len(l) {\n                  ^~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    var m = Int64(l.count)\n    while i < j {\n        if l[i] <\
    \ l[j] {\n            k = i\n        } else {\n            k = j\n        }\n\
    \        if k > m {\n            m = k\n        }\n        i += 1\n        j -=\
    \ 1\n    }\n    return m <= Int64(l.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_jg826cs.swift:15:17: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n            m = k\n                ^\n                Int64(\
    \ )\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        if l[i] < l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpzcc0qrpy/tmpzcc0qrpy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68733ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68730f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68730f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68730f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcc0qrpy                        0x00005608ca55653e <unavailable> + 5438

    5    libc.so.6                          0x00002b68735eb460 __libc_start_main +
    245

    6    tmpzcc0qrpy                        0x00005608ca556019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for v in l {\n        if v < 0 {\n            isDecreasing = false\n\
    \        } else if v > 0 {\n            isIncreasing = false\n        } else {\n\
    \            return false\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmprd814x3u/tmprd814x3u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46b13fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46b10f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46b10f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46b10f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd814x3u                        0x0000557a05cb45fe <unavailable> + 5630

    5    libc.so.6                          0x00002b46b15e8460 __libc_start_main +
    245

    6    tmprd814x3u                        0x0000557a05cb40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var m = l.count\n    while i < m && j < m {\n        if l[i] < l[j] {\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            j += 1\n   \
    \     } else {\n            k += 1\n        }\n    }\n    return k == m\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028745
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] < l[j] {\n            return false\n      \
    \  }\n        if l[i] > l[j] {\n            return true\n        }\n        i\
    \ += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpi7yvgh1r/tmpi7yvgh1r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c27c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c24bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c24ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c24b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7yvgh1r                        0x0000555ec81663b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab8c29af460 __libc_start_main +
    245

    6    tmpi7yvgh1r                        0x0000555ec8166019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    while i < j {\n        if l[i] < l[j] {\n\
    \            m = i\n        }\n        if l[i] > l[j] {\n            k = j\n \
    \       }\n        if l[i] < l[k] {\n            j = k\n        }\n        i +=\
    \ 1\n        j -= 1\n    }\n    return m == k\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpje8hzex0/tmpje8hzex0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59783e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59780e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59780e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59780df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpje8hzex0                        0x00005617e66f23b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b59785d5460 __libc_start_main +
    245

    6    tmpje8hzex0                        0x00005617e66f2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    while i < j {\n        if l[i] < l[k] {\n            i += 1\n\
    \        } else if l[i] > l[k] {\n            j -= 1\n        } else {\n     \
    \       return true\n        }\n        k += 1\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba93f679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba93f370561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba93f370286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba93f37013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba93f36fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba93f16fe83 <unavailable> + 188035

    6    tmpydq9r45o                        0x000055af66fa8aac <unavailable> + 6828

    7    tmpydq9r45o                        0x000055af66fa833d <unavailable> + 4925

    8    libc.so.6                          0x00002ba93f865460 __libc_start_main +
    245

    9    tmpydq9r45o                        0x000055af66fa8019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else if x > l[len(l)-1] {\n            isIncreasing = false\n\
    \        } else {\n            break\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkx43i_n3.swift:9:25: error: cannot find 'len' in scope\n      \
    \  } else if x > l[len(l)-1] {\n                        ^~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i-1] {\n            return false\n        }\n        i += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b918e294c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b918df8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b918df8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b918df8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b918df8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b918dd8ae83 <unavailable> + 188035

    6    tmp50t1jdgb                        0x00005555d6b01c08 <unavailable> + 7176

    7    tmp50t1jdgb                        0x00005555d6b0144d <unavailable> + 5197

    8    libc.so.6                          0x00002b918e480460 __libc_start_main +
    245

    9    tmp50t1jdgb                        0x00005555d6b01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n     \
    \       return true\n        }\n        if i == k {\n            return false\n\
    \        }\n        if j == k {\n            return true\n        }\n        if\
    \ l[i] < l[k] {\n            k += 1\n        } else {\n            k -= 1\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp13u8aznx/tmp13u8aznx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c7cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c79a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c79a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c79a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13u8aznx                        0x0000558088fc153e <unavailable> + 5438

    5    libc.so.6                          0x00002b82c7e9d460 __libc_start_main +
    245

    6    tmp13u8aznx                        0x0000558088fc1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe9635yof.swift:22:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpe9635yof.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpe9635yof.swift:23:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpe9635yof.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmpe9635yof.swift:24:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpe9635yof.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpe9635yof.swift:25:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpe9635yof.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpe9635yof.swift:26:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpe9635yof.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpe9635yof.swift:27:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpe9635yof.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpe9635yof.swift:28:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpe9635yof.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpe9635yof.swift:29:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpe9635yof.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpe9635yof.swift:30:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpe9635yof.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpe9635yof.swift:31:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpe9635yof.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpe9635yof.swift:32:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpe9635yof.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpe9635yof.swift:33:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpe9635yof.s"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        if l[i] > l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpirfqxynx/tmpirfqxynx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94199eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94196e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94196e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94196e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirfqxynx                        0x000055bf355e73b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9419bda460 __libc_start_main +
    245

    6    tmpirfqxynx                        0x000055bf355e7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ l[0]\n    for element in l {\n        if element > k {\n            k = element\n\
    \            j = i\n        }\n        if element < k {\n            k = element\n\
    \            i = j\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpb_dge5at/tmpb_dge5at.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e807e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e804d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e804d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e804d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb_dge5at                        0x0000556308cc264e <unavailable> + 5710

    5    libc.so.6                          0x00002b9e809cc460 __libc_start_main +
    245

    6    tmpb_dge5at                        0x0000556308cc2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    while i < n {\n  \
    \      if l[i] < l[j] {\n            if l[i] < l[k] {\n                return\
    \ false\n            }\n            k = j\n        } else {\n            if l[j]\
    \ < l[k] {\n                return false\n            }\n            k = i\n \
    \       }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwi7mjvtw.swift:9:15: error: value of type 'Int' has no member 'count'\n\
    \    var n = l.count\n            ~ ^~~~~\n/tmp/tmpwi7mjvtw.swift:11:13: error:\
    \ value of type 'Int' has no subscripts\n        if l[i] < l[j] {\n          \
    \ ~^\n/tmp/tmpwi7mjvtw.swift:11:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] < l[j] {\n                  ~^\n/tmp/tmpwi7mjvtw.swift:12:17:\
    \ error: value of type 'Int' has no subscripts\n            if l[i] < l[k] {\n\
    \               ~^\n/tmp/tmpwi7mjvtw.swift:12:24: error: value of type 'Int' has\
    \ no subscripts\n            if l[i] < l[k] {\n                      ~^\n/tmp/tmpwi7mjvtw.swift:17:17:\
    \ error: value of type 'Int' has no subscripts\n            if l[j] < l[k] {\n\
    \               ~^\n/tmp/tmpwi7mjvtw.swift:17:24: error: value of type 'Int' has\
    \ no subscripts\n            if l[j] < l[k] {\n                      ~^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = false\n    var last =\
    \ 0\n    for x in l {\n        if x == last {\n            monotonic = true\n\
    \        } else {\n            last = x\n        }\n    }\n    return monotonic\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmzsmnmo0/tmpmzsmnmo0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47c8634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47c832bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47c832b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47c832a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzsmnmo0                        0x000055b4da589472 <unavailable> + 5234

    5    libc.so.6                          0x00002b47c8820460 __libc_start_main +
    245

    6    tmpmzsmnmo0                        0x000055b4da5890d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing {\n          \
    \  if l[idx] > l[idx+1] {\n                isDecreasing = false\n            }\n\
    \        } else {\n            if l[idx] < l[idx+1] {\n                isDecreasing\
    \ = true\n            }\n        }\n        if isIncreasing {\n            if\
    \ l[idx] < l[idx-1] {\n                isIncreasing = false\n            }\n \
    \       } else {\n            if l[idx] > l[idx-1] {\n                isIncreasing\
    \ = true\n            }\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b85c033fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85c0036561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85c0036286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85c003613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85c0035bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b85bfe35e83 <unavailable> + 188035

    6    tmpk2c0_a2c                        0x000055b2bc3efe3c <unavailable> + 7740

    7    tmpk2c0_a2c                        0x000055b2bc3ef4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b85c052b460 __libc_start_main +
    245

    9    tmpk2c0_a2c                        0x000055b2bc3ef1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing {\n          \
    \  if l[idx] < l[idx+1] {\n                isDecreasing = false\n            }\n\
    \        } else {\n            if l[idx] > l[idx+1] {\n                isDecreasing\
    \ = true\n            }\n        }\n        if isIncreasing {\n            if\
    \ l[idx] > l[idx+1] {\n                isIncreasing = false\n            }\n \
    \       } else {\n            if l[idx] < l[idx+1] {\n                isIncreasing\
    \ = true\n            }\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac552349c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac552040561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac552040286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac55204013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac55203fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac551e3fe83 <unavailable> + 188035

    6    tmpq8gq0vsg                        0x000056202e089dbc <unavailable> + 7612

    7    tmpq8gq0vsg                        0x000056202e0894cd <unavailable> + 5325

    8    libc.so.6                          0x00002ac552535460 __libc_start_main +
    245

    9    tmpq8gq0vsg                        0x000056202e0891a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        if l[i] < l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpzcc0qrpy/tmpzcc0qrpy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68733ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68730f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68730f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68730f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcc0qrpy                        0x00005608ca55653e <unavailable> + 5438

    5    libc.so.6                          0x00002b68735eb460 __libc_start_main +
    245

    6    tmpzcc0qrpy                        0x00005608ca556019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n\
    \    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n \
    \   var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n  \
    \  var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n   \
    \ var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var\
    \ k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p\
    \ = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u =\
    \ j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n\
    \    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n \
    \   var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n  \
    \  var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n   \
    \ var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var\
    \ u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z\
    \ = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e =\
    \ j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n\
    \    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n \
    \   var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n  \
    \  var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n   \
    \ var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var\
    \ e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j\
    \ = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o =\
    \ j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n\
    \    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n \
    \   var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n  \
    \  var e = j\n    var f = j\n    var g = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpis9i5n4z.swift:131:12: error: expected initial value after '='\n\
    \    var g = \n           ^\n/tmp/tmpis9i5n4z.swift:29:9: error: invalid redeclaration\
    \ of 'i'\n    var i = j\n        ^\n/tmp/tmpis9i5n4z.swift:4:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpis9i5n4z.swift:30:9: error:\
    \ invalid redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmpis9i5n4z.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isIncreasing = false\n        } else {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42aaf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42a7e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad42a7e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad42a7e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad42a7e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad42a5e6e83 <unavailable> + 188035

    6    tmpe4qvsyyk                        0x000055da7cb66d10 <unavailable> + 7440

    7    tmpe4qvsyyk                        0x000055da7cb664cd <unavailable> + 5325

    8    libc.so.6                          0x00002ad42acdc460 __libc_start_main +
    245

    9    tmpe4qvsyyk                        0x000055da7cb661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.isEmpty {\n        return true\n\
    \    }\n    if l.count == 1 {\n        return true\n    }\n    if l.count == 2\
    \ {\n        return l[0] > l[1]\n    }\n    if l.count > 2 {\n        let mid\
    \ = l.count / 2\n        return monotonic(l[0..<mid]) && monotonic(l[mid+1..<l.count])\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzwtah1f7.swift:15:26: error: missing argument label 'l:' in call\n\
    \        return monotonic(l[0..<mid]) && monotonic(l[mid+1..<l.count])\n     \
    \                    ^\n                         l: \n/tmp/tmpzwtah1f7.swift:15:27:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return monotonic(l[0..<mid]) && monotonic(l[mid+1..<l.count])\n\
    \                          ^\n/tmp/tmpzwtah1f7.swift:15:51: error: missing argument\
    \ label 'l:' in call\n        return monotonic(l[0..<mid]) && monotonic(l[mid+1..<l.count])\n\
    \                                                  ^\n                       \
    \                           l: \n/tmp/tmpzwtah1f7.swift:15:52: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ monotonic(l[0..<mid]) && monotonic(l[mid+1..<l.count])\n                   \
    \                                ^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[k] {\n            return true\n      \
    \  }\n        if l[i] > l[k] {\n            i += 1\n        } else {\n       \
    \     j -= 1\n        }\n        k = j - 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmptnj9dczg/tmptnj9dczg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea3c67ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3c371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3c371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3c3707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnj9dczg                        0x00005650621f653e <unavailable> + 5438

    5    libc.so.6                          0x00002aea3c866460 __libc_start_main +
    245

    6    tmptnj9dczg                        0x00005650621f6019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < 0 {\n            isDecreasing = false\n\
    \        } else {\n            isIncreasing = false\n        }\n        if isDecreasing\
    \ && isIncreasing {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmxcjhzu4/tmpmxcjhzu4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eceef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ecebe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ecebe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ecebe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxcjhzu4                        0x0000563cdf84b472 <unavailable> + 5234

    5    libc.so.6                          0x00002b0ecf0dc460 __libc_start_main +
    245

    6    tmpmxcjhzu4                        0x0000563cdf84b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i-1] {\n            return false\n        }\n        i += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b918e294c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b918df8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b918df8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b918df8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b918df8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b918dd8ae83 <unavailable> + 188035

    6    tmp50t1jdgb                        0x00005555d6b01c08 <unavailable> + 7176

    7    tmp50t1jdgb                        0x00005555d6b0144d <unavailable> + 5197

    8    libc.so.6                          0x00002b918e480460 __libc_start_main +
    245

    9    tmp50t1jdgb                        0x00005555d6b01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for v in l {\n        if v < 0 {\n            isDecreasing = false\n\
    \        } else if v > 0 {\n            isIncreasing = false\n        } else {\n\
    \            isIncreasing = true\n            isDecreasing = true\n        }\n\
    \    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpaj2c1ois/tmpaj2c1ois.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee174a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee171a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee171a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1719f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj2c1ois                        0x00005638804165fe <unavailable> + 5630

    5    libc.so.6                          0x00002aee17695460 __libc_start_main +
    245

    6    tmpaj2c1ois                        0x00005638804160d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1btedubq/tmp1btedubq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1dc6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1dc3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1dc3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1dc3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1btedubq                        0x0000559c947ca621 <unavailable> + 5665

    5    libc.so.6                          0x00002ae1dc8e6460 __libc_start_main +
    245

    6    tmp1btedubq                        0x0000559c947ca019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var monotonic = true\n    while i < j {\n        if l[i] >\
    \ l[j] {\n            monotonic = false\n        }\n        if l[i] < l[k] {\n\
    \            k = j\n        }\n        i += 1\n        j -= 1\n    }\n    return\
    \ monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpc6jfqt_s/tmpc6jfqt_s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5d05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba59fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba59fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba59fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6jfqt_s                        0x000055cf67ac0621 <unavailable> + 5665

    5    libc.so.6                          0x00002b6ba5ef1460 __libc_start_main +
    245

    6    tmpc6jfqt_s                        0x000055cf67ac0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for x in l {\n\
    \        if x < l[0] {\n            monotonic = false\n            break\n   \
    \     }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmphewq5l35/tmphewq5l35.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a3d40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a3d104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a3d104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a3d1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphewq5l35                        0x000055de75bdf64e <unavailable> + 5710

    5    libc.so.6                          0x00002b9a3d5f9460 __libc_start_main +
    245

    6    tmphewq5l35                        0x000055de75bdf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] > l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abc0c04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc0bd42561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc0bd42286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc0bd4213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc0bd41bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abc0bb41e83 <unavailable> + 188035

    6    tmpv_2wnqq0                        0x00005636a2fb2d10 <unavailable> + 7440

    7    tmpv_2wnqq0                        0x00005636a2fb24cd <unavailable> + 5325

    8    libc.so.6                          0x00002abc0c237460 __libc_start_main +
    245

    9    tmpv_2wnqq0                        0x00005636a2fb21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n        if isDecreasing && isIncreasing {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb5b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb57f9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aefb57f9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aefb57f913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aefb57f8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aefb55f8e83 <unavailable> + 188035

    6    tmp3apfoxup                        0x000055e18404ad14 <unavailable> + 7444

    7    tmp3apfoxup                        0x000055e18404a4cd <unavailable> + 5325

    8    libc.so.6                          0x00002aefb5cee460 __libc_start_main +
    245

    9    tmp3apfoxup                        0x000055e18404a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < x {\n            isDecreasing = false\n\
    \        } else {\n            isIncreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpb4p6g5zj/tmpb4p6g5zj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c5e210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c5df07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c5df07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c5df067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4p6g5zj                        0x0000561834d0d5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b7c5e3fc460 __libc_start_main +
    245

    6    tmpb4p6g5zj                        0x0000561834d0d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = l[0]\n    while i < j {\n        if l[i] < k {\n            i += 1\n\
    \        } else if l[j] > k {\n            j -= 1\n        } else {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp59zgho_1/tmp59zgho_1.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0c33ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0c30d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0c30d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0c30d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59zgho_1                        0x0000564cb530e3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ae0c35c9460 __libc_start_main +
    245

    6    tmp59zgho_1                        0x0000564cb530e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var prev = 0\n    var curr = 1\n    for idx in 0..<l.count {\n   \
    \     if l[idx] < prev {\n            return false\n        }\n        if l[idx]\
    \ > prev {\n            return true\n        }\n        prev = curr\n        curr\
    \ = curr * l[idx]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpk3a20g7c/tmpk3a20g7c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbf99b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbf96afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbf96af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbf96ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3a20g7c                        0x0000558482d886ce <unavailable> + 5838

    5    libc.so.6                          0x00002acbf9ba4460 __libc_start_main +
    245

    6    tmpk3a20g7c                        0x0000558482d881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1btedubq/tmp1btedubq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1dc6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1dc3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1dc3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1dc3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1btedubq                        0x0000559c947ca621 <unavailable> + 5665

    5    libc.so.6                          0x00002ae1dc8e6460 __libc_start_main +
    245

    6    tmp1btedubq                        0x0000559c947ca019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = false\n    var prev =\
    \ 0\n    for x in l {\n        if prev < x {\n            monotonic = true\n \
    \       }\n        prev = x\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpb4veybne/tmpb4veybne.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98afd21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98afa18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98afa18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98afa177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4veybne                        0x000055d04e9f05fe <unavailable> + 5630

    5    libc.so.6                          0x00002b98aff0d460 __libc_start_main +
    245

    6    tmpb4veybne                        0x000055d04e9f00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    while i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[k] {\n            return true\n      \
    \  }\n        i += 1\n        j -= 1\n        k += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp2xbgye43/tmp2xbgye43.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada1d86cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada1d563b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada1d563988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada1d5627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xbgye43                        0x000055f40430c53e <unavailable> + 5438

    5    libc.so.6                          0x00002ada1da58460 __libc_start_main +
    245

    6    tmp2xbgye43                        0x000055f40430c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    for i in 0..<(l.count-1) {\n        if l[i] > l[i+1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpt3nlvw4d/tmpt3nlvw4d.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17ef679c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17ef370b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17ef370988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17ef36f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3nlvw4d                        0x000055e8e76957b1 <unavailable> + 6065

    5    libc.so.6                          0x00002b17ef865460 __libc_start_main +
    245

    6    tmpt3nlvw4d                        0x000055e8e76951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isIncreasing =\
    \ false\n        }\n        if x > l[len(l)-1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp71pxjqkr.swift:10:18: error: cannot find 'len' in scope\n     \
    \   if x > l[len(l)-1] {\n                 ^~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = l[0]\n    while i < j {\n        if l[i] < k {\n            i += 1\n\
    \        } else if l[j] > k {\n            j -= 1\n        } else {\n        \
    \    return true\n        }\n        k = l[i]\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpetfns7v4/tmpetfns7v4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96874f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96871f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96871f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96871ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetfns7v4                        0x0000559412d7a3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b96876e5460 __libc_start_main +
    245

    6    tmpetfns7v4                        0x0000559412d7a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n  \
    \  var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpri7ovyzy.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpri7ovyzy.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmpri7ovyzy.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:33:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:36:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:39:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:40:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpri7ovyzy.s"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9r4mtq0n/tmp9r4mtq0n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b814cb91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b814c888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b814c888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b814c8877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r4mtq0n                        0x0000560a2dbf23b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b814cd7d460 __libc_start_main +
    245

    6    tmp9r4mtq0n                        0x0000560a2dbf2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    while i < n {\n  \
    \      if l[i] > l[j] {\n            k = i\n            i = j\n            j =\
    \ k\n        }\n        if l[i] < l[j] {\n            l = i\n            i = j\n\
    \            j = l\n        }\n        if l[i] > l[j] {\n            m = i\n \
    \           i = j\n            j = m\n        }\n        if l[i] < l[j] {\n  \
    \          n = i\n            i = j\n            j = n\n        }\n    }\n   \
    \ return i == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp56ki63wt.swift:9:15: error: value of type 'Int' has no member 'count'\n\
    \    var n = l.count\n            ~ ^~~~~\n/tmp/tmp56ki63wt.swift:11:13: error:\
    \ value of type 'Int' has no subscripts\n        if l[i] > l[j] {\n          \
    \ ~^\n/tmp/tmp56ki63wt.swift:11:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] > l[j] {\n                  ~^\n/tmp/tmp56ki63wt.swift:16:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] < l[j] {\n   \
    \        ~^\n/tmp/tmp56ki63wt.swift:16:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] < l[j] {\n                  ~^\n/tmp/tmp56ki63wt.swift:21:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] > l[j] {\n   \
    \        ~^\n/tmp/tmp56ki63wt.swift:21:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] > l[j] {\n                  ~^\n/tmp/tmp56ki63wt.swift:26:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] < l[j] {\n   \
    \        ~^\n/tmp/tmp56ki63wt.swift:26:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] < l[j] {\n                  ~^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n    }\n\
    \    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmps4oxv9eu/tmps4oxv9eu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac442e1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac442b15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac442b15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac442b147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4oxv9eu                        0x00005616940a264e <unavailable> + 5710

    5    libc.so.6                          0x00002ac44300a460 __libc_start_main +
    245

    6    tmps4oxv9eu                        0x00005616940a2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ l.count\n    while i < k {\n        if l[i] < l[j] {\n            i += 1\n \
    \       } else if l[i] > l[j] {\n            j += 1\n        } else {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpdksrbwho/tmpdksrbwho.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29e9b8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29e9883b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29e9883988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29e98827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdksrbwho                        0x00005590d724453e <unavailable> + 5438

    5    libc.so.6                          0x00002b29e9d78460 __libc_start_main +
    245

    6    tmpdksrbwho                        0x00005590d7244019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n     \
    \   if isIncreasing && isDecreasing {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfoyggprq/tmpfoyggprq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18228c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18225bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18225bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18225be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoyggprq                        0x00005621cc0c84c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b1822ab4460 __libc_start_main +
    245

    6    tmpfoyggprq                        0x00005621cc0c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 1\n    var s = 1\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n\
    \    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n \
    \   var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n  \
    \  var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n   \
    \ var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var\
    \ Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n   \
    \ var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var\
    \ J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O\
    \ = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T =\
    \ 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n\
    \    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D =\
    \ 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprzt0n1vs.swift:133:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmprzt0n1vs.swift:9:15: error: value of type 'Int' has no member 'count'\n\
    \    var n = l.count\n            ~ ^~~~~\n/tmp/tmprzt0n1vs.swift:56:9: error:\
    \ invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmprzt0n1vs.swift:4:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmprzt0n1vs.swift:57:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmprzt0n1vs.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmprzt0n1vs.swift:58:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmprzt0n1vs.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmprzt0n1vs.swift:59:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmprzt0n1vs.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmprzt0n1vs.swift:60:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmprzt0n1vs.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 1\n        ^\n/tmp/tmprzt0n1vs.swift:62:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmprzt0n1vs.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmprzt0n1vs.swift:63:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmprzt0n1vs.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmprzt0n1vs.swift:64:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmprzt0n1vs.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmprzt0n1vs.swift:65:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmprzt0n1vs.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 1\n        ^\n/tmp/tmprzt0n1vs.swift:66:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmprzt0n1vs.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 1\n        ^\n/tmp/tmprzt0n1vs.swift:67:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp"
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var m = Int64(0)\n    while i < j {\n        if l[i] < l[j]\
    \ {\n            if l[i] < m+1 {\n                m = l[i]\n            }\n  \
    \          i += 1\n        } else {\n            if l[j] < m+1 {\n           \
    \     m = l[j]\n            }\n            j -= 1\n        }\n    }\n    return\
    \ m == l[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphlxtf8ds.swift:11:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n/tmp/tmphlxtf8ds.swift:16:22: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                m = l[j]\n                  \
    \  ~^~~\n                    Int64( )\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] > l[j] {\n            return false\n      \
    \  }\n        if l[i] < l[j] {\n            return true\n        }\n        i\
    \ += 1\n        j -= 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp2eh0l0w7/tmp2eh0l0w7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6294ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d62645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d62645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d626447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2eh0l0w7                        0x000055b88bd1f53e <unavailable> + 5438

    5    libc.so.6                          0x00002b8d62b3a460 __libc_start_main +
    245

    6    tmp2eh0l0w7                        0x000055b88bd1f019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[k] {\n            return true\n      \
    \  }\n        if l[i] > l[k] {\n            i += 1\n        }\n        if l[i]\
    \ < l[k] {\n            j -= 1\n        }\n        k += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpefadqewy/tmpefadqewy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785d47cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785d173b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785d173988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785d1727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefadqewy                        0x0000563109b4253e <unavailable> + 5438

    5    libc.so.6                          0x00002b785d668460 __libc_start_main +
    245

    6    tmpefadqewy                        0x0000563109b42019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        if l[i] < l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpzcc0qrpy/tmpzcc0qrpy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68733ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68730f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68730f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68730f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcc0qrpy                        0x00005608ca55653e <unavailable> + 5438

    5    libc.so.6                          0x00002b68735eb460 __libc_start_main +
    245

    6    tmpzcc0qrpy                        0x00005608ca556019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = false\n    var prev =\
    \ 0\n    for v in l {\n        if v < prev {\n            monotonic = false\n\
    \        } else {\n            monotonic = true\n        }\n        prev = v\n\
    \    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpyps27h0_/tmpyps27h0_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4e035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e4dd2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e4dd2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e4dd2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyps27h0_                        0x0000556ed2a765fe <unavailable> + 5630

    5    libc.so.6                          0x00002b3e4e221460 __libc_start_main +
    245

    6    tmpyps27h0_                        0x0000556ed2a760d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for x in l {\n\
    \        if x < l[0] {\n            monotonic = false\n            break\n   \
    \     }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmphewq5l35/tmphewq5l35.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a3d40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a3d104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a3d104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a3d1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphewq5l35                        0x000055de75bdf64e <unavailable> + 5710

    5    libc.so.6                          0x00002b9a3d5f9460 __libc_start_main +
    245

    6    tmphewq5l35                        0x000055de75bdf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isIncreasing = false\n        } else {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42aaf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42a7e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad42a7e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad42a7e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad42a7e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad42a5e6e83 <unavailable> + 188035

    6    tmpe4qvsyyk                        0x000055da7cb66d10 <unavailable> + 7440

    7    tmpe4qvsyyk                        0x000055da7cb664cd <unavailable> + 5325

    8    libc.so.6                          0x00002ad42acdc460 __libc_start_main +
    245

    9    tmpe4qvsyyk                        0x000055da7cb661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        if l[i] < l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpzcc0qrpy/tmpzcc0qrpy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68733ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68730f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68730f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68730f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcc0qrpy                        0x00005608ca55653e <unavailable> + 5438

    5    libc.so.6                          0x00002b68735eb460 __libc_start_main +
    245

    6    tmpzcc0qrpy                        0x00005608ca556019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9r4mtq0n/tmp9r4mtq0n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b814cb91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b814c888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b814c888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b814c8877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r4mtq0n                        0x0000560a2dbf23b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b814cd7d460 __libc_start_main +
    245

    6    tmp9r4mtq0n                        0x0000560a2dbf2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] < l[k] {\n            return\
    \ false\n        }\n        if l[i] > l[k] {\n            k = j\n        } else\
    \ {\n            i += 1\n            j = i - 1\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpvls3kns6/tmpvls3kns6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b578e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b575deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b575de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b575dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvls3kns6                        0x000055edd76a03b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b1b57ad3460 __libc_start_main +
    245

    6    tmpvls3kns6                        0x000055edd76a0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = l.count\n    while i < m {\n        if l[i] >\
    \ l[j] {\n            k = i\n            i = j\n            j = k\n        } else\
    \ {\n            k = i\n            i = j\n            j = k\n        }\n    }\n\
    \    return i == m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfl4x8x9m.swift:8:15: error: value of type 'Int' has no member 'count'\n\
    \    var m = l.count\n            ~ ^~~~~\n/tmp/tmpfl4x8x9m.swift:10:13: error:\
    \ value of type 'Int' has no subscripts\n        if l[i] > l[j] {\n          \
    \ ~^\n/tmp/tmpfl4x8x9m.swift:10:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] > l[j] {\n                  ~^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx - 1] {\n            monotonic = false\n       \
    \     break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854ce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854cb95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854cb95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854cb9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854cb94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854c994e83 <unavailable> + 188035

    6    tmpdark665t                        0x00005584b5540cf6 <unavailable> + 7414

    7    tmpdark665t                        0x00005584b55404cd <unavailable> + 5325

    8    libc.so.6                          0x00002b854d08a460 __libc_start_main +
    245

    9    tmpdark665t                        0x00005584b55401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmmisy9fy/tmpmmisy9fy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3833a38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383372fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383372f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383372e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmisy9fy                        0x000056360d37b64e <unavailable> + 5710

    5    libc.so.6                          0x00002b3833c24460 __libc_start_main +
    245

    6    tmpmmisy9fy                        0x000056360d37b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if x == last {\n            return false\n        }\n        last = x\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpchfycekd/tmpchfycekd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0614c4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0614945b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0614945988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06149447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchfycekd                        0x000055fe4219b5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b0614e3a460 __libc_start_main +
    245

    6    tmpchfycekd                        0x000055fe4219b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing {\n          \
    \  if l[idx] > l[idx+1] {\n                isDecreasing = false\n            }\n\
    \        } else {\n            if l[idx] < l[idx+1] {\n                isDecreasing\
    \ = true\n            }\n        }\n        if isIncreasing {\n            if\
    \ l[idx] < l[idx+1] {\n                isIncreasing = false\n            }\n \
    \       } else {\n            if l[idx] > l[idx+1] {\n                isIncreasing\
    \ = true\n            }\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b4631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b4328561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b77b4328286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b77b432813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b77b4327bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b77b4127e83 <unavailable> + 188035

    6    tmpbrz307ri                        0x0000559723ee4d3e <unavailable> + 7486

    7    tmpbrz307ri                        0x0000559723ee44cd <unavailable> + 5325

    8    libc.so.6                          0x00002b77b481d460 __libc_start_main +
    245

    9    tmpbrz307ri                        0x0000559723ee41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if l[i] > l[j] {\n            return false\n      \
    \  }\n        if l[i] == l[k] {\n            i += 1\n            k -= 1\n    \
    \    }\n        if l[i] < l[k] {\n            return false\n        }\n      \
    \  i += 1\n        j += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9ho85ntg/tmp9ho85ntg.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23f1021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23f0d18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23f0d18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23f0d177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ho85ntg                        0x0000561830a8753e <unavailable> + 5438

    5    libc.so.6                          0x00002b23f120d460 __libc_start_main +
    245

    6    tmp9ho85ntg                        0x0000561830a87019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpx00gneph/tmpx00gneph.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1119d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1119a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1119a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1119a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx00gneph                        0x0000558c25004542 <unavailable> + 5442

    5    libc.so.6                          0x00002b1119f37460 __libc_start_main +
    245

    6    tmpx00gneph                        0x0000558c250041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    var n = j\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n\
    \    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf =\
    \ 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n    var ck\
    \ = 0\n    var cl = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n    var\
    \ cp = 0\n    var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n   \
    \ var cu = 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n\
    \    var cz = 0\n    var da = 0\n    var db = 0\n    var dc = 0\n    var dd =\
    \ 0\n    var de = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n    var di\
    \ = 0\n    var dj = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n    var\
    \ dn = 0\n    var do = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n   \
    \ var ds = 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n\
    \    var dx = 0\n    var dy = 0\n    var dz = 0\n    var ea = 0\n    var eb =\
    \ 0\n    var ec = 0\n    var ed = 0\n    var ee = 0\n    var ef = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp684ehevo.swift:39:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmp684ehevo.swift:39:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmp684ehevo.swift:113:9: error: keyword 'do' cannot be used\
    \ as an identifier here\n    var do = 0\n        ^\n/tmp/tmp684ehevo.swift:113:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var do =\
    \ 0\n        ^~\n        `do`\n/tmp/tmp684ehevo.swift:4:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:5:9: warning:\
    \ variable 'j' was never mutated; consider changing to 'let' constant\n    var\
    \ j = l.count - 1\n    ~~~ ^\n    let\n/tmp/tmp684ehevo.swift:6:9: warning: initialization\
    \ of variable 'k' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var k = j - 1\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:7:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = j\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:8:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = j\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:9:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:10:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:11:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:12:9:\
    \ warning: initialization of variable 'r' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var r = 0\n    ~~~~^\n    _\n/tmp/tmp684ehevo.swift:13:9:\
    \ warning: init"
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var\
    \ o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8cpwkl6v.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8cpwkl6v.swift:29:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmp8cpwkl6v.swift:4:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmp8cpwkl6v.swift:30:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmp8cpwkl6v.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = l.count-1\n        ^\n/tmp/tmp8cpwkl6v.swift:31:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmp8cpwkl6v.swift:6:9: note: 'k' previously declared here\n    var k = j-1\n\
    \        ^\n/tmp/tmp8cpwkl6v.swift:33:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:34:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:35:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:36:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:37:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:38:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:39:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:40:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:41:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:42:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:43:21:\
    \ error: value of type 'Int64' h"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = false\n    for idx in\
    \ 0..<l.count {\n        if l[idx] > l[idx+1] {\n            monotonic = true\n\
    \            break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aae57799c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae57490561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aae57490286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aae5749013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aae5748fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aae5728fe83 <unavailable> + 188035

    6    tmp1qjybvod                        0x00005575ef7d6cf6 <unavailable> + 7414

    7    tmp1qjybvod                        0x00005575ef7d64cd <unavailable> + 5325

    8    libc.so.6                          0x00002aae57985460 __libc_start_main +
    245

    9    tmp1qjybvod                        0x00005575ef7d61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        if element\
    \ > l[i] {\n            return true\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_7hlf3_8/tmp_7hlf3_8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6593c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6593906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6593906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65939057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7hlf3_8                        0x000055e5f537464e <unavailable> + 5710

    5    libc.so.6                          0x00002b6593dfb460 __libc_start_main +
    245

    6    tmp_7hlf3_8                        0x000055e5f5374129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpx00gneph/tmpx00gneph.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1119d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1119a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1119a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1119a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx00gneph                        0x0000558c25004542 <unavailable> + 5442

    5    libc.so.6                          0x00002b1119f37460 __libc_start_main +
    245

    6    tmpx00gneph                        0x0000558c250041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing {\n          \
    \  if l[idx] < l[idx+1] {\n                isDecreasing = false\n            }\n\
    \        } else {\n            if l[idx] > l[idx+1] {\n                isDecreasing\
    \ = true\n            }\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b87490cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8748dc2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8748dc2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8748dc213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8748dc1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8748bc1e83 <unavailable> + 188035

    6    tmpmxevl275                        0x000055cfbbb9eda9 <unavailable> + 7593

    7    tmpmxevl275                        0x000055cfbbb9e4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b87492b7460 __libc_start_main +
    245

    9    tmpmxevl275                        0x000055cfbbb9e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n        if isDecreasing && isIncreasing {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aefb5b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefb57f9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aefb57f9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aefb57f913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aefb57f8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aefb55f8e83 <unavailable> + 188035

    6    tmp3apfoxup                        0x000055e18404ad14 <unavailable> + 7444

    7    tmp3apfoxup                        0x000055e18404a4cd <unavailable> + 5325

    8    libc.so.6                          0x00002aefb5cee460 __libc_start_main +
    245

    9    tmp3apfoxup                        0x000055e18404a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var left = 0\n    var right = l.count - 1\n    var leftIsLess = true\n\
    \    var rightIsLess = true\n    var leftIsGreater = true\n    var rightIsGreater\
    \ = true\n    while left < right {\n        if l[left] > l[right] {\n        \
    \    leftIsLess = false\n            rightIsLess = true\n        } else {\n  \
    \          leftIsGreater = false\n            rightIsGreater = true\n        }\n\
    \        if leftIsLess && rightIsLess {\n            return true\n        }\n\
    \        if leftIsGreater && rightIsGreater {\n            return false\n    \
    \    }\n        left += 1\n        right -= 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_s_4ymki/tmp_s_4ymki.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc08821c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc08518b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc08518988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc085177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s_4ymki                        0x000056236f41a53e <unavailable> + 5438

    5    libc.so.6                          0x00002afc08a0d460 __libc_start_main +
    245

    6    tmp_s_4ymki                        0x000056236f41a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9r4mtq0n/tmp9r4mtq0n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b814cb91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b814c888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b814c888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b814c8877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r4mtq0n                        0x0000560a2dbf23b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b814cd7d460 __libc_start_main +
    245

    6    tmp9r4mtq0n                        0x0000560a2dbf2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   while i < j {\n        if l[i] < l[j] {\n            return false\n      \
    \  }\n        if l[i] > l[j] {\n            return true\n        }\n        i\
    \ += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpi7yvgh1r/tmpi7yvgh1r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c27c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c24bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c24ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c24b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7yvgh1r                        0x0000555ec81663b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab8c29af460 __libc_start_main +
    245

    6    tmpi7yvgh1r                        0x0000555ec8166019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    var monotonic = false\n    while i < j {\n        if l[i] < l[j]\
    \ {\n            i += 1\n            monotonic = true\n        } else {\n    \
    \        j -= 1\n            monotonic = false\n        }\n        if i == k {\n\
    \            break\n        }\n        if l[i] > l[k] {\n            k += 1\n\
    \        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c0c74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c096b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af3c096b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af3c096b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af3c096abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af3c076ae83 <unavailable> + 188035

    6    tmpg_mbio4d                        0x0000556f45845b36 <unavailable> + 6966

    7    tmpg_mbio4d                        0x0000556f458454c7 <unavailable> + 5319

    8    libc.so.6                          0x00002af3c0e60460 __libc_start_main +
    245

    9    tmpg_mbio4d                        0x0000556f45845019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j + 1\n    while i < m && j < k {\n        if l[i]\
    \ < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n            j\
    \ += 1\n        } else {\n            k += 1\n        }\n    }\n    return i ==\
    \ m && j == k\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8bn11tn2/tmp8bn11tn2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba946d2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba946a23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba946a23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba946a227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bn11tn2                        0x000055905b1853b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ba946f18460 __libc_start_main +
    245

    6    tmp8bn11tn2                        0x000055905b185019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpx00gneph/tmpx00gneph.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1119d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1119a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1119a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1119a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx00gneph                        0x0000558c25004542 <unavailable> + 5442

    5    libc.so.6                          0x00002b1119f37460 __libc_start_main +
    245

    6    tmpx00gneph                        0x0000558c250041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = l.count\n    while i < l {\n        if l[j] < l[k] {\n      \
    \      return false\n        }\n        if l[j] == l[k] {\n            if j ==\
    \ k {\n                return true\n            }\n            j += 1\n      \
    \      k += 1\n        }\n        i += 1\n        j += 1\n        k += 1\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbmb8w46k.swift:9:13: error: value of type 'Int' has no subscripts\n\
    \        if l[j] < l[k] {\n           ~^\n/tmp/tmpbmb8w46k.swift:9:20: error:\
    \ value of type 'Int' has no subscripts\n        if l[j] < l[k] {\n          \
    \        ~^\n/tmp/tmpbmb8w46k.swift:12:13: error: value of type 'Int' has no subscripts\n\
    \        if l[j] == l[k] {\n           ~^\n/tmp/tmpbmb8w46k.swift:12:21: error:\
    \ value of type 'Int' has no subscripts\n        if l[j] == l[k] {\n         \
    \          ~^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmmisy9fy/tmpmmisy9fy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3833a38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383372fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383372f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383372e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmisy9fy                        0x000056360d37b64e <unavailable> + 5710

    5    libc.so.6                          0x00002b3833c24460 __libc_start_main +
    245

    6    tmpmmisy9fy                        0x000056360d37b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] > l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n        if isDecreasing && isIncreasing {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afd4a71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4a416561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afd4a416286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afd4a41613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afd4a415bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afd4a215e83 <unavailable> + 188035

    6    tmp3zmlrqz9                        0x000055d5d4085d10 <unavailable> + 7440

    7    tmp3zmlrqz9                        0x000055d5d40854cd <unavailable> + 5325

    8    libc.so.6                          0x00002afd4a90b460 __libc_start_main +
    245

    9    tmp3zmlrqz9                        0x000055d5d40851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j + 1\n    while i < j {\n        if l[i] < l[k]\
    \ {\n            i += 1\n        } else if l[i] > l[k] {\n            k += 1\n\
    \        } else {\n            if l[i] < l[m] {\n                i += 1\n    \
    \            m -= 1\n            } else {\n                k += 1\n          \
    \      m -= 1\n            }\n        }\n    }\n    return i == j\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2af657bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2af6272561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2af6272286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2af627213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2af6271bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2af6071e83 <unavailable> + 188035

    6    tmpw5vdbvpb                        0x0000559c61977ba6 <unavailable> + 7078

    7    tmpw5vdbvpb                        0x0000559c6197733d <unavailable> + 4925

    8    libc.so.6                          0x00002b2af6767460 __libc_start_main +
    245

    9    tmpw5vdbvpb                        0x0000559c61977019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    var last = 0\n\
    \    for element in l {\n        if element > last {\n            monotonic =\
    \ false\n        }\n        last = element\n    }\n    return monotonic\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpnel3kdt1/tmpnel3kdt1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96950efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9694de6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9694de6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9694de57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnel3kdt1                        0x0000563d72dde472 <unavailable> + 5234

    5    libc.so.6                          0x00002b96952db460 __libc_start_main +
    245

    6    tmpnel3kdt1                        0x0000563d72dde0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    var o = n - 1\n  \
    \  var p = o\n    var q = o\n    var r = o\n    var s = o\n    var t = o\n   \
    \ var u = o\n    var v = o\n    var w = o\n    var x = o\n    var y = o\n    var\
    \ z = o\n    var a = o\n    var b = o\n    var c = o\n    var d = o\n    var e\
    \ = o\n    var f = o\n    var g = o\n    var h = o\n    var i = o\n    var j =\
    \ o\n    var k = o\n    var l = o\n    var m = o\n    var n = o\n    var o = o\n\
    \    var p = o\n    var q = o\n    var r = o\n    var s = o\n    var t = o\n \
    \   var u = o\n    var v = o\n    var w = o\n    var x = o\n    var y = o\n  \
    \  var z = o\n    var a = o\n    var b = o\n    var c = o\n    var d = o\n   \
    \ var e = o\n    var f = o\n    var g = o\n    var h = o\n    var i = o\n    var\
    \ j = o\n    var k = o\n    var l = o\n    var m = o\n    var n = o\n    var o\
    \ = o\n    var p = o\n    var q = o\n    var r = o\n    var s = o\n    var t =\
    \ o\n    var u = o\n    var v = o\n    var w = o\n    var x = o\n    var y = o\n\
    \    var z = o\n    var a = o\n    var b = o\n    var c = o\n    var d = o\n \
    \   var e = o\n    var f = o\n    var g = o\n    var h = o\n    var i = o\n  \
    \  var j = o\n    var k = o\n    var l = o\n    var m = o\n    var n = o\n   \
    \ var o = o\n    var p = o\n    var q = o\n    var r = o\n    var s = o\n    var\
    \ t = o\n    var u = o\n    var v = o\n    var w = o\n    var x = o\n    var y\
    \ = o\n    var z = o\n    var a = o\n    var b = o\n    var c = o\n    var d =\
    \ o\n    var e = o\n    var f = o\n    var g = o\n    var h = o\n    var i = o\n\
    \    var j = o\n    var k = o\n    var l = o\n    var m = o\n    var n = o\n \
    \   var o = o\n    var p = o\n    var q = o\n    var r = o\n    var s = o\n  \
    \  var t = o\n    var u = o\n    var v = o\n    var w = o\n    var x = o\n   \
    \ var y = o\n    var z = o\n    var a = o\n    var b = o\n    var c = o\n    var\
    \ d = o\n    var e = o\n    var f = o\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb92_2odc.swift:9:15: error: value of type 'Int' has no member 'count'\n\
    \    var n = l.count\n            ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else if x > l[l.count-1] {\n            isIncreasing = false\n\
    \        } else {\n            break\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpv59iv0cj/tmpv59iv0cj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68d0e22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68d0b19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68d0b19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68d0b187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv59iv0cj                        0x000056037b05c6ae <unavailable> + 5806

    5    libc.so.6                          0x00002b68d100e460 __libc_start_main +
    245

    6    tmpv59iv0cj                        0x000056037b05c189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var prev = 0\n    for x in l {\n        if prev < x {\n          \
    \  return false\n        }\n        prev = x\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsjy9gmmg/tmpsjy9gmmg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b860d994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b860d68bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b860d68b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b860d68a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjy9gmmg                        0x000055a6afb844c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b860db80460 __libc_start_main +
    245

    6    tmpsjy9gmmg                        0x000055a6afb84129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            return\
    \ true\n        }\n        if l[i] > l[k] {\n            return false\n      \
    \  }\n        i += 1\n        j -= 1\n        k += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp7sqr5ec0/tmp7sqr5ec0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ac76e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ac73ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ac73dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ac73dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sqr5ec0                        0x0000562539e1e53e <unavailable> + 5438

    5    libc.so.6                          0x00002b5ac78d2460 __libc_start_main +
    245

    6    tmp7sqr5ec0                        0x0000562539e1e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    for i in 0..<l.count {\n        if l[i-1] > l[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d216a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d2139b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4d2139b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4d2139b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4d2139abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4d2119ae83 <unavailable> + 188035

    6    tmp9qolj0x6                        0x000055864accbcd5 <unavailable> + 7381

    7    tmp9qolj0x6                        0x000055864accb4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b4d21890460 __libc_start_main +
    245

    9    tmp9qolj0x6                        0x000055864accb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    var n = j\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = j\n    var s = j\n    var t = j\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = j\n    var y = j\n    var z = j\n  \
    \  var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n   \
    \ var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var\
    \ k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p\
    \ = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u =\
    \ j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n\
    \    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n \
    \   var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n  \
    \  var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n   \
    \ var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var\
    \ u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z\
    \ = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e =\
    \ j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n\
    \    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n \
    \   var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n  \
    \  var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n   \
    \ var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var\
    \ e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j\
    \ = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o =\
    \ j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n\
    \    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n \
    \   var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n  \
    \  var e = j\n    var f = j\n    var g = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4eqfu1cn.swift:131:12: error: expected initial value after '='\n\
    \    var g = \n           ^\n/tmp/tmp4eqfu1cn.swift:29:9: error: invalid redeclaration\
    \ of 'i'\n    var i = j\n        ^\n/tmp/tmp4eqfu1cn.swift:4:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmp4eqfu1cn.swift:30:9: error:\
    \ invalid redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmp4eqfu1cn.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        if l[i] > l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpirfqxynx/tmpirfqxynx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94199eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94196e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94196e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94196e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirfqxynx                        0x000055bf355e73b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9419bda460 __libc_start_main +
    245

    6    tmpirfqxynx                        0x000055bf355e7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n     \
    \   if isIncreasing && isDecreasing {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfoyggprq/tmpfoyggprq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18228c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18225bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18225bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18225be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoyggprq                        0x00005621cc0c84c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b1822ab4460 __libc_start_main +
    245

    6    tmpfoyggprq                        0x00005621cc0c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if isDecreasing {\n          \
    \  if l[idx] > l[idx+1] {\n                isDecreasing = false\n            }\n\
    \        } else {\n            if l[idx] < l[idx+1] {\n                isDecreasing\
    \ = true\n            }\n        }\n        if isIncreasing {\n            if\
    \ l[idx] < l[idx+1] {\n                isIncreasing = false\n            }\n \
    \       } else {\n            if l[idx] > l[idx+1] {\n                isIncreasing\
    \ = true\n            }\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b4631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b4328561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b77b4328286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b77b432813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b77b4327bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b77b4127e83 <unavailable> + 188035

    6    tmpbrz307ri                        0x0000559723ee4d3e <unavailable> + 7486

    7    tmpbrz307ri                        0x0000559723ee44cd <unavailable> + 5325

    8    libc.so.6                          0x00002b77b481d460 __libc_start_main +
    245

    9    tmpbrz307ri                        0x0000559723ee41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var prev = 0\n    for x in l {\n     \
    \   if prev < x {\n            return false\n        }\n        prev = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj8t_shd0/tmpj8t_shd0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a54273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a53f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a53f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a53f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8t_shd0                        0x000055aa25e07472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2a5445f460 __libc_start_main +
    245

    6    tmpj8t_shd0                        0x000055aa25e070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isIncreasing =\
    \ false\n        }\n        if x > l[l.count-1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpuxg_36no/tmpuxg_36no.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e3b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e3865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e3865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e38647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxg_36no                        0x00005639c50366ae <unavailable> + 5806

    5    libc.so.6                          0x00002b64e3d5a460 __libc_start_main +
    245

    6    tmpuxg_36no                        0x00005639c5036189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx - 1] {\n            monotonic = false\n       \
    \     break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b854ce9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b854cb95561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b854cb95286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b854cb9513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b854cb94bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b854c994e83 <unavailable> + 188035

    6    tmpdark665t                        0x00005584b5540cf6 <unavailable> + 7414

    7    tmpdark665t                        0x00005584b55404cd <unavailable> + 5325

    8    libc.so.6                          0x00002b854d08a460 __libc_start_main +
    245

    9    tmpdark665t                        0x00005584b55401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] > l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n        if isDecreasing && isIncreasing {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afd4a71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4a416561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afd4a416286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afd4a41613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afd4a415bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afd4a215e83 <unavailable> + 188035

    6    tmp3zmlrqz9                        0x000055d5d4085d10 <unavailable> + 7440

    7    tmp3zmlrqz9                        0x000055d5d40854cd <unavailable> + 5325

    8    libc.so.6                          0x00002afd4a90b460 __libc_start_main +
    245

    9    tmp3zmlrqz9                        0x000055d5d40851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = l[0]\n    while i < j {\n        if l[i] < k {\n            i += 1\n\
    \        } else if l[j] > k {\n            j -= 1\n        } else {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp7t77ueuz/tmp7t77ueuz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec7fc03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec7f8fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec7f8fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec7f8f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t77ueuz                        0x000055a07325d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aec7fdef460 __libc_start_main +
    245

    6    tmp7t77ueuz                        0x000055a07325d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        if l[i] > l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpirfqxynx/tmpirfqxynx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94199eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94196e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94196e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94196e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirfqxynx                        0x000055bf355e73b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9419bda460 __libc_start_main +
    245

    6    tmpirfqxynx                        0x000055bf355e7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ l[0]\n    while i < l.count {\n        if l[i] < k {\n            j = i\n  \
    \          k = l[i]\n        }\n        i += 1\n    }\n    return k > l[j]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpo7lsz9j_/tmpo7lsz9j_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260eed4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b260ebcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b260ebcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b260ebca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7lsz9j_                        0x0000556cef04d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b260f0c0460 __libc_start_main +
    245

    6    tmpo7lsz9j_                        0x0000556cef04d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9r4mtq0n/tmp9r4mtq0n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b814cb91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b814c888b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b814c888988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b814c8877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r4mtq0n                        0x0000560a2dbf23b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b814cd7d460 __libc_start_main +
    245

    6    tmp9r4mtq0n                        0x0000560a2dbf2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var m = l.count\n    while i < m && j < m {\n        if l[i] < l[j] {\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            j += 1\n   \
    \     } else {\n            k += 1\n        }\n    }\n    return i == m || j ==\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) ==\
    \ true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1,\
    \ 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028746
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isIncreasing =\
    \ false\n        }\n        if x > l[l.count-1] {\n            isDecreasing =\
    \ false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpuxg_36no/tmpuxg_36no.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e3b6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e3865b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e3865988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e38647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxg_36no                        0x00005639c50366ae <unavailable> + 5806

    5    libc.so.6                          0x00002b64e3d5a460 __libc_start_main +
    245

    6    tmpuxg_36no                        0x00005639c5036189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isIncreasing = false\n        } else {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42aaf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42a7e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad42a7e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad42a7e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad42a7e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad42a5e6e83 <unavailable> + 188035

    6    tmpe4qvsyyk                        0x000055da7cb66d10 <unavailable> + 7440

    7    tmpe4qvsyyk                        0x000055da7cb664cd <unavailable> + 5325

    8    libc.so.6                          0x00002ad42acdc460 __libc_start_main +
    245

    9    tmpe4qvsyyk                        0x000055da7cb661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[k] {\n            return true\n      \
    \  }\n        i += 1\n        j -= 1\n        k += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpc2k9fvf1/tmpc2k9fvf1.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc35e4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc35b42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc35b42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc35b417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2k9fvf1                        0x00005564721cd53e <unavailable> + 5438

    5    libc.so.6                          0x00002acc36037460 __libc_start_main +
    245

    6    tmpc2k9fvf1                        0x00005564721cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ i > x {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpemv0zc05/tmpemv0zc05.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab422ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4227c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4227c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4227c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemv0zc05                        0x00005612acf795fe <unavailable> + 5630

    5    libc.so.6                          0x00002ab422cbd460 __libc_start_main +
    245

    6    tmpemv0zc05                        0x00005612acf790d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o\
    \ = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n \
    \   var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var f = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp36xhc923.swift:78:12: error: expected initial value after '='\n\
    \    var f = \n           ^\n/tmp/tmp36xhc923.swift:29:9: error: invalid redeclaration\
    \ of 'i'\n    var i = Int64(l.count)\n        ^\n/tmp/tmp36xhc923.swift:4:9: note:\
    \ 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmp36xhc923.swift:30:9:\
    \ error: invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n\
    /tmp/tmp36xhc923.swift:5:9: note: 'j' previously declared here\n    var j = l.count-1\n\
    \        ^\n/tmp/tmp36xhc923.swift:31:9: error: invalid redeclaration of 'k'\n\
    \    var k = Int64(l.count)\n        ^\n/tmp/tmp36xhc923.swift:6:9: note: 'k'\
    \ previously declared here\n    var k = j\n        ^\n/tmp/tmp36xhc923.swift:33:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var m = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:34:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var n = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp36xhc923.swift:35:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var o = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:36:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var p = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:37:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var q = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp36xhc923.swift:38:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var r = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:39:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var s = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:40:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var t = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp36xhc923.swift:41:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var u = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:42:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var v = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp36xhc923.swift:43:21: error: "
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var monotonic = false\n    while i < j {\n        if l[i] <\
    \ l[j] {\n            i += 1\n            if i == k {\n                monotonic\
    \ = true\n            }\n        } else {\n            j -= 1\n            if\
    \ j == k {\n                monotonic = true\n            }\n        }\n     \
    \   k += 1\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpdvwjubyt/tmpdvwjubyt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d093ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d0635b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73d0635988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73d06347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvwjubyt                        0x00005635c302e3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b73d0b2a460 __libc_start_main +
    245

    6    tmpdvwjubyt                        0x00005635c302e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    while i < j {\n        if l[i] < l[j] {\n\
    \            if l[i] < l[k] {\n                if l[i] < l[m] {\n            \
    \        return true\n                }\n                m = k\n            }\
    \ else {\n                if l[k] < l[m] {\n                    return true\n\
    \                }\n                m = k\n            }\n        } else {\n \
    \           if l[j] < l[k] {\n                if l[j] < l[m] {\n             \
    \       return true\n                }\n                m = k\n            } else\
    \ {\n                if l[k] < l[m] {\n                    return true\n     \
    \           }\n                m = k\n            }\n        }\n        i += 1\n\
    \        j -= 1\n        k += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmppgqd4hnn/tmppgqd4hnn.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bc5e31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bc5b28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bc5b28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bc5b277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgqd4hnn                        0x000055dc0ebbf53e <unavailable> + 5438

    5    libc.so.6                          0x00002b1bc601d460 __libc_start_main +
    245

    6    tmppgqd4hnn                        0x000055dc0ebbf019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n\
    \    var p = Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s =\
    \ Int64(0)\n    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n\
    \    var w = Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z =\
    \ Int64(0)\n    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n\
    \    var d = Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g =\
    \ Int64(0)\n    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n\
    \    var k = Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n =\
    \ Int64(0)\n    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n\
    \    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n    var u =\
    \ Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x = Int64(0)\n\
    \    var y = Int64(0)\n    var z = Int64(0)\n    var a = Int64(0)\n    var b =\
    \ Int64(0)\n    var c = Int64(0)\n    var d = Int64(0)\n    var e = Int64(0)\n\
    \    var f = Int64(0)\n    var g = Int64(0)\n    var h = Int64(0)\n    var i =\
    \ Int64(0)\n    var j = Int64(0)\n    var k = Int64(0)\n    var l = Int64(0)\n\
    \    var m = Int64(0)\n    var n = Int64(0)\n    var o = Int64(0)\n    var p =\
    \ Int64(0)\n    var q = Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n\
    \    var t = Int64(0)\n    var u = Int64(0)\n    var v = Int64(0)\n    var w =\
    \ Int64(0)\n    var x = Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n\
    \    var a = Int64(0)\n    var b = Int64(0)\n    var c = Int64(0)\n    var d =\
    \ Int64(0)\n    var e = Int64(0)\n    var f = Int64(0)\n    var g = Int64(0)\n\
    \    var h = Int64(0)\n    var i = Int64(0)\n    var j = Int64(0)\n    var k =\
    \ Int64(0)\n    var l = Int64(0)\n    var m = Int64(0)\n    var n = Int64(0)\n\
    \    var o = Int64(0)\n    var p = Int64(0)\n    var q = Int64(0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4tamz6yj.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp4tamz6yj.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmp4tamz6yj.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp4tamz6yj.swift:33:9:\
    \ error: invalid redeclaration of 'l'\n    var l = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp4tamz6yj.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:36:9:\
    \ error: invalid redeclaration of 'o'\n    var o = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:39:9:\
    \ error: invalid redeclaration of 'r'\n    var r = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:40:9:\
    \ error: invalid redeclaration of 's'\n    var s = Int64(0)\n        ^\n/tmp/tmp4tamz6yj.swift:14:9:\
    \ note: 's' previously declared here\n    var s = "
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpx00gneph/tmpx00gneph.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1119d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1119a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1119a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1119a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx00gneph                        0x0000558c25004542 <unavailable> + 5442

    5    libc.so.6                          0x00002b1119f37460 __libc_start_main +
    245

    6    tmpx00gneph                        0x0000558c250041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if x == last {\n            return false\n        }\n        last = last\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphdyiowos.swift:9:14: error: assigning a variable to itself\n  \
    \      last = last\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpotgsfse9/tmpotgsfse9.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6575dcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6575ac1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6575ac1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6575ac07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotgsfse9                        0x000055acd26e03b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b6575fb6460 __libc_start_main +
    245

    6    tmpotgsfse9                        0x000055acd26e0019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] > l[j] {\n            return\
    \ false\n        }\n        if l[i] < l[k] {\n            return true\n      \
    \  }\n        i += 1\n        j -= 1\n        k += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9bjrqiuj/tmp9bjrqiuj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b557a767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b557a45eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b557a45e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b557a45d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bjrqiuj                        0x000055e36e70153e <unavailable> + 5438

    5    libc.so.6                          0x00002b557a953460 __libc_start_main +
    245

    6    tmp9bjrqiuj                        0x000055e36e701019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n  \
    \  var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpri7ovyzy.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpri7ovyzy.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmpri7ovyzy.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:33:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:36:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:39:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:40:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpri7ovyzy.s"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ v < l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmmisy9fy/tmpmmisy9fy.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3833a38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b383372fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b383372f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b383372e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmisy9fy                        0x000056360d37b64e <unavailable> + 5710

    5    libc.so.6                          0x00002b3833c24460 __libc_start_main +
    245

    6    tmpmmisy9fy                        0x000056360d37b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for v in l {\n        if isDecreasing {\n            if v < v {\n\
    \                isDecreasing = false\n            }\n        } else {\n     \
    \       if v > v {\n                isDecreasing = true\n            }\n     \
    \   }\n        if isIncreasing {\n            if v > v {\n                isIncreasing\
    \ = false\n            }\n        } else {\n            if v < v {\n         \
    \       isIncreasing = true\n            }\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpp6bxs_3j/tmpp6bxs_3j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3a8bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3a88acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3a88ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3a88ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6bxs_3j                        0x00005573179155fe <unavailable> + 5630

    5    libc.so.6                          0x00002ac3a8da1460 __libc_start_main +
    245

    6    tmpp6bxs_3j                        0x00005573179150d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ x > l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpy2w5mjd8/tmpy2w5mjd8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc3f5cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3f2c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3f2c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3f2c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2w5mjd8                        0x000055a4194f964e <unavailable> + 5710

    5    libc.so.6                          0x00002abc3f7ba460 __libc_start_main +
    245

    6    tmpy2w5mjd8                        0x000055a4194f9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var lt = true\n    var lte = false\n    var gt = false\n  \
    \  var gte = false\n    while i < j {\n        if l[i] < l[j] {\n            if\
    \ lte {\n                return false\n            }\n            lt = true\n\
    \            i += 1\n        } else if l[i] > l[j] {\n            if gte {\n \
    \               return false\n            }\n            gt = true\n         \
    \   j -= 1\n        } else {\n            if lte {\n                lte = true\n\
    \                i += 1\n            } else {\n                gte = true\n  \
    \              j -= 1\n            }\n        }\n    }\n    if lt == false {\n\
    \        return true\n    }\n    if gt == false {\n        return false\n    }\n\
    \    if lte {\n        return gt\n    } else {\n        return gte\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmprlutpflu/tmprlutpflu.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad27e672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad27e369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad27e369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad27e3687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlutpflu                        0x00005560caa663b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ad27e85e460 __libc_start_main +
    245

    6    tmprlutpflu                        0x00005560caa66019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ x > l[i-1] {\n            return false\n        }\n        i += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1ff172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fee69561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba1fee69286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba1fee6913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba1fee68bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba1fec68e83 <unavailable> + 188035

    6    tmpeuyi7alm                        0x000055813c2e8c04 <unavailable> + 7172

    7    tmpeuyi7alm                        0x000055813c2e844d <unavailable> + 5197

    8    libc.so.6                          0x00002ba1ff35e460 __libc_start_main +
    245

    9    tmpeuyi7alm                        0x000055813c2e8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < 0 {\n            isDecreasing = false\n\
    \        } else {\n            isIncreasing = false\n        }\n        if isIncreasing\
    \ && isDecreasing {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpqhw4a4xk/tmpqhw4a4xk.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d20fedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d20ce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d20ce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d20ce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhw4a4xk                        0x0000556c27f29472 <unavailable> + 5234

    5    libc.so.6                          0x00002b5d211d9460 __libc_start_main +
    245

    6    tmpqhw4a4xk                        0x0000556c27f290d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var prev = 0\n    for x in l {\n     \
    \   if prev < x {\n            return false\n        }\n        prev = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj8t_shd0/tmpj8t_shd0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a54273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a53f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a53f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a53f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8t_shd0                        0x000055aa25e07472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2a5445f460 __libc_start_main +
    245

    6    tmpj8t_shd0                        0x000055aa25e070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n  \
    \  var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpri7ovyzy.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpri7ovyzy.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpri7ovyzy.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmpri7ovyzy.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpri7ovyzy.swift:33:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpri7ovyzy.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpri7ovyzy.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpri7ovyzy.swift:36:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpri7ovyzy.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpri7ovyzy.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpri7ovyzy.swift:39:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpri7ovyzy.swift:40:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpri7ovyzy.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpri7ovyzy.s"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n     \
    \   if isIncreasing && isDecreasing {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfoyggprq/tmpfoyggprq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18228c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18225bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18225bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18225be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoyggprq                        0x00005621cc0c84c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b1822ab4460 __libc_start_main +
    245

    6    tmpfoyggprq                        0x00005621cc0c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] > l[j] {\n            return false\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp1btedubq/tmp1btedubq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1dc6fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1dc3f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1dc3f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1dc3f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1btedubq                        0x0000559c947ca621 <unavailable> + 5665

    5    libc.so.6                          0x00002ae1dc8e6460 __libc_start_main +
    245

    6    tmp1btedubq                        0x0000559c947ca019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var\
    \ o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var a = Int64(l.count)\n    var b = Int64(l.count)\n    var c = Int64(l.count)\n\
    \    var d = Int64(l.count)\n    var e = Int64(l.count)\n    var f = Int64(l.count)\n\
    \    var g = Int64(l.count)\n    var h = Int64(l.count)\n    var i = Int64(l.count)\n\
    \    var j = Int64(l.count)\n    var k = Int64(l.count)\n    var l = Int64(l.count)\n\
    \    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var o = Int64(l.count)\n\
    \    var p = Int64(l.count)\n    var q = Int64(l.count)\n    var r = Int64(l.count)\n\
    \    var s = Int64(l.count)\n    var t = Int64(l.count)\n    var u = Int64(l.count)\n\
    \    var v = Int64(l.count)\n    var w = Int64(l.count)\n    var x = Int64(l.count)\n\
    \    var y = Int64(l.count)\n    var z = Int64(l.count)\n    var a = Int64(l.count)\n\
    \    var b = Int64(l.count)\n    var c = Int64(l.count)\n    var d = Int64(l.count)\n\
    \    var e = Int64(l.count)\n    var f = Int64(l.count)\n    var g = Int64(l.count)\n\
    \    var h = Int64(l.count)\n    var i = Int64(l.count)\n    var j = Int64(l.count)\n\
    \    var k = Int64(l.count)\n    var l = Int64(l.count)\n    var m = Int64(l.count)\n\
    \    var n = Int64(l.count)\n    var o = Int64(l.count)\n    var p = Int64(l.count)\n\
    \    var q = Int64(l.count)\n    var r = Int64(l.count)\n    var s = Int64(l.count)\n\
    \    var t = Int64(l.count)\n    var u = Int64(l.count)\n    var v = Int64(l.count)\n\
    \    var w = Int64(l.count)\n    var x = Int64(l.count)\n    var y = Int64(l.count)\n\
    \    var z = Int64(l.count)\n    var a = Int64(l.count)\n    var b = Int64(l.count)\n\
    \    var c = Int64(l.count)\n    var d = Int64(l.count)\n    var e = Int64(l.count)\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8cpwkl6v.swift:78:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8cpwkl6v.swift:29:9: error: invalid redeclaration of 'i'\n    var\
    \ i = Int64(l.count)\n        ^\n/tmp/tmp8cpwkl6v.swift:4:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmp8cpwkl6v.swift:30:9: error:\
    \ invalid redeclaration of 'j'\n    var j = Int64(l.count)\n        ^\n/tmp/tmp8cpwkl6v.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = l.count-1\n        ^\n/tmp/tmp8cpwkl6v.swift:31:9:\
    \ error: invalid redeclaration of 'k'\n    var k = Int64(l.count)\n        ^\n\
    /tmp/tmp8cpwkl6v.swift:6:9: note: 'k' previously declared here\n    var k = j-1\n\
    \        ^\n/tmp/tmp8cpwkl6v.swift:33:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var m = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:34:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var n = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:35:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var o = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:36:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var p = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:37:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var q = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:38:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var r = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:39:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var s = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:40:21:\
    \ error: value of type 'Int64' has no member 'count'\n    var t = Int64(l.count)\n\
    \                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:41:21: error: value of type\
    \ 'Int64' has no member 'count'\n    var u = Int64(l.count)\n                \
    \  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:42:21: error: value of type 'Int64' has no\
    \ member 'count'\n    var v = Int64(l.count)\n                  ~ ^~~~~\n/tmp/tmp8cpwkl6v.swift:43:21:\
    \ error: value of type 'Int64' h"
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    var o = n - 1\n  \
    \  var p = 0\n    var q = 0\n    var r = 1\n    var s = l[0]\n    var t = l[1]\n\
    \    var u = l[0]\n    var v = l[1]\n    var w = l[0]\n    var x = l[1]\n    var\
    \ y = l[0]\n    var z = l[1]\n    var aa = l[0]\n    var ab = l[1]\n    var ac\
    \ = l[0]\n    var ad = l[1]\n    var ae = l[0]\n    var af = l[1]\n    var ag\
    \ = l[0]\n    var ah = l[1]\n    var ai = l[0]\n    var aj = l[1]\n    var ak\
    \ = l[0]\n    var al = l[1]\n    var am = l[0]\n    var an = l[1]\n    var ao\
    \ = l[0]\n    var ap = l[1]\n    var aq = l[0]\n    var ar = l[1]\n    var as\
    \ = l[0]\n    var at = l[1]\n    var au = l[0]\n    var av = l[1]\n    var aw\
    \ = l[0]\n    var ax = l[1]\n    var ay = l[0]\n    var az = l[1]\n    var ba\
    \ = l[0]\n    var bb = l[1]\n    var bc = l[0]\n    var bd = l[1]\n    var be\
    \ = l[0]\n    var bf = l[1]\n    var bg = l[0]\n    var bh = l[1]\n    var bi\
    \ = l[0]\n    var bj = l[1]\n    var bk = l[0]\n    var bl = l[1]\n    var bm\
    \ = l[0]\n    var bn = l[1]\n    var bo = l[0]\n    var bp = l[1]\n    var bq\
    \ = l[0]\n    var br = l[1]\n    var bs = l[0]\n    var bt = l[1]\n    var bu\
    \ = l[0]\n    var bv = l[1]\n    var bw = l[0]\n    var bx = l[1]\n    var by\
    \ = l[0]\n    var bz = l[1]\n    var ca = l[0]\n    var cb = l[1]\n    var cc\
    \ = l[0]\n    var cd = l[1]\n    var ce = l[0]\n    var cf = l[1]\n    var cg\
    \ = l[0]\n    var ch = l[1]\n    var ci = l[0]\n    var cj = l[1]\n    var ck\
    \ = l[0]\n    var cl = l[1]\n    var cm = l[0]\n    var cn = l[1]\n    var co\
    \ = l[0]\n    var cp = l[1]\n    var cq = l[0]\n    var cr = l[1]\n    var cs\
    \ = l[0]\n    var ct = l[1]\n    var cu = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjxo47oja.swift:40:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = l[0]\n        ^\n/tmp/tmpjxo47oja.swift:40:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = l[0]\n       \
    \ ^~\n        `as`\n/tmp/tmpjxo47oja.swift:94:13: error: expected initial value\
    \ after '='\n    var cu = \n            ^\n/tmp/tmpjxo47oja.swift:9:15: error:\
    \ value of type 'Int' has no member 'count'\n    var n = l.count\n           \
    \ ~ ^~~~~\n/tmp/tmpjxo47oja.swift:14:14: error: value of type 'Int' has no subscripts\n\
    \    var s = l[0]\n            ~^\n/tmp/tmpjxo47oja.swift:15:14: error: value\
    \ of type 'Int' has no subscripts\n    var t = l[1]\n            ~^\n/tmp/tmpjxo47oja.swift:16:14:\
    \ error: value of type 'Int' has no subscripts\n    var u = l[0]\n           \
    \ ~^\n/tmp/tmpjxo47oja.swift:17:14: error: value of type 'Int' has no subscripts\n\
    \    var v = l[1]\n            ~^\n/tmp/tmpjxo47oja.swift:18:14: error: value\
    \ of type 'Int' has no subscripts\n    var w = l[0]\n            ~^\n/tmp/tmpjxo47oja.swift:19:14:\
    \ error: value of type 'Int' has no subscripts\n    var x = l[1]\n           \
    \ ~^\n/tmp/tmpjxo47oja.swift:20:14: error: value of type 'Int' has no subscripts\n\
    \    var y = l[0]\n            ~^\n/tmp/tmpjxo47oja.swift:21:14: error: value\
    \ of type 'Int' has no subscripts\n    var z = l[1]\n            ~^\n/tmp/tmpjxo47oja.swift:22:15:\
    \ error: value of type 'Int' has no subscripts\n    var aa = l[0]\n          \
    \   ~^\n/tmp/tmpjxo47oja.swift:23:15: error: value of type 'Int' has no subscripts\n\
    \    var ab = l[1]\n             ~^\n/tmp/tmpjxo47oja.swift:24:15: error: value\
    \ of type 'Int' has no subscripts\n    var ac = l[0]\n             ~^\n/tmp/tmpjxo47oja.swift:25:15:\
    \ error: value of type 'Int' has no subscripts\n    var ad = l[1]\n          \
    \   ~^\n/tmp/tmpjxo47oja.swift:26:15: error: value of type 'Int' has no subscripts\n\
    \    var ae = l[0]\n             ~^\n/tmp/tmpjxo47oja.swift:27:15: error: value\
    \ of type 'Int' has no subscripts\n    var af = l[1]\n             ~^\n/tmp/tmpjxo47oja.swift:28:15:\
    \ error: value of type 'Int' has no subscripts\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = 0\n    while i < j {\n        if l[i] < l[j] {\n            k = i\n\
    \        } else {\n            k = j\n        }\n        i += 1\n        j -=\
    \ 1\n    }\n    return k == i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpshpn9w4x/tmpshpn9w4x.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade7752ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade77225b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade77225988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade772247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshpn9w4x                        0x0000556fa60643b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ade7771a460 __libc_start_main +
    245

    6    tmpshpn9w4x                        0x0000556fa6064019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n     \
    \   if isDecreasing && isIncreasing {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpmw8bf6s8/tmpmw8bf6s8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae74f355c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae74f04cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae74f04c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae74f04b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw8bf6s8                        0x0000558aba4fd4c2 <unavailable> + 5314

    5    libc.so.6                          0x00002ae74f541460 __libc_start_main +
    245

    6    tmpmw8bf6s8                        0x0000558aba4fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        if l[i] > l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpirfqxynx/tmpirfqxynx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94199eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94196e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94196e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94196e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirfqxynx                        0x000055bf355e73b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9419bda460 __libc_start_main +
    245

    6    tmpirfqxynx                        0x000055bf355e7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = l.count\n    while i < l {\n        if l[j] < l[k] {\n      \
    \      return false\n        }\n        if l[j] > l[k] {\n            k = j\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe0dlzg2f.swift:9:13: error: value of type 'Int' has no subscripts\n\
    \        if l[j] < l[k] {\n           ~^\n/tmp/tmpe0dlzg2f.swift:9:20: error:\
    \ value of type 'Int' has no subscripts\n        if l[j] < l[k] {\n          \
    \        ~^\n/tmp/tmpe0dlzg2f.swift:12:13: error: value of type 'Int' has no subscripts\n\
    \        if l[j] > l[k] {\n           ~^\n/tmp/tmpe0dlzg2f.swift:12:20: error:\
    \ value of type 'Int' has no subscripts\n        if l[j] > l[k] {\n          \
    \        ~^\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] > l[idx+1] {\n     \
    \       isDecreasing = false\n        } else {\n            isIncreasing = false\n\
    \        }\n        if isDecreasing && isIncreasing {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afd4a71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd4a416561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afd4a416286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afd4a41613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afd4a415bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afd4a215e83 <unavailable> + 188035

    6    tmp3zmlrqz9                        0x000055d5d4085d10 <unavailable> + 7440

    7    tmp3zmlrqz9                        0x000055d5d40854cd <unavailable> + 5325

    8    libc.so.6                          0x00002afd4a90b460 __libc_start_main +
    245

    9    tmp3zmlrqz9                        0x000055d5d40851a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    while i < j {\n        if l[i] < l[k] {\n            i\
    \ += 1\n        } else if l[i] > l[k] {\n            j -= 1\n        } else {\n\
    \            return true\n        }\n        if i == k {\n            return false\n\
    \        }\n        if l[i] < l[k] {\n            k = j\n        } else {\n  \
    \          i = k\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp5y_vr9fe/tmp5y_vr9fe.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd60b53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd6084ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd6084a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd608497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5y_vr9fe                        0x000055ea8f75b3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002abd60d3f460 __libc_start_main +
    245

    6    tmp5y_vr9fe                        0x000055ea8f75b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for idx in 0..<l.count {\n        if l[idx] < l[idx+1] {\n     \
    \       isIncreasing = false\n        } else {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad42aaf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad42a7e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad42a7e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad42a7e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad42a7e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad42a5e6e83 <unavailable> + 188035

    6    tmpe4qvsyyk                        0x000055da7cb66d10 <unavailable> + 7440

    7    tmpe4qvsyyk                        0x000055da7cb664cd <unavailable> + 5325

    8    libc.so.6                          0x00002ad42acdc460 __libc_start_main +
    245

    9    tmpe4qvsyyk                        0x000055da7cb661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx+1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpx00gneph/tmpx00gneph.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1119d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1119a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1119a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1119a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx00gneph                        0x0000558c25004542 <unavailable> + 5442

    5    libc.so.6                          0x00002b1119f37460 __libc_start_main +
    245

    6    tmpx00gneph                        0x0000558c250041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n\
    \        } else if l[i] > l[j] {\n            j -= 1\n        } else {\n     \
    \       i += 1\n            j -= 1\n        }\n        if i < k {\n          \
    \  if l[i] < l[k] {\n                k = i\n            }\n        }\n    }\n\
    \    return j >= i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3eefsgnd/tmp3eefsgnd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ad6f85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ad6c7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ad6c7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ad6c7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3eefsgnd                        0x000056102c81753e <unavailable> + 5438

    5    libc.so.6                          0x00002b8ad7171460 __libc_start_main +
    245

    6    tmp3eefsgnd                        0x000056102c817019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ while i < j {\n        if l[i] < l[j] {\n            return false\n        }\n\
    \        if l[i] > l[j] {\n            return true\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpirfqxynx/tmpirfqxynx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94199eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94196e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94196e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94196e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirfqxynx                        0x000055bf355e73b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b9419bda460 __libc_start_main +
    245

    6    tmpirfqxynx                        0x000055bf355e7019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < x {\n            isDecreasing = false\n\
    \        } else {\n            isIncreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpb4p6g5zj/tmpb4p6g5zj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c5e210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c5df07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c5df07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c5df067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4p6g5zj                        0x0000561834d0d5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b7c5e3fc460 __libc_start_main +
    245

    6    tmpb4p6g5zj                        0x0000561834d0d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = j\n    var n = j\n    var o = j\n    var p = j\n\
    \    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u = j\n \
    \   var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n  \
    \  var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n   \
    \ var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n    var\
    \ k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n    var p\
    \ = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var u =\
    \ j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z = j\n\
    \    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e = j\n \
    \   var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n  \
    \  var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n   \
    \ var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n    var\
    \ u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n    var z\
    \ = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var e =\
    \ j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j = j\n\
    \    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o = j\n \
    \   var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n  \
    \  var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n   \
    \ var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n    var\
    \ e = j\n    var f = j\n    var g = j\n    var h = j\n    var i = j\n    var j\
    \ = j\n    var k = j\n    var l = j\n    var m = j\n    var n = j\n    var o =\
    \ j\n    var p = j\n    var q = j\n    var r = j\n    var s = j\n    var t = j\n\
    \    var u = j\n    var v = j\n    var w = j\n    var x = j\n    var y = j\n \
    \   var z = j\n    var a = j\n    var b = j\n    var c = j\n    var d = j\n  \
    \  var e = j\n    var f = j\n    var g = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpis9i5n4z.swift:131:12: error: expected initial value after '='\n\
    \    var g = \n           ^\n/tmp/tmpis9i5n4z.swift:29:9: error: invalid redeclaration\
    \ of 'i'\n    var i = j\n        ^\n/tmp/tmpis9i5n4z.swift:4:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmpis9i5n4z.swift:30:9: error:\
    \ invalid redeclaration of 'j'\n    var j = j\n        ^\n/tmp/tmpis9i5n4z.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = l.count - 1\n        ^\n"
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var prev = 0\n    for x in l {\n     \
    \   if prev < x {\n            return false\n        }\n        prev = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj8t_shd0/tmpj8t_shd0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a54273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a53f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a53f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a53f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8t_shd0                        0x000055aa25e07472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2a5445f460 __libc_start_main +
    245

    6    tmpj8t_shd0                        0x000055aa25e070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    while i < l.count {\n        if l[i] < l[j] {\n            k = i\n  \
    \      } else {\n            j = i\n        }\n        i += 1\n    }\n    return\
    \ k == i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpr2ndndd6/tmpr2ndndd6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b937b415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b937b10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b937b10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b937b10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2ndndd6                        0x0000562cd55cd3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b937b601460 __libc_start_main +
    245

    6    tmpr2ndndd6                        0x0000562cd55cd019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for e in l {\n        if\
    \ e < l[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpt9wko8xl/tmpt9wko8xl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2368083c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2367d7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2367d7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2367d797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9wko8xl                        0x00005568b405564e <unavailable> + 5710

    5    libc.so.6                          0x00002b236826f460 __libc_start_main +
    245

    6    tmpt9wko8xl                        0x00005568b4055129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if x == last {\n            return false\n        }\n        last = last\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphdyiowos.swift:9:14: error: assigning a variable to itself\n  \
    \      last = last\n        ~~~~ ^ ~~~~\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    var m = 1\n    var n = l.count\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 1\n    var s = 1\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae\
    \ = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var\
    \ aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n   \
    \ var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n\
    \    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax =\
    \ 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc\
    \ = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var\
    \ bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n   \
    \ var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n\
    \    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv =\
    \ 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca\
    \ = 0\n    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var\
    \ cf = 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n   \
    \ var ck = 0\n    var cl = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n\
    \    var cp = 0\n    var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct =\
    \ 0\n    var cu = 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy\
    \ = 0\n    var cz = 0\n    var da = 0\n    var db = 0\n    var dc = 0\n    var\
    \ dd = 0\n    var de = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n   \
    \ var di = 0\n    var dj = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n\
    \    var dn = 0\n    var do = 0\n    var dp = 0\n    var dq = 0\n    var dr =\
    \ 0\n    var ds = 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n    var dw\
    \ = 0\n    var dx = 0\n    var dy = 0\n    var dz = 0\n    var ea = 0\n    var\
    \ eb = 0\n    var ec = 0\n    var ed = 0\n    var ee = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo3tv9cuh.swift:40:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpo3tv9cuh.swift:40:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpo3tv9cuh.swift:114:9: error: keyword 'do' cannot be used\
    \ as an identifier here\n    var do = 0\n        ^\n/tmp/tmpo3tv9cuh.swift:114:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var do =\
    \ 0\n        ^~\n        `do`\n/tmp/tmpo3tv9cuh.swift:131:8: error: expected pattern\n\
    \    var \n       ^\n/tmp/tmpo3tv9cuh.swift:9:15: error: value of type 'Int' has\
    \ no member 'count'\n    var n = l.count\n            ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if x == last {\n            return false\n        }\n        last = x\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpchfycekd/tmpchfycekd.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0614c4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0614945b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0614945988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06149447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchfycekd                        0x000055fe4219b5fe <unavailable> + 5630

    5    libc.so.6                          0x00002b0614e3a460 __libc_start_main +
    245

    6    tmpchfycekd                        0x000055fe4219b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < l[0] {\n            isDecreasing =\
    \ false\n        } else {\n            isIncreasing = false\n        }\n     \
    \   if isIncreasing && isDecreasing {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpfoyggprq/tmpfoyggprq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18228c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18225bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18225bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18225be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfoyggprq                        0x00005621cc0c84c2 <unavailable> + 5314

    5    libc.so.6                          0x00002b1822ab4460 __libc_start_main +
    245

    6    tmpfoyggprq                        0x00005621cc0c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    while i < j {\n        if l[i] < l[k] {\n            return\
    \ false\n        }\n        if l[i] > l[k] {\n            return true\n      \
    \  }\n        i += 1\n        k -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpogifo9y_/tmpogifo9y_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24b1eecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24b1be3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24b1be3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24b1be27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogifo9y_                        0x00005636c71c13b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b24b20d8460 __libc_start_main +
    245

    6    tmpogifo9y_                        0x00005636c71c1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for v in l {\n        if\
    \ i > v {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpwoh1nns5/tmpwoh1nns5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c3d95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c3a8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c3a8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c3a8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoh1nns5                        0x000055e697f0f5fe <unavailable> + 5630

    5    libc.so.6                          0x00002ba6c3f81460 __libc_start_main +
    245

    6    tmpwoh1nns5                        0x000055e697f0f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < 0 {\n            isDecreasing = false\n\
    \        } else if x > 0 {\n            isIncreasing = false\n        } else {\n\
    \            isIncreasing = true\n            isDecreasing = true\n        }\n\
    \    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2,\
    \ 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmpa7jm5a1x/tmpa7jm5a1x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9692152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9691e49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9691e49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9691e487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7jm5a1x                        0x000055da7ebc15fe <unavailable> + 5630

    5    libc.so.6                          0x00002b969233e460 __libc_start_main +
    245

    6    tmpa7jm5a1x                        0x000055da7ebc10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    for x in l {\n        if x < 0 {\n            isDecreasing = false\n\
    \        } else if x > 0 {\n            isIncreasing = false\n        } else {\n\
    \            break\n        }\n    }\n    return isIncreasing || isDecreasing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp38ud0q6e/tmp38ud0q6e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd7c124c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd7be1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd7be1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd7be1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38ud0q6e                        0x00005633e9eb95fe <unavailable> + 5630

    5    libc.so.6                          0x00002acd7c310460 __libc_start_main +
    245

    6    tmp38ud0q6e                        0x00005633e9eb90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for x in l {\n        if\
    \ i > x {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpemv0zc05/tmpemv0zc05.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab422ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4227c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4227c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4227c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemv0zc05                        0x00005612acf795fe <unavailable> + 5630

    5    libc.so.6                          0x00002ab422cbd460 __libc_start_main +
    245

    6    tmpemv0zc05                        0x00005612acf790d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = j - 1\n    var m = l[0]\n    var n = l[0]\n    while i < j {\n   \
    \     if l[i] < m {\n            i += 1\n        } else if l[i] > n {\n      \
    \      j -= 1\n        } else {\n            if l[i] < m {\n                i\
    \ += 1\n            } else {\n                j -= 1\n            }\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpanwhsa4v/tmpanwhsa4v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad30e383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad30e07ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad30e07a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad30e0797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanwhsa4v                        0x0000563ed3df253e <unavailable> + 5438

    5    libc.so.6                          0x00002ad30e56f460 __libc_start_main +
    245

    6    tmpanwhsa4v                        0x0000563ed3df2019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j\n    var m = Int64(0)\n    while i < j {\n        if l[i] < l[j] {\n\
    \            if l[i] < m {\n                m = l[i]\n            }\n        \
    \    i += 1\n        } else {\n            if l[j] > m {\n                m =\
    \ l[j]\n            }\n            j -= 1\n        }\n    }\n    return m <= l[k]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3jugfb9n.swift:11:22: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                m = l[i]\n                    ~^~~\n      \
    \              Int64( )\n/tmp/tmp3jugfb9n.swift:16:22: error: cannot assign value\
    \ of type 'Int' to type 'Int64'\n                m = l[j]\n                  \
    \  ~^~~\n                    Int64( )\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var monotonic = true\n    var isIncreasing = true\n    var isDecreasing\
    \ = true\n    while i < l.count {\n        if l[i] > l[j] {\n            isIncreasing\
    \ = false\n        } else {\n            isDecreasing = false\n        }\n   \
    \     if isIncreasing && isDecreasing {\n            monotonic = false\n     \
    \       break\n        }\n        if l[i] < l[j] {\n            j = i\n      \
    \  } else {\n            k = i\n        }\n        i += 1\n    }\n    return monotonic\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp9b2le_fm/tmp9b2le_fm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83eb3d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83eb0cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83eb0cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83eb0cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9b2le_fm                        0x0000555abd20453e <unavailable> + 5438

    5    libc.so.6                          0x00002b83eb5c2460 __libc_start_main +
    245

    6    tmp9b2le_fm                        0x0000555abd204019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = false\n    var prev =\
    \ 0\n    for x in l {\n        if prev < x {\n            monotonic = true\n \
    \       } else {\n            monotonic = false\n        }\n        prev = x\n\
    \    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_3kjy4sq/tmp_3kjy4sq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebb59c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebb56bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebb56ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebb56b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3kjy4sq                        0x0000558db41ae5fe <unavailable> + 5630

    5    libc.so.6                          0x00002aebb5baf460 __libc_start_main +
    245

    6    tmp_3kjy4sq                        0x0000558db41ae0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var monotonic = true\n    for idx in 0..<l.count\
    \ {\n        if l[idx] < l[idx-1] {\n            monotonic = false\n         \
    \   break\n        }\n    }\n    return monotonic\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d71b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d71880561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d71880286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d7188013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d7187fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d7167fe83 <unavailable> + 188035

    6    tmpni8c68l2                        0x000055ec6cbaacf6 <unavailable> + 7414

    7    tmpni8c68l2                        0x000055ec6cbaa4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b5d71d75460 __libc_start_main +
    245

    9    tmpni8c68l2                        0x000055ec6cbaa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var last = 0\n    for x in l {\n     \
    \   if last < x {\n            return false\n        }\n        last = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp8p08ui0z/tmp8p08ui0z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4b019fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4afe96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad4afe96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4afe957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8p08ui0z                        0x000055fe1dbcb472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad4b038b460 __libc_start_main +
    245

    6    tmp8p08ui0z                        0x000055fe1dbcb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count-1\n   \
    \ var k = j-1\n    var monotonic = true\n    while i < j {\n        if l[i] <\
    \ l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n            j -=\
    \ 1\n        } else {\n            monotonic = false\n        }\n        if i\
    \ < k {\n            if l[i] < l[k] {\n                i += 1\n            } else\
    \ if l[i] > l[k] {\n                k -= 1\n            } else {\n           \
    \     monotonic = false\n            }\n        }\n    }\n    return monotonic\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp3bc0vb9y/tmp3bc0vb9y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3801275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3800f6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3800f6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3800f6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bc0vb9y                        0x00005617df26e53e <unavailable> + 5438

    5    libc.so.6                          0x00002b3801461460 __libc_start_main +
    245

    6    tmp3bc0vb9y                        0x00005617df26e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    if l.count < 2 {\n        return true\n\
    \    }\n    var left = 0\n    var right = l.count - 1\n    var leftIsSmaller =\
    \ true\n    var rightIsSmaller = true\n    var leftIsLarger = true\n    var rightIsLarger\
    \ = true\n    var leftIsEqual = true\n    var rightIsEqual = true\n    while left\
    \ < right {\n        if l[left] < l[right] {\n            leftIsSmaller = false\n\
    \            leftIsLarger = false\n        } else {\n            leftIsSmaller\
    \ = true\n            leftIsLarger = true\n        }\n        if l[left] > l[right]\
    \ {\n            rightIsSmaller = false\n            rightIsLarger = false\n \
    \       } else {\n            rightIsSmaller = true\n            rightIsLarger\
    \ = true\n        }\n        if leftIsSmaller && rightIsSmaller {\n          \
    \  left++\n            right--\n        } else if leftIsSmaller {\n          \
    \  left++\n        } else if rightIsSmaller {\n            right--\n        }\
    \ else if leftIsLarger {\n            left++\n            right--\n        } else\
    \ if rightIsLarger {\n            right--\n        } else {\n            left++\n\
    \            right++\n        }\n        if left >= right {\n            break\n\
    \        }\n    }\n    return leftIsSmaller && rightIsSmaller\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnzrwsqwb.swift:31:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            left++\n                ^~\n/tmp/tmpnzrwsqwb.swift:32:18:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  right--\n                 ^~\n/tmp/tmpnzrwsqwb.swift:34:17: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            left++\n         \
    \       ^~\n/tmp/tmpnzrwsqwb.swift:36:18: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            right--\n                 ^~\n/tmp/tmpnzrwsqwb.swift:38:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  left++\n                ^~\n/tmp/tmpnzrwsqwb.swift:39:18: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            right--\n        \
    \         ^~\n/tmp/tmpnzrwsqwb.swift:41:18: error: cannot find operator '--' in\
    \ scope; did you mean '-= 1'?\n            right--\n                 ^~\n/tmp/tmpnzrwsqwb.swift:43:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  left++\n                ^~\n/tmp/tmpnzrwsqwb.swift:44:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            right++\n        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var prev = 0\n    for x in l {\n     \
    \   if prev < x {\n            return false\n        }\n        prev = x\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpj8t_shd0/tmpj8t_shd0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a54273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a53f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a53f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a53f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8t_shd0                        0x000055aa25e07472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2a5445f460 __libc_start_main +
    245

    6    tmpj8t_shd0                        0x000055aa25e070d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    for element in l {\n  \
    \      if element < l[i] {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmpsu33uys1/tmpsu33uys1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2c060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2bd57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2bd57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2bd567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu33uys1                        0x0000561b1f8ca64e <unavailable> + 5710

    5    libc.so.6                          0x00002b7c2c24c460 __libc_start_main +
    245

    6    tmpsu33uys1                        0x0000561b1f8ca129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028740
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = l[0]\n    while i < j {\n        if l[i] < k {\n            i += 1\n\
    \        } else if l[j] > k {\n            j -= 1\n        } else {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp7t77ueuz/tmp7t77ueuz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec7fc03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec7f8fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec7f8fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec7f8f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t77ueuz                        0x000055a07325d3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002aec7fdef460 __libc_start_main +
    245

    6    tmp7t77ueuz                        0x000055a07325d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = l.count - 1\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var\
    \ ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n   \
    \ var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n\
    \    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as =\
    \ 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax\
    \ = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var\
    \ bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n   \
    \ var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n\
    \    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq =\
    \ 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv\
    \ = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var\
    \ ca = 0\n    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n   \
    \ var cf = 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n\
    \    var ck = 0\n    var cl = 0\n    var cm = 0\n    var cn = 0\n    var co =\
    \ 0\n    var cp = 0\n    var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct\
    \ = 0\n    var cu = 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n    var\
    \ cy = 0\n    var cz = 0\n    var da = 0\n    var db = 0\n    var dc = 0\n   \
    \ var dd = 0\n    var de = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n\
    \    var di = 0\n    var dj = 0\n    var dk = 0\n    var dl = 0\n    var dm =\
    \ 0\n    var dn = 0\n    var do = 0\n    var dp = 0\n    var dq = 0\n    var dr\
    \ = 0\n    var ds = 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n    var\
    \ dw = 0\n    var dx = 0\n    var dy = 0\n    var dz = 0\n    var ea = 0\n   \
    \ var eb = 0\n    var ec = 0\n    var ed = 0\n    var ee = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprxmrdwhh.swift:40:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmprxmrdwhh.swift:40:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmprxmrdwhh.swift:114:9: error: keyword 'do' cannot be used\
    \ as an identifier here\n    var do = 0\n        ^\n/tmp/tmprxmrdwhh.swift:114:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var do =\
    \ 0\n        ^~\n        `do`\n/tmp/tmprxmrdwhh.swift:4:9: warning: initialization\
    \ of variable 'i' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:5:9: warning:\
    \ initialization of variable 'j' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var j = l.count - 1\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:6:9:\
    \ warning: initialization of variable 'k' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:7:9:\
    \ warning: initialization of variable 'l' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var l = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:8:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:9:9:\
    \ warning: initialization of variable 'n' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var n = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:10:9:\
    \ warning: initialization of variable 'o' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var o = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:11:9:\
    \ warning: initialization of variable 'p' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var p = 0\n    ~~~~^\n    _\n/tmp/tmprxmrdwhh.swift:12:9:\
    \ warning: initialization of variable 'q' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var q = 0\n    ~~~~^\n    _\n/tmp/tmprxmr"
  stdout: ''
  timestamp: 1660028741
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    func monotonic(l: [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var k =\
    \ 0\n    var l = 0\n    while i < l.count {\n        if l[i] > l[j] {\n      \
    \      k = i\n            i = j\n            j = k\n        }\n        if l[i]\
    \ < l[j] {\n            l = i\n            i = j\n            j = l\n        }\n\
    \        i += 1\n        j += 1\n    }\n    return i == l.count || j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbx7xv6ee.swift:8:17: error: value of type 'Int' has no member 'count'\n\
    \    while i < l.count {\n              ~ ^~~~~\n/tmp/tmpbx7xv6ee.swift:9:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] > l[j] {\n   \
    \        ~^\n/tmp/tmpbx7xv6ee.swift:9:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] > l[j] {\n                  ~^\n/tmp/tmpbx7xv6ee.swift:14:13:\
    \ error: value of type 'Int' has no subscripts\n        if l[i] < l[j] {\n   \
    \        ~^\n/tmp/tmpbx7xv6ee.swift:14:20: error: value of type 'Int' has no subscripts\n\
    \        if l[i] < l[j] {\n                  ~^\n/tmp/tmpbx7xv6ee.swift:22:19:\
    \ error: value of type 'Int' has no member 'count'\n    return i == l.count ||\
    \ j == l.count\n                ~ ^~~~~\n/tmp/tmpbx7xv6ee.swift:22:35: error:\
    \ value of type 'Int' has no member 'count'\n    return i == l.count || j == l.count\n\
    \                                ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660028741
