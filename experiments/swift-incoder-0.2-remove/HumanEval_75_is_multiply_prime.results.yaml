language: swift
name: HumanEval_75_is_multiply_prime
results:
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime = 2 // first\
    \ prime number\n    var isPrime = true\n    while prime < 100 {\n        if a\
    \ % prime == 0 {\n            isPrime = false\n            break\n        }\n\
    \        primes.append(prime)\n        prime += 2\n    }\n    if isPrime {\n \
    \       for prime in primes {\n            if a % prime == 0 {\n             \
    \   result = false\n                break\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpo2soxjpz/tmpo2soxjpz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f1957fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f19276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f19276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f192757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo2soxjpz                        0x0000562511b474a3 <unavailable> + 5283

    5    libc.so.6                          0x00002b6f1976b460 __libc_start_main +
    245

    6    tmpo2soxjpz                        0x0000562511b47159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    \n    for i = 2; i < a; i++ {\n        prime = i\n        while\
    \ prime > 1 {\n            if a % prime == 0 {\n                result = true\n\
    \                break\n            }\n            prime = prime - 1\n       \
    \ }\n        primes.append(prime)\n    }\n    \n    if result {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprrowk9nk.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isMultiplyPrime2\
    \ = true\n    var isPrime2 = true\n    var isMultiplyPrime3 = true\n    var isPrime3\
    \ = true\n    var isMultiplyPrime4 = true\n    var isPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isPrime5 = true\n    var isMultiplyPrime6 = true\n    var isPrime6\
    \ = true\n    var isMultiplyPrime7 = true\n    var isPrime7 = true\n    var isMultiplyPrime8\
    \ = true\n    var isPrime8 = true\n    var isMultiplyPrime9 = true\n    var isPrime9\
    \ = true\n    var isMultiplyPrime10 = true\n    var isPrime10 = true\n    var\
    \ isMultiplyPrime11 = true\n    var isPrime11 = true\n    var isMultiplyPrime12\
    \ = true\n    var isPrime12 = true\n    var isMultiplyPrime13 = true\n    var\
    \ isPrime13 = true\n    var isMultiplyPrime14 = true\n    var isPrime14 = true\n\
    \    var isMultiplyPrime15 = true\n    var isPrime15 = true\n    var isMultiplyPrime16\
    \ = true\n    var isPrime16 = true\n    var isMultiplyPrime17 = true\n    var\
    \ isPrime17 = true\n    var isMultiplyPrime18 = true\n    var isPrime18 = true\n\
    \    var isMultiplyPrime19 = true\n    var isPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isPrime20 = true\n    var isMultiplyPrime21 = true\n    var\
    \ isPrime21 = true\n    var isMultiplyPrime22 = true\n    var isPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isPrime23 = true\n    var isMultiplyPrime24\
    \ = true\n    var isPrime24 = true\n    var isMultiplyPrime25 = true\n    var\
    \ isPrime25 = true\n    var isMultiplyPrime26 = true\n    var isPrime26 = true\n\
    \    var isMultiplyPrime27 = true\n    var isPrime27 = true\n    var isMultiplyPrime28\
    \ = true\n    var isPrime28 = true\n    var isMultiplyPrime29 = true\n    var\
    \ isPrime29 = true\n    var isMultiplyPrime30 = true\n    var isPrime30 = true\n\
    \    var isMultiplyPrime31 = true\n    var isPrime31 = true\n    var isMultiplyPrime32\
    \ = true\n    var isPrime32\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzmye5mia.swift:71:9: error: type annotation missing in pattern\n\
    \    var isPrime32\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3mzipdmf.swift:11:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:12:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:13:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:14:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:15:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:16:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:17:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:18:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:19:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:20:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:21:9: warnin"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    \n    var primes = [Int]()\n\
    \    var prime: Int\n    var i: Int\n    \n    for i = 2; i < a; i++ {\n     \
    \   prime = 0\n        for prime in primes {\n            if i % prime == 0 {\n\
    \                break\n            }\n        }\n        if prime == 0 {\n  \
    \          primes.append(i)\n        }\n    }\n    \n    return primes.count >=\
    \ 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\n\
    assert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a: 8) == true)\n\
    assert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a: 125) ==\
    \ true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprhrnlqxa.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        for\
    \ var i = 2; i < a; i++ {\n            if a % i == 0 {\n                isMultiplyPrime\
    \ = false\n                break\n            }\n        }\n    }\n    \n    return\
    \ isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg3tsiqd6.swift:12:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r:\
    \ Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var\
    \ v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n   \
    \ var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n\
    \    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int =\
    \ 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int\
    \ = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var\
    \ t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n   \
    \ var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplvpgdzpr.swift:105:11: error: expected type\n    var d: \n    \
    \      ^\n           <#type#>\n/tmp/tmplvpgdzpr.swift:35:9: error: invalid redeclaration\
    \ of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:11:9: note: 'i'\
    \ previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:36:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:12:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:37:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:13:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:39:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:14:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:40:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:15:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:41:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:16:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:42:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:17:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:43:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:18:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:44:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:19:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:45:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:20:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmplvpgdzpr.swift:46:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        \n\
    \        for var i = 2; i < a; i++ {\n            \n            if a % i == 0\
    \ {\n                \n                for var j = 2; j < i; j++ {\n         \
    \           \n                    if i % j == 0 {\n                        \n\
    \                        for var k = 2; k < j; k++ {\n                       \
    \     \n                            if j % k == 0 {\n                        \
    \        \n                                isMultiplyPrime = false\n         \
    \                       break\n                            }\n               \
    \         }\n                        \n                        break\n       \
    \             }\n                }\n                \n                break\n\
    \            }\n        }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo8qi5w94.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo8qi5w94.swift:17:17: error: C-style for statement has been removed in\
    \ Swift 3\n                for var j = 2; j < i; j++ {\n                ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo8qi5w94.swift:21:25: error: C-style for statement has been removed in\
    \ Swift 3\n                        for var k = 2; k < j; k++ {\n             \
    \           ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    for i in 2..<100 {\n        if a % i ==\
    \ 0 {\n            result = false\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmph3y_ayt_/tmph3y_ayt_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfda579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfda270b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfda270988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfda26f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3y_ayt_                        0x0000556ae65053a7 <unavailable> + 5031

    5    libc.so.6                          0x00002adfda765460 __libc_start_main +
    245

    6    tmph3y_ayt_                        0x0000556ae6504fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp844ash2x.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmp844ash2x.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \   "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for n in 2..<100\
    \ {\n            if a % n == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplfpn8_yg/tmplfpn8_yg.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf50e7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf50b76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf50b76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf50b757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfpn8_yg                        0x0000555fcdf22333 <unavailable> + 4915

    5    libc.so.6                          0x00002acf5106b460 __libc_start_main +
    245

    6    tmplfpn8_yg                        0x0000555fcdf21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp844ash2x.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmp844ash2x.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \   "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime_number =\
    \ 0\n    var prime_number_count = 0\n    var prime_number_sum = 0\n    var prime_number_sum2\
    \ = 0\n    var prime_number_sum3 = 0\n    var prime_number_sum4 = 0\n    var prime_number_sum5\
    \ = 0\n    var prime_number_sum6 = 0\n    var prime_number_sum7 = 0\n    var prime_number_sum8\
    \ = 0\n    var prime_number_sum9 = 0\n    var prime_number_sum10 = 0\n    var\
    \ prime_number_sum11 = 0\n    var prime_number_sum12 = 0\n    var prime_number_sum13\
    \ = 0\n    var prime_number_sum14 = 0\n    var prime_number_sum15 = 0\n    var\
    \ prime_number_sum16 = 0\n    var prime_number_sum17 = 0\n    var prime_number_sum18\
    \ = 0\n    var prime_number_sum19 = 0\n    var prime_number_sum20 = 0\n    var\
    \ prime_number_sum21 = 0\n    var prime_number_sum22 = 0\n    var prime_number_sum23\
    \ = 0\n    var prime_number_sum24 = 0\n    var prime_number_sum25 = 0\n    var\
    \ prime_number_sum26 = 0\n    var prime_number_sum27 = 0\n    var prime_number_sum28\
    \ = 0\n    var prime_number_sum29 = 0\n    var prime_number_sum30 = 0\n    var\
    \ prime_number_sum31 = 0\n    var prime_number_sum32 = 0\n    var prime_number_sum33\
    \ = 0\n    var prime_number_sum34 = 0\n    var prime_number_sum35 = 0\n    var\
    \ prime_number_sum36 = 0\n    var prime_number_sum37 = 0\n    var prime_number_sum38\
    \ = 0\n    var prime_number_sum39 = 0\n    var prime_number_sum40 = 0\n    var\
    \ prime_number_sum41 = 0\n    var prime_number_sum42 = 0\n    var prime_number_sum43\
    \ = 0\n    var prime_number_sum44 = 0\n    var prime_number_sum45 = 0\n    var\
    \ prime_number_sum46 = 0\n    var prime_number_sum47 = 0\n    var prime_number_sum48\
    \ = 0\n    var prime_number_sum49 = 0\n    var prime_number_sum50 = 0\n    var\
    \ prime_number_sum51 = 0\n    var prime_number_sum52 = 0\n    var prime_number_sum53\
    \ = 0\n    var prime_number_sum54 = 0\n    var prime_number_sum55 = 0\n    var\
    \ prime_number_sum56 = 0\n    var prime_number_sum57 = 0\n    var prime_number_sum58\
    \ = 0\n    var prime_number_sum59 = 0\n    var prime_number_sum60 = 0\n    var\
    \ prime_number_sum61 = 0\n    var prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp9qdz47j9.swift:73:9: error: type annotation missing in pattern\n\
    \    var prime\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result: Bool = false\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = 100\n    var prime_numbers_sum = 0\n    var prime_numbers_sum2 = 0\n    var\
    \ prime_numbers_sum3 = 0\n    var prime_numbers_sum4 = 0\n    var prime_numbers_sum5\
    \ = 0\n    var prime_numbers_sum6 = 0\n    var prime_numbers_sum7 = 0\n    var\
    \ prime_numbers_sum8 = 0\n    var prime_numbers_sum9 = 0\n    var prime_numbers_sum10\
    \ = 0\n    var prime_numbers_sum11 = 0\n    var prime_numbers_sum12 = 0\n    var\
    \ prime_numbers_sum13 = 0\n    var prime_numbers_sum14 = 0\n    var prime_numbers_sum15\
    \ = 0\n    var prime_numbers_sum16 = 0\n    var prime_numbers_sum17 = 0\n    var\
    \ prime_numbers_sum18 = 0\n    var prime_numbers_sum19 = 0\n    var prime_numbers_sum20\
    \ = 0\n    var prime_numbers_sum21 = 0\n    var prime_numbers_sum22 = 0\n    var\
    \ prime_numbers_sum23 = 0\n    var prime_numbers_sum24 = 0\n    var prime_numbers_sum25\
    \ = 0\n    var prime_numbers_sum26 = 0\n    var prime_numbers_sum27 = 0\n    var\
    \ prime_numbers_sum28 = 0\n    var prime_numbers_sum29 = 0\n    var prime_numbers_sum30\
    \ = 0\n    var prime_numbers_sum31 = 0\n    var prime_numbers_sum32 = 0\n    var\
    \ prime_numbers_sum33 = 0\n    var prime_numbers_sum34 = 0\n    var prime_numbers_sum35\
    \ = 0\n    var prime_numbers_sum36 = 0\n    var prime_numbers_sum37 = 0\n    var\
    \ prime_numbers_sum38 = 0\n    var prime_numbers_sum39 = 0\n    var prime_numbers_sum40\
    \ = 0\n    var prime_numbers_sum41 = 0\n    var prime_numbers_sum42 = 0\n    var\
    \ prime_numbers_sum43 = 0\n    var prime_numbers_sum44 = 0\n    var prime_numbers_sum45\
    \ = 0\n    var prime_numbers_sum46 = 0\n    var prime_numbers_sum47 = 0\n    var\
    \ prime_numbers_sum48 = 0\n    var prime_numbers_sum49 = 0\n    var prime_numbers_sum50\
    \ = 0\n    var prime_numbers_sum51 = 0\n    var prime_numbers_sum52 = 0\n    var\
    \ prime_numbers_sum53 = 0\n    var prime_numbers_sum54 = 0\n    var prime_number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc9pdblio.swift:65:9: error: type annotation missing in pattern\n\
    \    var prime_number\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    for i in 2...100 {\n        if a % i == 0 {\n\
    \            if a % i == 0 && a % 2 == 0 {\n                result = true\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7q52_c1i/tmp7q52_c1i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b503e19fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b503de96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b503de96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b503de957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7q52_c1i                        0x000056028c188491 <unavailable> + 5265

    5    libc.so.6                          0x00002b503e38b460 __libc_start_main +
    245

    6    tmp7q52_c1i                        0x000056028c187fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    for i in 2..<100 {\n        if a % i ==\
    \ 0 {\n            result = false\n            break\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7ndggetp/tmp7ndggetp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f741e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f73edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f73edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f73edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ndggetp                        0x000055c82a8603a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b4f743d1460 __libc_start_main +
    245

    6    tmp7ndggetp                        0x000055c82a85ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphj69mh31.swift:34:9: error: invalid redeclaration of 'b'\n    var\
    \ b = 0\n        ^\n/tmp/tmphj69mh31.swift:8:9: note: 'b' previously declared\
    \ here\n    var b = 0\n        ^\n/tmp/tmphj69mh31.swift:35:9: error: invalid\
    \ redeclaration of 'c'\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:9:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:36:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:10:9:\
    \ note: 'd' previously declared here\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:37:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:11:9:\
    \ note: 'e' previously declared here\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:38:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:12:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:39:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:13:9:\
    \ note: 'g' previously declared here\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:40:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:14:9:\
    \ note: 'h' previously declared here\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:41:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:15:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:42:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:16:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:43:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:17:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:44:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:18:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:45:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphj69mh"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var is_multiply_prime\
    \ = false\n    \n    for _ in 0..<primes_count {\n        primes.append(0)\n \
    \   }\n    \n    for n in 0..<primes_count {\n        if primes[n] == 0 {\n  \
    \          for _ in 0..<primes_count {\n                if n % primes[n] == 0\
    \ {\n                    primes[n] = 1\n                    break\n          \
    \      }\n            }\n        }\n    }\n    \n    if primes[a] == 1 {\n   \
    \     is_multiply_prime = true\n    }\n    \n    return is_multiply_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002ae075444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae07513b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae07513b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae07513b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae07513abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpoi8sfrxg                        0x000056353cb41bcb <unavailable> + 7115

    6    tmpoi8sfrxg                        0x000056353cb4142b <unavailable> + 5163

    7    libc.so.6                          0x00002ae075630460 __libc_start_main +
    245

    8    tmpoi8sfrxg                        0x000056353cb41149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        var primes = [Int]()\n\
    \        \n        for var i = 2; i < a; i++ {\n            if a % i == 0 {\n\
    \                primes.append(i)\n            }\n        }\n        \n      \
    \  if primes.count >= 3 {\n            result = true\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0k4vigx3.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ \n    for i in 1...100 {\n        prime = i\n        primes.append(prime)\n\
    \    }\n    \n    for i in 1...100 {\n        if primes.contains(a) {\n      \
    \      if a % primes.contains(0) {\n                result = false\n         \
    \   }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzmnrr7gc.swift:19:27: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n            if a % primes.contains(0) {\n \
    \                         ^\n/tmp/tmpzmnrr7gc.swift:19:18: error: type 'Int' cannot\
    \ be used as a boolean; test for '!= 0' instead\n            if a % primes.contains(0)\
    \ {\n                 ^\n               ((                    ) != 0)\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int\n    var isPrime: Bool\n   \
    \ \n    for prime in 2...100 {\n        if a % prime == 0 {\n            primes.append(prime)\n\
    \        }\n    }\n    \n    for prime in primes {\n        isPrime = true\n \
    \       for a in 2...100 {\n            if a % prime == 0 {\n                isPrime\
    \ = false\n                break\n            }\n        }\n        if isPrime\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpyplwzr47/tmpyplwzr47.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12d635ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12d6051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12d6051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12d60507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyplwzr47                        0x0000564ca07ff617 <unavailable> + 5655

    5    libc.so.6                          0x00002b12d6546460 __libc_start_main +
    245

    6    tmpyplwzr47                        0x0000564ca07ff259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    primes.append(5)\n    for prime in primes {\n      \
    \  if a % prime == 0 {\n            result = false\n            break\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmptqrqdaqp/tmptqrqdaqp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfa4bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabfa1b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabfa1b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabfa1b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqrqdaqp                        0x00005614a087d517 <unavailable> + 5399

    5    libc.so.6                          0x00002aabfa6a7460 __libc_start_main +
    245

    6    tmptqrqdaqp                        0x00005614a087d159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    if a < 100 {\n        var primes = [Int]()\n\
    \        var prime: Int\n        for prime in 2...a / 2 {\n            if a %\
    \ prime == 0 {\n                primes.append(prime)\n            }\n        }\n\
    \        for prime in primes {\n            if a % prime == 0 {\n            \
    \    result = true\n                break\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp69ornktg/tmp69ornktg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af13bb69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af13b860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af13b860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af13b85f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69ornktg                        0x00005603c3818701 <unavailable> + 5889

    5    libc.so.6                          0x00002af13bd55460 __libc_start_main +
    245

    6    tmp69ornktg                        0x00005603c3818259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var prime: Int\n    var result: Int\n    var i: Int\n    for i = 2; i < a;\
    \ i++ {\n        prime = 0\n        for result = i * i; result < a; result+=i\
    \ {\n            if a % result == 0 {\n                prime = 1\n           \
    \     break\n            }\n        }\n        if prime == 1 {\n            primes.append(i)\n\
    \        }\n    }\n    return primes.count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppwvvyg6k.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmppwvvyg6k.swift:17:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for result\
    \ = i * i; result < a; result+=i {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count\n    var primes_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpm2delir7.swift:11:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpm2delir7.swift:10:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpm2delir7.swift:12:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpm2delir7.swift:10:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpm2delir7.swift:13:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpm2delir7.swift:10:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpm2delir7.swift:14:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpm2delir7.swift:10:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpm2delir7.swift:15:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpm2delir7.swift:10:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpm2delir7.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpm2delir7.swift:10:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpm2delir7.swift:17:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpm2delir7.swift:10:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpm2delir7.swift:18:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpm2delir7.swift:10:9: note: 'primes_count_copy' previously declared "
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var prime: Int\n    for prime in 2...100 {\n        if a % prime == 0 {\n\
    \            primes.append(prime)\n        }\n    }\n    for prime in primes {\n\
    \        if a % prime == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmphh37hjbg/tmphh37hjbg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60f4cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60f49c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60f49c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60f49bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphh37hjbg                        0x000056152e0b4617 <unavailable> + 5655

    5    libc.so.6                          0x00002b60f4eb5460 __libc_start_main +
    245

    6    tmphh37hjbg                        0x000056152e0b4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    \n    var primes = [Int]()\n\
    \    \n    for i in 1...100 {\n        if a % i == 0 {\n            primes.append(i)\n\
    \        }\n    }\n    \n    if primes.count == 3 {\n        return true\n   \
    \ }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpwx1spnwh/tmpwx1spnwh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f7e247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f7df3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f7df3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f7df3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwx1spnwh                        0x000055ac479b6507 <unavailable> + 5383

    5    libc.so.6                          0x00002b5f7e433460 __libc_start_main +
    245

    6    tmpwx1spnwh                        0x000055ac479b6149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int\n    var i: Int\n    for i =\
    \ 2; i <= a / 2; i += 1 {\n        prime = i\n        while prime > 1 {\n    \
    \        if a % prime == 0 {\n                primes.append(prime)\n         \
    \       break\n            }\n            prime /= 2\n        }\n    }\n    return\
    \ primes.count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4go7yopo.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= a / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        \n\
    \        for i in 2..<100 {\n            \n            if a % i == 0 {\n     \
    \           \n                for j in 2..<100 {\n                    \n     \
    \               if a % j == 0 {\n                        \n                  \
    \      for k in 2..<100 {\n                            \n                    \
    \        if a % k == 0 {\n                                \n                 \
    \               for l in 2..<100 {\n                                    \n   \
    \                                 if a % l == 0 {\n                          \
    \              \n                                        isMultiplyPrime = false\n\
    \                                        break\n                             \
    \       }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3o9hrelw/tmp3o9hrelw.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7970e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac796dd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac796dd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac796dd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3o9hrelw                        0x0000563956f443a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ac7972cc460 __libc_start_main +
    245

    6    tmp3o9hrelw                        0x0000563956f43fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    if a < 100 {\n        for i in 2..<100 {\n\
    \            if a % i == 0 {\n                result = false\n               \
    \ break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpprgcwmbz/tmpprgcwmbz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad647b25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad64781cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad64781c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad64781b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpprgcwmbz                        0x000055f0a37343a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ad647d11460 __libc_start_main +
    245

    6    tmpprgcwmbz                        0x000055f0a3733fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        var primes = [Int]()\n\
    \        \n        for var i = 2; i < a; i++ {\n            if a % i == 0 {\n\
    \                primes.append(i)\n            }\n        }\n        \n      \
    \  if primes.count == 3 {\n            result = true\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpal2fc90b.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpru7uncgm.swift:12:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:13:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpru7uncgm.swift:11:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:14:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:11:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpru7uncgm.swift:15:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:16:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpru7uncgm.swift:11:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:11:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpru7uncgm.swift:18:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpru7uncgm.swift:19:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpru7uncgm.swift:11:9: note: 'primes_count_copy' previously declared "
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    var j: Int\n    \n    for i = 2; i < a; i++ {\n        prime\
    \ = i\n        primes.append(prime)\n    }\n    \n    for i = 2; i < primes.count;\
    \ i++ {\n        for j = i + 1; j < primes.count; j++ {\n            if primes[i]\
    \ * primes[j] == a {\n                result = true\n                break\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp734_nnwg.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp734_nnwg.swift:19:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for i = 2; i <\
    \ primes.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp734_nnwg.swift:20:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i\
    \ + 1; j < primes.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    if a < 100 {\n        for var i = 2; i <\
    \ a; i++ {\n            if a % i == 0 {\n                result = false\n    \
    \            break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzspzwqw.swift:11:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var result = false\n    \n    if a < 100 {\n        \n        var\
    \ primes = [Int]()\n        \n        for i in 1...100 {\n            \n     \
    \       if i % 2 == 0 {\n                \n                primes.append(i)\n\
    \            }\n            \n            if i % 3 == 0 {\n                \n\
    \                primes.append(i)\n            }\n            \n            if\
    \ i % 5 == 0 {\n                \n                primes.append(i)\n         \
    \   }\n            \n            if i % 7 == 0 {\n                \n         \
    \       primes.append(i)\n            }\n            \n            if i % 11 ==\
    \ 0 {\n                \n                primes.append(i)\n            }\n   \
    \         \n            if i % 13 == 0 {\n                \n                primes.append(i)\n\
    \            }\n            \n            if i % 17 == 0 {\n                \n\
    \                primes.append(i)\n            }\n            \n            if\
    \ i % 19 == 0 {\n                \n                primes.append(i)\n        \
    \    }\n            \n            if i % 23 == 0 {\n                \n       \
    \         primes.append(i)\n            }\n            \n            if i % 29\
    \ == 0 {\n                \n                primes.append(i)\n            }\n\
    \            \n            if i % 31 == 0 {\n                \n              \
    \  primes.append(i)\n            }\n            \n            if i % 37 == 0 {\n\
    \                \n                primes.append(i)\n            }\n         \
    \   \n            if i % 41 == 0 {\n                \n                primes.append(i)\n\
    \            }\n            \n            if i % 43 == 0 {\n                \n\
    \                primes.append(i)\n            }\n            \n            if\
    \ i % 47 == 0 {\n                \n                primes.append(i)\n        \
    \    }\n            \n            if i % 53 == 0 {\n                \n       \
    \         primes.append(i)\n            }\n            \n            if i % 59\
    \ == 0 {\n                \n                primes.append(i)\n            }\n\
    \            \n            if i % 61 == 0 {\n                \n              \
    \  primes.append(i)\n            }\n            \n            if i % 67 == 0 {\n\
    \                \n                primes.append(i)\n            }\n         \
    \   \n            if i % 71 == 0 {\n                \n                primes.append(i)\n\
    \            }\n            \n            if i % 73 == 0 {\n                \n\
    \                primes.append(i)\n            }\n            \n            if\
    \ i % 79 == 0 {\n                \n                primes.append(i)\n        \
    \    }\n            \n            if i % 83 == 0 {\n                \n       \
    \         primes.append(i)\n            }\n            \n            if i % 89\
    \ == 0 {\n                \n                primes.append(i)\n            }\n\
    \            \n            if i % 97 == 0 {\n                \n              \
    \  primes.append(i)\n            }\n            \n            if i % 103 == 0\
    \ {\n                \n                primes.append(i)\n            }\n     \
    \       \n            if i % 109 == 0 {\n                \n                primes.append(i)\n\
    \            }\n            \n            if i % 113 == 0 {\n                \n\
    \                primes.append(i)\n            }\n            \n            if\
    \ i % 121 == 0 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphhtwu6pt.swift:182:43: error: expected '}' at end of brace statement\n\
    assert(is_multiply_prime(a: 1001) == true)\n                                 \
    \         ^\n/tmp/tmphhtwu6pt.swift:15:26: note: to match this opening '{'\n \
    \       for i in 1...100 {\n                         ^\n/tmp/tmphhtwu6pt.swift:182:43:\
    \ error: expected '}' at end of brace statement\nassert(is_multiply_prime(a: 1001)\
    \ == true)\n                                          ^\n/tmp/tmphhtwu6pt.swift:11:16:\
    \ note: to match this opening '{'\n    if a < 100 {\n               ^\n/tmp/tmphhtwu6pt.swift:182:43:\
    \ error: expected '}' at end of brace statement\nassert(is_multiply_prime(a: 1001)\
    \ == true)\n                                          ^\n/tmp/tmphhtwu6pt.swift:7:40:\
    \ note: to match this opening '{'\nfunc is_multiply_prime(a: Int) -> Bool {\n\
    \                                       ^\n/tmp/tmphhtwu6pt.swift:161:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmphhtwu6pt.swift:9:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = false\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    for i = 2; i < a; i++ {\n        prime = i\n        while prime\
    \ > 1 {\n            if a % prime == 0 {\n                result = true\n    \
    \            break\n            }\n            prime = prime - 1\n        }\n\
    \        primes.append(prime)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwmsqp48x.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3mzipdmf.swift:11:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:12:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:13:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:14:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:15:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:16:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:17:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:18:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:19:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:20:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:21:9: warnin"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ var i: Int\n    var j: Int\n    \n    for i = 2; i < a; i++ {\n        prime\
    \ = i\n        j = 2\n        while prime * j <= i {\n            primes.append(prime)\n\
    \            j++\n        }\n    }\n    \n    for prime in primes {\n        if\
    \ a % prime == 0 {\n            result = false\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd6bban64.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    var j: Int\n    var k: Int\n    \n    for i = 2; i <= a; i++\
    \ {\n        primes.append(i)\n    }\n    \n    for prime in primes {\n      \
    \  for j = 2; j < prime; j++ {\n            k = prime * j\n            if k >\
    \ 100 {\n                break\n            }\n            if primes.contains(k)\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpubqtukyg.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpubqtukyg.swift:20:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = 2;\
    \ j < prime; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = Int()\n    var i = 2\n    var j = 0\n    var k = 0\n \
    \   var m = 0\n    var n = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var w = 0\n   \
    \ var x = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv1w5wrxv.swift:29:9: error: invalid redeclaration of 'w'\n    var\
    \ w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:25:9: note: 'w' previously declared\
    \ here\n    var w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:30:9: error: invalid\
    \ redeclaration of 'x'\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:26:9:\
    \ note: 'x' previously declared here\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:31:9:\
    \ error: invalid redeclaration of 'y'\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:27:9:\
    \ note: 'y' previously declared here\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:32:9:\
    \ error: invalid redeclaration of 'z'\n    var z = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:28:9:\
    \ note: 'z' previously declared here\n    var z = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:33:9:\
    \ error: invalid redeclaration of 'w'\n    var w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:25:9:\
    \ note: 'w' previously declared here\n    var w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:34:9:\
    \ error: invalid redeclaration of 'x'\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:26:9:\
    \ note: 'x' previously declared here\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:35:9:\
    \ error: invalid redeclaration of 'y'\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:27:9:\
    \ note: 'y' previously declared here\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:36:9:\
    \ error: invalid redeclaration of 'z'\n    var z = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:28:9:\
    \ note: 'z' previously declared here\n    var z = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:37:9:\
    \ error: invalid redeclaration of 'w'\n    var w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:25:9:\
    \ note: 'w' previously declared here\n    var w = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:38:9:\
    \ error: invalid redeclaration of 'x'\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:26:9:\
    \ note: 'x' previously declared here\n    var x = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:39:9:\
    \ error: invalid redeclaration of 'y'\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:27:9:\
    \ note: 'y' previously declared here\n    var y = 0\n        ^\n/tmp/tmpv1w5wrxv.swift:40:9:\
    \ error: invalid redeclaration of 'z'\n    var z = 0\n        ^\n/tmp/tmpv1w5"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        var primes\
    \ = [Int]()\n        \n        for i in 1...a {\n            if a % i == 0 {\n\
    \                primes.append(i)\n            }\n        }\n        \n      \
    \  for p in primes {\n            if primes.contains(p*p) == false {\n       \
    \         isMultiplyPrime = false\n                break\n            }\n    \
    \    }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxbc7y9yu/tmpxbc7y9yu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3196b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3193a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3193a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3193a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxbc7y9yu                        0x0000563971d24677 <unavailable> + 5751

    5    libc.so.6                          0x00002ad31989e460 __libc_start_main +
    245

    6    tmpxbc7y9yu                        0x0000563971d242b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime_numbers =\
    \ [Int]()\n    var prime_numbers_count = Int()\n    var prime_numbers_count_max\
    \ = Int()\n    var prime_numbers_count_min = Int()\n    var prime_numbers_count_max_index\
    \ = Int()\n    var prime_numbers_count_min_index = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var prime_numbers_count_max_value\
    \ = Int()\n    var prime_numbers_count_min_value = Int()\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgs6hc6t1.swift:56:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpgs6hc6t1.swift:18:9: error: invalid redeclaration of 'prime_numbers_count_max_value'\n\
    \    var prime_numbers_count_max_value = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:16:9:\
    \ note: 'prime_numbers_count_max_value' previously declared here\n    var prime_numbers_count_max_value\
    \ = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:19:9: error: invalid redeclaration\
    \ of 'prime_numbers_count_min_value'\n    var prime_numbers_count_min_value =\
    \ Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:17:9: note: 'prime_numbers_count_min_value'\
    \ previously declared here\n    var prime_numbers_count_min_value = Int()\n  \
    \      ^\n/tmp/tmpgs6hc6t1.swift:20:9: error: invalid redeclaration of 'prime_numbers_count_max_value'\n\
    \    var prime_numbers_count_max_value = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:16:9:\
    \ note: 'prime_numbers_count_max_value' previously declared here\n    var prime_numbers_count_max_value\
    \ = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:21:9: error: invalid redeclaration\
    \ of 'prime_numbers_count_min_value'\n    var prime_numbers_count_min_value =\
    \ Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:17:9: note: 'prime_numbers_count_min_value'\
    \ previously declared here\n    var prime_numbers_count_min_value = Int()\n  \
    \      ^\n/tmp/tmpgs6hc6t1.swift:22:9: error: invalid redeclaration of 'prime_numbers_count_max_value'\n\
    \    var prime_numbers_count_max_value = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:16:9:\
    \ note: 'prime_numbers_count_max_value' previously declared here\n    var prime_numbers_count_max_value\
    \ = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:23:9: error: invalid redeclaration\
    \ of 'prime_numbers_count_min_value'\n    var prime_numbers_count_min_value =\
    \ Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:17:9: note: 'prime_numbers_count_min_value'\
    \ previously declared here\n    var prime_numbers_count_min_value = Int()\n  \
    \      ^\n/tmp/tmpgs6hc6t1.swift:24:9: error: invalid redeclaration of 'prime_numbers_count_max_value'\n\
    \    var prime_numbers_count_max_value = Int()\n        ^\n/tmp/tmpgs6hc6t1.swift:16:9:\
    \ note: 'prime_numb"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    var j: Int\n    for i = 2; i < a; i++ {\n        prime = true\n\
    \        for j = 2; j < i; j++ {\n            if i % j == 0 {\n              \
    \  prime = false\n                break\n            }\n        }\n        if\
    \ prime {\n            primes.append(i)\n        }\n    }\n    for prime in primes\
    \ {\n        result = true\n        for j = 2; j < prime; j++ {\n            if\
    \ prime % j == 0 {\n                result = false\n                break\n  \
    \          }\n        }\n        if result {\n            break\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6oukiry8.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp6oukiry8.swift:15:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = 2;\
    \ j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmp6oukiry8.swift:27:9: error:\
    \ C-style for statement has been removed in Swift 3\n        for j = 2; j < prime;\
    \ j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    primes.append(2)\n\
    \    primes.append(3)\n    primes.append(5)\n    for i in 2...100 {\n        if\
    \ a % primes.contains(where: { $0 == i }) == true {\n            result = true\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfeyopnn6.swift:14:23: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        if a % primes.contains(where: { $0\
    \ == i }) == true {\n                      ^\n/tmp/tmpfeyopnn6.swift:14:52: error:\
    \ binary operator '==' cannot be applied to operands of type 'Int' and 'Bool'\n\
    \        if a % primes.contains(where: { $0 == i }) == true {\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~\n/tmp/tmpfeyopnn6.swift:14:52: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Bool, Bool), (Int, Int)\n        if a %\
    \ primes.contains(where: { $0 == i }) == true {\n                            \
    \                       ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    for i in 2...100 {\n        if a % i\
    \ == 0 {\n            isMultiplyPrime = false\n            break\n        }\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprfj9hlx6/tmprfj9hlx6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fedfb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fedca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fedca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fedca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfj9hlx6                        0x0000563feed323a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b8fee19e460 __libc_start_main +
    245

    6    tmprfj9hlx6                        0x0000563feed31fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    var j: Int\n    var k: Int\n    \n    for i = 2; i < a; i++\
    \ {\n        prime = i\n        primes.append(prime)\n    }\n    \n    for i =\
    \ 2; i < a; i++ {\n        for j = i + i; j < a; j += i {\n            k = j\n\
    \            if k > a { break }\n            \n            if primes.contains(k)\
    \ {\n                result = true\n                break\n            }\n   \
    \     }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprcidco1x.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmprcidco1x.swift:20:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for i = 2; i <\
    \ a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n/tmp/tmprcidco1x.swift:21:9: error: C-style\
    \ for statement has been removed in Swift 3\n        for j = i + i; j < a; j +=\
    \ i {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    for i in 2...100 {\n        if a % i ==\
    \ 0 {\n            result = false\n            break\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpn7nekkz5/tmpn7nekkz5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7110c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab710db7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab710db7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab710db67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7nekkz5                        0x00005646733243a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab7112ac460 __libc_start_main +
    245

    6    tmpn7nekkz5                        0x0000564673323fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    for i in 2..<100 {\n        if a % i ==\
    \ 0 {\n            result = false\n            break\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp7ndggetp/tmp7ndggetp.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f741e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f73edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f73edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f73edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ndggetp                        0x000055c82a8603a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b4f743d1460 __libc_start_main +
    245

    6    tmp7ndggetp                        0x000055c82a85ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3mzipdmf.swift:11:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:12:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:13:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:14:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:15:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:16:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:17:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:18:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:19:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:20:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:21:9: warnin"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphj69mh31.swift:34:9: error: invalid redeclaration of 'b'\n    var\
    \ b = 0\n        ^\n/tmp/tmphj69mh31.swift:8:9: note: 'b' previously declared\
    \ here\n    var b = 0\n        ^\n/tmp/tmphj69mh31.swift:35:9: error: invalid\
    \ redeclaration of 'c'\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:9:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:36:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:10:9:\
    \ note: 'd' previously declared here\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:37:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:11:9:\
    \ note: 'e' previously declared here\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:38:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:12:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:39:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:13:9:\
    \ note: 'g' previously declared here\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:40:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:14:9:\
    \ note: 'h' previously declared here\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:41:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:15:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:42:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:16:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:43:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:17:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:44:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:18:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:45:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphj69mh"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime_numbers = [Int]()\n    var prime_number\
    \ = 0\n    var is_multiply_prime = false\n    \n    for number in stride(from:\
    \ 2, through: a, by: 1) {\n        if number % 2 == 0 {\n            primes.append(number)\n\
    \        }\n    }\n    \n    for number in stride(from: 2, through: a, by: 1)\
    \ {\n        for prime in primes {\n            if number % prime == 0 {\n   \
    \             prime_numbers.append(number)\n                primes.remove(at:\
    \ primes.index(of: prime)!)\n            }\n        }\n    }\n    \n    for number\
    \ in stride(from: 2, through: a, by: 1) {\n        if prime_numbers.contains(number)\
    \ {\n            is_multiply_prime = true\n            break\n        }\n    }\n\
    \    \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpexomha6b/tmpexomha6b.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00af0bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00aedb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00aedb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00aedb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexomha6b                        0x0000556766821803 <unavailable> + 6147

    5    libc.so.6                          0x00002b00af2a8460 __libc_start_main +
    245

    6    tmpexomha6b                        0x00005567668214b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int = 0\n    var isPrime: Bool =\
    \ false\n    var isMultiplication: Bool = false\n    var isMultiplicationPrime:\
    \ Bool = false\n    var isMultiplicationPrime2: Bool = false\n    var isMultiplicationPrime3:\
    \ Bool = false\n    var isMultiplicationPrime4: Bool = false\n    var isMultiplicationPrime5:\
    \ Bool = false\n    var isMultiplicationPrime6: Bool = false\n    var isMultiplicationPrime7:\
    \ Bool = false\n    var isMultiplicationPrime8: Bool = false\n    var isMultiplicationPrime9:\
    \ Bool = false\n    var isMultiplicationPrime10: Bool = false\n    var isMultiplicationPrime11:\
    \ Bool = false\n    var isMultiplicationPrime12: Bool = false\n    var isMultiplicationPrime13:\
    \ Bool = false\n    var isMultiplicationPrime14: Bool = false\n    var isMultiplicationPrime15:\
    \ Bool = false\n    var isMultiplicationPrime16: Bool = false\n    var isMultiplicationPrime17:\
    \ Bool = false\n    var isMultiplicationPrime18: Bool = false\n    var isMultiplicationPrime19:\
    \ Bool = false\n    var isMultiplicationPrime20: Bool = false\n    var isMultiplicationPrime21:\
    \ Bool = false\n    var isMultiplicationPrime22: Bool = false\n    var isMultiplicationPrime23:\
    \ Bool = false\n    var isMultiplicationPrime24: Bool = false\n    var isMultiplicationPrime25:\
    \ Bool = false\n    var isMultiplicationPrime26: Bool = false\n    var isMultiplicationPrime27:\
    \ Bool = false\n    var isMultiplicationPrime28: Bool = false\n    var isMultiplicationPrime29:\
    \ Bool = false\n    var isMultiplicationPrime30: Bool = false\n    var isMultiplicationPrime31:\
    \ Bool = false\n    var isMultiplicationPrime32: Bool = false\n    var isMultiplicationPrime33:\
    \ Bool = false\n    var isMultiplicationPrime34: Bool = false\n    var isMultiplicationPrime35:\
    \ Bool = false\n    var isMultiplicationPrime36: Bool = false\n    var isMultiplicationPrime37:\
    \ Bool = false\n    var isMultiplicationPrime38: Bool = false\n    var isMultiplicationPrime39:\
    \ Bool = false\n    var isMultiplicationPrime40: Bool = false\n    var isMultiplicationPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1tw8im1s.swift:52:9: error: type annotation missing in pattern\n\
    \    var isMultiplicationPrime\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for _ in 0..<100 {\n        if a % 2 == 0 {\n\
    \            if a % 3 == 0 {\n                if a % 5 == 0 {\n              \
    \      result = false\n                    break\n                }\n        \
    \    }\n        }\n        a = a / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprcbarkzc.swift:18:9: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n        a = a / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var is_multiply_prime_2 = false\n\
    \    var is_multiply_prime_3 = false\n    var is_multiply_prime_4 = false\n  \
    \  var is_multiply_prime_5 = false\n    var is_multiply_prime_6 = false\n    var\
    \ is_multiply_prime_7 = false\n    var is_multiply_prime_8 = false\n    var is_multiply_prime_9\
    \ = false\n    var is_multiply_prime_10 = false\n    var is_multiply_prime_11\
    \ = false\n    var is_multiply_prime_12 = false\n    var is_multiply_prime_13\
    \ = false\n    var is_multiply_prime_14 = false\n    var is_multiply_prime_15\
    \ = false\n    var is_multiply_prime_16 = false\n    var is_multiply_prime_17\
    \ = false\n    var is_multiply_prime_18 = false\n    var is_multiply_prime_19\
    \ = false\n    var is_multiply_prime_20 = false\n    var is_multiply_prime_21\
    \ = false\n    var is_multiply_prime_22 = false\n    var is_multiply_prime_23\
    \ = false\n    var is_multiply_prime_24 = false\n    var is_multiply_prime_25\
    \ = false\n    var is_multiply_prime_26 = false\n    var is_multiply_prime_27\
    \ = false\n    var is_multiply_prime_28 = false\n    var is_multiply_prime_29\
    \ = false\n    var is_multiply_prime_30 = false\n    var is_multiply_prime_31\
    \ = false\n    var is_multiply_prime_32 = false\n    var is_multiply_prime_33\
    \ = false\n    var is_multiply_prime_34 = false\n    var is_multiply_prime_35\
    \ = false\n    var is_multiply_prime_36 = false\n    var is_multiply_prime_37\
    \ = false\n    var is_multiply_prime_38 = false\n    var is_multiply_prime_39\
    \ = false\n    var is_multiply_prime_40 = false\n    var is_multiply_prime_41\
    \ = false\n    var is_multiply_prime_42 = false\n    var is_multiply_prime_43\
    \ = false\n    var is_multiply_prime_44 = false\n    var is_multiply_prime_45\
    \ = false\n    var is_multiply_prime_46 = false\n    var is_multiply_prime_47\
    \ = false\n    var is_multiply_prime_48 = false\n    var is_multiply_prime_49\
    \ = false\n    var is_multiply_prime_50 = false\n    var is_multiply_prime_51\
    \ = false\n    var is_multiply_prime_52 = false\n    var is_multiply_prime_53\
    \ = false\n    var is_multiply_prime_54 = false\n    var is_multiply_prime_55\
    \ = false\n    var is_multiply_prime_56 = false\n    var is_multiply_prime_57\
    \ = false\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8ih_wjlp.swift:65:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ih_wjlp.swift:8:9: warning: initialization of variable 'is_multiply_prime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var is_multiply_prime = false\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:9:9:\
    \ warning: initialization of variable 'is_multiply_prime_2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_multiply_prime_2\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:10:9: warning:\
    \ initialization of variable 'is_multiply_prime_3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var is_multiply_prime_3 = false\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:11:9: warning: initialization\
    \ of variable 'is_multiply_prime_4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_multiply_prime_4 = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ih_wjlp.swift:12:9: warning: initialization of variable 'is_multiply_prime_5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var is_multiply_prime_5 = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:13:9:\
    \ warning: initialization of variable 'is_multiply_prime_6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_multiply_prime_6\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:14:9: warning:\
    \ initialization of variable 'is_multiply_prime_7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var is_multiply_prime_7 = false\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp8ih_wjlp.swift:15:9: warning: initialization\
    \ of variable 'is_multiply_prime_8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_multiply_prime_8 = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp8ih_wjlp.swift:16:9: warning: initialization of variable 'is_multiply_prime_9'\
    \ was never used; consider replacing with assignment to '_' "
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for i in 2...100 {\n        if a % i == 0 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxv2fs1ys/tmpxv2fs1ys.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab478a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab478765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab478765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4787647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv2fs1ys                        0x000056502dd503a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab478c5a460 __libc_start_main +
    245

    6    tmpxv2fs1ys                        0x000056502dd4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var is_multiply_prime = false\n    var prime_numbers = [Int]()\n    var\
    \ prime_numbers_count = 100\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime_numbers_count_max = 100\n    var prime_numbers_count_min\
    \ = 3\n    var prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0stuot8b.swift:13:9: error: invalid redeclaration of 'prime_numbers_count_max'\n\
    \    var prime_numbers_count_max = 100\n        ^\n/tmp/tmp0stuot8b.swift:11:9:\
    \ note: 'prime_numbers_count_max' previously declared here\n    var prime_numbers_count_max\
    \ = 100\n        ^\n/tmp/tmp0stuot8b.swift:14:9: error: invalid redeclaration\
    \ of 'prime_numbers_count_min'\n    var prime_numbers_count_min = 3\n        ^\n\
    /tmp/tmp0stuot8b.swift:12:9: note: 'prime_numbers_count_min' previously declared\
    \ here\n    var prime_numbers_count_min = 3\n        ^\n/tmp/tmp0stuot8b.swift:15:9:\
    \ error: invalid redeclaration of 'prime_numbers_count_max'\n    var prime_numbers_count_max\
    \ = 100\n        ^\n/tmp/tmp0stuot8b.swift:11:9: note: 'prime_numbers_count_max'\
    \ previously declared here\n    var prime_numbers_count_max = 100\n        ^\n\
    /tmp/tmp0stuot8b.swift:16:9: error: invalid redeclaration of 'prime_numbers_count_min'\n\
    \    var prime_numbers_count_min = 3\n        ^\n/tmp/tmp0stuot8b.swift:12:9:\
    \ note: 'prime_numbers_count_min' previously declared here\n    var prime_numbers_count_min\
    \ = 3\n        ^\n/tmp/tmp0stuot8b.swift:17:9: error: invalid redeclaration of\
    \ 'prime_numbers_count_max'\n    var prime_numbers_count_max = 100\n        ^\n\
    /tmp/tmp0stuot8b.swift:11:9: note: 'prime_numbers_count_max' previously declared\
    \ here\n    var prime_numbers_count_max = 100\n        ^\n/tmp/tmp0stuot8b.swift:18:9:\
    \ error: invalid redeclaration of 'prime_numbers_count_min'\n    var prime_numbers_count_min\
    \ = 3\n        ^\n/tmp/tmp0stuot8b.swift:12:9: note: 'prime_numbers_count_min'\
    \ previously declared here\n    var prime_numbers_count_min = 3\n        ^\n/tmp/tmp0stuot8b.swift:19:9:\
    \ error: invalid redeclaration of 'prime_numbers_count_max'\n    var prime_numbers_count_max\
    \ = 100\n        ^\n/tmp/tmp0stuot8b.swift:11:9: note: 'prime_numbers_count_max'\
    \ previously declared here\n    var prime_numbers_count_max = 100\n        ^\n\
    /tmp/tmp0stuot8b.swift:20:9: error: invalid redeclaration of 'prime_numbers_count_min'\n\
    \    var prime_numbers_count_min = 3\n        ^\n/tmp/tmp0stuot8b.swift:12:9:\
    \ note: 'prime_nu"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result: Bool = false\n    var primes = [Int]()\n    var prime: Int\
    \ = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpswp7_2su.swift:66:9: error: type annotation missing in pattern\n\
    \    var prime_\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    \n    var primes = [Int]()\n\
    \    var prime: Int = 0\n    var isPrime = true\n    \n    for prime in 2...Int(sqrt(a))\
    \ {\n        if a % prime == 0 {\n            isPrime = false\n            break\n\
    \        }\n    }\n    \n    if isPrime {\n        primes.append(prime)\n    }\n\
    \    \n    for prime in 2...Int(sqrt(a)) {\n        if a % prime == 0 {\n    \
    \        isPrime = false\n            break\n        }\n    }\n    \n    if isPrime\
    \ {\n        primes.append(prime)\n    }\n    \n    for prime in 2...Int(sqrt(a))\
    \ {\n        if a % prime == 0 {\n            isPrime = false\n            break\n\
    \        }\n    }\n    \n    if isPrime {\n        primes.append(prime)\n    }\n\
    \    \n    for prime in 2...Int(sqrt(a)) {\n        if a % prime == 0 {\n    \
    \        isPrime = false\n            break\n        }\n    }\n    \n    if isPrime\
    \ {\n        primes.append(prime)\n    }\n    \n    for prime in 2...Int(sqrt(a))\
    \ {\n        if a % prime == 0 {\n            isPrime = false\n            break\n\
    \        }\n    }\n    \n    if isPrime {\n        primes.append(prime)\n    }\n\
    \    \n    for prime in 2...Int(sqrt(a)) {\n        if a % prime == 0 {\n    \
    \        isPrime = false\n            break\n        }\n    }\n    \n    if isPrime\
    \ {\n        primes.append(prime)\n    }\n    \n    for prime in 2...Int(sqrt(a))\
    \ {\n        if a % prime == 0 {\n            isPrime = false\n            break\n\
    \        }\n    }\n    \n    if isPrime {\n        primes.append(prime)\n    }\n\
    \    \n    for prime in 2...Int(sqrt(a)) {\n        if a % prime == 0 {\n    \
    \        isPrime = false\n            break\n        }\n    }\n    \n    if isPrime\
    \ {\n        primes.append(prime)\n    }\n    \n    for prime in 2...Int(sqrt(a))\
    \ {\n        if a % prime == 0 {\n            isPrime = false\n            break\n\
    \        }\n    }\n    \n    if isPrime {\n        primes.append(prime)\n    }\n\
    \    \n    for prime in 2...Int(sqrt(a)) {\n        if a % prime == 0 {\n    \
    \        isPrime = false\n            break\n        }\n    }\n    \n    if isPrime\
    \ {\n        primes.append(prime)\n    }\n    \n    for prime in 2...Int(sqrt(a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5bpvsf0v.swift:127:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmp5bpvsf0v.swift:126:30: note: to match this opening '('\n    for\
    \ prime in 2...Int(sqrt(a\n                             ^\n/tmp/tmp5bpvsf0v.swift:126:32:\
    \ error: expected '{' to start the body of for-each loop\n    for prime in 2...Int(sqrt(a\n\
    \                               ^\n/tmp/tmp5bpvsf0v.swift:16:26: error: cannot\
    \ find 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n                \
    \         ^~~~\n/tmp/tmp5bpvsf0v.swift:27:26: error: cannot find 'sqrt' in scope\n\
    \    for prime in 2...Int(sqrt(a)) {\n                         ^~~~\n/tmp/tmp5bpvsf0v.swift:38:26:\
    \ error: cannot find 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n  \
    \                       ^~~~\n/tmp/tmp5bpvsf0v.swift:49:26: error: cannot find\
    \ 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n                     \
    \    ^~~~\n/tmp/tmp5bpvsf0v.swift:60:26: error: cannot find 'sqrt' in scope\n\
    \    for prime in 2...Int(sqrt(a)) {\n                         ^~~~\n/tmp/tmp5bpvsf0v.swift:71:26:\
    \ error: cannot find 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n  \
    \                       ^~~~\n/tmp/tmp5bpvsf0v.swift:82:26: error: cannot find\
    \ 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n                     \
    \    ^~~~\n/tmp/tmp5bpvsf0v.swift:93:26: error: cannot find 'sqrt' in scope\n\
    \    for prime in 2...Int(sqrt(a)) {\n                         ^~~~\n/tmp/tmp5bpvsf0v.swift:104:26:\
    \ error: cannot find 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n  \
    \                       ^~~~\n/tmp/tmp5bpvsf0v.swift:115:26: error: cannot find\
    \ 'sqrt' in scope\n    for prime in 2...Int(sqrt(a)) {\n                     \
    \    ^~~~\n/tmp/tmp5bpvsf0v.swift:126:26: error: cannot find 'sqrt' in scope\n\
    \    for prime in 2...Int(sqrt(a\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    var isPrime\
    \ = true\n    var isPrime2 = true\n    var isPrime3 = true\n    var isPrime4 =\
    \ true\n    var isPrime5 = true\n    var isPrime6 = true\n    var isPrime7 = true\n\
    \    var isPrime8 = true\n    var isPrime9 = true\n    var isPrime10 = true\n\
    \    var isPrime11 = true\n    var isPrime12 = true\n    var isPrime13 = true\n\
    \    var isPrime14 = true\n    var isPrime15 = true\n    var isPrime16 = true\n\
    \    var isPrime17 = true\n    var isPrime18 = true\n    var isPrime19 = true\n\
    \    var isPrime20 = true\n    var isPrime21 = true\n    var isPrime22 = true\n\
    \    var isPrime23 = true\n    var isPrime24 = true\n    var isPrime25 = true\n\
    \    var isPrime26 = true\n    var isPrime27 = true\n    var isPrime28 = true\n\
    \    var isPrime29 = true\n    var isPrime30 = true\n    var isPrime31 = true\n\
    \    var isPrime32 = true\n    var isPrime33 = true\n    var isPrime34 = true\n\
    \    var isPrime35 = true\n    var isPrime36 = true\n    var isPrime37 = true\n\
    \    var isPrime38 = true\n    var isPrime39 = true\n    var isPrime40 = true\n\
    \    var isPrime41 = true\n    var isPrime42 = true\n    var isPrime43 = true\n\
    \    var isPrime44 = true\n    var isPrime45 = true\n    var isPrime46 = true\n\
    \    var isPrime47 = true\n    var isPrime48 = true\n    var isPrime49 = true\n\
    \    var isPrime50 = true\n    var isPrime51 = true\n    var isPrime52 = true\n\
    \    var isPrime53 = true\n    var isPrime54 = true\n    var isPrime55 = true\n\
    \    var isPrime56 = true\n    var isPrime57 = true\n    var isPrime58 = true\n\
    \    var isPrime59 = true\n    var isPrime60 = true\n    var isPrime61 = true\n\
    \    var isPrime62 = true\n    var isPrime63 = true\n    var isPrime64 = true\n\
    \    var isPrime65 = true\n    var isPrime66 = true\n    var isPrime67 = true\n\
    \    var isPrime68 = true\n    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpthupypg3.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpthupypg3.swift:8:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpthupypg3.swift:9:9: warning:\
    \ initialization of variable 'isMultiplyPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:10:9: warning: initialization of variable 'isPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpthupypg3.swift:11:9: warning:\
    \ initialization of variable 'isPrime2' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:12:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:13:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:14:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:15:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:16:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:17:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for var i = 2; i\
    \ < a; i++ {\n            if a % i == 0 {\n                result = true\n   \
    \             break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsh74ox2b.swift:11:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for b in 2..<100\
    \ {\n            if a % b == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpr0djooj9/tmpr0djooj9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b464b770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b464b467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b464b467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b464b4667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0djooj9                        0x0000557f9074a333 <unavailable> + 4915

    5    libc.so.6                          0x00002b464b95c460 __libc_start_main +
    245

    6    tmpr0djooj9                        0x0000557f90749fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a <= 100 {\n        let primes = primes(a)\n\
    \        for prime in primes {\n            if a % prime == 0 {\n            \
    \    result = true\n                break\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmjwrrc8l.swift:11:22: error: use of local variable 'primes' before\
    \ its declaration\n        let primes = primes(a)\n                     ^\n/tmp/tmpmjwrrc8l.swift:11:13:\
    \ note: 'primes' declared here\n        let primes = primes(a)\n            ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n\
    \    var primes_sum3 = 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n \
    \   var primes_sum6 = 0\n    var primes_sum7 = 0\n    var primes_sum8 = 0\n  \
    \  var primes_sum9 = 0\n    var primes_sum10 = 0\n    var primes_sum11 = 0\n \
    \   var primes_sum12 = 0\n    var primes_sum13 = 0\n    var primes_sum14 = 0\n\
    \    var primes_sum15 = 0\n    var primes_sum16 = 0\n    var primes_sum17 = 0\n\
    \    var primes_sum18 = 0\n    var primes_sum19 = 0\n    var primes_sum20 = 0\n\
    \    var primes_sum21 = 0\n    var primes_sum22 = 0\n    var primes_sum23 = 0\n\
    \    var primes_sum24 = 0\n    var primes_sum25 = 0\n    var primes_sum26 = 0\n\
    \    var primes_sum27 = 0\n    var primes_sum28 = 0\n    var primes_sum29 = 0\n\
    \    var primes_sum30 = 0\n    var primes_sum31 = 0\n    var primes_sum32 = 0\n\
    \    var primes_sum33 = 0\n    var primes_sum34 = 0\n    var primes_sum35 = 0\n\
    \    var primes_sum36 = 0\n    var primes_sum37 = 0\n    var primes_sum38 = 0\n\
    \    var primes_sum39 = 0\n    var primes_sum40 = 0\n    var primes_sum41 = 0\n\
    \    var primes_sum42 = 0\n    var primes_sum43 = 0\n    var primes_sum44 = 0\n\
    \    var primes_sum45 = 0\n    var primes_sum46 = 0\n    var primes_sum47 = 0\n\
    \    var primes_sum48 = 0\n    var primes_sum49 = 0\n    var primes_sum50 = 0\n\
    \    var primes_sum51 = 0\n    var primes_sum52 = 0\n    var primes_sum53 = 0\n\
    \    var primes_sum54 = 0\n    var primes_sum55 = 0\n    var primes_sum56 = 0\n\
    \    var primes_sum57 = 0\n    var primes_sum58 = 0\n    var primes_sum59 = 0\n\
    \    var primes_sum60 = 0\n    var primes_sum61 = 0\n    var primes_sum62 = 0\n\
    \    var primes_sum63 = 0\n    var primes_sum64 = 0\n    var primes_sum65 = 0\n\
    \    var primes_sum66 = 0\n    var primes_sum67 = 0\n    var primes_sum68 = 0\n\
    \    var primes_sum69 = 0\n    var primes_sum70 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3mzipdmf.swift:11:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:12:9:\
    \ warning: initialization of variable 'primes_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var primes_count = 100\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:13:9: warning: initialization\
    \ of variable 'primes_sum' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:14:9:\
    \ warning: initialization of variable 'primes_sum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:15:9: warning: initialization of variable 'primes_sum3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:16:9:\
    \ warning: initialization of variable 'primes_sum4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:17:9: warning: initialization of variable 'primes_sum5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:18:9:\
    \ warning: initialization of variable 'primes_sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:19:9: warning: initialization of variable 'primes_sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp3mzipdmf.swift:20:9:\
    \ warning: initialization of variable 'primes_sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp3mzipdmf.swift:21:9: warnin"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    primes.append(2)\n\
    \    primes.append(3)\n    primes.append(5)\n    for prime in primes {\n     \
    \   if a % prime == 0 {\n            isMultiplyPrime = false\n            break\n\
    \        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp7ubktg9h/tmp7ubktg9h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b197386ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1973561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1973561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19735607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ubktg9h                        0x000055c142544517 <unavailable> + 5399

    5    libc.so.6                          0x00002b1973a56460 __libc_start_main +
    245

    6    tmp7ubktg9h                        0x000055c142544159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    primes.append(2)\n\
    \    primes.append(3)\n    primes.append(5)\n    for i in 2..<100 {\n        if\
    \ primes.contains(a) {\n            result = true\n            break\n       \
    \ }\n        for j in 2..<100 {\n            if i != j && a % primes[j] == 0 {\n\
    \                result = true\n                break\n            }\n       \
    \ }\n        if result {\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp49vnn4a8/tmp49vnn4a8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51be09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51bb00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51bb00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51baff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49vnn4a8                        0x000055e3c1de74f3 <unavailable> + 5363

    5    libc.so.6                          0x00002ad51bff5460 __libc_start_main +
    245

    6    tmp49vnn4a8                        0x000055e3c1de71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int = 0\n    var isMultiplyPrime:\
    \ Bool = false\n    \n    for prime in 2...100 {\n        if a % prime == 0 {\n\
    \            primes.append(prime)\n        }\n    }\n    \n    for prime in primes\
    \ {\n        if a % prime == 0 {\n            isMultiplyPrime = true\n       \
    \ }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp3vyzwgbb/tmp3vyzwgbb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b614d7d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b614d4cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b614d4ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b614d4c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vyzwgbb                        0x00005627f8ddd5a3 <unavailable> + 5539

    5    libc.so.6                          0x00002b614d9bf460 __libc_start_main +
    245

    6    tmp3vyzwgbb                        0x00005627f8ddd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzn4d0tvq.swift:12:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:13:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpzn4d0tvq.swift:11:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:14:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:11:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpzn4d0tvq.swift:15:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:16:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpzn4d0tvq.swift:11:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:11:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpzn4d0tvq.swift:18:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:11:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpzn4d0tvq.swift:19:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpzn4d0tvq.swift:11:9: note: 'primes_count_copy' previously declared "
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for b in 2..<100\
    \ {\n            if a % b == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpr0djooj9/tmpr0djooj9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b464b770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b464b467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b464b467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b464b4667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0djooj9                        0x0000557f9074a333 <unavailable> + 4915

    5    libc.so.6                          0x00002b464b95c460 __libc_start_main +
    245

    6    tmpr0djooj9                        0x0000557f90749fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var prime: Int\n  \
    \  var i: Int\n    \n    for i = 2; i < 100; i++ {\n        prime = i\n      \
    \  while prime > 1 {\n            if a % prime == 0 {\n                result\
    \ = true\n                break\n            }\n            prime = prime - 1\n\
    \        }\n        if result {\n            break\n        }\n        primes.append(prime)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8bgtjd6x.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < 100; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uyrrc1j.swift:15:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:16:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:23:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for i in 2...100 {\n        if a % i == 0 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxv2fs1ys/tmpxv2fs1ys.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab478a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab478765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab478765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4787647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv2fs1ys                        0x000056502dd503a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab478c5a460 __libc_start_main +
    245

    6    tmpxv2fs1ys                        0x000056502dd4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    primes.append(5)\n    primes.append(7)\n    primes.append(11)\n\
    \    primes.append(13)\n    primes.append(17)\n    primes.append(19)\n    primes.append(23)\n\
    \    primes.append(29)\n    primes.append(31)\n    primes.append(37)\n    primes.append(43)\n\
    \    primes.append(51)\n    primes.append(59)\n    primes.append(61)\n    primes.append(67)\n\
    \    primes.append(73)\n    primes.append(79)\n    primes.append(83)\n    primes.append(89)\n\
    \    primes.append(97)\n    primes.append(101)\n    primes.append(103)\n    primes.append(107)\n\
    \    primes.append(109)\n    primes.append(113)\n    primes.append(127)\n    primes.append(131)\n\
    \    primes.append(137)\n    primes.append(139)\n    primes.append(149)\n    primes.append(151)\n\
    \    primes.append(157)\n    primes.append(163)\n    primes.append(167)\n    primes.append(173)\n\
    \    primes.append(179)\n    primes.append(181)\n    primes.append(191)\n    primes.append(193)\n\
    \    primes.append(197)\n    primes.append(199)\n    primes.append(211)\n    primes.append(223)\n\
    \    primes.append(227)\n    primes.append(229)\n    primes.append(233)\n    primes.append(239)\n\
    \    primes.append(241)\n    primes.append(243)\n    primes.append(247)\n    primes.append(251)\n\
    \    primes.append(257)\n    primes.append(263)\n    primes.append(269)\n    primes.append(271)\n\
    \    primes.append(273)\n    primes.append(277)\n    primes.append(281)\n    primes.append(283)\n\
    \    primes.append(293)\n    primes.append(307)\n    primes.append(311)\n    primes.append(313)\n\
    \    primes.append(317)\n    primes.append(331)\n    primes.append(337)\n    primes.append(347)\n\
    \    primes.append(349)\n    primes.append(353)\n    primes.append(359)\n    primes.append(367)\n\
    \    primes.append(373)\n    primes.append(379)\n    primes.append(383)\n    primes.append(389)\n\
    \    primes.append(397)\n    primes.append(409)\n    primes.append(419)\n    primes.append(421)\n\
    \    primes.append(423)\n    primes.append(427)\n    primes.append(429)\n    prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp147n18ff.swift:94:5: error: cannot find 'prime' in scope\n    prime\n\
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    var isPrime\
    \ = true\n    var isPrime2 = true\n    var isPrime3 = true\n    var isPrime4 =\
    \ true\n    var isPrime5 = true\n    var isPrime6 = true\n    var isPrime7 = true\n\
    \    var isPrime8 = true\n    var isPrime9 = true\n    var isPrime10 = true\n\
    \    var isPrime11 = true\n    var isPrime12 = true\n    var isPrime13 = true\n\
    \    var isPrime14 = true\n    var isPrime15 = true\n    var isPrime16 = true\n\
    \    var isPrime17 = true\n    var isPrime18 = true\n    var isPrime19 = true\n\
    \    var isPrime20 = true\n    var isPrime21 = true\n    var isPrime22 = true\n\
    \    var isPrime23 = true\n    var isPrime24 = true\n    var isPrime25 = true\n\
    \    var isPrime26 = true\n    var isPrime27 = true\n    var isPrime28 = true\n\
    \    var isPrime29 = true\n    var isPrime30 = true\n    var isPrime31 = true\n\
    \    var isPrime32 = true\n    var isPrime33 = true\n    var isPrime34 = true\n\
    \    var isPrime35 = true\n    var isPrime36 = true\n    var isPrime37 = true\n\
    \    var isPrime38 = true\n    var isPrime39 = true\n    var isPrime40 = true\n\
    \    var isPrime41 = true\n    var isPrime42 = true\n    var isPrime43 = true\n\
    \    var isPrime44 = true\n    var isPrime45 = true\n    var isPrime46 = true\n\
    \    var isPrime47 = true\n    var isPrime48 = true\n    var isPrime49 = true\n\
    \    var isPrime50 = true\n    var isPrime51 = true\n    var isPrime52 = true\n\
    \    var isPrime53 = true\n    var isPrime54 = true\n    var isPrime55 = true\n\
    \    var isPrime56 = true\n    var isPrime57 = true\n    var isPrime58 = true\n\
    \    var isPrime59 = true\n    var isPrime60 = true\n    var isPrime61 = true\n\
    \    var isPrime62 = true\n    var isPrime63 = true\n    var isPrime64 = true\n\
    \    var isPrime65 = true\n    var isPrime66 = true\n    var isPrime67 = true\n\
    \    var isPrime68 = true\n    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpthupypg3.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpthupypg3.swift:8:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpthupypg3.swift:9:9: warning:\
    \ initialization of variable 'isMultiplyPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:10:9: warning: initialization of variable 'isPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpthupypg3.swift:11:9: warning:\
    \ initialization of variable 'isPrime2' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:12:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:13:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:14:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:15:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:16:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:17:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    if a < 100 {\n        for b in 2...a / 2 {\n\
    \            if a % b == 0 {\n                result = true\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpodlg5r6q/tmpodlg5r6q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc6e04fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc6dd46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc6dd46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc6dd457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodlg5r6q                        0x000056095fa0f491 <unavailable> + 5265

    5    libc.so.6                          0x00002adc6e23b460 __libc_start_main +
    245

    6    tmpodlg5r6q                        0x000056095fa0efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ var i: Int\n    var j: Int\n    \n    for i = 2; i < 100; i++ {\n        prime\
    \ = i\n        primes.append(prime)\n        for j = i + i; j < 100; j += i {\n\
    \            if j % prime == 0 {\n                result = false\n           \
    \     break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpu08t_wty.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < 100; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu08t_wty.swift:17:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for j = i\
    \ + i; j < 100; j += i {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        let primes = primes(a)\n\
    \        \n        for prime in primes {\n            if a % prime == 0 {\n  \
    \              result = true\n                break\n            }\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqpky889r.swift:11:22: error: use of local variable 'primes' before\
    \ its declaration\n        let primes = primes(a)\n                     ^\n/tmp/tmpqpky889r.swift:11:13:\
    \ note: 'primes' declared here\n        let primes = primes(a)\n            ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 1 {\n        return true\n    }\n    \n    var primes = [Int]()\n\
    \    \n    for n in 2...100 {\n        if a % n == 0 {\n            primes.append(n)\n\
    \        }\n    }\n    \n    if primes.count == 3 {\n        return true\n   \
    \ }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpz5q55mul/tmpz5q55mul.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1908c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1905beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1905be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1905bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5q55mul                        0x0000558961306507 <unavailable> + 5383

    5    libc.so.6                          0x00002ab190ab3460 __libc_start_main +
    245

    6    tmpz5q55mul                        0x0000558961306149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var primes_count = 100\n\
    \    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyv2oht.swift:81:27: error: expected initial value after '='\n\
    \    var primes_count_max = \n                          ^\n/tmp/tmp7nyv2oht.swift:13:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmp7nyv2oht.swift:11:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmp7nyv2oht.swift:14:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmp7nyv2oht.swift:12:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmp7nyv2oht.swift:15:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmp7nyv2oht.swift:11:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmp7nyv2oht.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmp7nyv2oht.swift:12:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmp7nyv2oht.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmp7nyv2oht.swift:11:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmp7nyv2oht.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmp7nyv2oht.swift:12:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmp7nyv2oht.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmp7nyv2oht.swift:11:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmp7nyv2oht.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmp7nyv2oht.swift:12:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmp7n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    primes.append(5)\n    for i in 2..100 {\n        if\
    \ primes.contains(a) { result = false; break }\n        for j in 2..100 {\n  \
    \          if i != j && primes.contains(a*j) {\n                result = false;\
    \ break\n            }\n        }\n        if result { break }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn8qaok4n.swift:13:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 2..100 {\n              ^~\n             \
    \ ...\n/tmp/tmpn8qaok4n.swift:15:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in 2..100 {\n                  ^~\n     \
    \             ...\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int\n    var isPrime: Bool\n   \
    \ var isMultiplication: Bool\n    var isMultiplicationPrime: Bool\n    var isMultiplicationPrime2:\
    \ Bool\n    var isMultiplicationPrime3: Bool\n    var isMultiplicationPrime4:\
    \ Bool\n    var isMultiplicationPrime5: Bool\n    var isMultiplicationPrime6:\
    \ Bool\n    var isMultiplicationPrime7: Bool\n    var isMultiplicationPrime8:\
    \ Bool\n    var isMultiplicationPrime9: Bool\n    var isMultiplicationPrime10:\
    \ Bool\n    var isMultiplicationPrime11: Bool\n    var isMultiplicationPrime12:\
    \ Bool\n    var isMultiplicationPrime13: Bool\n    var isMultiplicationPrime14:\
    \ Bool\n    var isMultiplicationPrime15: Bool\n    var isMultiplicationPrime16:\
    \ Bool\n    var isMultiplicationPrime17: Bool\n    var isMultiplicationPrime18:\
    \ Bool\n    var isMultiplicationPrime19: Bool\n    var isMultiplicationPrime20:\
    \ Bool\n    var isMultiplicationPrime21: Bool\n    var isMultiplicationPrime22:\
    \ Bool\n    var isMultiplicationPrime23: Bool\n    var isMultiplicationPrime24:\
    \ Bool\n    var isMultiplicationPrime25: Bool\n    var isMultiplicationPrime26:\
    \ Bool\n    var isMultiplicationPrime27: Bool\n    var isMultiplicationPrime28:\
    \ Bool\n    var isMultiplicationPrime29: Bool\n    var isMultiplicationPrime30:\
    \ Bool\n    var isMultiplicationPrime31: Bool\n    var isMultiplicationPrime32:\
    \ Bool\n    var isMultiplicationPrime33: Bool\n    var isMultiplicationPrime34:\
    \ Bool\n    var isMultiplicationPrime35: Bool\n    var isMultiplicationPrime36:\
    \ Bool\n    var isMultiplicationPrime37: Bool\n    var isMultiplicationPrime38:\
    \ Bool\n    var isMultiplicationPrime39: Bool\n    var isMultiplicationPrime40:\
    \ Bool\n    var isMultiplicationPrime41: Bool\n    var isMultiplicationPrime42:\
    \ Bool\n    var isMultiplicationPrime43: Bool\n    var isMultiplicationPrime44:\
    \ Bool\n    var isMultiplicationPri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpja8j92jq.swift:56:9: error: type annotation missing in pattern\n\
    \    var isMultiplicationPri\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for i in 2...100 {\n        if a % i == 0 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxv2fs1ys/tmpxv2fs1ys.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab478a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab478765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab478765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4787647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv2fs1ys                        0x000056502dd503a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab478c5a460 __libc_start_main +
    245

    6    tmpxv2fs1ys                        0x000056502dd4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    \n    for i in 1...a / 2 {\n       \
    \ if a % i == 0 {\n            isMultiplyPrime = false\n            break\n  \
    \      }\n        if a % i == 1 {\n            isMultiplyPrime = true\n      \
    \      break\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpo17bkdg_/tmpo17bkdg_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2415fb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2415caeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2415cae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2415cad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo17bkdg_                        0x00005631e07c83a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b24161a3460 __libc_start_main +
    245

    6    tmpo17bkdg_                        0x00005631e07c7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    var isPrime\
    \ = true\n    var isPrime2 = true\n    var isPrime3 = true\n    var isPrime4 =\
    \ true\n    var isPrime5 = true\n    var isPrime6 = true\n    var isPrime7 = true\n\
    \    var isPrime8 = true\n    var isPrime9 = true\n    var isPrime10 = true\n\
    \    var isPrime11 = true\n    var isPrime12 = true\n    var isPrime13 = true\n\
    \    var isPrime14 = true\n    var isPrime15 = true\n    var isPrime16 = true\n\
    \    var isPrime17 = true\n    var isPrime18 = true\n    var isPrime19 = true\n\
    \    var isPrime20 = true\n    var isPrime21 = true\n    var isPrime22 = true\n\
    \    var isPrime23 = true\n    var isPrime24 = true\n    var isPrime25 = true\n\
    \    var isPrime26 = true\n    var isPrime27 = true\n    var isPrime28 = true\n\
    \    var isPrime29 = true\n    var isPrime30 = true\n    var isPrime31 = true\n\
    \    var isPrime32 = true\n    var isPrime33 = true\n    var isPrime34 = true\n\
    \    var isPrime35 = true\n    var isPrime36 = true\n    var isPrime37 = true\n\
    \    var isPrime38 = true\n    var isPrime39 = true\n    var isPrime40 = true\n\
    \    var isPrime41 = true\n    var isPrime42 = true\n    var isPrime43 = true\n\
    \    var isPrime44 = true\n    var isPrime45 = true\n    var isPrime46 = true\n\
    \    var isPrime47 = true\n    var isPrime48 = true\n    var isPrime49 = true\n\
    \    var isPrime50 = true\n    var isPrime51 = true\n    var isPrime52 = true\n\
    \    var isPrime53 = true\n    var isPrime54 = true\n    var isPrime55 = true\n\
    \    var isPrime56 = true\n    var isPrime57 = true\n    var isPrime58 = true\n\
    \    var isPrime59 = true\n    var isPrime60 = true\n    var isPrime61 = true\n\
    \    var isPrime62 = true\n    var isPrime63 = true\n    var isPrime64 = true\n\
    \    var isPrime65 = true\n    var isPrime66 = true\n    var isPrime67 = true\n\
    \    var isPrime68 = true\n    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpthupypg3.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpthupypg3.swift:8:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpthupypg3.swift:9:9: warning:\
    \ initialization of variable 'isMultiplyPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:10:9: warning: initialization of variable 'isPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpthupypg3.swift:11:9: warning:\
    \ initialization of variable 'isPrime2' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:12:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:13:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:14:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:15:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:16:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:17:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ var i: Int\n    for i = 2; i <= a / 2; i += 1 {\n        prime = i\n       \
    \ while prime > 1 {\n            if a % prime == 0 {\n                result =\
    \ false\n                break\n            }\n            prime = primes.last!\
    \ + 1\n        }\n        primes.append(prime)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpegot2nus.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= a / 2; i += 1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for var i = 2; i\
    \ < a; i++ {\n            if a % i == 0 {\n                result = true\n   \
    \             break\n            }\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsh74ox2b.swift:11:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    \n    var primes = [Int]()\n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var\
    \ primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n\
    \    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var\
    \ primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n\
    \    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var\
    \ primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n\
    \    \n    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var\
    \ primes_count = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n\
    \    var primes_count_max = Int(0)\n    \n    var primes_count = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgpaufwo4.swift:16:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:13:9: note:\
    \ 'primes_count' previously declared here\n    var primes_count = Int(0)\n   \
    \     ^\n/tmp/tmpgpaufwo4.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:14:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmpgpaufwo4.swift:19:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:13:9: note:\
    \ 'primes_count' previously declared here\n    var primes_count = Int(0)\n   \
    \     ^\n/tmp/tmpgpaufwo4.swift:20:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:14:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmpgpaufwo4.swift:22:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:13:9: note:\
    \ 'primes_count' previously declared here\n    var primes_count = Int(0)\n   \
    \     ^\n/tmp/tmpgpaufwo4.swift:23:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:14:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmpgpaufwo4.swift:25:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:13:9: note:\
    \ 'primes_count' previously declared here\n    var primes_count = Int(0)\n   \
    \     ^\n/tmp/tmpgpaufwo4.swift:26:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swift:14:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmpgpaufwo4.swift:28:9: error: invalid redeclaration of 'primes_count'\n\
    \    var primes_count = Int(0)\n        ^\n/tmp/tmpgpaufwo4.swi"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var prime: Int\n    var i: Int\n    for i = 2; i < a; i++ {\n        prime\
    \ = 0\n        for prime in primes {\n            if i % prime == 0 {\n      \
    \          break\n            }\n        }\n        if prime == 0 {\n        \
    \    primes.append(i)\n        }\n    }\n    return primes.count >= 3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprxlq6szh.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        var primes = [Int]()\n\
    \        \n        for i in 2...a / 2 {\n            if a % i == 0 {\n       \
    \         primes.append(i)\n            }\n        }\n        \n        if primes.count\
    \ == 3 {\n            result = true\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnrmvsuxn/tmpnrmvsuxn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb9d5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb9d2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb9d2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb9d2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrmvsuxn                        0x00005630bc3a9507 <unavailable> + 5383

    5    libc.so.6                          0x00002afb9d7a5460 __libc_start_main +
    245

    6    tmpnrmvsuxn                        0x00005630bc3a9149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    if a < 100 {\n        var primes = [Int]()\n\
    \        var prime: Int\n        for prime in 2...100 {\n            if a % prime\
    \ == 0 {\n                primes.append(prime)\n            }\n        }\n   \
    \     if primes.count > 2 {\n            result = true\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpel4t0tkc/tmpel4t0tkc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a1f4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a1c46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a1c46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a1c457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel4t0tkc                        0x0000555b453e65f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b72a213b460 __libc_start_main +
    245

    6    tmpel4t0tkc                        0x0000555b453e6149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    primes.append(5)\n    for i in 2...100 {\n        if\
    \ a % i == 0 {\n            if primes.contains(i) {\n                result =\
    \ false\n            } else {\n                primes.append(i)\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpyepf6k02/tmpyepf6k02.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adae11cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae0ec6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adae0ec6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adae0ec57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyepf6k02                        0x00005608dbfb6517 <unavailable> + 5399

    5    libc.so.6                          0x00002adae13bb460 __libc_start_main +
    245

    6    tmpyepf6k02                        0x00005608dbfb6159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    primes.append(5)\n    for i in 2..<100 {\n        if\
    \ primes.contains(a) {\n            result = false\n            break\n      \
    \  }\n        for j in 2..<100 {\n            if i != j {\n                if\
    \ a % i == 0 && a % j == 0 {\n                    result = false\n           \
    \         break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp50z5hy_8/tmp50z5hy_8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc594ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc5645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc5645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc56447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50z5hy_8                        0x0000562c2ae97517 <unavailable> + 5399

    5    libc.so.6                          0x00002afdc5b3a460 __libc_start_main +
    245

    6    tmp50z5hy_8                        0x0000562c2ae97159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        \n        var primes\
    \ = [Int]()\n        \n        for i in 1...100 {\n            if i % 2 == 0 {\n\
    \                continue\n            }\n            \n            if a % i ==\
    \ 0 {\n                primes.append(i)\n            }\n        }\n        \n\
    \        if primes.count >= 3 {\n            result = true\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpeph1rlc2/tmpeph1rlc2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80245a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b802429ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b802429a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80242997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeph1rlc2                        0x0000564650abb57b <unavailable> + 5499

    5    libc.so.6                          0x00002b802478f460 __libc_start_main +
    245

    6    tmpeph1rlc2                        0x0000564650abb149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n \
    \   var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n  \
    \  var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n   \
    \ var z = 0\n    var a = 0\n    var b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphj69mh31.swift:34:9: error: invalid redeclaration of 'b'\n    var\
    \ b = 0\n        ^\n/tmp/tmphj69mh31.swift:8:9: note: 'b' previously declared\
    \ here\n    var b = 0\n        ^\n/tmp/tmphj69mh31.swift:35:9: error: invalid\
    \ redeclaration of 'c'\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:9:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmphj69mh31.swift:36:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:10:9:\
    \ note: 'd' previously declared here\n    var d = 0\n        ^\n/tmp/tmphj69mh31.swift:37:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:11:9:\
    \ note: 'e' previously declared here\n    var e = 0\n        ^\n/tmp/tmphj69mh31.swift:38:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:12:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmphj69mh31.swift:39:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:13:9:\
    \ note: 'g' previously declared here\n    var g = 0\n        ^\n/tmp/tmphj69mh31.swift:40:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:14:9:\
    \ note: 'h' previously declared here\n    var h = 0\n        ^\n/tmp/tmphj69mh31.swift:41:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:15:9:\
    \ note: 'i' previously declared here\n    var i = 0\n        ^\n/tmp/tmphj69mh31.swift:42:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:16:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphj69mh31.swift:43:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:17:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphj69mh31.swift:44:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:18:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphj69mh31.swift:45:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphj69mh"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for i in 2...100 {\n        if a % i == 0 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpxv2fs1ys/tmpxv2fs1ys.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab478a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab478765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab478765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4787647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv2fs1ys                        0x000056502dd503a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ab478c5a460 __libc_start_main +
    245

    6    tmpxv2fs1ys                        0x000056502dd4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ \n    for prime in 1...100 {\n        if a % prime == 0 {\n            result\
    \ = false\n            break\n        }\n        \n        if prime > 1 {\n  \
    \          if a % prime == 0 {\n                result = false\n             \
    \   break\n            }\n        }\n        \n        if prime > 2 {\n      \
    \      if a % prime == 0 {\n                result = false\n                break\n\
    \            }\n        }\n        \n        if prime > 3 {\n            if a\
    \ % prime == 0 {\n                result = false\n                break\n    \
    \        }\n        }\n        \n        if prime > 4 {\n            if a % prime\
    \ == 0 {\n                result = false\n                break\n            }\n\
    \        }\n        \n        if prime > 5 {\n            if a % prime == 0 {\n\
    \                result = false\n                break\n            }\n      \
    \  }\n        \n        if prime > 6 {\n            if a % prime == 0 {\n    \
    \            result = false\n                break\n            }\n        }\n\
    \        \n        if prime > 7 {\n            if a % prime == 0 {\n         \
    \       result = false\n                break\n            }\n        }\n    \
    \    \n        if prime > 8 {\n            if a % prime == 0 {\n             \
    \   result = false\n                break\n            }\n        }\n        \n\
    \        if prime > 9 {\n            if a % prime == 0 {\n                result\
    \ = false\n                break\n            }\n        }\n        \n       \
    \ if prime > 10 {\n            if a % prime == 0 {\n                result = false\n\
    \                break\n            }\n        }\n        \n        if prime >\
    \ 11 {\n            if a % prime == 0 {\n                result = false\n    \
    \            break\n            }\n        }\n        \n        if prime > 12\
    \ {\n            if a % prime == 0 {\n                result = false\n       \
    \         break\n            }\n        }\n        \n        if prime > 13 {\n\
    \            if a % prime == 0 {\n                result = false\n           \
    \     break\n            }\n        }\n        \n        if prime > 14 {\n   \
    \         if a % prime == 0 {\n                result = false\n              \
    \  break\n            }\n        }\n        \n        if prime > 15 {\n      \
    \      if a % prime == 0 {\n                result = false\n                break\n\
    \            }\n        }\n        \n        if prime > 16 {\n            if a\
    \ % prime == 0 {\n                result = false\n                break\n    \
    \        }\n        }\n        \n        if prime > 17 {\n            if a % prime\
    \ == 0 {\n                result = false\n                break\n            }\n\
    \        }\n        \n        if prime > 18 {\n            if a % prime == 0 {\n\
    \                result = false\n                break\n            }\n      \
    \  }\n        \n        if prime > 19 {\n            if a % prime == 0 {\n   \
    \             result = false\n                break\n            }\n        }\n\
    \        \n        if prime > 20 {\n            if a % prime == 0 {\n        \
    \        result = false\n                break\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuirmq6ts.swift:180:43: error: expected '}' at end of brace statement\n\
    assert(is_multiply_prime(a: 1001) == true)\n                                 \
    \         ^\n/tmp/tmpuirmq6ts.swift:151:23: note: to match this opening '{'\n\
    \        if prime > 20 {\n                      ^\n/tmp/tmpuirmq6ts.swift:180:43:\
    \ error: expected '}' at end of brace statement\nassert(is_multiply_prime(a: 1001)\
    \ == true)\n                                          ^\n/tmp/tmpuirmq6ts.swift:12:26:\
    \ note: to match this opening '{'\n    for prime in 1...100 {\n              \
    \           ^\n/tmp/tmpuirmq6ts.swift:180:43: error: expected '}' at end of brace\
    \ statement\nassert(is_multiply_prime(a: 1001) == true)\n                    \
    \                      ^\n/tmp/tmpuirmq6ts.swift:7:40: note: to match this opening\
    \ '{'\nfunc is_multiply_prime(a: Int) -> Bool {\n                            \
    \           ^\n/tmp/tmpuirmq6ts.swift:159:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmpuirmq6ts.swift:8:9: warning: variable 'result'\
    \ was written to, but never read\n    var result = true\n        ^\n/tmp/tmpuirmq6ts.swift:9:9:\
    \ warning: initialization of variable 'primes' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpuirmq6ts.swift:10:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int\n        ^~~~~\n\
    \        _\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for n in 2..a / 2\
    \ {\n            if a % n == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0_hyd7fq.swift:11:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for n in 2..a / 2 {\n                  ^~\n   \
    \               ...\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    primes.append(2)\n \
    \   primes.append(3)\n    for i in 1...100 {\n        if primes.contains(a) {\n\
    \            result = false\n            break\n        }\n        for j in 2...i\
    \ {\n            if a % j == 0 {\n                result = false\n           \
    \     break\n            }\n        }\n        if result {\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b88b72a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88b6f9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b88b6f9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b88b6f9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b88b6f99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_h6nmpuh                        0x000055c3f8511b8e <unavailable> + 7054

    6    tmp_h6nmpuh                        0x000055c3f851143b <unavailable> + 5179

    7    libc.so.6                          0x00002b88b748f460 __libc_start_main +
    245

    8    tmp_h6nmpuh                        0x000055c3f8511159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int = 0\n    var isPrime: Bool =\
    \ false\n    \n    while prime < 100 {\n        primes.append(prime)\n       \
    \ prime = prime + 1\n    }\n    \n    for prime in primes {\n        if a % prime\
    \ == 0 {\n            isPrime = false\n            break\n        }\n    }\n \
    \   \n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b46d5006c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46d4cfd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b46d4cfd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b46d4cfd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b46d4cfcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu2o1drjr                        0x0000560f1dde0ae4 <unavailable> + 6884

    6    tmpu2o1drjr                        0x0000560f1dde043b <unavailable> + 5179

    7    libc.so.6                          0x00002b46d51f2460 __libc_start_main +
    245

    8    tmpu2o1drjr                        0x0000560f1dde0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    for var i =\
    \ 2; i < a; i++ {\n        if primes.contains(i) {\n            continue\n   \
    \     }\n        var isPrime = true\n        for var j = 2; j < i; j++ {\n   \
    \         if i % j == 0 {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if isPrime {\n            primes.append(i)\n\
    \        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5g9v7fyz.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp5g9v7fyz.swift:15:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 2; j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp844ash2x.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmp844ash2x.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp844ash2x.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp844ash2x.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \   "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        for b in 2..<100\
    \ {\n            if a % b == 0 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpr0djooj9/tmpr0djooj9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b464b770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b464b467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b464b467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b464b4667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0djooj9                        0x0000557f9074a333 <unavailable> + 4915

    5    libc.so.6                          0x00002b464b95c460 __libc_start_main +
    245

    6    tmpr0djooj9                        0x0000557f90749fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for prime in primes {\n\
    \        if a % prime == 0 {\n            return false\n        }\n    }\n   \
    \ \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpgp5ss6y8/tmpgp5ss6y8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab78d3e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab78d0dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab78d0db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab78d0da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp5ss6y8                        0x0000563ba7f7f527 <unavailable> + 5415

    5    libc.so.6                          0x00002ab78d5d0460 __libc_start_main +
    245

    6    tmpgp5ss6y8                        0x0000563ba7f7f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    for i in 2...100 {\n        if a % i\
    \ == 0 {\n            isMultiplyPrime = false\n            break\n        }\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprfj9hlx6/tmprfj9hlx6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fedfb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fedca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fedca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fedca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfj9hlx6                        0x0000563feed323a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b8fee19e460 __libc_start_main +
    245

    6    tmprfj9hlx6                        0x0000563feed31fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    if a > 100 {\n        return false\n    }\n \
    \   if a % 2 == 0 {\n        return false\n    }\n    var primes = [Int]()\n \
    \   var primes_count = 100\n    var primes_count_copy = primes_count\n    for\
    \ _ in 0..<primes_count {\n        primes.append(0)\n    }\n    for _ in 0..<primes_count\
    \ {\n        if primes[Int(arc4random_uniform(primes_count))] == 0 {\n       \
    \     primes[Int(arc4random_uniform(primes_count))] = 1\n        }\n    }\n  \
    \  for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n            for _ in 0..<primes_count_copy {\n                if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                    primes[Int(arc4random_uniform(primes_count))] =\
    \ 0\n                    break\n                }\n            }\n        }\n\
    \    }\n    for _ in 0..<primes_count {\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n            result = true\n            break\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpci374cbv.swift:22:23: error: cannot find 'arc4random_uniform' in\
    \ scope\n        if primes[Int(arc4random_uniform(primes_count))] == 0 {\n   \
    \                   ^~~~~~~~~~~~~~~~~~\n/tmp/tmpci374cbv.swift:23:24: error: cannot\
    \ find 'arc4random_uniform' in scope\n            primes[Int(arc4random_uniform(primes_count))]\
    \ = 1\n                       ^~~~~~~~~~~~~~~~~~\n/tmp/tmpci374cbv.swift:27:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                      ^~~~~~~~~~~~~~~~~~\n/tmp/tmpci374cbv.swift:29:31:\
    \ error: cannot find 'arc4random_uniform' in scope\n                if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                              ^~~~~~~~~~~~~~~~~~\n/tmp/tmpci374cbv.swift:30:32:\
    \ error: cannot find 'arc4random_uniform' in scope\n                    primes[Int(arc4random_uniform(primes_count))]\
    \ = 0\n                               ^~~~~~~~~~~~~~~~~~\n/tmp/tmpci374cbv.swift:37:23:\
    \ error: cannot find 'arc4random_uniform' in scope\n        if primes[Int(arc4random_uniform(primes_count))]\
    \ == 1 {\n                      ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = Int()\n    var is_multiply_prime\
    \ = false\n    var is_multiply_prime_2 = false\n    var is_multiply_prime_3 =\
    \ false\n    var is_multiply_prime_4 = false\n    var is_multiply_prime_5 = false\n\
    \    var is_multiply_prime_6 = false\n    var is_multiply_prime_7 = false\n  \
    \  var is_multiply_prime_8 = false\n    var is_multiply_prime_9 = false\n    var\
    \ is_multiply_prime_10 = false\n    var is_multiply_prime_11 = false\n    var\
    \ is_multiply_prime_12 = false\n    var is_multiply_prime_13 = false\n    var\
    \ is_multiply_prime_14 = false\n    var is_multiply_prime_15 = false\n    var\
    \ is_multiply_prime_16 = false\n    var is_multiply_prime_17 = false\n    var\
    \ is_multiply_prime_18 = false\n    var is_multiply_prime_19 = false\n    var\
    \ is_multiply_prime_20 = false\n    var is_multiply_prime_21 = false\n    var\
    \ is_multiply_prime_22 = false\n    var is_multiply_prime_23 = false\n    var\
    \ is_multiply_prime_24 = false\n    var is_multiply_prime_25 = false\n    var\
    \ is_multiply_prime_26 = false\n    var is_multiply_prime_27 = false\n    var\
    \ is_multiply_prime_28 = false\n    var is_multiply_prime_29 = false\n    var\
    \ is_multiply_prime_30 = false\n    var is_multiply_prime_31 = false\n    var\
    \ is_multiply_prime_32 = false\n    var is_multiply_prime_33 = false\n    var\
    \ is_multiply_prime_34 = false\n    var is_multiply_prime_35 = false\n    var\
    \ is_multiply_prime_36 = false\n    var is_multiply_prime_37 = false\n    var\
    \ is_multiply_prime_38 = false\n    var is_multiply_prime_39 = false\n    var\
    \ is_multiply_prime_40 = false\n    var is_multiply_prime_41 = false\n    var\
    \ is_multiply_prime_42 = false\n    var is_multiply_prime_43 = false\n    var\
    \ is_multiply_prime_44 = false\n    var is_multiply_prime_45 = false\n    var\
    \ is_multiply_prime_46 = false\n    var is_multiply_prime_47 = false\n    var\
    \ is_multiply_prime_48 = false\n    var is_multiply_prime_49 = false\n    var\
    \ is_multiply_prime_50 = false\n    var is_multiply_prime_51 = false\n    var\
    \ is_multiply_prime_52 = false\n    var is_multiply_prime_53 = false\n    var\
    \ is_multiply_prime_54 = false\n    var is_multiply_prime_55 = false\n    var\
    \ is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5k8yqarg.swift:65:9: error: type annotation missing in pattern\n\
    \    var is_multiply_prime\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    if a < 100 {\n        return false\n    }\n    \n    var primes\
    \ = [Int]()\n    var primes_count = 100\n    \n    for _ in 0..<primes_count {\n\
    \        \n        var prime = true\n        \n        for _ in 0..<primes_count\
    \ {\n            \n            if a % primes_count == 0 {\n                prime\
    \ = false\n                break\n            }\n            \n            primes_count\
    \ -= 1\n        }\n        \n        if prime {\n            primes.append(a)\n\
    \        }\n        \n        a += 1\n    }\n    \n    return primes.count > 2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprlaqtllz.swift:34:11: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n        a += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int\n    var isMultiplyPrime: Bool\n\
    \    \n    for prime in 1...100 {\n        if a % prime == 0 {\n            primes.append(prime)\n\
    \        }\n    }\n    \n    if primes.count < 3 {\n        isMultiplyPrime =\
    \ false\n    } else {\n        isMultiplyPrime = true\n    }\n    \n    return\
    \ isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpjth_h9r3/tmpjth_h9r3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1de486ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1de4565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1de4565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1de45647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjth_h9r3                        0x00005631c92e85f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b1de4a5a460 __libc_start_main +
    245

    6    tmpjth_h9r3                        0x00005631c92e8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    for n in 1...100\
    \ {\n        if a % n == 0 {\n            primes.append(n)\n        }\n    }\n\
    \    if primes.count == 3 {\n        isMultiplyPrime = true\n    }\n    return\
    \ isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpjzv0azzg/tmpjzv0azzg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21c25aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21c22a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21c22a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21c22a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzv0azzg                        0x00005651b1856493 <unavailable> + 5267

    5    libc.so.6                          0x00002b21c2796460 __libc_start_main +
    245

    6    tmpjzv0azzg                        0x00005651b1856149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    for n in 2..100 {\n        if a % n == 0 {\n \
    \           result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkyuxyqys.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for n in 2..100 {\n              ^~\n             \
    \ ...\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    if a <= 100 {\n        var primes = [Int]()\n\
    \        var prime: Int = 0\n        var prime_found = false\n        for _ in\
    \ 0..<100 {\n            prime = a / primes[primes.count-1]\n            if prime\
    \ == 1 {\n                prime_found = true\n                break\n        \
    \    }\n            if prime > 1 {\n                primes.append(prime)\n   \
    \         }\n        }\n        if prime_found {\n            for prime in primes\
    \ {\n                if prime == 3 {\n                    result = true\n    \
    \                break\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ec49dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ec194561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b54ec194286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b54ec19413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b54ec193bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b54ebf93e83 <unavailable> + 188035

    6    tmpa9sn8b1j                        0x000055e0e839dc0d <unavailable> + 7181

    7    tmpa9sn8b1j                        0x000055e0e839d5db <unavailable> + 5595

    8    libc.so.6                          0x00002b54ec689460 __libc_start_main +
    245

    9    tmpa9sn8b1j                        0x000055e0e839d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    var isPrime\
    \ = true\n    var isPrime2 = true\n    var isPrime3 = true\n    var isPrime4 =\
    \ true\n    var isPrime5 = true\n    var isPrime6 = true\n    var isPrime7 = true\n\
    \    var isPrime8 = true\n    var isPrime9 = true\n    var isPrime10 = true\n\
    \    var isPrime11 = true\n    var isPrime12 = true\n    var isPrime13 = true\n\
    \    var isPrime14 = true\n    var isPrime15 = true\n    var isPrime16 = true\n\
    \    var isPrime17 = true\n    var isPrime18 = true\n    var isPrime19 = true\n\
    \    var isPrime20 = true\n    var isPrime21 = true\n    var isPrime22 = true\n\
    \    var isPrime23 = true\n    var isPrime24 = true\n    var isPrime25 = true\n\
    \    var isPrime26 = true\n    var isPrime27 = true\n    var isPrime28 = true\n\
    \    var isPrime29 = true\n    var isPrime30 = true\n    var isPrime31 = true\n\
    \    var isPrime32 = true\n    var isPrime33 = true\n    var isPrime34 = true\n\
    \    var isPrime35 = true\n    var isPrime36 = true\n    var isPrime37 = true\n\
    \    var isPrime38 = true\n    var isPrime39 = true\n    var isPrime40 = true\n\
    \    var isPrime41 = true\n    var isPrime42 = true\n    var isPrime43 = true\n\
    \    var isPrime44 = true\n    var isPrime45 = true\n    var isPrime46 = true\n\
    \    var isPrime47 = true\n    var isPrime48 = true\n    var isPrime49 = true\n\
    \    var isPrime50 = true\n    var isPrime51 = true\n    var isPrime52 = true\n\
    \    var isPrime53 = true\n    var isPrime54 = true\n    var isPrime55 = true\n\
    \    var isPrime56 = true\n    var isPrime57 = true\n    var isPrime58 = true\n\
    \    var isPrime59 = true\n    var isPrime60 = true\n    var isPrime61 = true\n\
    \    var isPrime62 = true\n    var isPrime63 = true\n    var isPrime64 = true\n\
    \    var isPrime65 = true\n    var isPrime66 = true\n    var isPrime67 = true\n\
    \    var isPrime68 = true\n    var isPrime69 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpthupypg3.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpthupypg3.swift:8:9: warning: initialization of variable 'primes'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpthupypg3.swift:9:9: warning:\
    \ initialization of variable 'isMultiplyPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:10:9: warning: initialization of variable 'isPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime = true\n    ~~~~^~~~~~~\n    _\n/tmp/tmpthupypg3.swift:11:9: warning:\
    \ initialization of variable 'isPrime2' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var isPrime2 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:12:9: warning: initialization of variable 'isPrime3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime3 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:13:9:\
    \ warning: initialization of variable 'isPrime4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime4 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:14:9: warning: initialization of variable 'isPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime5 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:15:9:\
    \ warning: initialization of variable 'isPrime6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime6 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpthupypg3.swift:16:9: warning: initialization of variable 'isPrime7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime7 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpthupypg3.swift:17:9:\
    \ warning: initialization of variable 'isPrime8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime8 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    if a < 100 {\n        return false\n   \
    \ }\n    \n    for i in 2..<Int(sqrt(a)) {\n        if a % i == 0 {\n        \
    \    result = false\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmjewxfpe.swift:14:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2..<Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int = 0\n    var isPrime: Bool =\
    \ false\n    var isMultiplication: Bool = false\n    var isMultiplicationPrime:\
    \ Bool = false\n    var isMultiplicationPrime2: Bool = false\n    var isMultiplicationPrime3:\
    \ Bool = false\n    var isMultiplicationPrime4: Bool = false\n    var isMultiplicationPrime5:\
    \ Bool = false\n    var isMultiplicationPrime6: Bool = false\n    var isMultiplicationPrime7:\
    \ Bool = false\n    var isMultiplicationPrime8: Bool = false\n    var isMultiplicationPrime9:\
    \ Bool = false\n    var isMultiplicationPrime10: Bool = false\n    var isMultiplicationPrime11:\
    \ Bool = false\n    var isMultiplicationPrime12: Bool = false\n    var isMultiplicationPrime13:\
    \ Bool = false\n    var isMultiplicationPrime14: Bool = false\n    var isMultiplicationPrime15:\
    \ Bool = false\n    var isMultiplicationPrime16: Bool = false\n    var isMultiplicationPrime17:\
    \ Bool = false\n    var isMultiplicationPrime18: Bool = false\n    var isMultiplicationPrime19:\
    \ Bool = false\n    var isMultiplicationPrime20: Bool = false\n    var isMultiplicationPrime21:\
    \ Bool = false\n    var isMultiplicationPrime22: Bool = false\n    var isMultiplicationPrime23:\
    \ Bool = false\n    var isMultiplicationPrime24: Bool = false\n    var isMultiplicationPrime25:\
    \ Bool = false\n    var isMultiplicationPrime26: Bool = false\n    var isMultiplicationPrime27:\
    \ Bool = false\n    var isMultiplicationPrime28: Bool = false\n    var isMultiplicationPrime29:\
    \ Bool = false\n    var isMultiplicationPrime30: Bool = false\n    var isMultiplicationPrime31:\
    \ Bool = false\n    var isMultiplicationPrime32: Bool = false\n    var isMultiplicationPrime33:\
    \ Bool = false\n    var isMultiplicationPrime34: Bool = false\n    var isMultiplicationPrime35:\
    \ Bool = false\n    var isMultiplicationPrime36: Bool = false\n    var isMultiplicationPrime37:\
    \ Bool = false\n    var isMultiplicationPrime38: Bool = false\n    var isMultiplicationPrime39:\
    \ Bool = false\n    var isMultiplicationPrime40: Bool = false\n    var isMultiplicationPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1tw8im1s.swift:52:9: error: type annotation missing in pattern\n\
    \    var isMultiplicationPrime\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        var primes = [Int]()\n\
    \        var primes_count = 100\n        \n        for var i = 2; i < primes_count;\
    \ i++ {\n            if a % i == 0 {\n                primes.append(i)\n     \
    \       }\n        }\n        \n        for var i = 0; i < primes.count; i++ {\n\
    \            if primes[i] == 3 {\n                result = true\n            \
    \    break\n            }\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_0xy8sz2.swift:14:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < primes_count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_0xy8sz2.swift:20:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var i = 0; i < primes.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    var primes_count_max = 300\n    var primes_count_min = 3\n    var primes_count_step\
    \ = 1\n    var primes_count_max = primes_count_max\n    var primes_count_min =\
    \ primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_count_step\
    \ = primes_count_step\n    var primes_count_max = primes_count_max\n    var primes_count_min\
    \ = primes_count_min\n    var primes_count_step = primes_count_step\n    var primes_count_max\
    \ = primes_count_max\n    var primes_count_min = primes_count_min\n    var primes_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplrao9qrr.swift:14:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = primes_count_max\n        ^\n/tmp/tmplrao9qrr.swift:11:9:\
    \ note: 'primes_count_max' previously declared here\n    var primes_count_max\
    \ = 300\n        ^\n/tmp/tmplrao9qrr.swift:15:9: error: invalid redeclaration\
    \ of 'primes_count_min'\n    var primes_count_min = primes_count_min\n       \
    \ ^\n/tmp/tmplrao9qrr.swift:12:9: note: 'primes_count_min' previously declared\
    \ here\n    var primes_count_min = 3\n        ^\n/tmp/tmplrao9qrr.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_step'\n    var primes_count_step\
    \ = primes_count_step\n        ^\n/tmp/tmplrao9qrr.swift:13:9: note: 'primes_count_step'\
    \ previously declared here\n    var primes_count_step = 1\n        ^\n/tmp/tmplrao9qrr.swift:61:9:\
    \ error: type annotation missing in pattern\n    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var is_multiply\
    \ = true\n    for var i = 2; i < primes_count; i++ {\n        if a % i == 0 {\n\
    \            primes.append(i)\n        }\n    }\n    for var i = 0; i < primes.count;\
    \ i++ {\n        for var j = i + 1; j < primes.count; j++ {\n            if primes[i]\
    \ * primes[j] == a {\n                is_multiply = false\n                break\n\
    \            }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3v48omrv.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < primes_count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3v48omrv.swift:16:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for var i = 0; i < primes.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3v48omrv.swift:17:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + 1; j < primes.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var isMultiplyPrime2\
    \ = false\n    var isPrime2 = true\n    var isMultiplyPrime3 = false\n    var\
    \ isPrime3 = true\n    var isMultiplyPrime4 = false\n    var isPrime4 = true\n\
    \    var isMultiplyPrime5 = false\n    var isPrime5 = true\n    var isMultiplyPrime6\
    \ = false\n    var isPrime6 = true\n    var isMultiplyPrime7 = false\n    var\
    \ isPrime7 = true\n    var isMultiplyPrime8 = false\n    var isPrime8 = true\n\
    \    var isMultiplyPrime9 = false\n    var isPrime9 = true\n    var isMultiplyPrime10\
    \ = false\n    var isPrime10 = true\n    var isMultiplyPrime11 = false\n    var\
    \ isPrime11 = true\n    var isMultiplyPrime12 = false\n    var isPrime12 = true\n\
    \    var isMultiplyPrime13 = false\n    var isPrime13 = true\n    var isMultiplyPrime14\
    \ = false\n    var isPrime14 = true\n    var isMultiplyPrime15 = false\n    var\
    \ isPrime15 = true\n    var isMultiplyPrime16 = false\n    var isPrime16 = true\n\
    \    var isMultiplyPrime17 = false\n    var isPrime17 = true\n    var isMultiplyPrime18\
    \ = false\n    var isPrime18 = true\n    var isMultiplyPrime19 = false\n    var\
    \ isPrime19 = true\n    var isMultiplyPrime20 = false\n    var isPrime20 = true\n\
    \    var isMultiplyPrime21 = false\n    var isPrime21 = true\n    var isMultiplyPrime22\
    \ = false\n    var isPrime22 = true\n    var isMultiplyPrime23 = false\n    var\
    \ isPrime23 = true\n    var isMultiplyPrime24 = false\n    var isPrime24 = true\n\
    \    var isMultiplyPrime25 = false\n    var isPrime25 = true\n    var isMultiplyPrime26\
    \ = false\n    var isPrime26 = true\n    var isMultiplyPrime27 = false\n    var\
    \ isPrime27 = true\n    var isMultiplyPrime28 = false\n    var isPrime28 = true\n\
    \    var isMultiplyPrime29 = false\n    var isPrime29 = true\n    var isMultiplyPrime30\
    \ = false\n    var isPrime30 = true\n    var isMultiplyPrime31 = false\n    var\
    \ isPrime31 = true\n    var isMultiplyPrime32 = false\n    var isPrime32\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnd9hqy2u.swift:71:9: error: type annotation missing in pattern\n\
    \    var isPrime32\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = 100\n    var primes_count_copy = primes_count\n    var\
    \ primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \    var primes_count_copy = primes_count\n    var primes_count_copy = primes_count\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq133ing4.swift:14:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpq133ing4.swift:13:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpq133ing4.swift:15:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpq133ing4.swift:13:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpq133ing4.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpq133ing4.swift:13:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpq133ing4.swift:17:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpq133ing4.swift:13:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpq133ing4.swift:18:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpq133ing4.swift:13:9: note: 'primes_count_copy' previously declared here\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpq133ing4.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_copy'\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpq133ing4.swift:13:9: note: 'primes_count_copy'\
    \ previously declared here\n    var primes_count_copy = primes_count\n       \
    \ ^\n/tmp/tmpq133ing4.swift:20:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count\n        ^\n/tmp/tmpq133ing4.swift:13:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n/tmp/tmpq133ing4.swift:21:9: error: invalid redeclaration\
    \ of 'primes_count_copy'\n    var primes_count_copy = primes_count\n        ^\n\
    /tmp/tmpq133ing4.swift:13:9: note: 'primes_count_copy' previously declared "
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime_numbers = [Int]()\n    var prime_numbers_count\
    \ = Int()\n    var is_multiply_prime = false\n    var is_multiply_prime_numbers\
    \ = false\n    var is_multiply_prime_numbers_count = Int()\n    var is_multiply_prime_numbers_count_2\
    \ = Int()\n    var is_multiply_prime_numbers_count_3 = Int()\n    var is_multiply_prime_numbers_count_4\
    \ = Int()\n    var is_multiply_prime_numbers_count_5 = Int()\n    var is_multiply_prime_numbers_count_6\
    \ = Int()\n    var is_multiply_prime_numbers_count_7 = Int()\n    var is_multiply_prime_numbers_count_8\
    \ = Int()\n    var is_multiply_prime_numbers_count_9 = Int()\n    var is_multiply_prime_numbers_count_10\
    \ = Int()\n    var is_multiply_prime_numbers_count_11 = Int()\n    var is_multiply_prime_numbers_count_12\
    \ = Int()\n    var is_multiply_prime_numbers_count_13 = Int()\n    var is_multiply_prime_numbers_count_14\
    \ = Int()\n    var is_multiply_prime_numbers_count_15 = Int()\n    var is_multiply_prime_numbers_count_16\
    \ = Int()\n    var is_multiply_prime_numbers_count_17 = Int()\n    var is_multiply_prime_numbers_count_18\
    \ = Int()\n    var is_multiply_prime_numbers_count_19 = Int()\n    var is_multiply_prime_numbers_count_20\
    \ = Int()\n    var is_multiply_prime_numbers_count_21 = Int()\n    var is_multiply_prime_numbers_count_22\
    \ = Int()\n    var is_multiply_prime_numbers_count_23 = Int()\n    var is_multiply_prime_numbers_count_24\
    \ = Int()\n    var is_multiply_prime_numbers_count_25 = Int()\n    var is_multiply_prime_numbers_count_26\
    \ = Int()\n    var is_multiply_prime_numbers_count_27 = Int()\n    var is_multiply_prime_numbers_count_28\
    \ = Int()\n    var is_multiply_prime_numbers_count_29 = Int()\n    var is_multiply_prime_numbers_count_30\
    \ = Int()\n    var is_multiply_prime_numbers_count_31 = Int()\n    var is_multiply_prime_numbers_count_32\
    \ = Int()\n    var is_multiply_prime_numbers_count_33 = Int()\n    var is_multiply_prime_numbers_count_34\
    \ = Int()\n    var is_multiply_prime_number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps34vaft8.swift:47:9: error: type annotation missing in pattern\n\
    \    var is_multiply_prime_number\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isMultiplyPrime2 = false\n    var\
    \ isMultiplyPrime3 = false\n    var isMultiplyPrime4 = false\n    var isMultiplyPrime5\
    \ = false\n    var isMultiplyPrime6 = false\n    var isMultiplyPrime7 = false\n\
    \    var isMultiplyPrime8 = false\n    var isMultiplyPrime9 = false\n    var isMultiplyPrime10\
    \ = false\n    var isMultiplyPrime11 = false\n    var isMultiplyPrime12 = false\n\
    \    var isMultiplyPrime13 = false\n    var isMultiplyPrime14 = false\n    var\
    \ isMultiplyPrime15 = false\n    var isMultiplyPrime16 = false\n    var isMultiplyPrime17\
    \ = false\n    var isMultiplyPrime18 = false\n    var isMultiplyPrime19 = false\n\
    \    var isMultiplyPrime20 = false\n    var isMultiplyPrime21 = false\n    var\
    \ isMultiplyPrime22 = false\n    var isMultiplyPrime23 = false\n    var isMultiplyPrime24\
    \ = false\n    var isMultiplyPrime25 = false\n    var isMultiplyPrime26 = false\n\
    \    var isMultiplyPrime27 = false\n    var isMultiplyPrime28 = false\n    var\
    \ isMultiplyPrime29 = false\n    var isMultiplyPrime30 = false\n    var isMultiplyPrime31\
    \ = false\n    var isMultiplyPrime32 = false\n    var isMultiplyPrime33 = false\n\
    \    var isMultiplyPrime34 = false\n    var isMultiplyPrime35 = false\n    var\
    \ isMultiplyPrime36 = false\n    var isMultiplyPrime37 = false\n    var isMultiplyPrime38\
    \ = false\n    var isMultiplyPrime39 = false\n    var isMultiplyPrime40 = false\n\
    \    var isMultiplyPrime41 = false\n    var isMultiplyPrime42 = false\n    var\
    \ isMultiplyPrime43 = false\n    var isMultiplyPrime44 = false\n    var isMultiplyPrime45\
    \ = false\n    var isMultiplyPrime46 = false\n    var isMultiplyPrime47 = false\n\
    \    var isMultiplyPrime48 = false\n    var isMultiplyPrime49 = false\n    var\
    \ isMultiplyPrime50 = false\n    var isMultiplyPrime51 = false\n    var isMultiplyPrime52\
    \ = false\n    var isMultiplyPrime53 = false\n    var isMultiplyPrime54 = false\n\
    \    var isMultiplyPrime55 = false\n    var isMultiplyPrime56 = false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4j7conxi.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = false\n  \
    \  ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = false\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4j7conxi.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = false\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4j7conxi.swift:17:9:\
    \ warning: initialization of variable"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    for i in 2..<100 {\n        if a % i\
    \ == 0 {\n            isMultiplyPrime = false\n            break\n        }\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp8bd_bncn/tmp8bd_bncn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2491b0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2491803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2491803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24918027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bd_bncn                        0x000055da672a83a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b2491cf8460 __libc_start_main +
    245

    6    tmp8bd_bncn                        0x000055da672a7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    for var i =\
    \ 2; i < a; i++ {\n        if primes.contains(i) {\n            continue\n   \
    \     }\n        for var j = 2; j < i; j++ {\n            if i % j == 0 {\n  \
    \              isMultiplyPrime = false\n                break\n            }\n\
    \        }\n        if isMultiplyPrime {\n            primes.append(i)\n     \
    \   }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjrg6ognh.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjrg6ognh.swift:14:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = 2; j < i; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var result = false\n    \n    if a < 100 {\n        \n        for\
    \ b in 2..a / 2 {\n            \n            if a % b == 0 {\n               \
    \ \n                for c in 2..a / b {\n                    \n              \
    \      if a % c == 0{\n                        \n                        for d\
    \ in 2..a / c {\n                            \n                            if\
    \ a % d == 0 {\n                                \n                           \
    \     for e in 2..a / d {\n                                    \n            \
    \                        if a % e == 0 {\n                                   \
    \     \n                                        for f in 2..a / e {\n        \
    \                                    \n                                      \
    \      if a % f == 0 {\n                                                \n   \
    \                                             for g in 2..a / f {\n          \
    \                                          \n                                \
    \                    if a % g == 0 {\n                                       \
    \                 \n                                                        result\
    \ = true\n                                                    }\n            \
    \                                    }\n                                     \
    \       }\n                                        }\n                       \
    \             }\n                                }\n                         \
    \   }\n                        }\n                    }\n                }\n \
    \           }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpsf1ar_ih.swift:13:19: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for b in 2..a / 2 {\n                  ^~\n   \
    \               ...\n/tmp/tmpsf1ar_ih.swift:17:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n                for c in 2..a / b {\n  \
    \                        ^~\n                          ...\n/tmp/tmpsf1ar_ih.swift:21:35:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n           \
    \             for d in 2..a / c {\n                                  ^~\n    \
    \                              ...\n/tmp/tmpsf1ar_ih.swift:25:43: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n                         \
    \       for e in 2..a / d {\n                                          ^~\n  \
    \                                        ...\n/tmp/tmpsf1ar_ih.swift:29:51: error:\
    \ cannot find operator '..' in scope; did you mean '...'?\n                  \
    \                      for f in 2..a / e {\n                                 \
    \                 ^~\n                                                  ...\n\
    /tmp/tmpsf1ar_ih.swift:33:59: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n                                                for g in 2..a /\
    \ f {\n                                                          ^~\n        \
    \                                                  ...\n"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        for\
    \ var i = 2; i < a; i++ {\n            if a % i == 0 {\n                isMultiplyPrime\
    \ = false\n                break\n            }\n        }\n    }\n    \n    return\
    \ isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg3tsiqd6.swift:12:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    \n    if a < 100 {\n        var primes = [Int]()\n\
    \        \n        for var i = 2; i < a; i++ {\n            if a % i == 0 {\n\
    \                primes.append(i)\n            }\n        }\n        \n      \
    \  if primes.count >= 3 {\n            result = true\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0k4vigx3.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ var i: Int\n    for i = 2; i < a; i++ {\n        prime = i\n        while prime\
    \ > 1 {\n            if a % prime == 0 {\n                result = false\n   \
    \             break\n            }\n            prime = primes.last! + 1\n   \
    \     }\n        primes.append(prime)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc3wamtqa.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    \n    if a < 100 {\n        return true\n    }\n\
    \    \n    for i in 2..<Int(sqrt(a)) {\n        if a % i == 0 {\n            result\
    \ = false\n            break\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpehennzw0.swift:14:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2..<Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = false\n    var primes = [Int]()\n    var primes_count =\
    \ 100\n    var primes_sum = 0\n    var primes_sum2 = 0\n    var primes_sum3 =\
    \ 0\n    var primes_sum4 = 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n\
    \    var primes_sum7 = 0\n    var primes_sum8 = 0\n    var primes_sum9 = 0\n \
    \   var primes_sum10 = 0\n    var primes_sum11 = 0\n    var primes_sum12 = 0\n\
    \    var primes_sum13 = 0\n    var primes_sum14 = 0\n    var primes_sum15 = 0\n\
    \    var primes_sum16 = 0\n    var primes_sum17 = 0\n    var primes_sum18 = 0\n\
    \    var primes_sum19 = 0\n    var primes_sum20 = 0\n    var primes_sum21 = 0\n\
    \    var primes_sum22 = 0\n    var primes_sum23 = 0\n    var primes_sum24 = 0\n\
    \    var primes_sum25 = 0\n    var primes_sum26 = 0\n    var primes_sum27 = 0\n\
    \    var primes_sum28 = 0\n    var primes_sum29 = 0\n    var primes_sum30 = 0\n\
    \    var primes_sum31 = 0\n    var primes_sum32 = 0\n    var primes_sum33 = 0\n\
    \    var primes_sum34 = 0\n    var primes_sum35 = 0\n    var primes_sum36 = 0\n\
    \    var primes_sum37 = 0\n    var primes_sum38 = 0\n    var primes_sum39 = 0\n\
    \    var primes_sum40 = 0\n    var primes_sum41 = 0\n    var primes_sum42 = 0\n\
    \    var primes_sum43 = 0\n    var primes_sum44 = 0\n    var primes_sum45 = 0\n\
    \    var primes_sum46 = 0\n    var primes_sum47 = 0\n    var primes_sum48 = 0\n\
    \    var primes_sum49 = 0\n    var primes_sum50 = 0\n    var primes_sum51 = 0\n\
    \    var primes_sum52 = 0\n    var primes_sum53 = 0\n    var primes_sum54 = 0\n\
    \    var primes_sum55 = 0\n    var primes_sum56 = 0\n    var primes_sum57 = 0\n\
    \    var primes_sum58 = 0\n    var primes_sum59 = 0\n    var primes_sum60 = 0\n\
    \    var primes_sum61 = 0\n    var primes_sum62 = 0\n    var primes_sum63 = 0\n\
    \    var primes_sum64 = 0\n    var primes_sum65 = 0\n    var primes_sum66 = 0\n\
    \    var primes_sum67 = 0\n    var primes_sum68 = 0\n    var primes_sum69 = 0\n\
    \    var primes_sum70 = 0\n    var primes_sum71 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4xj3vmlh.swift:8:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = false\n    ~~~~^~~~~~\n    _\n/tmp/tmp4xj3vmlh.swift:9:9: warning:\
    \ initialization of variable 'primes' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var primes = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp4xj3vmlh.swift:10:9: warning: initialization of variable 'primes_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_count = 100\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4xj3vmlh.swift:11:9:\
    \ warning: initialization of variable 'primes_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp4xj3vmlh.swift:12:9: warning: initialization of variable 'primes_sum2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4xj3vmlh.swift:13:9:\
    \ warning: initialization of variable 'primes_sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xj3vmlh.swift:14:9: warning: initialization of variable 'primes_sum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4xj3vmlh.swift:15:9:\
    \ warning: initialization of variable 'primes_sum5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xj3vmlh.swift:16:9: warning: initialization of variable 'primes_sum6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var primes_sum6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4xj3vmlh.swift:17:9:\
    \ warning: initialization of variable 'primes_sum7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var primes_sum7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp4xj3vmlh.swift:18:9: warning: initializa"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var primes_sum2 = 0\n    var primes_sum3 = 0\n    var primes_sum4 =\
    \ 0\n    var primes_sum5 = 0\n    var primes_sum6 = 0\n    var primes_sum7 = 0\n\
    \    var primes_sum8 = 0\n    var primes_sum9 = 0\n    var primes_sum10 = 0\n\
    \    var primes_sum11 = 0\n    var primes_sum12 = 0\n    var primes_sum13 = 0\n\
    \    var primes_sum14 = 0\n    var primes_sum15 = 0\n    var primes_sum16 = 0\n\
    \    var primes_sum17 = 0\n    var primes_sum18 = 0\n    var primes_sum19 = 0\n\
    \    var primes_sum20 = 0\n    var primes_sum21 = 0\n    var primes_sum22 = 0\n\
    \    var primes_sum23 = 0\n    var primes_sum24 = 0\n    var primes_sum25 = 0\n\
    \    var primes_sum26 = 0\n    var primes_sum27 = 0\n    var primes_sum28 = 0\n\
    \    var primes_sum29 = 0\n    var primes_sum30 = 0\n    var primes_sum31 = 0\n\
    \    var primes_sum32 = 0\n    var primes_sum33 = 0\n    var primes_sum34 = 0\n\
    \    var primes_sum35 = 0\n    var primes_sum36 = 0\n    var primes_sum37 = 0\n\
    \    var primes_sum38 = 0\n    var primes_sum39 = 0\n    var primes_sum40 = 0\n\
    \    var primes_sum41 = 0\n    var primes_sum42 = 0\n    var primes_sum43 = 0\n\
    \    var primes_sum44 = 0\n    var primes_sum45 = 0\n    var primes_sum46 = 0\n\
    \    var primes_sum47 = 0\n    var primes_sum48 = 0\n    var primes_sum49 = 0\n\
    \    var primes_sum50 = 0\n    var primes_sum51 = 0\n    var primes_sum52 = 0\n\
    \    var primes_sum53 = 0\n    var primes_sum54 = 0\n    var primes_sum55 = 0\n\
    \    var primes_sum56 = 0\n    var primes_sum57 = 0\n    var primes_sum58 = 0\n\
    \    var primes_sum59 = 0\n    var primes_sum60 = 0\n    var primes_sum61 = 0\n\
    \    var primes_sum62 = 0\n    var primes_sum63 = 0\n    var primes_sum64 = 0\n\
    \    var primes_sum65 = 0\n    var primes_sum66 = 0\n    var primes_sum67 = 0\n\
    \    var primes_sum68 = 0\n    var primes_sum69 = 0\n    var primes_sum70 = 0\n\
    \    var primes_sum71 = 0\n    var primes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl2c5dski.swift:81:9: error: type annotation missing in pattern\n\
    \    var primes_\n        ^\n"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var isMultiplyPrime = true\n    for i in 2...100\
    \ {\n        if a % i == 0 {\n            primes.append(i)\n        }\n    }\n\
    \    if primes.count == 3 {\n        isMultiplyPrime = true\n    }\n    return\
    \ isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp5em9t7re/tmp5em9t7re.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59364b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59361a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59361a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59361a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5em9t7re                        0x000055a1f7d5d493 <unavailable> + 5267

    5    libc.so.6                          0x00002b593669e460 __libc_start_main +
    245

    6    tmp5em9t7re                        0x000055a1f7d5d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_count_copy\
    \ = primes_count\n    var primes_count_copy = primes_count_copy\n    var primes_count_copy\
    \ = primes_count_copy\n    var primes_count_copy = primes_count_copy\n    var\
    \ primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var primes_count_copy = primes_count_copy\n    var primes_count_copy = primes_count_copy\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpru5hucn3.swift:60:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpru5hucn3.swift:11:9: error: invalid redeclaration of 'primes_count_copy'\n\
    \    var primes_count_copy = primes_count_copy\n        ^\n/tmp/tmpru5hucn3.swift:10:9:\
    \ note: 'primes_count_copy' previously declared here\n    var primes_count_copy\
    \ = primes_count\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a <= 100 {\n        return true\n    }\n    \n    var isMultiplyPrime\
    \ = true\n    \n    for i in 2..<100 {\n        if a % i == 0 {\n            isMultiplyPrime\
    \ = false\n            break\n        }\n    }\n    \n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpan8jjpmw/tmpan8jjpmw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b856666ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8566365b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8566365988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85663647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan8jjpmw                        0x000055b033598333 <unavailable> + 4915

    5    libc.so.6                          0x00002b856685a460 __libc_start_main +
    245

    6    tmpan8jjpmw                        0x000055b033597fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var\
    \ primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max\
    \ = Int(0)\n    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n\
    \    var primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var\
    \ primes_count_min = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min\
    \ = Int(0)\n    var primes_count_max = Int(0)\n    var primes_count_min = Int(0)\n\
    \    var primes_count_max = Int(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uyrrc1j.swift:15:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:16:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:17:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:18:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:19:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:20:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:21:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:13:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:22:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = Int(0)\n        ^\n/tmp/tmp5uyrrc1j.swift:14:9: note:\
    \ 'primes_count_min' previously declared here\n    var primes_count_min = Int(0)\n\
    \        ^\n/tmp/tmp5uyrrc1j.swift:23:9: error: invalid redeclaration of 'primes_cou"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a < 100 {\n        return false\n    }\n    var primes = [Int]()\n\
    \    var primes_count = Int(0)\n    var is_multiply_prime = false\n    for n in\
    \ 2...Int(sqrt(a)) {\n        if a % n == 0 {\n            primes.append(n)\n\
    \            primes_count = primes_count + 1\n        }\n    }\n    if primes_count\
    \ == 3 {\n        is_multiply_prime = true\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp4p7l84uu.swift:14:22: error: cannot find 'sqrt' in scope\n    for\
    \ n in 2...Int(sqrt(a)) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = false\n    var isPrime = true\n    var isMultiplyPrime2\
    \ = false\n    var isPrime2 = true\n    var isMultiplyPrime3 = false\n    var\
    \ isPrime3 = true\n    var isMultiplyPrime4 = false\n    var isPrime4 = true\n\
    \    var isMultiplyPrime5 = false\n    var isPrime5 = true\n    var isMultiplyPrime6\
    \ = false\n    var isPrime6 = true\n    var isMultiplyPrime7 = false\n    var\
    \ isPrime7 = true\n    var isMultiplyPrime8 = false\n    var isPrime8 = true\n\
    \    var isMultiplyPrime9 = false\n    var isPrime9 = true\n    var isMultiplyPrime10\
    \ = false\n    var isPrime10 = true\n    var isMultiplyPrime11 = false\n    var\
    \ isPrime11 = true\n    var isMultiplyPrime12 = false\n    var isPrime12 = true\n\
    \    var isMultiplyPrime13 = false\n    var isPrime13 = true\n    var isMultiplyPrime14\
    \ = false\n    var isPrime14 = true\n    var isMultiplyPrime15 = false\n    var\
    \ isPrime15 = true\n    var isMultiplyPrime16 = false\n    var isPrime16 = true\n\
    \    var isMultiplyPrime17 = false\n    var isPrime17 = true\n    var isMultiplyPrime18\
    \ = false\n    var isPrime18 = true\n    var isMultiplyPrime19 = false\n    var\
    \ isPrime19 = true\n    var isMultiplyPrime20 = false\n    var isPrime20 = true\n\
    \    var isMultiplyPrime21 = false\n    var isPrime21 = true\n    var isMultiplyPrime22\
    \ = false\n    var isPrime22 = true\n    var isMultiplyPrime23 = false\n    var\
    \ isPrime23 = true\n    var isMultiplyPrime24 = false\n    var isPrime24 = true\n\
    \    var isMultiplyPrime25 = false\n    var isPrime25 = true\n    var isMultiplyPrime26\
    \ = false\n    var isPrime26 = true\n    var isMultiplyPrime27 = false\n    var\
    \ isPrime27 = true\n    var isMultiplyPrime28 = false\n    var isPrime28 = true\n\
    \    var isMultiplyPrime29 = false\n    var isPrime29 = true\n    var isMultiplyPrime30\
    \ = false\n    var isPrime30 = true\n    var isMultiplyPrime31 = false\n    var\
    \ isPrime31 = true\n    var isMultiplyPrime32 = false\n    var isPrime32\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnd9hqy2u.swift:71:9: error: type annotation missing in pattern\n\
    \    var isPrime32\n        ^\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_sum\
    \ = 0\n    var is_multiply_prime = false\n    \n    for var i = 2; i < primes_count;\
    \ i++ {\n        if primes_sum == 0 {\n            primes.append(i)\n        \
    \    primes_sum += i\n        } else {\n            for var j = 2; j < primes_sum;\
    \ j++ {\n                if i % primes[j] == 0 {\n                    break\n\
    \                }\n            }\n            if j == primes_sum {\n        \
    \        primes.append(i)\n                primes_sum += i\n            }\n  \
    \      }\n    }\n    \n    if primes_sum == a {\n        is_multiply_prime = true\n\
    \    }\n    \n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiipnpv8b.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < primes_count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiipnpv8b.swift:18:13: error: C-style for statement has been removed in\
    \ Swift 3\n            for var j = 2; j < primes_sum; j++ {\n            ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    \n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in 0..<primes.count\
    \ {\n        if primes[i] == a*primes[i] {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpo51oi3g7/tmpo51oi3g7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1236b16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b123680db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b123680d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b123680c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo51oi3g7                        0x00005605da880567 <unavailable> + 5479

    5    libc.so.6                          0x00002b1236d02460 __libc_start_main +
    245

    6    tmpo51oi3g7                        0x00005605da8801a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var primes_count = 100\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var primes_count_min = 3\n    var primes_count_max\
    \ = 100\n    var primes_count_min = 3\n    var primes_count_max = 100\n    var\
    \ primes_count_min = 3\n    var primes_count_max = 100\n    var primes_count_min\
    \ = 3\n    var primes_count_max = 100\n    var prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphd4_rsk_.swift:12:9: error: invalid redeclaration of 'primes_count_max'\n\
    \    var primes_count_max = 100\n        ^\n/tmp/tmphd4_rsk_.swift:10:9: note:\
    \ 'primes_count_max' previously declared here\n    var primes_count_max = 100\n\
    \        ^\n/tmp/tmphd4_rsk_.swift:13:9: error: invalid redeclaration of 'primes_count_min'\n\
    \    var primes_count_min = 3\n        ^\n/tmp/tmphd4_rsk_.swift:11:9: note: 'primes_count_min'\
    \ previously declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmphd4_rsk_.swift:14:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmphd4_rsk_.swift:10:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmphd4_rsk_.swift:15:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmphd4_rsk_.swift:11:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmphd4_rsk_.swift:16:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmphd4_rsk_.swift:10:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmphd4_rsk_.swift:17:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmphd4_rsk_.swift:11:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmphd4_rsk_.swift:18:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmphd4_rsk_.swift:10:9: note: 'primes_count_max' previously\
    \ declared here\n    var primes_count_max = 100\n        ^\n/tmp/tmphd4_rsk_.swift:19:9:\
    \ error: invalid redeclaration of 'primes_count_min'\n    var primes_count_min\
    \ = 3\n        ^\n/tmp/tmphd4_rsk_.swift:11:9: note: 'primes_count_min' previously\
    \ declared here\n    var primes_count_min = 3\n        ^\n/tmp/tmphd4_rsk_.swift:20:9:\
    \ error: invalid redeclaration of 'primes_count_max'\n    var primes_count_max\
    \ = 100\n        ^\n/tmp/tmphd4_rsk"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 11 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 17 {\n        return true\n    }\n    if a == 19 {\n     \
    \   return true\n    }\n    if a == 231 {\n        return true\n    }\n    if\
    \ a == 233 {\n        return true\n    }\n    if a == 239 {\n        return true\n\
    \    }\n    if a == 243 {\n        return true\n    }\n    if a == 247 {\n   \
    \     return true\n    }\n    if a == 251 {\n        return true\n    }\n    if\
    \ a == 253 {\n        return true\n    }\n    if a == 257 {\n        return true\n\
    \    }\n    if a == 261 {\n        return true\n    }\n    if a == 263 {\n   \
    \     return true\n    }\n    if a == 267 {\n        return true\n    }\n    if\
    \ a == 269 {\n        return true\n    }\n    if a == 273 {\n        return true\n\
    \    }\n    if a == 277 {\n        return true\n    }\n    if a == 279 {\n   \
    \     return true\n    }\n    if a == 283 {\n        return true\n    }\n    if\
    \ a == 287 {\n        return true\n    }\n    if a == 289 {\n        return true\n\
    \    }\n    if a == 293 {\n        return true\n    }\n    if a == 297 {\n   \
    \     return true\n    }\n    if a == 301 {\n        return true\n    }\n    if\
    \ a == 303 {\n        return true\n    }\n    if a == 305 {\n        return true\n\
    \    }\n    if a == 309 {\n        return true\n    }\n    if a == 313 {\n   \
    \     return true\n    }\n    if a == 317 {\n        return true\n    }\n    if\
    \ a == 321 {\n        return true\n    }\n    if a == 323 {\n        return true\n\
    \    }\n    if a == 327 {\n        return true\n    }\n    if a == 331 {\n   \
    \     return true\n    }\n    if a == 333 {\n        return true\n    }\n    if\
    \ a == 337 {\n        return true\n    }\n    if a == 341 {\n        return true\n\
    \    }\n    if a == 343 {\n        return true\n    }\n    if a == 347 {\n   \
    \     return true\n    }\n    if a == 351 {\n        return true\n    }\n    if\
    \ a == 355 {\n        return true\n    }\n    if a == 359 {\n        return true\n\
    \    }\n    if a == 363 {\n        return true\n    }\n    if a == 367 {\n   \
    \     return true\n    }\n    if a == 369 {\n        return true\n    }\n    if\
    \ a == 373 {\n        return true\n    }\n    if a == 377 {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpi1etfg_e.swift:186:43: error: expected '}' at end of brace statement\n\
    assert(is_multiply_prime(a: 1001) == true)\n                                 \
    \         ^\n/tmp/tmpi1etfg_e.swift:7:40: note: to match this opening '{'\nfunc\
    \ is_multiply_prime(a: Int) -> Bool {\n                                      \
    \ ^\n/tmp/tmpi1etfg_e.swift:165:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979201
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var result = true\n    var primes = [Int]()\n    var prime: Int\n   \
    \ var i: Int\n    for i = 2; i < a; i++ {\n        prime = i\n        while prime\
    \ > 1 {\n            if a % prime == 0 {\n                result = false\n   \
    \             break\n            }\n            prime = primes.last! + 1\n   \
    \     }\n        primes.append(prime)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc3wamtqa.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i < a; i++ {\n    ^   ~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    \n    if a < 100 {\n        var primeNumbers\
    \ = [Int]()\n        \n        for var i = 2; i < a; i++ {\n            if a %\
    \ i == 0 {\n                primeNumbers.append(i)\n            }\n        }\n\
    \        \n        if primeNumbers.count == 3 {\n            isMultiplyPrime =\
    \ false\n        }\n    }\n    \n    return isMultiplyPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0f8c_kdt.swift:13:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = 2; i < a; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979201
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var primes = [Int]()\n    var prime: Int\n    var isMultiplyPrime: Bool\
    \ = false\n    \n    for prime in 1...100 {\n        if a % prime == 0 {\n   \
    \         primes.append(prime)\n        }\n    }\n    \n    if primes.count >\
    \ 2 {\n        isMultiplyPrime = true\n    }\n    \n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpfowme06u/tmpfowme06u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67243a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b672409cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b672409c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b672409b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfowme06u                        0x000055708b1665f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b6724591460 __libc_start_main +
    245

    6    tmpfowme06u                        0x000055708b166149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979201
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    for i in 2...100 {\n        if a % i\
    \ == 0 {\n            isMultiplyPrime = false\n            break\n        }\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprfj9hlx6/tmprfj9hlx6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fedfb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fedca9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fedca9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fedca87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfj9hlx6                        0x0000563feed323a7 <unavailable> + 5031

    5    libc.so.6                          0x00002b8fee19e460 __libc_start_main +
    245

    6    tmprfj9hlx6                        0x0000563feed31fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979200
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isPrime = true\n    var isPrime2\
    \ = true\n    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 =\
    \ true\n    var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n\
    \    var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n\
    \    var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var isPrime67 = true\n    var isPrime68 = true\n\
    \    var isPrime69 = true\n    var isPrime70 = true\n    var is\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjvqog_p0.swift:79:9: error: expected pattern\n    var is\n    \
    \    ^\n/tmp/tmpjvqog_p0.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:9:9:\
    \ warning: initialization of variable 'isPrime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime = true\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:10:9: warning: initialization of variable 'isPrime2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime2 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:11:9:\
    \ warning: initialization of variable 'isPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime3 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:12:9: warning: initialization of variable 'isPrime4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime4 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:13:9:\
    \ warning: initialization of variable 'isPrime5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime5 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:14:9: warning: initialization of variable 'isPrime6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime6 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:15:9:\
    \ warning: initialization of variable 'isPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime7 = true\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjvqog_p0.swift:16:9: warning: initialization of variable 'isPrime8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isPrime8 = true\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjvqog_p0.swift:17:9:\
    \ warning: initialization of variable 'isPrime9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isPrime9 = true\n    ~~~~^~~~~~~~\n\
    \    "
  stdout: ''
  timestamp: 1659979199
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool\
    \ {\n    var isMultiplyPrime = true\n    var isMultiplyPrime2 = true\n    var\
    \ isMultiplyPrime3 = true\n    var isMultiplyPrime4 = true\n    var isMultiplyPrime5\
    \ = true\n    var isMultiplyPrime6 = true\n    var isMultiplyPrime7 = true\n \
    \   var isMultiplyPrime8 = true\n    var isMultiplyPrime9 = true\n    var isMultiplyPrime10\
    \ = true\n    var isMultiplyPrime11 = true\n    var isMultiplyPrime12 = true\n\
    \    var isMultiplyPrime13 = true\n    var isMultiplyPrime14 = true\n    var isMultiplyPrime15\
    \ = true\n    var isMultiplyPrime16 = true\n    var isMultiplyPrime17 = true\n\
    \    var isMultiplyPrime18 = true\n    var isMultiplyPrime19 = true\n    var isMultiplyPrime20\
    \ = true\n    var isMultiplyPrime21 = true\n    var isMultiplyPrime22 = true\n\
    \    var isMultiplyPrime23 = true\n    var isMultiplyPrime24 = true\n    var isMultiplyPrime25\
    \ = true\n    var isMultiplyPrime26 = true\n    var isMultiplyPrime27 = true\n\
    \    var isMultiplyPrime28 = true\n    var isMultiplyPrime29 = true\n    var isMultiplyPrime30\
    \ = true\n    var isMultiplyPrime31 = true\n    var isMultiplyPrime32 = true\n\
    \    var isMultiplyPrime33 = true\n    var isMultiplyPrime34 = true\n    var isMultiplyPrime35\
    \ = true\n    var isMultiplyPrime36 = true\n    var isMultiplyPrime37 = true\n\
    \    var isMultiplyPrime38 = true\n    var isMultiplyPrime39 = true\n    var isMultiplyPrime40\
    \ = true\n    var isMultiplyPrime41 = true\n    var isMultiplyPrime42 = true\n\
    \    var isMultiplyPrime43 = true\n    var isMultiplyPrime44 = true\n    var isMultiplyPrime45\
    \ = true\n    var isMultiplyPrime46 = true\n    var isMultiplyPrime47 = true\n\
    \    var isMultiplyPrime48 = true\n    var isMultiplyPrime49 = true\n    var isMultiplyPrime50\
    \ = true\n    var isMultiplyPrime51 = true\n    var isMultiplyPrime52 = true\n\
    \    var isMultiplyPrime53 = true\n    var isMultiplyPrime54 = true\n    var isMultiplyPrime55\
    \ = true\n    var isMultiplyPrime56 = true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf_vh0g1b.swift:8:9: warning: initialization of variable 'isMultiplyPrime'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime = true\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:9:9:\
    \ warning: initialization of variable 'isMultiplyPrime2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime2 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:10:9: warning:\
    \ initialization of variable 'isMultiplyPrime3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime3 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:11:9: warning: initialization\
    \ of variable 'isMultiplyPrime4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime4 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:12:9: warning: initialization of variable 'isMultiplyPrime5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime5 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:13:9:\
    \ warning: initialization of variable 'isMultiplyPrime6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var isMultiplyPrime6 =\
    \ true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:14:9: warning:\
    \ initialization of variable 'isMultiplyPrime7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var isMultiplyPrime7 = true\n   \
    \ ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:15:9: warning: initialization\
    \ of variable 'isMultiplyPrime8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var isMultiplyPrime8 = true\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpf_vh0g1b.swift:16:9: warning: initialization of variable 'isMultiplyPrime9'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var isMultiplyPrime9 = true\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpf_vh0g1b.swift:17:9:\
    \ warning: initialization of variable 'isMulti"
  stdout: ''
  timestamp: 1659979199
