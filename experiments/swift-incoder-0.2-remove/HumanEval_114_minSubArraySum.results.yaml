language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for n in nums {\n        sum\
    \ += n\n        if sum < minSum {\n            minSum = sum\n        }\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpdmxkwrlj/tmpdmxkwrlj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad94ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad91d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad91d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad91d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmxkwrlj                        0x00005602380774da <unavailable> + 5338

    5    libc.so.6                          0x00002b5ad96c9460 __libc_start_main +
    245

    6    tmpdmxkwrlj                        0x0000560238077129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var min = nums[0]\n    for n in nums {\n        sum\
    \ += n\n        if sum < min {\n            min = sum\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcczibi19/tmpcczibi19.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad91abb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad91a8a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad91a8a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad91a8a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcczibi19                        0x0000562ecaadf4da <unavailable> + 5338

    5    libc.so.6                          0x00002ad91ad9d460 __libc_start_main +
    245

    6    tmpcczibi19                        0x0000562ecaadf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var min = nums[0]\n    for num in nums {\n        sum\
    \ += num\n        if sum < min {\n            min = sum\n        }\n    }\n  \
    \  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2zww44vn/tmp2zww44vn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5421132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5420e29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5420e29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5420e287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zww44vn                        0x0000559dfdbaf4da <unavailable> + 5338

    5    libc.so.6                          0x00002b542131e460 __libc_start_main +
    245

    6    tmp2zww44vn                        0x0000559dfdbaf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n  \
    \  for num in nums {\n        minSum = minSum > num ? minSum - num : num\n   \
    \ }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpt34hc781/tmpt34hc781.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2728d61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2728a58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2728a58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2728a577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt34hc781                        0x000055a8e638553a <unavailable> + 5434

    5    libc.so.6                          0x00002b2728f4d460 __libc_start_main +
    245

    6    tmpt34hc781                        0x000055a8e6385189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for n in nums {\n        sum\
    \ += n\n        if sum < minSum {\n            minSum = sum\n        }\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpdmxkwrlj/tmpdmxkwrlj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad94ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad91d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad91d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad91d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmxkwrlj                        0x00005602380774da <unavailable> + 5338

    5    libc.so.6                          0x00002b5ad96c9460 __libc_start_main +
    245

    6    tmpdmxkwrlj                        0x0000560238077129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        if sum < min {\n            min = sum\n        }\n    }\n  \
    \  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp1qe2wj6q/tmp1qe2wj6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9825c24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b982591bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b982591b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b982591a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qe2wj6q                        0x0000562c48db14da <unavailable> + 5338

    5    libc.so.6                          0x00002b9825e10460 __libc_start_main +
    245

    6    tmp1qe2wj6q                        0x0000562c48db1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var min = nums[0]\n    for num in nums {\n        if\
    \ num > min {\n            sum += num - min\n        }\n        min = num\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp32n3oyq3/tmp32n3oyq3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf9f9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9c93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9c93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf9c927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32n3oyq3                        0x0000561616a6c4da <unavailable> + 5338

    5    libc.so.6                          0x00002aaafa188460 __libc_start_main +
    245

    6    tmp32n3oyq3                        0x0000561616a6c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else {\n        return 0\n    }\n    var minSum\
    \ = nums[0]\n    for i in 1..<nums.count {\n        minSum = minSum + nums[i]\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp1fa97775/tmp1fa97775.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0eade9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0eaae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0eaae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0eaadf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fa97775                        0x000055bc01f7d55a <unavailable> + 5466

    5    libc.so.6                          0x00002ba0eafd5460 __libc_start_main +
    245

    6    tmp1fa97775                        0x000055bc01f7d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for n in nums {\n        if n < min {\n      \
    \      min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpihx23ef_/tmpihx23ef_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95e3ebcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95e3bb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95e3bb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95e3bb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihx23ef_                        0x0000560d25ec459f <unavailable> + 5535

    5    libc.so.6                          0x00002b95e40a8460 __libc_start_main +
    245

    6    tmpihx23ef_                        0x0000560d25ec4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for n in nums {\n        sum\
    \ += n\n        if sum < minSum {\n            minSum = sum\n        }\n    }\n\
    \    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpdmxkwrlj/tmpdmxkwrlj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad94ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad91d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad91d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad91d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmxkwrlj                        0x00005602380774da <unavailable> + 5338

    5    libc.so.6                          0x00002b5ad96c9460 __libc_start_main +
    245

    6    tmpdmxkwrlj                        0x0000560238077129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n\
    \        sum += nums[i]\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpp6v21c1o/tmpp6v21c1o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c2c66fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c2c366b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c2c366988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c2c3657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6v21c1o                        0x000056291514555a <unavailable> + 5466

    5    libc.so.6                          0x00002b4c2c85b460 __libc_start_main +
    245

    6    tmpp6v21c1o                        0x00005629151451a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else { return 0 }\n    var sum = 0\n    var minSum\
    \ = nums[0]\n    for n in nums {\n        sum += n\n        if sum < minSum {\n\
    \            minSum = sum\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmph6p56eev/tmph6p56eev.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f3c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f3929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f3929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f39287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6p56eev                        0x000055c71f81453a <unavailable> + 5434

    5    libc.so.6                          0x00002ac4f3e1e460 __libc_start_main +
    245

    6    tmph6p56eev                        0x000055c71f814189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var min = nums[0]\n    for num in nums {\n        sum\
    \ += num\n        if sum < min {\n            min = sum\n        }\n    }\n  \
    \  return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp2zww44vn/tmp2zww44vn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5421132c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5420e29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5420e29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5420e287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zww44vn                        0x0000559dfdbaf4da <unavailable> + 5338

    5    libc.so.6                          0x00002b542131e460 __libc_start_main +
    245

    6    tmp2zww44vn                        0x0000559dfdbaf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpul0w_rkh/tmpul0w_rkh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21180ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2117df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2117df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2117df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpul0w_rkh                        0x000055af6097d48a <unavailable> + 5258

    5    libc.so.6                          0x00002b21182eb460 __libc_start_main +
    245

    6    tmpul0w_rkh                        0x000055af6097d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = Int.max\n    for i in 0..<nums.count {\n        for j in 0..<nums.count\
    \ {\n            if i != j {\n                let sum = nums[i] + nums[j]\n  \
    \              if sum < min {\n                    min = sum\n               \
    \ }\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpjy27vcnr/tmpjy27vcnr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b177e07fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b177dd76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b177dd76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b177dd757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjy27vcnr                        0x000055ee3b3a955a <unavailable> + 5466

    5    libc.so.6                          0x00002b177e26b460 __libc_start_main +
    245

    6    tmpjy27vcnr                        0x000055ee3b3a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for i in 1..<nums.count {\n        min = min(nums[i],\
    \ min)\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm1xz3c08.swift:8:15: error: cannot call value of non-function type\
    \ 'Int'\n        min = min(nums[i], min)\n              ^\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n      \
    \  sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmptsw5p2gy/tmptsw5p2gy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8668fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8668ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8668ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8668ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsw5p2gy                        0x000055829b1554da <unavailable> + 5338

    5    libc.so.6                          0x00002b8669199460 __libc_start_main +
    245

    6    tmptsw5p2gy                        0x000055829b155129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    guard nums.count > 0 else {\n        return 0\n    }\n    guard nums.count\
    \ <= 100 else {\n        return 0\n    }\n    var minSum = nums[0]\n    for i\
    \ in 1..<nums.count {\n        minSum = minSum + nums[i]\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp4dc4k4i0/tmp4dc4k4i0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276f8fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276f5f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276f5f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276f5f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dc4k4i0                        0x00005571bdb6355a <unavailable> + 5466

    5    libc.so.6                          0x00002b276fae6460 __libc_start_main +
    245

    6    tmp4dc4k4i0                        0x00005571bdb631a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum\
    \ + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfithhtzc/tmpfithhtzc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8400c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b80f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b80f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b80f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfithhtzc                        0x000056400b1104da <unavailable> + 5338

    5    libc.so.6                          0x00002b21b85ec460 __libc_start_main +
    245

    6    tmpfithhtzc                        0x000056400b110129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n        minSum =\
    \ minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpi1v5t38z/tmpi1v5t38z.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1v5t38z                        0x0000555eb234b55a <unavailable> + 5466

    5    libc.so.6                          0x00002af65fa0e460 __libc_start_main +
    245

    6    tmpi1v5t38z                        0x0000555eb234b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var min = nums[0]\n    for num in nums {\n        if num < min {\n  \
    \          min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpfghhi157/tmpfghhi157.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93dacbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93da9b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93da9b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93da9b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfghhi157                        0x000055cf1db2459f <unavailable> + 5535

    5    libc.so.6                          0x00002b93daea9460 __libc_start_main +
    245

    6    tmpfghhi157                        0x000055cf1db24129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014249
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\nfunc minSubArraySum(nums: [Int]) -> Int\
    \ {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyi5kuq6b/tmpyi5kuq6b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845574ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8455441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8455441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84554407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi5kuq6b                        0x000055559b1dc48a <unavailable> + 5258

    5    libc.so.6                          0x00002b8455936460 __libc_start_main +
    245

    6    tmpyi5kuq6b                        0x000055559b1dc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014249
