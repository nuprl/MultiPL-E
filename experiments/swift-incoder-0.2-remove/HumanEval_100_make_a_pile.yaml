name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in a list, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var pile = [Int]()\n    var level = 0\n    var stones = 0\n   \
    \ while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    } else {\n        pile.append(n/2 + 1)\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    }\n    if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile",
  "    var stones = [0]\n    var level = 0\n    while n != 0 {\n        stones.append(n\
    \ % 2 == 0 ? stones[level] : stones[level] + 1)\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ var nextLevel = 0\n    var nextLevelStones = 0\n    var evenLevel = 0\n    var\
    \ oddLevel = 0\n    var evenLevelStones = 0\n    var oddLevelStones = 0\n    while\
    \ level < n {\n        nextLevel = nextLevel + 2\n        nextLevelStones = nextLevelStones\
    \ + nextLevel\n        level = level + 1\n    }\n    if n % 2 == 0 {\n       \
    \ evenLevel = evenLevel + 2\n        evenLevelStones = evenLevelStones + evenLevel\n\
    \    } else {\n        oddLevel = oddLevel + 2\n        oddLevelStones = oddLevelStones\
    \ + oddLevel\n    }\n    stones.append(nextLevelStones)\n    stones.append(evenLevelStones)\n\
    \    stones.append(oddLevelStones)\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    }\n    if n % 2 == 1 {\n        pile.append(n/2)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        pile[level] = stones\n        stones += (n % 2 == 0) ? 1 : -1\n\
    \        n /= 2\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile = append(pile,\
    \ level)\n        if n % 2 == 0 {\n            n /= 2\n        } else {\n    \
    \        n = 3 * n + 1\n        }\n        level++\n    }\n    return pile", " \
    \   var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n        pile.append(n/2)\n\
    \    }\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile[level]\
    \ = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n\
    \    return pile", "    var pile: [Int] = []\n    var level = 1\n    var stones\
    \ = n\n    while stones > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n        n = n / 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n  \
    \      pile.append(count)\n        count += 1\n    }\n    if n % 2 == 0 {\n  \
    \      for _ in 0..<n {\n            pile.append(count % 2)\n            count\
    \ /= 2\n        }\n    } else {\n        for _ in 0..<n {\n            pile.append(count\
    \ % 2)\n            count /= 2\n        }\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n /\
    \ 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n / 2 + 1)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var stones = [0]\n    var level = 0\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            stones[level] = stones[level] + 1\n        }\n        level\
    \ = level + 1\n        n = n / 2\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        stones = stones % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var stones = 0\n    var\
    \ level = 0\n    while stones < n {\n        pile[level] = stones\n        if\
    \ stones % 2 == 0 {\n            stones += 1\n        } else {\n            stones\
    \ += 2\n        }\n        level += 1\n    }\n    return pile", "    var stones\
    \ = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n\
    \            stones.append(n)\n            n /= 2\n        } else {\n        \
    \    stones.append(n/2)\n            n /= 2\n        }\n        level++\n    }\n\
    \    return stones", "    var levels = [Int]()\n    var stones = n\n    var level\
    \ = 0\n    while stones > 0 {\n        levels.append(stones)\n        if stones\
    \ % 2 == 0 {\n            stones = stones / 2\n        } else {\n            stones\
    \ = stones * 3 + 1\n        }\n        level++\n    }\n    return levels", " \
    \   var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n\
    \ / 2)\n    } else {\n        pile.append(n / 2 + 1)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile[level]\
    \ = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 0\n    var stones =\
    \ 0\n    while stones < n {\n        pile[level] = stones\n        if n%2 == 0\
    \ {\n            stones += 2\n        } else {\n            stones += 3\n    \
    \    }\n        level++\n    }\n    return pile", "    var stones = [0]\n    var\
    \ level = 1\n    while n >= level {\n        stones.append(level + 1)\n      \
    \  level = stones[level]\n    }\n    return stones", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile", "    var stones = [Int]()\n\
    \    stones.append(n)\n    if n % 2 == 0 {\n        stones.append(n/2)\n    }\n\
    \    return stones", "    var pile = [Int]()\n    var level = 0\n    while n >\
    \ 0 {\n        pile.append(level)\n        level += n % 2 == 0 ? 1 : -1\n    \
    \    n = n / 2\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \        n = n / 2\n    }\n    return pile", "    var pile = [Int]()\n    var\
    \ level = 0\n    while n != 0 {\n        pile.append(level + 1)\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = (n * 3)\
    \ + 1\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [0]\n    if n % 2 == 0 {\n        stones = stones + [n/2]\n    } else {\n  \
    \      stones = stones + [n/2] + 1\n    }\n    for _ in 1..(n-1)/2 {\n       \
    \ stones = stones + [n/2]\n    }\n    return stones", "    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 1\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        }\n        n /= 2\n        level +=\
    \ 1\n    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n \
    \   var stones = 0\n    while stones < n {\n        pile[level] = stones\n   \
    \     if stones % 2 == 0 {\n            stones += 1\n        } else {\n      \
    \      stones += 2\n        }\n        level += 1\n    }\n    return pile", " \
    \   var stones = [0]\n    var level = 0\n    while n != 0 {\n        if n % 2\
    \ == 0 {\n            stones[level] = stones[level] + 1\n            n /= 2\n\
    \        } else {\n            stones[level] = stones[level] + 1\n           \
    \ n = n / 2\n        }\n        level++\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    var count = 0\n    for _ in 0..<n {\n        pile.append(count)\n\
    \        if n % 2 == 0 {\n            count += 1\n        } else {\n         \
    \   count += 2\n        }\n        n -= 1\n    }\n    return pile", "    var stones\
    \ = [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones.last! + 2)\n        } else {\n       \
    \     stones.append(stones.last! + 1)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [0]\n    var level = 0\n    while\
    \ stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n        } else {\n            stones.append(stones.count + 2)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var count = 0\n    var level = 0\n    while count < n {\n   \
    \     stones.append(count)\n        if n % 2 == 0 {\n            count += 1\n\
    \        } else {\n            count += 2\n        }\n        n /= 2\n       \
    \ level++\n    }\n    return stones", "    var pile = [Int]()\n    var level =\
    \ 1\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 0 {\n\
    \            pile[level] = stones\n            stones /= 2\n        } else {\n\
    \            pile[level] = stones\n            stones /= 2\n            stones\
    \ += stones\n        }\n        level++\n    }\n    return pile", "    var stones\
    \ = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2 == 1 {\n\
    \            stones.append(n)\n        } else {\n            stones.append(n +\
    \ level + 1)\n        }\n        level += 1\n    }\n    return stones", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n        n = n / 2\n    }\n    return pile",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        }\n        n /= 2\n    }\n    return pile", "    var pile = [Int]()\n\
    \    pile = append(pile, n)\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ n / 2)\n    }\n    return pile", "    var stones = [0]\n    var levels = [0]\n\
    \    var level = 0\n    var nLevels = n\n    var nStones = n\n    while nStones\
    \ > 0 {\n        if nStones % 2 == 0 {\n            levels[level] = nStones\n\
    \            level++\n            nStones /= 2\n        } else {\n           \
    \ levels[level] = nStones\n            level++\n            nStones /= 2\n   \
    \         nStones -= 1\n        }\n    }\n    for level in 0..<level {\n     \
    \   stones += levels[level]\n    }\n    return stones", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        } else\
    \ {\n            pile = pile.append(n / 2)\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones\
    \ > 0 {\n        pile[level] = stones\n        if stones % 2 == 0 {\n        \
    \    stones = stones / 2\n        } else {\n            stones = stones * 3 +\
    \ 1\n        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var stones_in_next_level = n\n    if n % 2 == 0 {\n        stones_in_next_level\
    \ = stones_in_next_level / 2\n    }\n    for _ in 0..<stones_in_next_level {\n\
    \        stones.append(stones_in_next_level)\n        stones_in_next_level = stones_in_next_level\
    \ / 2\n    }\n    return stones", "    var pile = [Int]()\n    pile = pile.append(n)\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            pile[level] = stones\n    \
    \        stones /= 2\n        } else {\n            pile[level] = stones\n   \
    \         stones /= 2\n            stones /= 2\n        }\n        level++\n \
    \   }\n    return pile", "    var stones = [Int]()\n    var stonesCount = 0\n\
    \    var nextLevel = n - 1\n    if n % 2 == 1 {\n        nextLevel = nextLevel\
    \ + 1\n    }\n    for _ in 0..<nextLevel {\n        stones.append(stonesCount)\n\
    \        stonesCount = stonesCount + 1\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var levels = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stone = stone + 2\n\
    \        } else {\n            stone = stone + 1\n        }\n        stones.append(stone)\n\
    \        levels.append(level)\n        level = level + 1\n        n = n - stone\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n        n = n\
    \ / 2\n    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n\
    \    while n != 0 {\n        stones.append(n)\n        n /= 2\n        level +=\
    \ 1\n    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n\
    \    var stones_in_level = n\n    while stones_in_level > 0 {\n        if stones_in_level\
    \ % 2 == 1 {\n            stones.append(stones_in_level)\n            stones_in_level\
    \ -= stones_in_level / 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2\n            stones_in_level\
    \ += stones_in_level / 2\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n        n = n / 2\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n \
    \       } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones", "    var pile: [Int] = [0]\n    var\
    \ level = 1\n    while n != 0 {\n        pile[level] = n\n        n -= n % 2 ==\
    \ 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile", "    var stones\
    \ = [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones.last! + 2)\n        } else {\n       \
    \     stones.append(stones.last! + 3)\n        }\n        n /= 2\n        level\
    \ += 1\n    }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 0\
    \ {\n        pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n)\n\
    \    }\n    return pile", "    var pile: [Int] = []\n    var level = 0\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            pile[level] = n\n            n\
    \ /= 2\n        } else {\n            pile[level] = n\n            n /= 2\n  \
    \          n -= 1\n        }\n        level += 1\n    }\n    return pile", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 2\n            level++\n        }\n        n = n / 2\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 1\n    var stones =\
    \ n\n    while stones > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile", "    var pile:\
    \ [Int] = []\n    var stones = 0\n    var level = 0\n    while stones < n {\n\
    \        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        pile.append(level)\n        level\
    \ += (n % 2 == 0 ? 1 : -1)\n        n /= 2\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var count = 0\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \        count = count + 1\n    } else {\n        for _ in 0..<n {\n         \
    \   pile = pile.append(n)\n            count = count + 1\n        }\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 0\n    while n > 0\
    \ {\n        pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n  \
    \      level += 1\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        pile.append(stones)\n\
    \        if n % 2 == 0 {\n            stones += 2\n        } else {\n        \
    \    stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n  \
    \      pile.append(n/2)\n    }\n    return pile", "    var stones = [0]\n    var\
    \ level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n         \
    \   stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile[level]\
    \ = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 0\n    var stones =\
    \ 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 1\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n          \
    \  stones += 2\n        } else {\n            pile.append(stones)\n          \
    \  stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n     \
    \   pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(n/2)\n    }\n    if n % 2 == 1 {\n       \
    \ pile.append(n/2 + 1)\n    }\n    return pile", "    var pile = [Int]()\n   \
    \ var level = 0\n    var stones = 0\n    while stones < n {\n        if n % 2\
    \ == 0 {\n            pile[level] = stones\n            stones += 2\n        }\
    \ else {\n            pile[level] = stones\n            stones += 3\n        }\n\
    \        level++\n        n = n / 2\n    }\n    return pile", "    var pile =\
    \ [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n   \
    \     if n % 2 == 0 {\n            pile[level] = stones\n            stones +=\
    \ 2\n        } else {\n            pile[level] = stones\n            stones +=\
    \ 3\n        }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        stones.append(n)\n        n /=\
    \ 2\n        level++\n    }\n    stones.reverse()\n    return stones", "    var\
    \ pile = [Int]()\n    pile = append(pile, Int(n))\n    if n % 2 == 0 {\n     \
    \   pile = append(pile, Int(n/2))\n    } else {\n        pile = append(pile, Int(n/2)\
    \ + 1)\n    }\n    return pile", "    var stones = [0]\n    var level = 0\n  \
    \  while n != 0 {\n        stones[level] = n\n        n -= n % 2 == 0 ? n / 2\
    \ : n\n        level += 1\n    }\n    return stones", "    var pile = [Int]()\n\
    \    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n  \
    \  if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile", " \
    \   var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    } else {\n        pile.append(n/2 + 1)\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n        n = n / 2\n    }\n    return pile",
  "    var stones = [0]\n    var level = 0\n    while stones.count < n {\n       \
    \ stones.append(stones.count + 1)\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n        } else {\n            stones.append(stones.count - 1)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var stones_in_level = [Int]()\n    var current_level = 0\n  \
    \  var current_stones = 0\n    var next_stones = 0\n    var next_odd_stones =\
    \ 0\n    var next_even_stones = 0\n    for _ in 0..<n {\n        if n % 2 == 0\
    \ {\n            next_stones += n\n        } else {\n            next_odd_stones\
    \ += n\n        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stone",
  "    var stones = [Int]()\n    var level = 0\n    var stones_in_level = 0\n    while\
    \ stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var count = 0\n    if n % 2 == 1 {\n   \
    \     pile = pile.append(count)\n        count = count + 1\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(count)\n  \
    \          count = count + 1\n        }\n        n = n / 2\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    stones.append(n)\n    if n % 2 == 0 {\n\
    \        stones.append(stones.last! * 2)\n    } else {\n        stones.append(stones.last!\
    \ * 3)\n    }\n    return stones", "    var stones = [0]\n    var level = 0\n\
    \    while n > 0 {\n        stones[level] = n\n        level = (level + 1) % 2\n\
    \        n = n / 2\n    }\n    return stones", "    var pile = [Int]()\n    if\
    \ n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n {\n \
    \       pile = pile.append(n)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -=\
    \ n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile", " \
    \   var stones = [0]\n    var level = 1\n    while level < n {\n        if n %\
    \ 2 == 1 {\n            stones.append(stones[level] + 1)\n        } else {\n \
    \           stones.append(stones[level] * 2)\n        }\n        level++\n   \
    \ }\n    return stones", "    var stones = [Int]()\n    var level = 0\n    while\
    \ n >= level {\n        stones.append(level + 1)\n        level = level * 2 +\
    \ 1\n    }\n    return stones", "    var pile = [Int]()\n    pile.append(n)\n\
    \    if n % 2 == 1 {\n        pile.append(n/2)\n    }\n    if n % 2 == 0 {\n \
    \       pile.append(n/2 + 1)\n    }\n    return pile", "    var levels = [Int]()\n\
    \    var stones = n\n    var level = 1\n    while stones > 0 {\n        levels.append(stones)\n\
    \        stones = stones / 2\n        level = level + 1\n    }\n    return levels",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n\
    \ / 2)\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n       \
    \     pile[level] = stones\n            stones += 2\n        } else {\n      \
    \      pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \        n = n / 2\n    }\n    return pile", "    var pile = [Int]()\n    var\
    \ nLevels = n\n    var nStones = 0\n    while nLevels > 0 {\n        if nLevels\
    \ % 2 == 0 {\n            nStones += nLevels\n        } else {\n            nStones\
    \ += nLevels - 1\n        }\n        nLevels /= 2\n    }\n    pile = pile.reverse()\n\
    \    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 ==\
    \ 0 {\n        pile.append(n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        if n % 2 == 0 {\n            pile[level]\
    \ = n\n            n /= 2\n        } else {\n            pile[level] = n\n   \
    \         n /= 2\n            n -= 1\n        }\n        level += 1\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 1\n    while n != 0\
    \ {\n        if n % 2 == 0 {\n            pile = append(pile, level)\n       \
    \ }\n        n /= 2\n        level += 1\n    }\n    return pile", "    var stones\
    \ = [Int]()\n    stones.append(n)\n    if n % 2 == 0 {\n        stones.append(stones.last!\
    \ + 2)\n    } else {\n        stones.append(stones.last! + 3)\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n  \
    \  while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n        n = n / 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile.append(level\
    \ + 1)\n        level += n % 2 == 0 ? 1 : 2\n        n = n / 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n\
    \ / 2)\n    } else {\n        pile.append(n / 2 + 1)\n    }\n    return pile",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    } else {\n        pile.append(n/2 + 1)\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 1 {\n            pile.append(stones)\n         \
    \   stones /= 2\n        } else {\n            pile.append(stones)\n         \
    \   stones /= 2\n            stones /= 2\n        }\n        level += 1\n    }\n\
    \    return pile", "    var stones = [1]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 2)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var stones = [1]\n\
    \    var levels = [0]\n    var result = [Int]()\n    for _ in 0..<n {\n      \
    \  if n % 2 == 0 {\n            stones.append(stones.last! * 2)\n        } else\
    \ {\n            stones.append(stones.last! * 3)\n        }\n        levels.append(stones.count)\n\
    \        stones.removeLast()\n    }\n    for level in levels {\n        result.append(level)\n\
    \    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 1 {\n   \
    \     pile = pile.append(n)\n    }\n    for _ in 1...n {\n        pile = pile.append(n\
    \ % 2 == 0 ? n : n + 2)\n    }\n    return pile", "    var pile = [Int]()\n  \
    \  if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    else {\n       \
    \ pile = pile.append(n / 2)\n        pile = pile.append(n / 2)\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 0\n    while n != 0 {\n      \
    \  stones.append(stones[level] + n % 2)\n        n /= 2\n        level++\n   \
    \ }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n  \
    \      pile.append(pile[n/2] + pile[n/2 - 1])\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    } else {\n        pile.append(n+1)\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile.append(stones)\n            stones +=\
    \ 2\n        } else {\n            pile.append(stones)\n            stones +=\
    \ 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", "  \
    \  var pile = [Int]()\n    var level = 0\n    while n != 0 {\n        pile[level]\
    \ = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n\
    \    return pile", "    var stones = [0]\n    var level = 0\n    while n != 0\
    \ {\n        if n % 2 == 1 {\n            stones.append(stones[level] + 1)\n \
    \       }\n        n /= 2\n        level++\n    }\n    return stones", "    var\
    \ stones = [Int]()\n    var level = 0\n    var stones_in_level = 0\n    while\
    \ stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n        n = n /\
    \ 2\n    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n \
    \   var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n        \
    \    pile[level] = stones\n            stones += 2\n        } else {\n       \
    \     pile[level] = stones\n            stones += 2\n            pile[level+1]\
    \ = stones\n            stones += 2\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 0\n    while stones.count < n\
    \ {\n        stones.append(stones.count + 1)\n        if n%2 == 0 {\n        \
    \    stones.append(stones.count + 1)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var levels = [Int]()\n\
    \    stones.append(n)\n    levels.append(n)\n    if n % 2 == 0 {\n        levels.append(stones.last!\
    \ + 2)\n    } else {\n        levels.append(stones.last! + 3)\n    }\n    for\
    \ _ in 1...n {\n        stones.append(stones.last!)\n        levels.append(stones.last!)\n\
    \    }\n    return levels", "    var stones = [0]\n    var level = 0\n    while\
    \ stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n        } else {\n            stones.append(stones.count + 2)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    var i = 0\n    while i < n {\n        if i % 2 == 0 {\n     \
    \       pile.append(n)\n        } else {\n            pile.append(n + i)\n   \
    \     }\n        i += 1\n    }\n    return pile", "    var pile = [Int]()\n  \
    \  var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones += stones\n        }\n        level++\n    }\n    return pile",
  "    var stones = [0]\n    var level = 0\n    while n != 0 {\n        stones[level]\
    \ = n\n        n -= n % 2 == 0 ? n / 2 : n + 1\n        level++\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n  \
    \      pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        pile[level] = stones\n        if\
    \ n%2 == 0 {\n            stones += 2\n        } else {\n            stones +=\
    \ 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", "  \
    \  var stones = [Int]()\n    var levels = [Int]()\n    var level = 0\n    var\
    \ stone = 0\n    while stone < n {\n        stone = stone + 2\n        stones.append(stone)\n\
    \        levels.append(level)\n        level = level + 1\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile = append(pile,\
    \ level)\n        n -= level\n        level += (n % 2 == 0) ? 1 : 2\n    }\n \
    \   return pile", "    var pile = [Int]()\n    var level = 0\n    var stones =\
    \ 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 0\n    while stones.count < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n  \
    \      } else {\n            stones.append(stones.count + 2)\n        }\n    \
    \    n /= 2\n        level++\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        pile.append(stones)\n\
    \        if n % 2 == 0 {\n            stones += 2\n        } else {\n        \
    \    stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n  \
    \      pile.append(n - 1)\n    }\n    return pile", "    var stones = [1]\n  \
    \  var level = 1\n    var result = [Int]()\n    while stones.count < n {\n   \
    \     if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        }\
    \ else {\n            stones.append(stones.last! + 1)\n        }\n        level++\n\
    \    }\n    for _ in 0..<level {\n        result.append(stones.last!)\n      \
    \  stones.removeLast()\n    }\n    return result", "    var pile = [Int]()\n \
    \   var count = 0\n    var next = 0\n    for _ in 0..<n {\n        pile.append(count)\n\
    \        if n % 2 == 0 {\n            next = next + 2\n        } else {\n    \
    \        next = next + 1\n        }\n        count = next\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    } else {\n        pile.append(n/2+1)\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    while n > 0 {\n        pile[level] = n\n \
    \       level += (n % 2 == 0) ? 1 : 2\n        n /= 2\n    }\n    return pile",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 2\n            level++\n        }\n        n = n / 2\n    }\n \
    \   return pile", "    var stones = [0]\n    var level = 1\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count + 2)\n        }\n  \
    \      level++\n        n = n / 2\n    }\n    return stones", "    var pile =\
    \ [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n        pile =\
    \ append(pile, n / 2)\n    } else {\n        pile = append(pile, n / 2)\n    \
    \    pile = append(pile, n / 2)\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile.append(stones)\n            stones /= 2\n     \
    \   } else {\n            pile.append(stones)\n            stones /= 2\n     \
    \       pile.append(stones)\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile = pile.append(n)\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    return pile",
  "    var stones = [1]\n    var levels = [0]\n    var result = [Int]()\n    for _\
    \ in 0..<n {\n        let level = levels[stones.count-1]\n        stones.append(levels[stones.count-1])\n\
    \        levels.append(levels[stones.count-1])\n        if stones.count % 2 ==\
    \ 0 {\n            levels[stones.count-1] = levels[stones.count-1] + 1\n     \
    \   } else {\n            levels[stones.count-1] = levels[stones.count-1] - 1\n\
    \        }\n        result.append(levels[stones.count-1])\n    }\n    return result",
  "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n  \
    \  }\n    else {\n        var even = n / 2\n        var odd = n - even\n     \
    \   pile = pile.append(even)\n        pile = pile.append(odd)\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    stones.append(n)\n    if n % 2 == 1 {\n\
    \        stones.append(n + 2)\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile.append(stones)\n            stones\
    \ += 2\n        } else {\n            pile.append(stones)\n            stones\
    \ += 3\n        }\n        n /= 2\n        level++\n    }\n    return pile", " \
    \   var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(n/2)\n    }\n    if n % 2 == 1 {\n       \
    \ pile.append(n/2 + 1)\n    }\n    return pile", "    var stones = [Int]()\n \
    \   var level = 0\n    var stones_in_level = n\n    while stones_in_level > 0\
    \ {\n        if stones_in_level % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2\n        } else {\n      \
    \      stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2 + 1\n        }\n        level++\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    }\n    if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n\
    \    }\n    if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile",
  "    var stones = [0]\n    var levels = [0]\n    var level = 0\n    var count =\
    \ 0\n    while count < n {\n        if n % 2 == 0 {\n            stones.append(n)\n\
    \            levels.append(level + 1)\n            count += 1\n        } else\
    \ {\n            stones.append(n - stones[level])\n            levels.append(level\
    \ + 1)\n            count += 1\n        }\n        n /= 2\n        level += 1\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ var stones_in_level = 0\n    while stones_in_level < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones_in_level)\n            stones_in_level\
    \ += 1\n        } else {\n            stones.append(stones_in_level)\n       \
    \     stones_in_level += 1\n            stones_in_level += 2\n        }\n    \
    \    n /= 2\n        level += 1\n    }\n    return stones", "    var stones =\
    \ [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 == 0\
    \ {\n            stones.append(stones.count + 1)\n        } else {\n         \
    \   stones.append(stones.count + 2)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ var stones_in_level = 0\n    while stones_in_level < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones_in_level)\n            stones_in_level\
    \ += 2\n        } else {\n            stones.append(stones_in_level)\n       \
    \     stones_in_level += 3\n        }\n        level++\n        n = n / 2\n  \
    \  }\n    return stones", "    var stones = [0]\n    var level = 0\n    while\
    \ n >= 0 {\n        stones.append(stones[level] + 1)\n        if n % 2 == 0 {\n\
    \            stones.append(stones[level] + 1)\n        }\n        n /= 2\n   \
    \     level++\n    }\n    return stones", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        pile[level] = stones\n\
    \        if n%2 == 0 {\n            stones += 2\n        } else {\n          \
    \  stones += 1\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile", "    var pile: [Int] = []\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            pile.append(n)\n            n /= 2\n   \
    \     } else {\n            pile.append(n / 2)\n            n = n / 2\n      \
    \  }\n        level++\n    }\n    return pile", "    var stones = [Int]()\n  \
    \  var level = 0\n    while n != 0 {\n        stones.append(n)\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return stones", " \
    \   var pile = [Int]()\n    var i = 0\n    while i < n {\n        if i % 2 ==\
    \ 0 {\n            pile.append(n)\n        } else {\n            pile.append(n\
    \ + i)\n        }\n        i += 1\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = n\n    while stones > 0 {\n        pile[level]\
    \ = stones\n        stones = stones % 2 == 0 ? stones + 1 : stones - 1\n     \
    \   level++\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n        n = n / 2\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 1\n    var stones\
    \ = n\n    while stones > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            pile.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [1]\n    var levels = [Int]()\n    var level = 0\n    while stones.count < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n  \
    \      } else {\n            stones.append(stones.last! + 1)\n        }\n    \
    \    n /= 2\n        levels.append(stones.count)\n    }\n    return levels", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = n\n    while stones\
    \ > 0 {\n        if stones % 2 == 1 {\n            pile[level] = stones\n    \
    \        stones /= 2\n        } else {\n            pile[level] = stones\n   \
    \         stones /= 2\n            stones += stones\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(n/2)\n    } else {\n        pile.append(n/2\
    \ + 1)\n    }\n    return pile", "    var stones = [0]\n    var level = 0\n  \
    \  while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n        } else {\n            stones.append(stones.count + 2)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(make_a_pile(n/2))\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n        n = n\
    \ / 2\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n \
    \   var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n        \
    \    pile[level] = stones\n            stones += 2\n        } else {\n       \
    \     pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n     \
    \   pile = pile.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0\
    \ {\n            pile = pile.append(n)\n        } else {\n            pile = pile.append(n)\n\
    \        }\n    }\n    return pile", "    var stones = [Int]()\n    var level\
    \ = 0\n    while n != 0 {\n        if n % 2 == 1 {\n            stones.append(n)\n\
    \            n /= 2\n        } else {\n            stones.append(n)\n        \
    \    n /= 2\n            n /= 2\n        }\n        level++\n    }\n    return\
    \ stones", "    var stones = [0]\n    var level = 1\n    var nextLevel = n / 2\n\
    \    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 1...nextLevel\
    \ {\n        stones.append(stones[level] + 1)\n        level = level + 1\n   \
    \ }\n    return stones", "    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count + 2)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var stones = [0]\n\
    \    var level = 1\n    while n >= level {\n        stones.append(level + 1)\n\
    \        level += (n % 2 == 0 ? 1 : 2)\n        n /= 2\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 1 {\n            pile = append(pile, stones)\n \
    \           stones = 0\n        } else {\n            pile = append(pile, stones)\n\
    \            stones = stones / 2\n        }\n        level = level + 1\n    }\n\
    \    return pile", "    var stones = [0]\n    var level = 1\n    while n > 0 {\n\
    \        if n % 2 == 0 {\n            stones.append(stones[level])\n         \
    \   level++\n        }\n        n /= 2\n    }\n    return stones", "    var stones\
    \ = [0]\n    if n % 2 == 1 {\n        stones.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n  \
    \      } else {\n            stones.append(stones.last! + 1)\n        }\n    }\n\
    \    return stones", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 2\n            level++\n        }\n        n\
    \ /= 2\n    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n\
    \    var stones_in_level = n\n\n    while stones_in_level > 0 {\n        if stones_in_level\
    \ % 2 == 0 {\n            stones.append(stones_in_level)\n            stones_in_level\
    \ -= stones_in_level / 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2 + 1\n        }\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ var stones_in_level = n\n    var next_odd_stones = n\n    var next_even_stones\
    \ = n\n    if n % 2 == 0 {\n        next_odd_stones = n + 1\n    } else {\n  \
    \      next_even_stones = n + 1\n    }\n    while stones_in_level > 0 {\n    \
    \    stones.append(stones_in_level)\n        stones_in_level -= next_odd_stones\n\
    \        if stones_in_level % 2 == 0 {\n            stones_in_level += next_even_stones\n\
    \        }\n        level += 1\n        next_odd_stones = next_even_stones\n \
    \       next_even_stones = n\n    }\n    return stones", "    var stones = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        stones.append(n)\n        n -=\
    \ n % 2 == 0 ? 2 : 3\n        level += 1\n    }\n    return stones", "    var\
    \ pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n\
    \ {\n        if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var levels =\
    \ [Int]()\n    var stones = n\n    var level = 0\n    while stones > 0 {\n   \
    \     levels.append(stones)\n        stones = stones % 2 == 0 ? stones + 1 : stones\n\
    \        level = level + 1\n    }\n    return levels"]
stop_tokens:
- "\n}"
