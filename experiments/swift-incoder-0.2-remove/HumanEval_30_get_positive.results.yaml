language: swift
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 1
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{it > 0}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpke68kjoq.swift:4:21: error: cannot find 'it' in scope\n    return\
    \ l.filter{it > 0}\n                    ^~\n"
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for n in l {\n        if n\
    \ > 0 {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 1
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{it > 0}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpke68kjoq.swift:4:21: error: cannot find 'it' in scope\n    return\
    \ l.filter{it > 0}\n                    ^~\n"
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for n in l {\n        if n\
    \ > 0 {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 1
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{it > 0}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpke68kjoq.swift:4:21: error: cannot find 'it' in scope\n    return\
    \ l.filter{it > 0}\n                    ^~\n"
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: -4
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ >= 0 {\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmzpo949b/tmpmzpo949b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2849086c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2848d7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2848d7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2848d7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzpo949b                        0x0000555b2a23678b <unavailable> + 6027

    5    libc.so.6                          0x00002b2849272460 __libc_start_main +
    245

    6    tmpmzpo949b                        0x0000555b2a2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x\
    \ > 0 {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978690
- exit_code: 0
  program: "\n/// Return only positive numbers in the list.\nfunc get_positive(l:\
    \ [Int]) -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978613
