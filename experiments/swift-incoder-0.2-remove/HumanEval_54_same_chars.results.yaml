language: swift
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for c0, c1 in zip (s0.characters, s1.characters) {\n     \
    \   if c0 != c1 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ad3uq99.swift:7:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip (s0.characters, s1.characters) {\n          ^\n/tmp/tmp_ad3uq99.swift:7:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip\
    \ (s0.characters, s1.characters) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.utf8.count\n    let s1_len\
    \ = s1.utf8.count\n    if s0_len != s1_len {\n        return false\n    }\n  \
    \  for (_, ch) in s0.utf8.enumerated() {\n        if ch != s1.utf8[s0_len - 1\
    \ - _] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzojqozix.swift:10:39: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if ch != s1.utf8[s0_len - 1 - _]\
    \ {\n                                      ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch) in s0.enumerated()\
    \ {\n        if ch != s1[0] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9loymlk.swift:10:18: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if ch !=\
    \ s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count != s1.count else { return\
    \ false }\n    for c0, c1 in zip( s0.characters, s1.characters ) {\n        if\
    \ c0 != c1 { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5ff4mk4_.swift:5:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip( s0.characters, s1.characters ) {\n          ^\n/tmp/tmp5ff4mk4_.swift:5:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(\
    \ s0.characters, s1.characters ) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters\n    var c1 = s1.characters\n\
    \    while c0.count != c1.count {\n        if c0[0] != c1[0] {\n            return\
    \ false\n        }\n        c0.advancedBy(1)\n        c1.advancedBy(1)\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6kl4rrlk.swift:4:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = s0.characters\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6kl4rrlk.swift:5:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var c1 =\
    \ s1.characters\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6kl4rrlk.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c0[0] != c1[0] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp6kl4rrlk.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if c0[0] != c1[0] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp6kl4rrlk.swift:10:12: error:\
    \ value of type 'String' has no member 'advancedBy'\n        c0.advancedBy(1)\n\
    \        ~~ ^~~~~~~~~~\n/tmp/tmp6kl4rrlk.swift:11:12: error: value of type 'String'\
    \ has no member 'advancedBy'\n        c1.advancedBy(1)\n        ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        if !s1.contains(String(ch0))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuuqpnvba.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        for (_, ch1) in s1.chars()\
    \ {\n            if ch0 == ch1 {\n                continue\n            }\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjokngvf2.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = Array(s0)\n    var s1_chars\
    \ = Array(s1)\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for index in 0..<s0_chars.count {\n        if s0_chars[index] != s1_chars[index]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmppr78ikr0/tmppr78ikr0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b0b579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b0b270b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b0b270988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b0b26f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr78ikr0                        0x000056127a425683 <unavailable> + 5763

    5    libc.so.6                          0x00002b8b0b765460 __libc_start_main +
    245

    6    tmppr78ikr0                        0x000056127a4252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(s0.count, s1.count)\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == s0.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpshmiyzdu.swift:5:42: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    while i < min(s0.count,\
    \ s1.count) && s0[i] == s1[i] {\n                                         ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpshmiyzdu.swift:5:51:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    while i < min(s0.count, s1.count) && s0[i]\
    \ == s1[i] {\n                                                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch0) in s0.enumerated()\
    \ {\n        for (_, ch1) in s1.enumerated() {\n            if ch0 == ch1 {\n\
    \                continue\n            }\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmfu21483/tmpmfu21483.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef68159c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef67e50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef67e50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef67e4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfu21483                        0x0000560714f515d3 <unavailable> + 5587

    5    libc.so.6                          0x00002aef68345460 __libc_start_main +
    245

    6    tmpmfu21483                        0x0000560714f51229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zip(s0.characters, s1.characters)\
    \ {\n        if c0 != c1 {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfvh37897.swift:8:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip(s0.characters, s1.characters) {\n          ^\n/tmp/tmpfvh37897.swift:8:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(s0.characters,\
    \ s1.characters) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    if s0c.count != s1c.count {\n        return false\n    }\n    for (_, v0)\
    \ in s0c.enumerated() {\n        for (_, v1) in s1c.enumerated() {\n         \
    \   if v0 != v1 {\n                return false\n            }\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpplj45cya.swift:4:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0c = s0.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpplj45cya.swift:5:18:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1c\
    \ = s1.characters\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.count\
    \ && j < s1.count {\n        if s0[i] != s1[j] {\n            return false\n \
    \       }\n        i += 1\n        j += 1\n    }\n    return i == s0.count &&\
    \ j == s1.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk8x99mza.swift:7:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpk8x99mza.swift:7:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    for c0, c1 in zip (s0c, s1c) {\n        if c0 != c1 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7wtuzgsc.swift:6:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip (s0c, s1c) {\n          ^\n/tmp/tmp7wtuzgsc.swift:6:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip\
    \ (s0c, s1c) {\n          ^\n/tmp/tmp7wtuzgsc.swift:4:18: error: 'characters'\
    \ is unavailable: Please use String directly\n    let s0c = s0.characters\n  \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7wtuzgsc.swift:5:18: error: 'characters' is unavailable: Please use\
    \ String directly\n    let s1c = s1.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(s0.count, s1.count)\
    \ && s0.chars[i] == s1.chars[i] {\n        i += 1\n    }\n    return i == s0.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv4q746_v.swift:5:45: error: value of type 'String' has no member\
    \ 'chars'\n    while i < min(s0.count, s1.count) && s0.chars[i] == s1.chars[i]\
    \ {\n                                         ~~ ^~~~~\n/tmp/tmpv4q746_v.swift:5:60:\
    \ error: value of type 'String' has no member 'chars'\n    while i < min(s0.count,\
    \ s1.count) && s0.chars[i] == s1.chars[i] {\n                                \
    \                        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.enumerated() {\n        for (_, ch1) in\
    \ s1.enumerated() {\n            if ch0 == ch1 {\n                continue\n \
    \           }\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ur20sal/tmp_ur20sal.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b390da7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b390d774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b390d774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b390d7737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ur20sal                        0x000056415a12a5d3 <unavailable> + 5587

    5    libc.so.6                          0x00002b390dc69460 __libc_start_main +
    245

    6    tmp_ur20sal                        0x000056415a12a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    \n    var s0_chars = Array(s0)\n    var s1_chars\
    \ = Array(s1)\n    \n    for _ in 0..<min(s0.count, s1.count) {\n        if s0_chars.contains(s1_chars[0])\
    \ {\n            s0_chars.remove(at: 0)\n            s1_chars.remove(at: 0)\n\
    \        }\n    }\n    \n    return s0_chars.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpkykeibwl/tmpkykeibwl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8fba05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8fb6fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8fb6fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8fb6fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkykeibwl                        0x000055853c5269f8 <unavailable> + 6648

    5    libc.so.6                          0x00002ba8fbbf1460 __libc_start_main +
    245

    6    tmpkykeibwl                        0x000055853c526469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == len(s0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptll00g27.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) && s0[i] == s1[i] {\n                  ^~~\n/tmp/tmptll00g27.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) && s0[i]\
    \ == s1[i] {\n                           ^~~\n/tmp/tmptll00g27.swift:8:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count != s1.count else { return\
    \ false }\n    for i in 0..<s0.count {\n        if s0[i] != s1[i] { return false\
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu1xqm7eg.swift:6:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] { return false }\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpu1xqm7eg.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] { return false }\n                    ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        for (_, ch1) in s1.chars()\
    \ {\n            if ch0 == ch1 {\n                continue\n            }\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjokngvf2.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count == s1.count else { return\
    \ false }\n    for c0, c1 in zip( s0.characters, s1.characters ) {\n        if\
    \ c0 != c1 { return false }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpovxxly33.swift:5:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip( s0.characters, s1.characters ) {\n          ^\n/tmp/tmpovxxly33.swift:5:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(\
    \ s0.characters, s1.characters ) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars.enumerate() {\n        for\
    \ (_, ch1) in s1.unicodeScalars.enumerate() {\n            if ch0 == ch1 {\n \
    \               continue\n            }\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfeq58e57.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.unicodeScalars.enumerate() {\n\
    \    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c in s0 {\n        if c != s1[i] {\n  \
    \          return false\n        }\n        i += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2eeh8sl.swift:9:17: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if c != s1[i]\
    \ {\n                ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = Array(s0.characters)\n   \
    \ var s1_chars = Array(s1.characters)\n    if s0.characters.count != s1.characters.count\
    \ {\n        return false\n    }\n    for (_, char) in s0.characters.enumerated()\
    \ {\n        if !s1_chars.contains(char) {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0g92r81u.swift:4:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = Array(s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0g92r81u.swift:5:29: error: 'characters' is unavailable: Please use\
    \ String directly\n    var s1_chars = Array(s1.characters)\n                 \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp0g92r81u.swift:6:11: error: 'characters' is unavailable: Please use String\
    \ directly\n    if s0.characters.count != s1.characters.count {\n          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0g92r81u.swift:6:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0g92r81u.swift:9:25: error: 'characters'\
    \ is unavailable: Please use String directly\n    for (_, char) in s0.characters.enumerated()\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0g92r81u.swift:4:9: warning: initialization of variable\
    \ 's0_chars' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var s0_chars = Array(s0.characters)\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp0g92r81u.swift:5:9:\
    \ warning: variable 's1_chars' was never mutated; consider changing to 'let' constant\n\
    \    var s1_chars = Array(s1.characters)\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        for (_, ch1) in s1.chars()\
    \ {\n            if ch0 == ch1 {\n                continue\n            }\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjokngvf2.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_chars = s0.characters\n    let s1_chars\
    \ = s1.characters\n    for c0, c1 in zip(s0_chars, s1_chars) {\n        if c0\
    \ != c1 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmy79bw69.swift:6:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip(s0_chars, s1_chars) {\n          ^\n/tmp/tmpmy79bw69.swift:6:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(s0_chars,\
    \ s1_chars) {\n          ^\n/tmp/tmpmy79bw69.swift:4:23: error: 'characters' is\
    \ unavailable: Please use String directly\n    let s0_chars = s0.characters\n\
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmy79bw69.swift:5:23: error: 'characters' is unavailable: Please use\
    \ String directly\n    let s1_chars = s1.characters\n                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.characters.count\n    let\
    \ s1_len = s1.characters.count\n    if s0_len != s1_len {\n        return false\n\
    \    }\n    for c0, c1 in zip( s0.characters, s1.characters) {\n        if c0\
    \ != c1 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzzqm6_4h.swift:9:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip( s0.characters, s1.characters) {\n          ^\n/tmp/tmpzzqm6_4h.swift:9:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(\
    \ s0.characters, s1.characters) {\n          ^\n/tmp/tmpzzqm6_4h.swift:4:21: error:\
    \ 'characters' is unavailable: Please use String directly\n    let s0_len = s0.characters.count\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzzqm6_4h.swift:5:21: error: 'characters' is unavailable: Please use\
    \ String directly\n    let s1_len = s1.characters.count\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    if s0c.count != s1c.count {\n        return false\n    }\n    for (_, ch)\
    \ in s0c.enumerated() {\n        if ch != s1c[s0c.index(ch, offsetBy: 0)] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp78z1k5zp.swift:4:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0c = s0.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp78z1k5zp.swift:5:18:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1c\
    \ = s1.characters\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp78z1k5zp.swift:10:32: error: cannot convert value of\
    \ type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if ch != s1c[s0c.index(ch, offsetBy: 0)] {\n                        \
    \       ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.length != s1.length {\n        return\
    \ false\n    }\n    var i = 0\n    for c in s0 {\n        if c != s1[i] {\n  \
    \          return false\n        }\n        i += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpst61dr4s.swift:4:11: error: value of type 'String' has no member\
    \ 'length'\n    if s0.length != s1.length {\n       ~~ ^~~~~~\n/tmp/tmpst61dr4s.swift:4:24:\
    \ error: value of type 'String' has no member 'length'\n    if s0.length != s1.length\
    \ {\n                    ~~ ^~~~~~\n/tmp/tmpst61dr4s.swift:9:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if c != s1[i] {\n                ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.count && i <\
    \ s1.count {\n        if s0[i] != s1[i] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0s0cypq0.swift:6:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp0s0cypq0.swift:6:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for i in 0..<s0_len\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpleb1arts.swift:10:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpleb1arts.swift:10:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars {\n        for (_, ch1)\
    \ in s1.unicodeScalars {\n            if ch0 == ch1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gddr9fo.swift:7:24: error: tuple pattern cannot match values of\
    \ non-tuple type 'Unicode.Scalar'\n    for (_, ch0) in s0.unicodeScalars {\n \
    \                      ^\n/tmp/tmp5gddr9fo.swift:8:28: error: tuple pattern cannot\
    \ match values of non-tuple type 'Unicode.Scalar'\n        for (_, ch1) in s1.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        for (_, ch1) in s1.chars()\
    \ {\n            if ch0 == ch1 {\n                continue\n            }\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjokngvf2.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    var same =\
    \ true\n    while i < len(s0) && j < len(s1) {\n        if s0[i] != s1[j] {\n\
    \            same = false\n            break\n        }\n        i += 1\n    \
    \    j += 1\n    }\n    return same\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvs6gncom.swift:7:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpvs6gncom.swift:7:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpvs6gncom.swift:8:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpvs6gncom.swift:8:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch) in zip(s0.characters,\
    \ s1.characters) {\n        if ch != s0.characters[ch] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoi54sasg.swift:9:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (_, ch) in zip(s0.characters, s1.characters) {\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpoi54sasg.swift:9:42: error: 'characters' is unavailable:\
    \ Please use String directly\n    for (_, ch) in zip(s0.characters, s1.characters)\
    \ {\n                                         ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpoi54sasg.swift:10:32: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if ch != s0.characters[ch] {\n                               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.characters.count\n    let\
    \ s1_len = s1.characters.count\n    if s0_len != s1_len {\n        return false\n\
    \    }\n    for (_, ch) in s0.characters.enumerated() {\n        if ch != s1[0]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf9dnypdw.swift:4:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_len = s0.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpf9dnypdw.swift:5:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_len\
    \ = s1.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpf9dnypdw.swift:9:23: error: 'characters'\
    \ is unavailable: Please use String directly\n    for (_, ch) in s0.characters.enumerated()\
    \ {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpf9dnypdw.swift:10:18: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ ch != s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for c0, c1 in zip (s0.characters, s1.characters) {\n     \
    \   if c0 != c1 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ad3uq99.swift:7:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip (s0.characters, s1.characters) {\n          ^\n/tmp/tmp_ad3uq99.swift:7:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip\
    \ (s0.characters, s1.characters) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch) in s0.enumerated()\
    \ {\n        if ch != s1[0] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9loymlk.swift:10:18: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if ch !=\
    \ s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters\n    var s1_chars\
    \ = s1.characters\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for (_, ch) in s0_chars.enumerated() {\n        if ch != s1_chars[ch]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfyn0vkbq.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfyn0vkbq.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfyn0vkbq.swift:10:27: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if ch != s1_chars[ch] {\n                          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.count && i <\
    \ s1.count {\n        if s0[i] != s1[i] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0s0cypq0.swift:6:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp0s0cypq0.swift:6:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zip (s0.characters, s1.characters)\
    \ {\n        if c0 != c1 {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfbyenp2_.swift:8:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip (s0.characters, s1.characters) {\n          ^\n/tmp/tmpfbyenp2_.swift:8:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip\
    \ (s0.characters, s1.characters) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters\n    var s1_chars\
    \ = s1.characters\n    \n    for c in s0_chars {\n        if !s1_chars.contains(c)\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1goof4sx.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp1goof4sx.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp1goof4sx.swift:4:9: warning: variable 's0_chars'\
    \ was never mutated; consider changing to 'let' constant\n    var s0_chars = s0.characters\n\
    \    ~~~ ^\n    let\n/tmp/tmp1goof4sx.swift:5:9: warning: variable 's1_chars'\
    \ was never mutated; consider changing to 'let' constant\n    var s1_chars = s1.characters\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch) in s0.enumerated()\
    \ {\n        if ch != s1[0] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg9loymlk.swift:10:18: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if ch !=\
    \ s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] == s1[j] {\n            i += 1\n      \
    \      j += 1\n        } else if s0[i] < s1[j] {\n            i += 1\n       \
    \ } else {\n            j += 1\n        }\n    }\n    return i == s0.length &&\
    \ j == s1.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxv4egwzm.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmpxv4egwzm.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmpxv4egwzm.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxv4egwzm.swift:10:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxv4egwzm.swift:16:20: error: value of type 'String' has\
    \ no member 'length'\n    return i == s0.length && j == s1.length\n          \
    \      ~~ ^~~~~~\n/tmp/tmpxv4egwzm.swift:16:38: error: value of type 'String'\
    \ has no member 'length'\n    return i == s0.length && j == s1.length\n      \
    \                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.characters.count\n    let\
    \ s1_len = s1.characters.count\n    if s0_len != s1_len {\n        return false\n\
    \    }\n    for (_, ch) in s0.characters.enumerated() {\n        if ch != s1[0]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf9dnypdw.swift:4:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_len = s0.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpf9dnypdw.swift:5:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_len\
    \ = s1.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpf9dnypdw.swift:9:23: error: 'characters'\
    \ is unavailable: Please use String directly\n    for (_, ch) in s0.characters.enumerated()\
    \ {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpf9dnypdw.swift:10:18: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ ch != s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == len(s0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptll00g27.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) && s0[i] == s1[i] {\n                  ^~~\n/tmp/tmptll00g27.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) && s0[i]\
    \ == s1[i] {\n                           ^~~\n/tmp/tmptll00g27.swift:8:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zip( s0.characters, s1.characters\
    \ ) {\n        if c0 != c1 {\n            return false\n        }\n        i +=\
    \ 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdy6h43bd.swift:8:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip( s0.characters, s1.characters ) {\n          ^\n/tmp/tmpdy6h43bd.swift:8:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip(\
    \ s0.characters, s1.characters ) {\n          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters\n    var s1_chars\
    \ = s1.characters\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for (_, char) in s0_chars.enumerated() {\n        if s1_chars[char]\
    \ != char {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx2k56fiz.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpx2k56fiz.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpx2k56fiz.swift:10:21: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if s1_chars[char] != char {\n                    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars {\n        for (_, ch1)\
    \ in s1.unicodeScalars {\n            if ch0 == ch1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gddr9fo.swift:7:24: error: tuple pattern cannot match values of\
    \ non-tuple type 'Unicode.Scalar'\n    for (_, ch0) in s0.unicodeScalars {\n \
    \                      ^\n/tmp/tmp5gddr9fo.swift:8:28: error: tuple pattern cannot\
    \ match values of non-tuple type 'Unicode.Scalar'\n        for (_, ch1) in s1.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return i == s0.length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p8e6aer.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp4p8e6aer.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp4p8e6aer.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:13:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars.enumerated() {\n       \
    \ for (_, ch1) in s1.unicodeScalars.enumerated() {\n            if ch0 == ch1\
    \ {\n                continue\n            }\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqc9p6qq3/tmpqc9p6qq3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad16a956c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad16a64db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad16a64d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad16a64c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc9p6qq3                        0x0000561f4a7fb6c3 <unavailable> + 5827

    5    libc.so.6                          0x00002ad16ab42460 __libc_start_main +
    245

    6    tmpqc9p6qq3                        0x0000561f4a7fb319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.utf8.count\n    let s1_len\
    \ = s1.utf8.count\n    if s0_len != s1_len {\n        return false\n    }\n  \
    \  for (_, ch) in zip(s0.utf8, s1.utf8) {\n        if ch != ch {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmph8x6_ite/tmph8x6_ite.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c902c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c8ffbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c8ffbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c8ffba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8x6_ite                        0x0000562a59cd7423 <unavailable> + 5155

    5    libc.so.6                          0x00002b1c904b0460 __libc_start_main +
    245

    6    tmph8x6_ite                        0x0000562a59cd7079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count != s1.count else {\n     \
    \   return false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm2wrpsks.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpm2wrpsks.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == len(s0) && i ==\
    \ len(s1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp42gl_59q.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) && s0[i] == s1[i] {\n                  ^~~\n/tmp/tmp42gl_59q.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) && s0[i]\
    \ == s1[i] {\n                           ^~~\n/tmp/tmp42gl_59q.swift:8:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0) && i == len(s1)\n      \
    \          ^~~\n/tmp/tmp42gl_59q.swift:8:33: error: cannot find 'len' in scope\n\
    \    return i == len(s0) && i == len(s1)\n                                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count != s1.count else { return\
    \ false }\n    for i in 0..<s0.count {\n        if s0[i] != s1[i] { return false\
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu1xqm7eg.swift:6:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] { return false }\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpu1xqm7eg.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] { return false }\n                    ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n   \
    \ var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ndh61n5.swift:30:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp4ndh61n5.swift:4:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp4ndh61n5.swift:31:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp4ndh61n5.swift:5:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp4ndh61n5.swift:32:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp4ndh61n5.swift:6:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp4ndh61n5.swift:33:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp4ndh61n5.swift:7:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp4ndh61n5.swift:34:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp4ndh61n5.swift:8:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp4ndh61n5.swift:35:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp4ndh61n5.swift:9:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp4ndh61n5.swift:36:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp4ndh61n5.swift:10:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp4ndh61n5.swift:37:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp4ndh61n5.swift:11:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp4ndh61n5.swift:38:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp4ndh61n5.swift:12:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp4ndh61n5.swift:39:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp4ndh61n5.swift:13:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp4ndh61n5.swift:40:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp4ndh61n5.swift:14:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp4ndh61n5.swift:41:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp4ndh61n5.s"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    if s0c.count != s1c.count {\n        return false\n    }\n    for (_, v)\
    \ in s0c.enumerated() {\n        if v != s1c[s0c.index(v, offsetBy: 0)] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmcqqri0s.swift:4:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0c = s0.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmcqqri0s.swift:5:18:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1c\
    \ = s1.characters\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmcqqri0s.swift:10:31: error: cannot convert value of\
    \ type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if v != s1c[s0c.index(v, offsetBy: 0)] {\n                          \
    \    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return i == s0.length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p8e6aer.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp4p8e6aer.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp4p8e6aer.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:13:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return i == s0.length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p8e6aer.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp4p8e6aer.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp4p8e6aer.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:13:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    \n    var i = 0\n    var j = 0\n    \n  \
    \  while i < s0.count && j < s1.count {\n        \n        if s0[i] == s1[j] {\n\
    \            i += 1\n            j += 1\n        } else if s0[i] < s1[j] {\n \
    \           i += 1\n        } else {\n            j += 1\n        }\n        \n\
    \    }\n    \n    return i == s0.count && j == s1.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxjfiaa__.swift:10:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpxjfiaa__.swift:10:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpxjfiaa__.swift:13:19: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        } else if s0[i] < s1[j] {\n                  ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxjfiaa__.swift:13:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if s0[i] < s1[j] {\n           \
    \               ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters\n    var s1_chars\
    \ = s1.characters\n    if s0.count != s1.count {\n        return false\n    }\n\
    \    for idx in 0..<s0.count {\n        if s0_chars[idx] != s1_chars[idx] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_hyv4t8y.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_hyv4t8y.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_hyv4t8y.swift:10:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0_chars[idx] != s1_chars[idx] {\n           ^~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_hyv4t8y.swift:10:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s0_chars[idx] != s1_chars[idx] {\n \
    \                           ^~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp_hyv4t8y.swift:4:9: warning: variable\
    \ 's0_chars' was never mutated; consider changing to 'let' constant\n    var s0_chars\
    \ = s0.characters\n    ~~~ ^\n    let\n/tmp/tmp_hyv4t8y.swift:5:9: warning: variable\
    \ 's1_chars' was never mutated; consider changing to 'let' constant\n    var s1_chars\
    \ = s1.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters\n    var s1_chars\
    \ = s1.characters\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for (_, ch) in s0_chars.enumerated() {\n        if ch != s1_chars[ch]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfyn0vkbq.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfyn0vkbq.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    var s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfyn0vkbq.swift:10:27: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        if ch != s1_chars[ch] {\n                          ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars {\n        for (_, ch1)\
    \ in s1.unicodeScalars {\n            if ch0 == ch1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gddr9fo.swift:7:24: error: tuple pattern cannot match values of\
    \ non-tuple type 'Unicode.Scalar'\n    for (_, ch0) in s0.unicodeScalars {\n \
    \                      ^\n/tmp/tmp5gddr9fo.swift:8:28: error: tuple pattern cannot\
    \ match values of non-tuple type 'Unicode.Scalar'\n        for (_, ch1) in s1.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.length != s1.length {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        if !s1.contains(String(ch0))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ilqk2s5.swift:4:11: error: value of type 'String' has no member\
    \ 'length'\n    if s0.length != s1.length {\n       ~~ ^~~~~~\n/tmp/tmp3ilqk2s5.swift:4:24:\
    \ error: value of type 'String' has no member 'length'\n    if s0.length != s1.length\
    \ {\n                    ~~ ^~~~~~\n/tmp/tmp3ilqk2s5.swift:7:5: error: failed\
    \ to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    for c0, c1 in zip (s0c, s1c) {\n        if c0 != c1 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7wtuzgsc.swift:6:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zip (s0c, s1c) {\n          ^\n/tmp/tmp7wtuzgsc.swift:6:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zip\
    \ (s0c, s1c) {\n          ^\n/tmp/tmp7wtuzgsc.swift:4:18: error: 'characters'\
    \ is unavailable: Please use String directly\n    let s0c = s0.characters\n  \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7wtuzgsc.swift:5:18: error: 'characters' is unavailable: Please use\
    \ String directly\n    let s1c = s1.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    while i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j] {\n       \
    \     i += 1\n            j += 1\n        } else {\n            k += 1\n     \
    \   }\n    }\n    return i == len(s0) && j == len(s1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg7blzu89.swift:7:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpg7blzu89.swift:7:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpg7blzu89.swift:8:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpg7blzu89.swift:8:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] == s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpg7blzu89.swift:15:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0) && j == len(s1)\n      \
    \          ^~~\n/tmp/tmpg7blzu89.swift:15:33: error: cannot find 'len' in scope\n\
    \    return i == len(s0) && j == len(s1)\n                                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == len(s0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptll00g27.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) && s0[i] == s1[i] {\n                  ^~~\n/tmp/tmptll00g27.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) && s0[i]\
    \ == s1[i] {\n                           ^~~\n/tmp/tmptll00g27.swift:8:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.characters.count\n    let\
    \ s1_len = s1.characters.count\n    if s0_len != s1_len {\n        return false\n\
    \    }\n    for (_, ch) in s0.characters.enumerated() {\n        if ch != s1[0]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf9dnypdw.swift:4:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_len = s0.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpf9dnypdw.swift:5:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_len\
    \ = s1.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpf9dnypdw.swift:9:23: error: 'characters'\
    \ is unavailable: Please use String directly\n    for (_, ch) in s0.characters.enumerated()\
    \ {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpf9dnypdw.swift:10:18: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ ch != s1[0] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return i == s0.length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p8e6aer.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp4p8e6aer.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp4p8e6aer.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:13:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    guard s0.count == s1.count else {\n     \
    \   return false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n        i += 1\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph0lyoibc.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmph0lyoibc.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_chars = s0.characters\n    let s1_chars\
    \ = s1.characters\n    for c0_i, c0 in s0_chars.enumerated() {\n        for c1_i,\
    \ c1 in s1_chars.enumerated() {\n            if c0_i == c1_i {\n             \
    \   continue\n            }\n            if c0 == c1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjlv3t73v.swift:6:13: error: expected 'in' after for-each pattern\n\
    \    for c0_i, c0 in s0_chars.enumerated() {\n            ^\n/tmp/tmpjlv3t73v.swift:6:13:\
    \ error: expected Sequence expression for for-each loop\n    for c0_i, c0 in s0_chars.enumerated()\
    \ {\n            ^\n/tmp/tmpjlv3t73v.swift:7:17: error: expected 'in' after for-each\
    \ pattern\n        for c1_i, c1 in s1_chars.enumerated() {\n                ^\n\
    /tmp/tmpjlv3t73v.swift:7:17: error: expected Sequence expression for for-each\
    \ loop\n        for c1_i, c1 in s1_chars.enumerated() {\n                ^\n/tmp/tmpjlv3t73v.swift:4:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s0_chars\
    \ = s0.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpjlv3t73v.swift:5:23: error: 'characters'\
    \ is unavailable: Please use String directly\n    let s1_chars = s1.characters\n\
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars.enumerated() {\n       \
    \ for (_, ch1) in s1.unicodeScalars.enumerated() {\n            if ch0 == ch1\
    \ {\n                continue\n            }\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpqc9p6qq3/tmpqc9p6qq3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad16a956c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad16a64db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad16a64d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad16a64c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc9p6qq3                        0x0000561f4a7fb6c3 <unavailable> + 5827

    5    libc.so.6                          0x00002ad16ab42460 __libc_start_main +
    245

    6    tmpqc9p6qq3                        0x0000561f4a7fb319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0 in  s0 {\n        if c0 != s1[i] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnaflhtl1.swift:9:18: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if c0 !=\
    \ s1[i] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for i in 0..<s0_len\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpleb1arts.swift:10:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpleb1arts.swift:10:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.length\
    \ && j < s1.length {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return i == s0.length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4p8e6aer.swift:6:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && j < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp4p8e6aer.swift:6:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && j < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp4p8e6aer.swift:7:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4p8e6aer.swift:13:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.characters.count\n    let\
    \ s1_len = s1.characters.count\n    if s0_len != s1_len {\n        return false\n\
    \    }\n    for c0_i in 0..<s0_len {\n        let c0 = s0.characters[c0_i]\n \
    \       for c1_i in 0..<s1_len {\n            let c1 = s1.characters[c1_i]\n \
    \           if c0 != c1 {\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp16k7mh4s.swift:4:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_len = s0.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp16k7mh4s.swift:5:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_len\
    \ = s1.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp16k7mh4s.swift:10:18: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let c0 = s0.characters[c0_i]\n                 ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp16k7mh4s.swift:10:21:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ c0 = s0.characters[c0_i]\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp16k7mh4s.swift:12:22: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            let c1 = s1.characters[c1_i]\n                     ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp16k7mh4s.swift:12:25:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ let c1 = s1.characters[c1_i]\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ && s0[i] == s1[i] {\n        i += 1\n    }\n    return i == len(s0) && i ==\
    \ len(s1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp42gl_59q.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) && s0[i] == s1[i] {\n                  ^~~\n/tmp/tmp42gl_59q.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) && s0[i]\
    \ == s1[i] {\n                           ^~~\n/tmp/tmp42gl_59q.swift:8:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0) && i == len(s1)\n      \
    \          ^~~\n/tmp/tmp42gl_59q.swift:8:33: error: cannot find 'len' in scope\n\
    \    return i == len(s0) && i == len(s1)\n                                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars.enumerate() {\n        for\
    \ (_, ch1) in s1.unicodeScalars.enumerate() {\n            if ch0 == ch1 {\n \
    \               continue\n            }\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfeq58e57.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.unicodeScalars.enumerate() {\n\
    \    ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    let s0_char = s0.characters\n\
    \    let s1_char = s1.characters\n    for (_, s0_ch) in s0_char.enumerated() {\n\
    \        if !s1_char.contains(s0_ch) {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9938cq7z.swift:9:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_char = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9938cq7z.swift:10:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_char\
    \ = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = Array(s0)\n    var s1_chars\
    \ = Array(s1)\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for index in 0..<s0_chars.count {\n        if s0_chars[index] != s1_chars[index]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmppr78ikr0/tmppr78ikr0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b0b579c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b0b270b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b0b270988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b0b26f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr78ikr0                        0x000056127a425683 <unavailable> + 5763

    5    libc.so.6                          0x00002b8b0b765460 __libc_start_main +
    245

    6    tmppr78ikr0                        0x000056127a4252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < s0.count\
    \ && j < s1.count {\n        if s0[i] != s1[j] {\n            return false\n \
    \       }\n        i += 1\n        j += 1\n    }\n    return i == s0.count &&\
    \ j == s1.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk8x99mza.swift:7:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpk8x99mza.swift:7:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = Array(s0)\n    var s1_chars\
    \ = Array(s1)\n    if s0_chars.count != s1_chars.count {\n        return false\n\
    \    }\n    for (_, char) in s0_chars.enumerated() {\n        if s1_chars.contains(char)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpzq6tap8i/tmpzq6tap8i.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b021fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b01ef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b01ef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b01ef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzq6tap8i                        0x000055768195f713 <unavailable> + 5907

    5    libc.so.6                          0x00002b2b023e9460 __libc_start_main +
    245

    6    tmpzq6tap8i                        0x000055768195f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014361
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.utf8.count\n    let s1_len\
    \ = s1.utf8.count\n    if s0_len != s1_len {\n        return false\n    }\n  \
    \  for i in 0..<s0_len {\n        if s0.utf8[i] != s1.utf8[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ara0nq8.swift:10:34: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.UTF8View.Index' (aka 'String.Index')\n   \
    \     if s0.utf8[i] != s1.utf8[i] {\n                                 ^\n/tmp/tmp3ara0nq8.swift:10:20:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.UTF8View.Index'\
    \ (aka 'String.Index')\n        if s0.utf8[i] != s1.utf8[i] {\n              \
    \     ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0c = s0.characters\n    let s1c = s1.characters\n\
    \    \n    for c0 in  s0c {\n        for c1 in  s1c {\n            if c0 == c1\
    \ {\n                continue\n            }\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgwoavlzc.swift:4:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0c = s0.characters\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgwoavlzc.swift:5:18:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1c\
    \ = s1.characters\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0 in  s0 {\n        if c0 != s1[i] {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnaflhtl1.swift:9:18: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if c0 !=\
    \ s1[i] {\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    var j = 0\n    while i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i += 1\n        j += 1\n    }\n    return i == len(s0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm2ctauq.swift:6:15: error: cannot find 'len' in scope\n    while\
    \ i < len(s0) && j < len(s1) {\n              ^~~\n/tmp/tmpjm2ctauq.swift:6:30:\
    \ error: cannot find 'len' in scope\n    while i < len(s0) && j < len(s1) {\n\
    \                             ^~~\n/tmp/tmpjm2ctauq.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:7:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpjm2ctauq.swift:13:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_len = s0.count\n    let s1_len = s1.count\n\
    \    if s0_len != s1_len {\n        return false\n    }\n    for (_, ch0) in s0.enumerated()\
    \ {\n        for (_, ch1) in s1.enumerated() {\n            if ch0 == ch1 {\n\
    \                continue\n            }\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmfu21483/tmpmfu21483.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef68159c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef67e50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef67e50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef67e4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfu21483                        0x0000560714f515d3 <unavailable> + 5587

    5    libc.so.6                          0x00002aef68345460 __libc_start_main +
    245

    6    tmpmfu21483                        0x0000560714f51229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0_chars = s0.characters\n    let s1_chars\
    \ = s1.characters\n    for i in 0..<min(s0.count, s1.count) {\n        if s0_chars[i]\
    \ != s1_chars[i] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp151eo3ty.swift:4:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_chars = s0.characters\n                    \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp151eo3ty.swift:5:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_chars\
    \ = s1.characters\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp151eo3ty.swift:7:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0_chars[i] != s1_chars[i] {\n           ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp151eo3ty.swift:7:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s0_chars[i] != s1_chars[i] {\n     \
    \                     ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars {\n        for (_, ch1)\
    \ in s1.unicodeScalars {\n            if ch0 == ch1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gddr9fo.swift:7:24: error: tuple pattern cannot match values of\
    \ non-tuple type 'Unicode.Scalar'\n    for (_, ch0) in s0.unicodeScalars {\n \
    \                      ^\n/tmp/tmp5gddr9fo.swift:8:28: error: tuple pattern cannot\
    \ match values of non-tuple type 'Unicode.Scalar'\n        for (_, ch1) in s1.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.unicodeScalars {\n        for (_, ch1)\
    \ in s1.unicodeScalars {\n            if ch0 == ch1 {\n                continue\n\
    \            }\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5gddr9fo.swift:7:24: error: tuple pattern cannot match values of\
    \ non-tuple type 'Unicode.Scalar'\n    for (_, ch0) in s0.unicodeScalars {\n \
    \                      ^\n/tmp/tmp5gddr9fo.swift:8:28: error: tuple pattern cannot\
    \ match values of non-tuple type 'Unicode.Scalar'\n        for (_, ch1) in s1.unicodeScalars\
    \ {\n                           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < s0.length && i <\
    \ s1.length {\n        if s0[i] != s1[i] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return i == s0.length\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71zobkjz.swift:5:18: error: value of type 'String' has no member\
    \ 'length'\n    while i < s0.length && i < s1.length {\n              ~~ ^~~~~~\n\
    /tmp/tmp71zobkjz.swift:5:35: error: value of type 'String' has no member 'length'\n\
    \    while i < s0.length && i < s1.length {\n                               ~~\
    \ ^~~~~~\n/tmp/tmp71zobkjz.swift:6:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp71zobkjz.swift:11:20: error:\
    \ value of type 'String' has no member 'length'\n    return i == s0.length\n \
    \               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var i = 0\n    while i < min(len(s0), len(s1))\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n      \
    \  i += 1\n    }\n    return i == len(s0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3bftvl0.swift:5:19: error: cannot find 'len' in scope\n    while\
    \ i < min(len(s0), len(s1)) {\n                  ^~~\n/tmp/tmpd3bftvl0.swift:5:28:\
    \ error: cannot find 'len' in scope\n    while i < min(len(s0), len(s1)) {\n \
    \                          ^~~\n/tmp/tmpd3bftvl0.swift:6:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:6:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpd3bftvl0.swift:11:17: error:\
    \ cannot find 'len' in scope\n    return i == len(s0)\n                ^~~\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1nn4swo.swift:9:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpw1nn4swo.swift:9:21: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014360
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for (_, ch0) in s0.chars() {\n        for (_, ch1) in s1.chars()\
    \ {\n            if ch0 == ch1 {\n                continue\n            }\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjokngvf2.swift:7:5: error: failed to produce diagnostic for expression;\
    \ please submit a bug report (https://swift.org/contributing/#reporting-bugs)\
    \ and include the project\n    for (_, ch0) in s0.chars() {\n    ^\n"
  stdout: ''
  timestamp: 1660014360
